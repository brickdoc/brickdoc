use argon2::{
    password_hash::{PasswordHasher, PasswordVerifier, SaltString},
    Algorithm, Argon2, Params, ParamsBuilder, Version,
};
use magnus::{exception, function, module::RModule, Error, Module};
use rand_chacha::rand_core::SeedableRng;

/// NOTES:
/// Argon2id should use one of the following configuration settings as a base
/// minimum which includes the minimum memory size (m), the minimum number of
///  iterations (ops) and the degree of parallelism (p).
/// m=37 MiB, ops=1, p=1
/// m=15 MiB, ops=2, p=1
/// Both of these configuration settings are equivalent in the defense they provide.
/// The only difference is a trade off between CPU and RAM usage
/// see  https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#argon2id
fn fixed_params() -> Params {
    let mut builder = ParamsBuilder::default();
    builder.m_cost(15000).unwrap(); // 15 MiB
    builder.t_cost(2).unwrap();
    builder.params().unwrap()
}

fn argon2id() -> Argon2<'static> {
    Argon2::new(Algorithm::Argon2id, Version::V0x13, fixed_params())
}

/// Generate a password hash and salt using Argon2id.
/// @param password - password string to hash
/// @returns password hash
fn hash_password(password: String) -> Result<String, Error> {
    let rng = rand_chacha::ChaCha8Rng::from_entropy();
    let salt = SaltString::generate(rng);
    let hasher = argon2id();
    hasher
        .hash_password(password.as_bytes(), &salt)
        .map_err(|err| Error::new(exception::standard_error(), err.to_string()))
        .map(|h| h.to_string())
}

/// Verifies a password hash generated by `password_hash()`
/// @param hashed - password hash
/// @param password - password string to verify
/// @returns true if the password is correct
fn verify_password(hashed: String, password: String) -> Result<bool, Error> {
    let parsed_hash = argon2::PasswordHash::new(hashed.as_str())
        .map_err(|err| Error::new(exception::arg_error(), err.to_string()))?;
    let hasher = argon2id();
    Ok(hasher
        .verify_password(password.as_bytes(), &parsed_hash)
        .is_ok())
}

pub fn init(parent: RModule) -> Result<(), Error> {
    let module = parent.define_module("Argon2id")?;
    module.define_module_function("hash_password", function!(hash_password, 1))?;
    module.define_module_function("verify_password", function!(verify_password, 2))?;
    Ok(())
}
