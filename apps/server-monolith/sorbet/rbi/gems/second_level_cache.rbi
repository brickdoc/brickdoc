# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/second_level_cache/all/second_level_cache.rbi
#
# second_level_cache-2.7.1

module SecondLevelCache
  def self.cache_enabled=(cache_enabled); end
  def self.cache_enabled?; end
  def self.cache_key_prefix(*, **, &); end
  def self.cache_store(*, **, &); end
  def self.configure; end
  def self.logger(*, **, &); end
  def self.without_second_level_cache; end
end
class SecondLevelCache::Config
  def self.cache_key_prefix; end
  def self.cache_key_prefix=(arg0); end
  def self.cache_store; end
  def self.cache_store=(arg0); end
  def self.logger; end
  def self.logger=(arg0); end
end
module RecordMarshal
  def self.dump(record); end
  def self.load(serialized, &block); end
  def self.load_multi(serializeds, &block); end
end
class SecondLevelCache::RecordRelation < Array
  def load(&_block); end
end
module SecondLevelCache::Mixin
  def expire_second_level_cache; end
  def klass; end
  def second_level_cache_key; end
  def update_second_level_cache; end
  def write_second_level_cache; end
  extend ActiveSupport::Concern
end
module SecondLevelCache::Mixin::ClassMethods
  def cache_key_prefix(*, **, &); end
  def cache_store(*, **, &); end
  def cache_version; end
  def expire_second_level_cache(id); end
  def logger(*, **, &); end
  def read_second_level_cache(id); end
  def second_level_cache(options = nil); end
  def second_level_cache_enabled?; end
  def second_level_cache_key(id); end
  def second_level_cache_options; end
  def without_second_level_cache(&blk); end
end
module SecondLevelCache::ActiveRecord
end
module SecondLevelCache::ActiveRecord::Base
  def self.prepended(base); end
end
module SecondLevelCache::ActiveRecord::Base::ClassMethods
  def update_counters(id, counters); end
end
module SecondLevelCache::ActiveRecord::Core
  def self.prepended(base); end
end
module SecondLevelCache::ActiveRecord::Core::ClassMethods
  def find(*ids); end
end
module SecondLevelCache::ActiveRecord::FetchByUniqKey
  def cache_uniq_key(where_values); end
  def fetch_by_uniq_key!(value, uniq_key_name); end
  def fetch_by_uniq_key(value, uniq_key_name); end
  def fetch_by_uniq_keys!(where_values); end
  def fetch_by_uniq_keys(where_values); end
  def record_attributes_equal_where_values?(record, where_values); end
end
module SecondLevelCache::ActiveRecord::FinderMethods
  def cachable?; end
  def find_one(id); end
  def first(limit = nil); end
  def limit_one?; end
  def order_values_can_cache?; end
  def where_clause_predicates_all_equality?; end
  def where_values_match_cache?(record); end
end
module SecondLevelCache::ActiveRecord::Persistence
  def reload(options = nil); end
  def touch(*names, **opts); end
  def update_columns(attributes); end
end
module SecondLevelCache::ActiveRecord::Associations
end
module SecondLevelCache::ActiveRecord::Associations::BelongsToAssociation
  def find_target; end
  def second_level_cache_key; end
end
module SecondLevelCache::ActiveRecord::Associations::HasOneAssociation
  def find_target; end
end
module SecondLevelCache::ActiveRecord::Associations::Preloader
end
module SecondLevelCache::ActiveRecord::Associations::Preloader::Association
  def loader_query; end
end
module SecondLevelCache::ActiveRecord::Associations::Preloader::Association::LoaderQuery
  def association; end
  def initialize(association, scope, association_key_name); end
  def klass(*, **, &); end
  def load_records_for_keys(keys, &block); end
  def reflection; end
end
module SecondLevelCache::ActiveRecord::Associations::Preloader::Association::Legacy
  def records_for(ids, &block); end
  def write_cache(record); end
end
class SecondLevelCache::LogSubscriber < ActiveSupport::LogSubscriber
end
module SecondLevelCache::Adapter
end
module SecondLevelCache::Adapter::Paranoia
end
module SecondLevelCache::Adapter::Paranoia::ActiveRecord
  extend ActiveSupport::Concern
end
module SecondLevelCache::Adapter::Paranoia::Mixin
  extend ActiveSupport::Concern
end
