export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** AutoIncrement Primary Key */
  AutoIncrementID: string
  /** Represents non-fractional signed whole numeric values. Since the value may exceed the size of a 32-bit integer, it's encoded as a string. */
  BigInt: any
  /** Email Address */
  Email: string
  /** A valid http/https url or image uri */
  HttpUrl: string
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any
  /** Represents untyped JSON */
  JSON: any
  /** UUID V4 */
  UUID: string
}

/** Available authentication authentication. */
export enum AuthMethod {
  /** Email and Password Authentication */
  EmailPassword = 'email_password',
  /**  Federated Authentication */
  Github = 'github',
  /**  Federated Authentication */
  GoogleOauth2 = 'google_oauth2'
}

export type AuthorizationResult = {
  __typename?: 'AuthorizationResult'
  /** Human-readable error message */
  message?: Maybe<Scalars['String']>
  /** Reasons of check failure */
  reasons?: Maybe<FailureReasons>
  /** Result of applying a policy rule */
  value: Scalars['Boolean']
}

/** Autogenerated return type of Awareness */
export type AwarenessPayload = {
  __typename?: 'AwarenessPayload'
  operatorId?: Maybe<Scalars['UUID']>
  updates: Scalars['String']
}

/** InputObject type of Class */
export type AwarenessUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** doc id */
  docId: Scalars['UUID']
  /** operator id */
  operatorId: Scalars['String']
  /** updates */
  updates: Scalars['String']
}

/** Autogenerated return type of AwarenessUpdate */
export type AwarenessUpdatePayload = {
  __typename?: 'AwarenessUpdatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export type BlockAlias = {
  __typename?: 'BlockAlias'
  key: Scalars['String']
  payload: Scalars['JSON']
}

export type BlockAttachment = {
  __typename?: 'BlockAttachment'
  /** display name */
  displayName?: Maybe<Scalars['String']>
  /** height */
  height?: Maybe<Scalars['Int']>
  /** url or blob key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** type */
  type: Blocktype
  /** view url */
  viewUrl?: Maybe<Scalars['String']>
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockBaseObjectPermissions = {
  __typename?: 'BlockBaseObjectPermissions'
  canShow: AuthorizationResult
}

export type BlockColor = {
  __typename?: 'BlockColor'
  /** string */
  color: Scalars['String']
  /** type */
  type?: Maybe<Blocktype>
}

/** InputObject type of Class */
export type BlockCommitInput = {
  /** block id */
  blockId: Scalars['UUID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** document id */
  documentId: Scalars['UUID']
  /** operator id */
  operatorId: Scalars['String']
  /** previous state id */
  prevStateId?: InputMaybe<Scalars['UUID']>
  /** full or update state */
  state: Scalars['String']
  /** state id */
  stateId: Scalars['UUID']
  /** state type */
  stateType: Statetype
  /** states count */
  statesCount: Scalars['Int']
}

/** Autogenerated return type of BlockCommit */
export type BlockCommitPayload = {
  __typename?: 'BlockCommitPayload'
  block?: Maybe<BlockNew>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Differ Block States with current state */
  diffStates?: Maybe<Array<BlockState>>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  requireFull?: Maybe<Scalars['Boolean']>
}

/** GraphQL */
export type BlockCover = BlockColor | BlockImage

/** InputObject type of Class */
export type BlockCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** parent id */
  parentId?: InputMaybe<Scalars['UUID']>
  /** title */
  title: Scalars['String']
}

/** Autogenerated return type of BlockCreate */
export type BlockCreatePayload = {
  __typename?: 'BlockCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  id: Scalars['UUID']
}

/** InputObject type of Class */
export type BlockCreateShareLinkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block id */
  id: Scalars['UUID']
  /** share link target */
  target: Array<ShareLinkInput>
}

/** Autogenerated return type of BlockCreateShareLink */
export type BlockCreateShareLinkPayload = {
  __typename?: 'BlockCreateShareLinkPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type BlockDuplicateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  id: Scalars['UUID']
}

/** Autogenerated return type of BlockDuplicate */
export type BlockDuplicatePayload = {
  __typename?: 'BlockDuplicatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  formulaIds: Array<Scalars['UUID']>
  id: Scalars['UUID']
}

export type BlockEmbedMeta = {
  __typename?: 'BlockEmbedMeta'
  /** display name */
  displayName?: Maybe<Scalars['String']>
  /** embedType */
  embedType?: Maybe<Embedtype>
  /** height */
  height?: Maybe<Scalars['Int']>
  /** url or blob key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** type */
  type?: Maybe<Scalars['String']>
  /** view url */
  viewUrl?: Maybe<Scalars['String']>
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockEmoji = {
  __typename?: 'BlockEmoji'
  /** emoji */
  emoji: Scalars['String']
  /** name */
  name: Scalars['String']
  /** type */
  type?: Maybe<Blocktype>
}

/** InputObject type of Class */
export type BlockHardDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  ids: Array<Scalars['UUID']>
}

/** Autogenerated return type of BlockHardDelete */
export type BlockHardDeletePayload = {
  __typename?: 'BlockHardDeletePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** GraphQL */
export type BlockIcon = BlockEmoji | BlockImage

export type BlockImage = {
  __typename?: 'BlockImage'
  /** align */
  align?: Maybe<Scalars['String']>
  /** display name */
  displayName?: Maybe<Scalars['String']>
  /** height */
  height?: Maybe<Scalars['Int']>
  /** key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** aspect ratio */
  ratio?: Maybe<Scalars['Float']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** type */
  source?: Maybe<Filesourcetype>
  /** type */
  type?: Maybe<Blocktype>
  /** view url */
  viewUrl?: Maybe<Scalars['String']>
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockInfo = {
  __typename?: 'BlockInfo'
  /** pod */
  collaborators: Array<Pod>
  /** alias */
  enabledAlias?: Maybe<BlockAlias>
  /** icon */
  icon?: Maybe<BlockIcon>
  /** id */
  id: Scalars['UUID']
  /** is deleted */
  isDeleted: Scalars['Boolean']
  /** is master */
  isMaster: Scalars['Boolean']
  /** path */
  pathArray: Array<BlockPath>
  /** permission */
  permission?: Maybe<ShareLink>
  /** pin */
  pin: Scalars['Boolean']
  /** title */
  title: Scalars['String']
}

/** InputObject type of Class */
export type BlockInput = {
  /** attachments */
  attachments?: InputMaybe<Array<Scalars['String']>>
  /** content */
  content: Array<Scalars['JSON']>
  /** data */
  data?: InputMaybe<Scalars['JSON']>
  /** block unique id */
  id: Scalars['UUID']
  /** meta */
  meta?: InputMaybe<Scalars['JSON']>
  /** parent uuid */
  parentId?: InputMaybe<Scalars['UUID']>
  /** block sort */
  sort?: InputMaybe<Scalars['BigInt']>
  /** text */
  text: Scalars['String']
  /** block type */
  type: Scalars['String']
}

export type BlockLink = {
  __typename?: 'BlockLink'
  /** cover */
  cover?: Maybe<Scalars['String']>
  /** description */
  description?: Maybe<Scalars['String']>
  /** display name */
  displayName?: Maybe<Scalars['String']>
  /** height */
  height?: Maybe<Scalars['Int']>
  /** icon */
  icon?: Maybe<Scalars['String']>
  /** key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** title */
  title?: Maybe<Scalars['String']>
  /** type */
  type: Scalars['String']
  /** view url */
  viewUrl?: Maybe<Scalars['String']>
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockMeta = {
  __typename?: 'BlockMeta'
  /** attachment */
  attachment?: Maybe<BlockAttachment>
  /** code auto wrap */
  autoWrap?: Maybe<Scalars['Boolean']>
  /** cover */
  cover?: Maybe<BlockCover>
  /** embedMeta */
  embedMeta?: Maybe<BlockEmbedMeta>
  /** icon */
  icon?: Maybe<BlockIcon>
  /** image */
  image?: Maybe<BlockImage>
  /** Prosemirror builtin language */
  language?: Maybe<Scalars['String']>
  /** Prosemirror builtin level */
  level?: Maybe<Scalars['Int']>
  /** link */
  link?: Maybe<BlockLink>
  /** page */
  page?: Maybe<BlockPage>
  /** people */
  people?: Maybe<BlockPeople>
  /** Prosemirror builtin start */
  start?: Maybe<Scalars['String']>
  /** title */
  title?: Maybe<Scalars['String']>
}

/** InputObject type of Class */
export type BlockMoveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  id: Scalars['UUID']
  /** block sort */
  sort: Scalars['BigInt']
  /** target parent id */
  targetParentId?: InputMaybe<Scalars['UUID']>
}

/** Autogenerated return type of BlockMove */
export type BlockMovePayload = {
  __typename?: 'BlockMovePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export type BlockPage = {
  __typename?: 'BlockPage'
  /** display name */
  displayName?: Maybe<Scalars['String']>
  /** height */
  height?: Maybe<Scalars['Int']>
  /** icon */
  icon?: Maybe<Scalars['String']>
  /** key */
  key: Scalars['String']
  /** link */
  link: Scalars['String']
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** title */
  title?: Maybe<Scalars['String']>
  /** type */
  type?: Maybe<Blocktype>
  /** view url */
  viewUrl?: Maybe<Scalars['String']>
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockPath = {
  __typename?: 'BlockPath'
  /** icon */
  icon?: Maybe<BlockIcon>
  /** icon */
  id: Scalars['UUID']
  /** cover */
  text: Scalars['String']
}

export type BlockPeople = {
  __typename?: 'BlockPeople'
  /** avatar */
  avatarUrl?: Maybe<Scalars['String']>
  /** display name */
  displayName?: Maybe<Scalars['String']>
  /** key */
  domain: Scalars['String']
  /** height */
  height?: Maybe<Scalars['Int']>
  /** url or blob key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** type */
  type?: Maybe<Blocktype>
  /** view url */
  viewUrl?: Maybe<Scalars['String']>
  /** width */
  width?: Maybe<Scalars['Int']>
}

/** InputObject type of Class */
export type BlockPinOrUnpinInput = {
  /** block id */
  blockId: Scalars['UUID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** pin */
  pin: Scalars['Boolean']
}

/** Autogenerated return type of BlockPinOrUnpin */
export type BlockPinOrUnpinPayload = {
  __typename?: 'BlockPinOrUnpinPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type BlockRenameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block id */
  id: Scalars['UUID']
  /** New title */
  title: Scalars['String']
}

/** Autogenerated return type of BlockRename */
export type BlockRenamePayload = {
  __typename?: 'BlockRenamePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type BlockRestoreInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  ids: Array<Scalars['UUID']>
}

/** Autogenerated return type of BlockRestore */
export type BlockRestorePayload = {
  __typename?: 'BlockRestorePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export type BlockSnapshot = {
  __typename?: 'BlockSnapshot'
  /** created at */
  createdAt: Scalars['ISO8601DateTime']
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** Snapshot name */
  name: Scalars['String']
  /** relative time */
  relativeTime: Scalars['String']
  /** Snapshot version */
  snapshotVersion: Scalars['Int']
}

/** InputObject type of Class */
export type BlockSoftDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** hard delete */
  hardDelete: Scalars['Boolean']
  /** block unique id */
  id: Scalars['UUID']
}

/** Autogenerated return type of BlockSoftDelete */
export type BlockSoftDeletePayload = {
  __typename?: 'BlockSoftDeletePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type BlockSyncBatchInput = {
  blocks: Array<BlockInput>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** deleted ids */
  deletedIds: Array<Scalars['UUID']>
  /** operator id */
  operatorId: Scalars['String']
  /** block root id */
  rootId: Scalars['UUID']
}

/** Autogenerated return type of BlockSyncBatch */
export type BlockSyncBatchPayload = {
  __typename?: 'BlockSyncBatchPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export enum Blocktype {
  /** ATTACHMENT */
  Attachment = 'ATTACHMENT',
  /** COLOR */
  Color = 'COLOR',
  /** EMOJI */
  Emoji = 'EMOJI',
  /** IMAGE */
  Image = 'IMAGE',
  /** PAGE */
  Page = 'PAGE',
  /** PEOPLE */
  People = 'PEOPLE'
}

/** Brickdoc Docs::Comment */
export type Comment = {
  __typename?: 'Comment'
  /** content */
  content: Scalars['JSON']
  /** created at */
  createdAt: Scalars['ISO8601DateTime']
  /** creator */
  creator: ThinUser
  id: Scalars['String']
  /** status */
  status: CommentStatus
  /** updated at */
  updatedAt: Scalars['ISO8601DateTime']
}

export enum CommentStatus {
  /** DELETED */
  Deleted = 'deleted',
  /** NORMAL */
  Normal = 'normal'
}

/** Brickdoc Docs::Conversation */
export type Conversation = {
  __typename?: 'Conversation'
  /** blockIds */
  blockIds: Array<Scalars['UUID']>
  comments: Array<Comment>
  /** created at */
  createdAt: Scalars['ISO8601DateTime']
  docId: Scalars['UUID']
  id: Scalars['String']
  /** latestReplyAt */
  latestReplyAt?: Maybe<Scalars['ISO8601DateTime']>
  /** markIds */
  markIds: Array<Scalars['UUID']>
  /** status */
  status: ConversationStatus
  /** updated at */
  updatedAt: Scalars['ISO8601DateTime']
}

/** InputObject type of Class */
export type ConversationCommentAppendInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  content: Scalars['JSON']
  /** Conversation id */
  conversationId: Scalars['String']
}

/** Autogenerated return type of ConversationCommentAppend */
export type ConversationCommentAppendPayload = {
  __typename?: 'ConversationCommentAppendPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type ConversationCommentCreateInput = {
  blockIds?: InputMaybe<Array<Scalars['UUID']>>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  content: Scalars['JSON']
  /** comment doc id */
  docId: Scalars['UUID']
  markIds?: InputMaybe<Array<Scalars['UUID']>>
}

/** Autogenerated return type of ConversationCommentCreate */
export type ConversationCommentCreatePayload = {
  __typename?: 'ConversationCommentCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export enum ConversationStatus {
  /** DELETED */
  Deleted = 'deleted',
  /** OPENED */
  Opened = 'opened',
  /** RESOLVED */
  Resolved = 'resolved'
}

/** InputObject type of Class */
export type CreateDirectUploadInput = {
  /** block id */
  blockId?: InputMaybe<Scalars['UUID']>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  input: DirectUploadInput
  type: Upload
}

/** Autogenerated return type of CreateDirectUpload */
export type CreateDirectUploadPayload = {
  __typename?: 'CreateDirectUploadPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  directUpload: DirectUpload
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type CreateOrUpdatePodInput = {
  /** Avatar signed id */
  avatarSignedId?: InputMaybe<Scalars['String']>
  /** bio */
  bio?: InputMaybe<Scalars['String']>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** domain */
  domain: Scalars['String']
  /** invite enable */
  inviteEnable?: InputMaybe<Scalars['Boolean']>
  /** invite secret */
  inviteSecret?: InputMaybe<Scalars['String']>
  /** pod name */
  name?: InputMaybe<Scalars['String']>
  type: PodOperation
}

/** Autogenerated return type of CreateOrUpdatePod */
export type CreateOrUpdatePodPayload = {
  __typename?: 'CreateOrUpdatePodPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  pod?: Maybe<Pod>
}

/** Represents direct upload credentials */
export type DirectUpload = {
  __typename?: 'DirectUpload'
  /** Created blob record key */
  blobKey: Scalars['String']
  /** Download url */
  downloadUrl: Scalars['String']
  /** HTTP request headers (JSON-encoded) */
  headers: Scalars['JSON']
  /** Blob signed id */
  signedId: Scalars['String']
  /** Upload URL */
  uploadUrl: Scalars['String']
  /** View url */
  viewUrl: Scalars['String']
}

/** File information required to prepare a direct upload */
export type DirectUploadInput = {
  /** File size (bytes) */
  byteSize: Scalars['Int']
  /** MD5 file checksum as base64 */
  checksum: Scalars['String']
  /** File content type */
  contentType: Scalars['String']
  /** Original file name */
  filename: Scalars['String']
  /** metadata */
  metadata?: InputMaybe<Scalars['JSON']>
}

/** Autogenerated return type of Document */
export type DocumentPayload = {
  __typename?: 'DocumentPayload'
  blocks?: Maybe<Array<BlockNew>>
  histories?: Maybe<Array<DocumentHistory>>
  operatorId?: Maybe<Scalars['UUID']>
  states?: Maybe<Array<BlockState>>
  users?: Maybe<Array<ThinUser>>
}

export enum Embedtype {
  /** GALLERY */
  Gallery = 'GALLERY',
  /** LINK */
  Link = 'LINK',
  /** UPLOAD */
  Upload = 'UPLOAD'
}

export type FailureReasons = {
  __typename?: 'FailureReasons'
  /** JSON-encoded map of reasons */
  details: Scalars['String']
  /** Human-readable errors */
  fullMessages: Array<Scalars['String']>
}

export enum Filesourcetype {
  /** EXTERNAL */
  External = 'EXTERNAL',
  /** ORIGIN */
  Origin = 'ORIGIN'
}

export type Formula = {
  __typename?: 'Formula'
  /** block id */
  blockId: Scalars['UUID']
  /** dump value */
  cacheValue: Scalars['JSON']
  /** created at */
  createdAt: Scalars['Int']
  /** formula definition */
  definition: Scalars['String']
  /** object unique id */
  id: Scalars['UUID']
  /** meta */
  meta: Scalars['JSON']
  /** formula name */
  name: Scalars['String']
  /** type */
  type: Scalars['String']
  /** updated at */
  updatedAt: Scalars['ISO8601DateTime']
  /** version */
  version: Scalars['Int']
}

/** InputObject type of Class */
export type FormulaCommitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  commitFormulas: Array<FormulaModifyInput>
  deleteFormulas: Array<FormulaDeleteInput>
}

/** Autogenerated return type of FormulaCommit */
export type FormulaCommitPayload = {
  __typename?: 'FormulaCommitPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type FormulaDeleteInput = {
  /** block id */
  blockId: Scalars['UUID']
  /** id */
  id: Scalars['UUID']
}

/** InputObject type of Class */
export type FormulaModifyInput = {
  /** block id */
  blockId: Scalars['UUID']
  /** dump value */
  cacheValue: Scalars['JSON']
  /** definition */
  definition: Scalars['String']
  /** id */
  id: Scalars['UUID']
  /** meta */
  meta: Scalars['JSON']
  /** name */
  name: Scalars['String']
  /** type */
  type: Scalars['String']
  /** version */
  version: Scalars['Int']
}

/** InputObject type of Class */
export type JoinPodInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** invite secret */
  inviteSecret?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of JoinPod */
export type JoinPodPayload = {
  __typename?: 'JoinPodPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export enum MemberRole {
  /** ADMIN */
  Admin = 'admin',
  /** MEMBER */
  Member = 'member'
}

export enum MemberState {
  /** DISABLED */
  Disabled = 'disabled',
  /** ENABLED */
  Enabled = 'enabled'
}

/** Autogenerated return type of NewPatch */
export type NewPatchPayload = {
  __typename?: 'NewPatchPayload'
  patches: Array<PatchBaseObject>
  seq: Scalars['Int']
  state: Patchstate
}

export type PatchBaseObject = {
  __typename?: 'PatchBaseObject'
  id: Scalars['UUID']
  operatorId: Scalars['String']
  patchType: Patchtype
  path: Array<Scalars['UUID']>
  payload: Scalars['JSON']
}

export enum Patchstate {
  /** ACTIVE */
  Active = 'ACTIVE',
  /** DELETED */
  Deleted = 'DELETED',
  /** SUBSCRIBED */
  Subscribed = 'SUBSCRIBED'
}

export enum Patchtype {
  /** ADD */
  Add = 'ADD',
  /** DELETE */
  Delete = 'DELETE',
  /** UPDATE */
  Update = 'UPDATE'
}

/** InputObject type of Class */
export type PodDestroyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** domain */
  domain: Scalars['String']
}

/** Autogenerated return type of PodDestroy */
export type PodDestroyPayload = {
  __typename?: 'PodDestroyPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type PodLeaveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** Pod domain */
  domain: Scalars['String']
  /** User domain */
  userDomain: Scalars['String']
}

/** Autogenerated return type of PodLeave */
export type PodLeavePayload = {
  __typename?: 'PodLeavePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Pod operation types */
export enum PodOperation {
  /** CREATE */
  Create = 'CREATE',
  /** UPDATE */
  Update = 'UPDATE'
}

export enum Policytype {
  /** EDIT */
  Edit = 'edit',
  /** VIEW */
  View = 'view'
}

export type RootMutation = {
  __typename?: 'RootMutation'
  awarenessUpdate?: Maybe<AwarenessUpdatePayload>
  blockCommit?: Maybe<BlockCommitPayload>
  blockCreate?: Maybe<BlockCreatePayload>
  blockCreateShareLink?: Maybe<BlockCreateShareLinkPayload>
  blockDuplicate?: Maybe<BlockDuplicatePayload>
  blockHardDelete?: Maybe<BlockHardDeletePayload>
  blockMove?: Maybe<BlockMovePayload>
  blockPinOrUnpin?: Maybe<BlockPinOrUnpinPayload>
  blockRename?: Maybe<BlockRenamePayload>
  blockRestore?: Maybe<BlockRestorePayload>
  blockSoftDelete?: Maybe<BlockSoftDeletePayload>
  blockSyncBatch?: Maybe<BlockSyncBatchPayload>
  conversationCommentAppend?: Maybe<ConversationCommentAppendPayload>
  conversationCommentCreate?: Maybe<ConversationCommentCreatePayload>
  createDirectUpload?: Maybe<CreateDirectUploadPayload>
  createOrUpdatePod?: Maybe<CreateOrUpdatePodPayload>
  formulaCommit?: Maybe<FormulaCommitPayload>
  joinPod?: Maybe<JoinPodPayload>
  podDestroy?: Maybe<PodDestroyPayload>
  podLeave?: Maybe<PodLeavePayload>
  updateDomain?: Maybe<UpdateDomainPayload>
  updateMember?: Maybe<UpdateMemberPayload>
  userAppearanceUpdate?: Maybe<UserAppearanceUpdatePayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userConfirmationEmailResend?: Maybe<UserConfirmationEmailResendPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userCreate?: Maybe<UserCreatePayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userDestroy?: Maybe<UserDestroyPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userEmailPasswordSignIn?: Maybe<UserEmailPasswordSignInPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userForgetPasswordMailSend?: Maybe<UserForgetPasswordMailSendPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userPasswordReset?: Maybe<UserPasswordResetPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userSignOut?: Maybe<UserSignOutPayload>
}

export type RootMutationAwarenessUpdateArgs = {
  input: AwarenessUpdateInput
}

export type RootMutationBlockCommitArgs = {
  input: BlockCommitInput
}

export type RootMutationBlockCreateArgs = {
  input: BlockCreateInput
}

export type RootMutationBlockCreateShareLinkArgs = {
  input: BlockCreateShareLinkInput
}

export type RootMutationBlockDuplicateArgs = {
  input: BlockDuplicateInput
}

export type RootMutationBlockHardDeleteArgs = {
  input: BlockHardDeleteInput
}

export type RootMutationBlockMoveArgs = {
  input: BlockMoveInput
}

export type RootMutationBlockPinOrUnpinArgs = {
  input: BlockPinOrUnpinInput
}

export type RootMutationBlockRenameArgs = {
  input: BlockRenameInput
}

export type RootMutationBlockRestoreArgs = {
  input: BlockRestoreInput
}

export type RootMutationBlockSoftDeleteArgs = {
  input: BlockSoftDeleteInput
}

export type RootMutationBlockSyncBatchArgs = {
  input: BlockSyncBatchInput
}

export type RootMutationConversationCommentAppendArgs = {
  input: ConversationCommentAppendInput
}

export type RootMutationConversationCommentCreateArgs = {
  input: ConversationCommentCreateInput
}

export type RootMutationCreateDirectUploadArgs = {
  input: CreateDirectUploadInput
}

export type RootMutationCreateOrUpdatePodArgs = {
  input: CreateOrUpdatePodInput
}

export type RootMutationFormulaCommitArgs = {
  input: FormulaCommitInput
}

export type RootMutationJoinPodArgs = {
  input: JoinPodInput
}

export type RootMutationPodDestroyArgs = {
  input: PodDestroyInput
}

export type RootMutationPodLeaveArgs = {
  input: PodLeaveInput
}

export type RootMutationUpdateDomainArgs = {
  input: UpdateDomainInput
}

export type RootMutationUpdateMemberArgs = {
  input: UpdateMemberInput
}

export type RootMutationUserAppearanceUpdateArgs = {
  input: UserAppearanceUpdateInput
}

export type RootMutationUserConfirmationEmailResendArgs = {
  input: UserConfirmationEmailResendInput
}

export type RootMutationUserCreateArgs = {
  input: UserCreateInput
}

export type RootMutationUserDestroyArgs = {
  input: UserDestroyInput
}

export type RootMutationUserEmailPasswordSignInArgs = {
  input: UserEmailPasswordSignInInput
}

export type RootMutationUserForgetPasswordMailSendArgs = {
  input: UserForgetPasswordMailSendInput
}

export type RootMutationUserPasswordResetArgs = {
  input: UserPasswordResetInput
}

export type RootMutationUserSignOutArgs = {
  input: UserSignOutInput
}

export type RootQuery = {
  __typename?: 'RootQuery'
  /** return single block by id. */
  block?: Maybe<Block>
  blockInfo?: Maybe<BlockInfo>
  blockNew?: Maybe<BlockNew>
  /** return all pins */
  blockPins?: Maybe<Array<Pin>>
  blockSearch?: Maybe<Array<Block>>
  /** return share links by block id. */
  blockShareLinks: Array<ShareLink>
  /** return snapshots by block id. */
  blockSnapshots?: Maybe<Array<BlockSnapshot>>
  childrenBlocks?: Maybe<Array<Block>>
  conversationComments?: Maybe<Array<Conversation>>
  currentPodDomain: Scalars['String']
  documentHistories?: Maybe<DocumentHistories>
  /**
   * Check domain available.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  domainAvailable: Validate_Result
  /**
   * Check email available.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  emailAvailable: Validate_Result
  /**
   * provides a federated identity session data
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  federatedIdentitySession: OmniauthSession
  formulas?: Maybe<Array<Formula>>
  /** Return information about current Brickdoc server instance. */
  metadata: Metadata
  pageBlocks?: Maybe<Array<Block>>
  /**
   * Check password available.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  passwordAvailable: Validate_Result
  /** return current pod for user. */
  pod: Pod
  /** return all pod users */
  podMembers?: Maybe<Array<Pod_Member>>
  /** search pods */
  podSearch: Array<Pod>
  /** return all pods for user. */
  pods: Array<Pod>
  /** return preview box data of url */
  previewBox: Preview_Box
  spreadsheetChildren?: Maybe<SpreadsheetChildren>
  trashBlocks?: Maybe<Array<Block>>
  /** return images from unsplash by search */
  unsplashImage?: Maybe<Array<Unsplash_Image>>
}

export type RootQueryBlockArgs = {
  id: Scalars['String']
}

export type RootQueryBlockInfoArgs = {
  domain: Scalars['String']
  id: Scalars['String']
}

export type RootQueryBlockNewArgs = {
  historyId?: InputMaybe<Scalars['String']>
  id: Scalars['String']
}

export type RootQueryBlockSearchArgs = {
  domain: Scalars['String']
  input: Scalars['String']
}

export type RootQueryBlockShareLinksArgs = {
  id: Scalars['String']
}

export type RootQueryBlockSnapshotsArgs = {
  id: Scalars['String']
}

export type RootQueryChildrenBlocksArgs = {
  rootId: Scalars['String']
  snapshotVersion: Scalars['Int']
}

export type RootQueryConversationCommentsArgs = {
  pageIds: Array<Scalars['UUID']>
}

export type RootQueryDocumentHistoriesArgs = {
  id: Scalars['String']
}

export type RootQueryDomainAvailableArgs = {
  domain: Scalars['String']
}

export type RootQueryEmailAvailableArgs = {
  email: Scalars['String']
}

export type RootQueryFormulasArgs = {
  domain: Scalars['String']
  ids?: InputMaybe<Scalars['String']>
}

export type RootQueryPageBlocksArgs = {
  domain: Scalars['String']
}

export type RootQueryPasswordAvailableArgs = {
  password: Scalars['String']
}

export type RootQueryPodArgs = {
  domain: Scalars['String']
}

export type RootQueryPodSearchArgs = {
  input: Scalars['String']
}

export type RootQueryPreviewBoxArgs = {
  url: Scalars['String']
}

export type RootQuerySpreadsheetChildrenArgs = {
  parentId: Scalars['String']
}

export type RootQueryTrashBlocksArgs = {
  blockId?: InputMaybe<Scalars['UUID']>
  domain: Scalars['String']
  search?: InputMaybe<Scalars['String']>
}

export type RootQueryUnsplashImageArgs = {
  page?: InputMaybe<Scalars['Int']>
  perPage?: InputMaybe<Scalars['Int']>
  query?: InputMaybe<Scalars['String']>
}

export type RootSubscription = {
  __typename?: 'RootSubscription'
  awareness: AwarenessPayload
  document: DocumentPayload
  newPatch: NewPatchPayload
}

export type RootSubscriptionAwarenessArgs = {
  docId: Scalars['UUID']
}

export type RootSubscriptionDocumentArgs = {
  docId: Scalars['UUID']
}

export type RootSubscriptionNewPatchArgs = {
  docId: Scalars['UUID']
}

export type ShareLink = {
  __typename?: 'ShareLink'
  key: Scalars['String']
  policy: Policytype
  sharePodData: Pod
  state: ShareLinkState
}

/** InputObject type of Class */
export type ShareLinkInput = {
  /** block unique id */
  domain: Scalars['String']
  /** policy */
  policy: Policytype
  /** state type */
  state: ShareLinkState
}

export enum ShareLinkState {
  /** DISABLED */
  Disabled = 'disabled',
  /** ENABLED */
  Enabled = 'enabled'
}

export type SpreadsheetChildren = {
  __typename?: 'SpreadsheetChildren'
  /** blocks */
  blocks?: Maybe<Array<Block>>
}

export enum Statetype {
  /** full */
  Full = 'full',
  /** update */
  Update = 'update'
}

/** Like podMember but thin */
export type ThinUser = {
  __typename?: 'ThinUser'
  /** Pod Avatar */
  avatarData?: Maybe<Avatar>
  /** Like a username, Unique within this instance of Brickdoc */
  domain: Scalars['String']
  /** owner email */
  email?: Maybe<Scalars['String']>
  /** Pod Name */
  name: Scalars['String']
}

/** InputObject type of Class */
export type UpdateDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** current domain */
  domain: Scalars['String']
  /** new domain */
  newDomain: Scalars['String']
}

/** Autogenerated return type of UpdateDomain */
export type UpdateDomainPayload = {
  __typename?: 'UpdateDomainPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type UpdateMemberInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** domain */
  domain: Scalars['String']
  /** role */
  role: MemberRole
  /** state */
  state: MemberState
}

/** Autogenerated return type of UpdateMember */
export type UpdateMemberPayload = {
  __typename?: 'UpdateMemberPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Upload types */
export enum Upload {
  /** Account avatar */
  Avatar = 'AVATAR',
  /** Page block */
  Doc = 'DOC',
  /** Third */
  Third = 'THIRD'
}

/** InputObject type of Class */
export type UserAppearanceUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** User's preferred language */
  locale?: InputMaybe<Scalars['String']>
  /** User's preferred timezone */
  timezone?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of UserAppearanceUpdate */
export type UserAppearanceUpdatePayload = {
  __typename?: 'UserAppearanceUpdatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type UserConfirmationEmailResendInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** User's email address */
  email: Scalars['Email']
}

/** Autogenerated return type of UserConfirmationEmailResend */
export type UserConfirmationEmailResendPayload = {
  __typename?: 'UserConfirmationEmailResendPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type UserCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** Like a username, Unique within this instance of Brickdoc. */
  domain: Scalars['String']
  /** User's email address */
  email?: InputMaybe<Scalars['Email']>
  /** User's preferred language */
  locale: Scalars['String']
  /** Human-readable name of the user */
  name: Scalars['String']
  /** user password */
  password?: InputMaybe<Scalars['String']>
  /** User's preferred timezone */
  timezone: Scalars['String']
}

/** Autogenerated return type of UserCreate */
export type UserCreatePayload = {
  __typename?: 'UserCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  isUserActive?: Maybe<Scalars['Boolean']>
  /** redirect url path when sig up successful */
  redirectPath?: Maybe<Scalars['String']>
}

/** InputObject type of Class */
export type UserDestroyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of UserDestroy */
export type UserDestroyPayload = {
  __typename?: 'UserDestroyPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type UserEmailPasswordSignInInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** User's email address */
  email: Scalars['Email']
  /** user password */
  password: Scalars['String']
  /** remember authentication session */
  remember: Scalars['Boolean']
}

/** Autogenerated return type of UserEmailPasswordSignIn */
export type UserEmailPasswordSignInPayload = {
  __typename?: 'UserEmailPasswordSignInPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  /** redirect url path when sign in successful */
  redirectPath?: Maybe<Scalars['String']>
}

/** InputObject type of Class */
export type UserForgetPasswordMailSendInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** User's email address */
  email: Scalars['Email']
}

/** Autogenerated return type of UserForgetPasswordMailSend */
export type UserForgetPasswordMailSendPayload = {
  __typename?: 'UserForgetPasswordMailSendPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type UserPasswordResetInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** Reset password */
  password: Scalars['String']
  /** Reset password token by Devise */
  token: Scalars['String']
}

/** Autogenerated return type of UserPasswordReset */
export type UserPasswordResetPayload = {
  __typename?: 'UserPasswordResetPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type UserSignOutInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of UserSignOut */
export type UserSignOutPayload = {
  __typename?: 'UserSignOutPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export type Avatar = {
  __typename?: 'avatar'
  /** download url */
  downloadUrl: Scalars['String']
  /** signed id */
  signedId: Scalars['String']
  /** url */
  url: Scalars['String']
}

/** ActiveStorage blobs */
export type Blob = {
  __typename?: 'blob'
  /** Blob key */
  blobKey: Scalars['String']
  /** Blob url */
  downloadUrl: Scalars['String']
  /** Blob url */
  url: Scalars['String']
}

/** Brickdoc Docs::Block */
export type Block = {
  __typename?: 'block'
  /** blobs */
  blobs?: Maybe<Array<Blob>>
  /** collaborators */
  collaborators: Array<Scalars['BigInt']>
  /** content */
  content: Array<Scalars['JSON']>
  data: Scalars['JSON']
  /** deleted_at */
  deletedAt?: Maybe<Scalars['ISO8601DateTime']>
  /** block first child sort */
  firstChildSort: Scalars['BigInt']
  /** object unique id */
  id: Scalars['UUID']
  meta: BlockMeta
  /** block next sort */
  nextSort: Scalars['BigInt']
  /** parent uuid */
  parentId?: Maybe<Scalars['UUID']>
  /** path */
  pathArray: Array<BlockPath>
  permissions: BlockBaseObjectPermissions
  /** root uuid */
  rootId: Scalars['UUID']
  /** block sort */
  sort: Scalars['BigInt']
  /** text */
  text: Scalars['String']
  /** block type */
  type: Scalars['String']
}

/** Brickdoc Docs::Block New Scheme */
export type BlockNew = {
  __typename?: 'blockNew'
  /** Block Type */
  blockType?: Maybe<Scalars['String']>
  /** object unique id */
  id: Scalars['UUID']
  /** Latest State Id */
  stateId?: Maybe<Scalars['String']>
  /** Block States */
  states?: Maybe<Array<BlockState>>
  statesCount?: Maybe<Scalars['Int']>
}

/** Brickdoc Docs::BlockState */
export type BlockState = {
  __typename?: 'blockState'
  blockId?: Maybe<Scalars['UUID']>
  /** Created at */
  createdAt: Scalars['ISO8601DateTime']
  /** object unique id */
  id: Scalars['UUID']
  prevStateId?: Maybe<Scalars['UUID']>
  state?: Maybe<Scalars['String']>
  /** State Type */
  stateType?: Maybe<Statetype>
}

/** Brickdoc Global Configuration */
export type Config = {
  __typename?: 'config'
  /** Enable email and password authentication */
  accountsEmailPasswordAuth: Scalars['Boolean']
  /** Enabled federated identity providers */
  accountsFederatedProviders?: Maybe<Array<FederatedProvider>>
  /** Preferred Authentication authentication */
  accountsPreferredAuthMethod: AuthMethod
  /** User agreement link */
  userAgreementLink: Scalars['HttpUrl']
}

export type DocumentHistories = {
  __typename?: 'documentHistories'
  /** History States */
  histories?: Maybe<Array<DocumentHistory>>
  /** History Users */
  users?: Maybe<Array<ThinUser>>
}

export type DocumentHistory = {
  __typename?: 'documentHistory'
  /** Created at */
  createdAt: Scalars['ISO8601DateTime']
  /** object unique id */
  id: Scalars['UUID']
  /** Username */
  username: Scalars['String']
}

/** Accounts Federated Identity Provide Configuration */
export type FederatedProvider = {
  __typename?: 'federatedProvider'
  /** Provider Logo URI */
  logo: Scalars['HttpUrl']
  /** Provider Name */
  name: Scalars['String']
}

/** Represents information about the Brickdoc Server Instance. */
export type Metadata = {
  __typename?: 'metadata'
  /** Current available locales. */
  availableLocales: Array<Select_Option>
  availableTimezones: Array<Scalars['String']>
  /** Brickdoc Global Config */
  config: Config
  /** object unique id */
  id: Scalars['AutoIncrementID']
}

/** session[:omniauth] */
export type OmniauthSession = {
  __typename?: 'omniauthSession'
  /** Like a username, Unique within this instance of Brickdoc. */
  domain?: Maybe<Scalars['String']>
  hasSession: Scalars['Boolean']
  /** Human-readable name of the user */
  name?: Maybe<Scalars['String']>
  /** Provider Name */
  provider?: Maybe<Scalars['String']>
}

/** Brickdoc Docs::Pin */
export type Pin = {
  __typename?: 'pin'
  /** root uuid */
  blockId: Scalars['UUID']
  meta: BlockMeta
  /** text */
  text: Scalars['String']
}

/** Brickdoc Pod. */
export type Pod = {
  __typename?: 'pod'
  /** Pod Avatar */
  avatarData?: Maybe<Avatar>
  /** public profile bio */
  bio?: Maybe<Scalars['String']>
  /** Like a username, Unique within this instance of Brickdoc */
  domain: Scalars['String']
  /** owner email */
  email?: Maybe<Scalars['String']>
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** enable invite feature */
  inviteEnable: Scalars['Boolean']
  /** invite secret */
  inviteSecret?: Maybe<Scalars['String']>
  /** Pod Name */
  name?: Maybe<Scalars['String']>
  /** owner is current user */
  owned: Scalars['Boolean']
  /** personal */
  personal: Scalars['Boolean']
}

export type Pod_Member = {
  __typename?: 'pod_member'
  /** Pod Avatar */
  avatarData?: Maybe<Avatar>
  /** Like a username, Unique within this instance of Brickdoc */
  domain: Scalars['String']
  /** owner email */
  email?: Maybe<Scalars['String']>
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** Pod Name */
  name: Scalars['String']
  /** role */
  role: MemberRole
  /** state */
  state: MemberState
}

export type Preview_Box = {
  __typename?: 'preview_box'
  /** preview cover */
  cover?: Maybe<Scalars['String']>
  /** preview description */
  description?: Maybe<Scalars['String']>
  /** preview icon */
  icon?: Maybe<Scalars['String']>
  /** preview conetent size */
  size?: Maybe<Scalars['String']>
  /** preview title */
  title: Scalars['String']
  /** preview conetent type */
  type?: Maybe<Scalars['String']>
  /** preview url */
  url: Scalars['String']
}

/** Option Object for BrickDesign Select Component. */
export type Select_Option = {
  __typename?: 'select_option'
  /** option label */
  label: Scalars['String']
  /** option value */
  value: Scalars['String']
}

/** Unspash image. */
export type Unsplash_Image = {
  __typename?: 'unsplash_image'
  /** Blur hash for this image (see https://blurha.sh/) */
  blurHash?: Maybe<Scalars['String']>
  /** url for full size image */
  fullUrl: Scalars['String']
  /** Image height */
  height?: Maybe<Scalars['Int']>
  /** Unsplash image id */
  id: Scalars['String']
  /** url for small size image */
  smallUrl: Scalars['String']
  /** username */
  username?: Maybe<Scalars['String']>
  /** Image width */
  width?: Maybe<Scalars['Int']>
}

export type Validate_Result = {
  __typename?: 'validate_result'
  /** error message */
  message: Scalars['String']
  /** Validate success */
  success: Scalars['Boolean']
}
