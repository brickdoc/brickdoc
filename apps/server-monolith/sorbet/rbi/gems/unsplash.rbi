# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/unsplash/all/unsplash.rbi
#
# unsplash-2.1.0

module Unsplash
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure; end
end
class Unsplash::Configuration
  def application_access_key; end
  def application_access_key=(arg0); end
  def application_redirect_uri; end
  def application_redirect_uri=(arg0); end
  def application_secret; end
  def application_secret=(arg0); end
  def initialize; end
  def logger; end
  def logger=(arg0); end
  def test=(arg0); end
  def test?; end
  def utm_source; end
  def utm_source=(arg0); end
end
class Unsplash::Error < StandardError
end
class Unsplash::DeprecationError < Unsplash::Error
end
class Unsplash::UnauthorizedError < Unsplash::Error
end
class Unsplash::ForbiddenError < Unsplash::Error
end
class Unsplash::NotFoundError < Unsplash::Error
end
class Unsplash::Client
  def add_utm_params(url); end
  def add_utm_to_links; end
  def connection; end
  def initialize(attrs = nil); end
  def method_missing(method, *args, &block); end
  def reload!; end
  def self.connection; end
  def self.connection=(conn); end
  def to_h; end
end
class Unsplash::Connection
  def authorization_url(requested_scopes = nil); end
  def authorize!(auth_code); end
  def create_and_assign_token(token_extract); end
  def delete(path, params = nil); end
  def error_message(response); end
  def extract_token; end
  def get(path, params = nil); end
  def initialize(version: nil, api_base_uri: nil, oauth_base_uri: nil); end
  def post(path, params = nil); end
  def public_auth_header; end
  def put(path, params = nil); end
  def refresh_token!; end
  def request(verb, path, params = nil); end
  def self.default_cookies; end
  def self.default_cookies=(arg0); end
  def self.default_options; end
  def self.default_options=(arg0); end
  def utm_params; end
  extend HTTParty::ClassMethods
  extend HTTParty::ModuleInheritableAttributes::ClassMethods
  include HTTParty
  include HTTParty::ModuleInheritableAttributes
end
class Unsplash::User < Unsplash::Client
  def collections(page = nil, per_page = nil); end
  def likes(page = nil, per_page = nil); end
  def photos(page = nil, per_page = nil); end
  def self.current; end
  def self.find(username); end
  def self.search(query, page = nil, per_page = nil); end
  def self.update_current(params); end
end
class Unsplash::Photo < Unsplash::Client
  def add_utm_to_urls; end
  def initialize(attrs); end
  def like!; end
  def self.all(page = nil, per_page = nil, order_by = nil); end
  def self.find(id); end
  def self.parse_list(json); end
  def self.random(count: nil, collections: nil, featured: nil, user: nil, query: nil, orientation: nil); end
  def self.search(query, page = nil, per_page = nil, orientation = nil); end
  def track_download; end
  def unlike!; end
end
class Unsplash::Collection < Unsplash::Client
  def add(photo); end
  def destroy; end
  def initialize(options = nil); end
  def photos(page = nil, per_page = nil); end
  def remove(photo); end
  def self.all(page = nil, per_page = nil); end
  def self.create(title: nil, description: nil, private: nil); end
  def self.featured(page = nil, per_page = nil); end
  def self.find(id); end
  def self.search(query, page = nil, per_page = nil); end
  def update(title: nil, description: nil, private: nil); end
end
class Unsplash::Stats < Unsplash::Client
  def self.total; end
end
class Unsplash::SearchResult < SimpleDelegator
  def initialize(decorated, klass); end
  def total; end
  def total_pages; end
end
class Unsplash::Search < Unsplash::Client
  def self.search(url, klass, params); end
end
