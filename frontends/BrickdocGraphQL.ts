import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
const defaultOptions = {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** AutoIncrement Primary Key */
  AutoIncrementID: string
  /** block data */
  BlockData: Block['data']
  /** block meta */
  BlockMeta: Block['meta']
  /** Email Address */
  Email: string
  /** A valid http/https url or image uri */
  HttpUrl: string
  /** Null value */
  Nil: null | undefined
  /** UUID V4 */
  UUID: string
}

/** Available authentication authentication. */
export enum AuthMethod {
  /** Email and Password Authentication */
  EmailPassword = 'email_password',
  /** Github Federated Authentication */
  Github = 'github'
}

/** Autogenerated input type of BlockCreateSnapshot */
export type BlockCreateSnapshotInput = {
  /** block unique id */
  id: Scalars['UUID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of BlockCreateSnapshot */
export type BlockCreateSnapshotPayload = {
  __typename?: 'BlockCreateSnapshotPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of BlockDelete */
export type BlockDeleteInput = {
  /** block unique id */
  id: Scalars['UUID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of BlockDelete */
export type BlockDeletePayload = {
  __typename?: 'BlockDeletePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export type BlockHistory = {
  __typename?: 'BlockHistory'
  /** History version */
  historyVersion: Scalars['Int']
  /** object unique id */
  id: Scalars['AutoIncrementID']
}

/** InputObject type of Class */
export type BlockInput = {
  /** block unique id */
  id: Scalars['UUID']
  /** block type */
  type: Scalars['String']
  /** parent uuid */
  parentId?: Maybe<Scalars['UUID']>
  /** block sort */
  sort?: Maybe<Scalars['Int']>
  /** block data */
  data?: Maybe<Scalars['BlockData']>
  /** block meta */
  meta?: Maybe<Scalars['BlockMeta']>
}

export type BlockSnapshot = {
  __typename?: 'BlockSnapshot'
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** Snapshot name */
  name: Scalars['String']
  /** Snapshot version */
  snapshotVersion: Scalars['Int']
}

/** Autogenerated input type of BlockSyncBatch */
export type BlockSyncBatchInput = {
  blocks: Array<BlockInput>
  /** block root id */
  rootId: Scalars['UUID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of BlockSyncBatch */
export type BlockSyncBatchPayload = {
  __typename?: 'BlockSyncBatchPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of BlockSync */
export type BlockSyncInput = {
  /** block unique id */
  id: Scalars['UUID']
  /** block type */
  type: Scalars['String']
  /** parent uuid */
  parentId?: Maybe<Scalars['UUID']>
  /** parent type */
  parentType?: Maybe<Scalars['String']>
  /** block sort */
  sort?: Maybe<Scalars['Int']>
  /** block data */
  data?: Maybe<Scalars['BlockData']>
  /** block meta */
  meta?: Maybe<Scalars['BlockMeta']>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of BlockSync */
export type BlockSyncPayload = {
  __typename?: 'BlockSyncPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated return type of CreateDirectUpload */
export type CreateDirectUploadPayload = {
  __typename?: 'CreateDirectUploadPayload'
  directUpload: DirectUpload
}

/** Represents direct upload credentials */
export type DirectUpload = {
  __typename?: 'DirectUpload'
  /** Created blob record ID */
  blobId: Scalars['ID']
  /** HTTP request headers (JSON-encoded) */
  headers: Scalars['String']
  /** Created blob record signed ID */
  signedBlobId: Scalars['ID']
  /** Upload URL */
  url: Scalars['String']
}

/** File information required to prepare a direct upload */
export type DirectUploadInput = {
  /** Original file name */
  filename: Scalars['String']
  /** File size (bytes) */
  byteSize: Scalars['Int']
  /** MD5 file checksum as base64 */
  checksum: Scalars['String']
  /** File content type */
  contentType: Scalars['String']
}

/** doc blocks */
export type MetaBlock = {
  __typename?: 'MetaBlock'
  /** collaborators */
  collaborators?: Maybe<Array<Accounts_User>>
  data: Scalars['Nil']
  /** object unique id */
  id: Scalars['UUID']
  meta: MetaBlockMeta
  /** parent uuid */
  parentId?: Maybe<Scalars['UUID']>
  /** parent type */
  parentType?: Maybe<Scalars['String']>
  /** block sort */
  sort: Scalars['Int']
  /** block type */
  type: Scalars['String']
}

export type MetaBlockMeta = {
  __typename?: 'MetaBlockMeta'
  /** attrs */
  attrs?: Maybe<Scalars['String']>
  /** marks */
  marks?: Maybe<Scalars['String']>
}

/** page blocks */
export type PageBlock = {
  __typename?: 'PageBlock'
  /** collaborators */
  collaborators?: Maybe<Array<Accounts_User>>
  data: PageBlockData
  /** object unique id */
  id: Scalars['UUID']
  meta: PageBlockMeta
  /** parent uuid */
  parentId?: Maybe<Scalars['UUID']>
  /** parent type */
  parentType?: Maybe<Scalars['String']>
  /** block sort */
  sort: Scalars['Int']
  /** block type */
  type: Scalars['String']
}

export type PageBlockData = {
  __typename?: 'PageBlockData'
  /** page title */
  title: Scalars['String']
}

export type PageBlockMeta = {
  __typename?: 'PageBlockMeta'
  /** attrs */
  attrs?: Maybe<Scalars['String']>
  /** cover image */
  cover?: Maybe<Scalars['HttpUrl']>
  /** page icon */
  icon?: Maybe<Scalars['String']>
}

/** paragraph blocks */
export type ParagraphBlock = {
  __typename?: 'ParagraphBlock'
  /** collaborators */
  collaborators?: Maybe<Array<Accounts_User>>
  data: ParagraphBlockData
  /** object unique id */
  id: Scalars['UUID']
  meta: ParagraphBlockMeta
  /** parent uuid */
  parentId?: Maybe<Scalars['UUID']>
  /** parent type */
  parentType?: Maybe<Scalars['String']>
  /** block sort */
  sort: Scalars['Int']
  /** block type */
  type: Scalars['String']
}

export type ParagraphBlockData = {
  __typename?: 'ParagraphBlockData'
  /** page title */
  title: Scalars['String']
}

export type ParagraphBlockMeta = {
  __typename?: 'ParagraphBlockMeta'
  /** attrs */
  attrs?: Maybe<Scalars['String']>
}

export type RootMutation = {
  __typename?: 'RootMutation'
  blockCreateSnapshot?: Maybe<BlockCreateSnapshotPayload>
  blockDelete?: Maybe<BlockDeletePayload>
  blockSync?: Maybe<BlockSyncPayload>
  blockSyncBatch?: Maybe<BlockSyncBatchPayload>
  createDirectUpload?: Maybe<CreateDirectUploadPayload>
  /** Required `context[:entrypoints]` is `[:internal]`. */
  userConfirmationEmailResend?: Maybe<UserConfirmationEmailResendPayload>
  /** Required `context[:entrypoints]` is `[:internal]`. */
  userCreate?: Maybe<UserCreatePayload>
  /** Required `context[:entrypoints]` is `[:internal]`. */
  userEmailPasswordSignIn?: Maybe<UserEmailPasswordSignInPayload>
  /** Required `context[:entrypoints]` is `[:internal]`. */
  userForgetPasswordMailSend?: Maybe<UserForgetPasswordMailSendPayload>
  /** Required `context[:entrypoints]` is `[:internal]`. */
  userPasswordReset?: Maybe<UserPasswordResetPayload>
  /** Required `context[:entrypoints]` is `[:internal]`. */
  userSignOut?: Maybe<UserSignOutPayload>
}

export type RootMutationBlockCreateSnapshotArgs = {
  input: BlockCreateSnapshotInput
}

export type RootMutationBlockDeleteArgs = {
  input: BlockDeleteInput
}

export type RootMutationBlockSyncArgs = {
  input: BlockSyncInput
}

export type RootMutationBlockSyncBatchArgs = {
  input: BlockSyncBatchInput
}

export type RootMutationCreateDirectUploadArgs = {
  input: DirectUploadInput
  type: Upload
}

export type RootMutationUserConfirmationEmailResendArgs = {
  input: UserConfirmationEmailResendInput
}

export type RootMutationUserCreateArgs = {
  input: UserCreateInput
}

export type RootMutationUserEmailPasswordSignInArgs = {
  input: UserEmailPasswordSignInInput
}

export type RootMutationUserForgetPasswordMailSendArgs = {
  input: UserForgetPasswordMailSendInput
}

export type RootMutationUserPasswordResetArgs = {
  input: UserPasswordResetInput
}

export type RootMutationUserSignOutArgs = {
  input: UserSignOutInput
}

export type RootQuery = {
  __typename?: 'RootQuery'
  /** return single block by id. */
  block?: Maybe<Block>
  /** return histories by block id. */
  blockHistories?: Maybe<Array<BlockHistory>>
  /** return snapshots by block id. */
  blockSnapshots?: Maybe<Array<BlockSnapshot>>
  childrenBlocks?: Maybe<Array<Block>>
  /**
   * provides a federated identity session data
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  federatedIdentitySession: OmniauthSession
  /** Return information about current Brickdoc server instance. */
  metadata: Metadata
  pageBlocks?: Maybe<Array<PageBlock>>
  /** return all pods for user. */
  pods: Array<Pod>
  /**
   * Check webid available.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  webidAvailable: Scalars['Boolean']
}

export type RootQueryBlockArgs = {
  id: Scalars['String']
}

export type RootQueryBlockHistoriesArgs = {
  id: Scalars['String']
}

export type RootQueryBlockSnapshotsArgs = {
  id: Scalars['String']
}

export type RootQueryChildrenBlocksArgs = {
  parentId: Scalars['String']
  excludePages?: Maybe<Scalars['Boolean']>
  snapshotVersion: Scalars['Int']
}

export type RootQueryPageBlocksArgs = {
  webid: Scalars['String']
}

export type RootQueryWebidAvailableArgs = {
  webid: Scalars['String']
}

/** text blocks */
export type TextBlock = {
  __typename?: 'TextBlock'
  /** collaborators */
  collaborators?: Maybe<Array<Accounts_User>>
  data: TextBlockData
  /** object unique id */
  id: Scalars['UUID']
  meta: TextBlockMeta
  /** parent uuid */
  parentId?: Maybe<Scalars['UUID']>
  /** parent type */
  parentType?: Maybe<Scalars['String']>
  /** block sort */
  sort: Scalars['Int']
  /** block type */
  type: Scalars['String']
}

export type TextBlockData = {
  __typename?: 'TextBlockData'
  /** Text Content */
  content: Scalars['String']
}

export type TextBlockMeta = {
  __typename?: 'TextBlockMeta'
  /** attrs */
  attrs?: Maybe<Scalars['String']>
  /** marks */
  marks?: Maybe<Scalars['String']>
}

/** Upload types */
export enum Upload {
  /** Account avatar */
  Avatar = 'AVATAR',
  /** Page block */
  Doc = 'DOC'
}

/** Autogenerated input type of UserConfirmationEmailResend */
export type UserConfirmationEmailResendInput = {
  /** User's email address */
  email: Scalars['Email']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of UserConfirmationEmailResend */
export type UserConfirmationEmailResendPayload = {
  __typename?: 'UserConfirmationEmailResendPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UserCreate */
export type UserCreateInput = {
  /** Like a username, Unique within this instance of Brickdoc. */
  webid: Scalars['String']
  /** Human-readable name of the user */
  name: Scalars['String']
  /** User's email address */
  email?: Maybe<Scalars['Email']>
  /** user password */
  password?: Maybe<Scalars['String']>
  /** User's preferred language */
  locale: Scalars['String']
  /** User's preferred timezone */
  timezone: Scalars['String']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of UserCreate */
export type UserCreatePayload = {
  __typename?: 'UserCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  isUserActive?: Maybe<Scalars['Boolean']>
  /** redirect url path when sig up successful */
  redirectPath?: Maybe<Scalars['String']>
}

/** Autogenerated input type of UserEmailPasswordSignIn */
export type UserEmailPasswordSignInInput = {
  /** User's email address */
  email: Scalars['Email']
  /** user password */
  password: Scalars['String']
  /** remember authentication session */
  remember: Scalars['Boolean']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of UserEmailPasswordSignIn */
export type UserEmailPasswordSignInPayload = {
  __typename?: 'UserEmailPasswordSignInPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  /** redirect url path when sign in successful */
  redirectPath?: Maybe<Scalars['String']>
}

/** Autogenerated input type of UserForgetPasswordMailSend */
export type UserForgetPasswordMailSendInput = {
  /** User's email address */
  email: Scalars['Email']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of UserForgetPasswordMailSend */
export type UserForgetPasswordMailSendPayload = {
  __typename?: 'UserForgetPasswordMailSendPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UserPasswordReset */
export type UserPasswordResetInput = {
  /** Reset password token by Devise */
  token: Scalars['String']
  /** Reset password */
  password: Scalars['String']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of UserPasswordReset */
export type UserPasswordResetPayload = {
  __typename?: 'UserPasswordResetPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UserSignOut */
export type UserSignOutInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
}

/** Autogenerated return type of UserSignOut */
export type UserSignOutPayload = {
  __typename?: 'UserSignOutPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** A user is an individual's accounts on Brickdoc can make new content. */
export type Accounts_User = {
  __typename?: 'accounts_user'
  /** the user's public profile bio */
  bio?: Maybe<Scalars['String']>
  /** User's email address */
  email?: Maybe<Scalars['String']>
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** User's preferred language */
  locale: Scalars['String']
  /** Human-readable name of the user */
  name: Scalars['String']
  /** User's preferred timezone */
  timezone: Scalars['String']
  /** Like a username, Unique within this instance of Brickdoc. */
  webid: Scalars['String']
}

/** Brickdoc Docs::Block */
export type Block = MetaBlock | PageBlock | ParagraphBlock | TextBlock

/** Brickdoc Global Configuration */
export type Config = {
  __typename?: 'config'
  /** Enable email and password authentication */
  accountsEmailPasswordAuth: Scalars['Boolean']
  /** Enabled federated identity providers */
  accountsFederatedProviders: Array<FederatedProvider>
  /** Preferred Authentication authentication */
  accountsPreferredAuthMethod: AuthMethod
  /** User agreement link */
  userAgreementLink: Scalars['HttpUrl']
}

/** Accounts Federated Identity Provide Configuration */
export type FederatedProvider = {
  __typename?: 'federatedProvider'
  /** Provider Logo URI */
  logo: Scalars['HttpUrl']
  /** Provider Name */
  name: Scalars['String']
}

/** Represents information about the Brickdoc Server Instance. */
export type Metadata = {
  __typename?: 'metadata'
  /** Current available locales. */
  availableLocales: Array<Select_Option>
  /** Brickdoc Global Config */
  config: Config
  /** object unique id */
  id: Scalars['AutoIncrementID']
}

/** session[:omniauth] */
export type OmniauthSession = {
  __typename?: 'omniauthSession'
  hasSession: Scalars['Boolean']
  /** Human-readable name of the user */
  name?: Maybe<Scalars['String']>
  /** Provider Name */
  provider?: Maybe<Scalars['String']>
  /** Like a username, Unique within this instance of Brickdoc. */
  webid?: Maybe<Scalars['String']>
}

/** Brickdoc Pod. */
export type Pod = {
  __typename?: 'pod'
  /** Pod Avatar */
  avatar?: Maybe<Scalars['String']>
  /** public profile bio */
  bio?: Maybe<Scalars['String']>
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** Pod Name */
  name?: Maybe<Scalars['String']>
  /** Like a username, Unique within this instance of Brickdoc */
  webid: Scalars['String']
}

/** Option Object for BrickDesign Select Component. */
export type Select_Option = {
  __typename?: 'select_option'
  /** option label */
  label: Scalars['String']
  /** option value */
  value: Scalars['String']
}

export type UserSignOutMutationVariables = Exact<{
  input: UserSignOutInput
}>

export type UserSignOutMutation = { __typename?: 'RootMutation' } & {
  userSignOut?: Maybe<{ __typename?: 'UserSignOutPayload' } & Pick<UserSignOutPayload, 'errors'>>
}

export type GetAccountsConfigFromWsQueryVariables = Exact<{ [key: string]: never }>

export type GetAccountsConfigFromWsQuery = { __typename?: 'RootQuery' } & {
  metadata: { __typename?: 'metadata' } & Pick<Metadata, 'id'> & {
      config: { __typename?: 'config' } & Pick<
        Config,
        'userAgreementLink' | 'accountsPreferredAuthMethod' | 'accountsEmailPasswordAuth'
      > & { accountsFederatedProviders: Array<{ __typename?: 'federatedProvider' } & Pick<FederatedProvider, 'name' | 'logo'>> }
    }
}

export type UserForgetPasswordMailSendMutationVariables = Exact<{
  input: UserForgetPasswordMailSendInput
}>

export type UserForgetPasswordMailSendMutation = { __typename?: 'RootMutation' } & {
  userForgetPasswordMailSend?: Maybe<
    { __typename?: 'UserForgetPasswordMailSendPayload' } & Pick<UserForgetPasswordMailSendPayload, 'errors'>
  >
}

export type UserPasswordResetMutationVariables = Exact<{
  input: UserPasswordResetInput
}>

export type UserPasswordResetMutation = { __typename?: 'RootMutation' } & {
  userPasswordReset?: Maybe<{ __typename?: 'UserPasswordResetPayload' } & Pick<UserPasswordResetPayload, 'errors'>>
}

export type UserEmailPasswordSignInMutationVariables = Exact<{
  input: UserEmailPasswordSignInInput
}>

export type UserEmailPasswordSignInMutation = { __typename?: 'RootMutation' } & {
  userEmailPasswordSignIn?: Maybe<
    { __typename?: 'UserEmailPasswordSignInPayload' } & Pick<UserEmailPasswordSignInPayload, 'errors' | 'redirectPath'>
  >
}

export type GetFederatedIdentitySessionQueryVariables = Exact<{ [key: string]: never }>

export type GetFederatedIdentitySessionQuery = { __typename?: 'RootQuery' } & {
  federatedIdentitySession: { __typename?: 'omniauthSession' } & Pick<OmniauthSession, 'hasSession' | 'webid' | 'name' | 'provider'>
}

export type UserCreateMutationVariables = Exact<{
  input: UserCreateInput
}>

export type UserCreateMutation = { __typename?: 'RootMutation' } & {
  userCreate?: Maybe<{ __typename?: 'UserCreatePayload' } & Pick<UserCreatePayload, 'errors' | 'redirectPath' | 'isUserActive'>>
}

export type UserConfirmationEmailResendMutationVariables = Exact<{
  input: UserConfirmationEmailResendInput
}>

export type UserConfirmationEmailResendMutation = { __typename?: 'RootMutation' } & {
  userConfirmationEmailResend?: Maybe<
    { __typename?: 'UserConfirmationEmailResendPayload' } & Pick<UserConfirmationEmailResendPayload, 'errors'>
  >
}

export type QueryWebidAvailableFromWsQueryVariables = Exact<{
  webid: Scalars['String']
}>

export type QueryWebidAvailableFromWsQuery = { __typename?: 'RootQuery' } & Pick<RootQuery, 'webidAvailable'>

export type GetAvailableLocalesFromWsQueryVariables = Exact<{ [key: string]: never }>

export type GetAvailableLocalesFromWsQuery = { __typename?: 'RootQuery' } & {
  metadata: { __typename?: 'metadata' } & Pick<Metadata, 'id'> & {
      availableLocales: Array<{ __typename?: 'select_option' } & Pick<Select_Option, 'label' | 'value'>>
    }
}

export type GetPodsQueryVariables = Exact<{ [key: string]: never }>

export type GetPodsQuery = { __typename?: 'RootQuery' } & {
  pods: Array<{ __typename?: 'pod' } & Pick<Pod, 'id' | 'webid' | 'name' | 'avatar'>>
}

export type GetPageBlocksQueryVariables = Exact<{
  webid: Scalars['String']
}>

export type GetPageBlocksQuery = { __typename?: 'RootQuery' } & {
  pageBlocks?: Maybe<
    Array<
      { __typename?: 'PageBlock' } & Pick<PageBlock, 'id' | 'parentId' | 'sort'> & {
          data: { __typename?: 'PageBlockData' } & Pick<PageBlockData, 'title'>
        }
    >
  >
}

export type GetBlockSnapshotsQueryVariables = Exact<{
  id: Scalars['String']
}>

export type GetBlockSnapshotsQuery = { __typename?: 'RootQuery' } & {
  blockSnapshots?: Maybe<Array<{ __typename?: 'BlockSnapshot' } & Pick<BlockSnapshot, 'id' | 'snapshotVersion' | 'name'>>>
}

export type GetBlockHistoriesQueryVariables = Exact<{
  id: Scalars['String']
}>

export type GetBlockHistoriesQuery = { __typename?: 'RootQuery' } & {
  blockHistories?: Maybe<Array<{ __typename?: 'BlockHistory' } & Pick<BlockHistory, 'id' | 'historyVersion'>>>
}

export type BlockDeleteMutationVariables = Exact<{
  input: BlockDeleteInput
}>

export type BlockDeleteMutation = { __typename?: 'RootMutation' } & {
  blockDelete?: Maybe<{ __typename?: 'BlockDeletePayload' } & Pick<BlockDeletePayload, 'errors'>>
}

export type BlockCreateSnapshotMutationVariables = Exact<{
  input: BlockCreateSnapshotInput
}>

export type BlockCreateSnapshotMutation = { __typename?: 'RootMutation' } & {
  blockCreateSnapshot?: Maybe<{ __typename?: 'BlockCreateSnapshotPayload' } & Pick<BlockCreateSnapshotPayload, 'errors'>>
}

export type BlockSyncMutationVariables = Exact<{
  input: BlockSyncInput
}>

export type BlockSyncMutation = { __typename?: 'RootMutation' } & {
  blockSync?: Maybe<{ __typename?: 'BlockSyncPayload' } & Pick<BlockSyncPayload, 'errors'>>
}

export type BlockSyncBatchMutationVariables = Exact<{
  input: BlockSyncBatchInput
}>

export type BlockSyncBatchMutation = { __typename?: 'RootMutation' } & {
  blockSyncBatch?: Maybe<{ __typename?: 'BlockSyncBatchPayload' } & Pick<BlockSyncBatchPayload, 'errors'>>
}

export type GetChildrenBlocksQueryVariables = Exact<{
  parentId: Scalars['String']
  excludePages: Scalars['Boolean']
  snapshotVersion: Scalars['Int']
}>

export type GetChildrenBlocksQuery = { __typename: 'RootQuery' } & {
  childrenBlocks?: Maybe<
    Array<
      | ({ __typename?: 'MetaBlock' } & Pick<MetaBlock, 'id' | 'sort' | 'parentId' | 'type'> & {
            meta: { __typename?: 'MetaBlockMeta' } & Pick<MetaBlockMeta, 'attrs' | 'marks'>
          })
      | ({ __typename?: 'PageBlock' } & Pick<PageBlock, 'id' | 'sort' | 'parentId' | 'type'> & {
            data: { __typename?: 'PageBlockData' } & Pick<PageBlockData, 'title'>
            meta: { __typename?: 'PageBlockMeta' } & Pick<PageBlockMeta, 'icon' | 'cover' | 'attrs'>
          })
      | ({ __typename?: 'ParagraphBlock' } & Pick<ParagraphBlock, 'id' | 'sort' | 'parentId' | 'type'> & {
            data: { __typename?: 'ParagraphBlockData' } & Pick<ParagraphBlockData, 'title'>
            meta: { __typename?: 'ParagraphBlockMeta' } & Pick<ParagraphBlockMeta, 'attrs'>
          })
      | ({ __typename?: 'TextBlock' } & Pick<TextBlock, 'id' | 'sort' | 'parentId' | 'type'> & {
            data: { __typename?: 'TextBlockData' } & Pick<TextBlockData, 'content'>
            meta: { __typename?: 'TextBlockMeta' } & Pick<TextBlockMeta, 'marks' | 'attrs'>
          })
    >
  >
}

export const UserSignOutDocument = gql`
  mutation userSignOut($input: UserSignOutInput!) {
    userSignOut(input: $input) {
      errors
    }
  }
`
export type UserSignOutMutationFn = Apollo.MutationFunction<UserSignOutMutation, UserSignOutMutationVariables>

/**
 * __useUserSignOutMutation__
 *
 * To run a mutation, you first call `useUserSignOutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserSignOutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userSignOutMutation, { data, loading, error }] = useUserSignOutMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserSignOutMutation(baseOptions?: Apollo.MutationHookOptions<UserSignOutMutation, UserSignOutMutationVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserSignOutMutation, UserSignOutMutationVariables>(UserSignOutDocument, options)
}
export type UserSignOutMutationHookResult = ReturnType<typeof useUserSignOutMutation>
export type UserSignOutMutationResult = Apollo.MutationResult<UserSignOutMutation>
export type UserSignOutMutationOptions = Apollo.BaseMutationOptions<UserSignOutMutation, UserSignOutMutationVariables>
export const GetAccountsConfigFromWsDocument = gql`
  query GetAccountsConfigFromWS {
    metadata {
      id
      config {
        userAgreementLink
        accountsPreferredAuthMethod
        accountsEmailPasswordAuth
        accountsFederatedProviders {
          name
          logo
        }
      }
    }
  }
`

/**
 * __useGetAccountsConfigFromWsQuery__
 *
 * To run a query within a React component, call `useGetAccountsConfigFromWsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountsConfigFromWsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountsConfigFromWsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAccountsConfigFromWsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>(GetAccountsConfigFromWsDocument, options)
}
export function useGetAccountsConfigFromWsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>(GetAccountsConfigFromWsDocument, options)
}
export type GetAccountsConfigFromWsQueryHookResult = ReturnType<typeof useGetAccountsConfigFromWsQuery>
export type GetAccountsConfigFromWsLazyQueryHookResult = ReturnType<typeof useGetAccountsConfigFromWsLazyQuery>
export type GetAccountsConfigFromWsQueryResult = Apollo.QueryResult<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>
export const UserForgetPasswordMailSendDocument = gql`
  mutation userForgetPasswordMailSend($input: UserForgetPasswordMailSendInput!) {
    userForgetPasswordMailSend(input: $input) {
      errors
    }
  }
`
export type UserForgetPasswordMailSendMutationFn = Apollo.MutationFunction<
  UserForgetPasswordMailSendMutation,
  UserForgetPasswordMailSendMutationVariables
>

/**
 * __useUserForgetPasswordMailSendMutation__
 *
 * To run a mutation, you first call `useUserForgetPasswordMailSendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserForgetPasswordMailSendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userForgetPasswordMailSendMutation, { data, loading, error }] = useUserForgetPasswordMailSendMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserForgetPasswordMailSendMutation(
  baseOptions?: Apollo.MutationHookOptions<UserForgetPasswordMailSendMutation, UserForgetPasswordMailSendMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserForgetPasswordMailSendMutation, UserForgetPasswordMailSendMutationVariables>(
    UserForgetPasswordMailSendDocument,
    options
  )
}
export type UserForgetPasswordMailSendMutationHookResult = ReturnType<typeof useUserForgetPasswordMailSendMutation>
export type UserForgetPasswordMailSendMutationResult = Apollo.MutationResult<UserForgetPasswordMailSendMutation>
export type UserForgetPasswordMailSendMutationOptions = Apollo.BaseMutationOptions<
  UserForgetPasswordMailSendMutation,
  UserForgetPasswordMailSendMutationVariables
>
export const UserPasswordResetDocument = gql`
  mutation userPasswordReset($input: UserPasswordResetInput!) {
    userPasswordReset(input: $input) {
      errors
    }
  }
`
export type UserPasswordResetMutationFn = Apollo.MutationFunction<UserPasswordResetMutation, UserPasswordResetMutationVariables>

/**
 * __useUserPasswordResetMutation__
 *
 * To run a mutation, you first call `useUserPasswordResetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserPasswordResetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userPasswordResetMutation, { data, loading, error }] = useUserPasswordResetMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserPasswordResetMutation(
  baseOptions?: Apollo.MutationHookOptions<UserPasswordResetMutation, UserPasswordResetMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserPasswordResetMutation, UserPasswordResetMutationVariables>(UserPasswordResetDocument, options)
}
export type UserPasswordResetMutationHookResult = ReturnType<typeof useUserPasswordResetMutation>
export type UserPasswordResetMutationResult = Apollo.MutationResult<UserPasswordResetMutation>
export type UserPasswordResetMutationOptions = Apollo.BaseMutationOptions<UserPasswordResetMutation, UserPasswordResetMutationVariables>
export const UserEmailPasswordSignInDocument = gql`
  mutation userEmailPasswordSignIn($input: UserEmailPasswordSignInInput!) {
    userEmailPasswordSignIn(input: $input) {
      errors
      redirectPath
    }
  }
`
export type UserEmailPasswordSignInMutationFn = Apollo.MutationFunction<
  UserEmailPasswordSignInMutation,
  UserEmailPasswordSignInMutationVariables
>

/**
 * __useUserEmailPasswordSignInMutation__
 *
 * To run a mutation, you first call `useUserEmailPasswordSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserEmailPasswordSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userEmailPasswordSignInMutation, { data, loading, error }] = useUserEmailPasswordSignInMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserEmailPasswordSignInMutation(
  baseOptions?: Apollo.MutationHookOptions<UserEmailPasswordSignInMutation, UserEmailPasswordSignInMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserEmailPasswordSignInMutation, UserEmailPasswordSignInMutationVariables>(
    UserEmailPasswordSignInDocument,
    options
  )
}
export type UserEmailPasswordSignInMutationHookResult = ReturnType<typeof useUserEmailPasswordSignInMutation>
export type UserEmailPasswordSignInMutationResult = Apollo.MutationResult<UserEmailPasswordSignInMutation>
export type UserEmailPasswordSignInMutationOptions = Apollo.BaseMutationOptions<
  UserEmailPasswordSignInMutation,
  UserEmailPasswordSignInMutationVariables
>
export const GetFederatedIdentitySessionDocument = gql`
  query GetFederatedIdentitySession {
    federatedIdentitySession {
      hasSession
      webid
      name
      provider
    }
  }
`

/**
 * __useGetFederatedIdentitySessionQuery__
 *
 * To run a query within a React component, call `useGetFederatedIdentitySessionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFederatedIdentitySessionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFederatedIdentitySessionQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetFederatedIdentitySessionQuery(
  baseOptions?: Apollo.QueryHookOptions<GetFederatedIdentitySessionQuery, GetFederatedIdentitySessionQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetFederatedIdentitySessionQuery, GetFederatedIdentitySessionQueryVariables>(
    GetFederatedIdentitySessionDocument,
    options
  )
}
export function useGetFederatedIdentitySessionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetFederatedIdentitySessionQuery, GetFederatedIdentitySessionQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetFederatedIdentitySessionQuery, GetFederatedIdentitySessionQueryVariables>(
    GetFederatedIdentitySessionDocument,
    options
  )
}
export type GetFederatedIdentitySessionQueryHookResult = ReturnType<typeof useGetFederatedIdentitySessionQuery>
export type GetFederatedIdentitySessionLazyQueryHookResult = ReturnType<typeof useGetFederatedIdentitySessionLazyQuery>
export type GetFederatedIdentitySessionQueryResult = Apollo.QueryResult<
  GetFederatedIdentitySessionQuery,
  GetFederatedIdentitySessionQueryVariables
>
export const UserCreateDocument = gql`
  mutation userCreate($input: UserCreateInput!) {
    userCreate(input: $input) {
      errors
      redirectPath
      isUserActive
    }
  }
`
export type UserCreateMutationFn = Apollo.MutationFunction<UserCreateMutation, UserCreateMutationVariables>

/**
 * __useUserCreateMutation__
 *
 * To run a mutation, you first call `useUserCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userCreateMutation, { data, loading, error }] = useUserCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserCreateMutation(baseOptions?: Apollo.MutationHookOptions<UserCreateMutation, UserCreateMutationVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserCreateMutation, UserCreateMutationVariables>(UserCreateDocument, options)
}
export type UserCreateMutationHookResult = ReturnType<typeof useUserCreateMutation>
export type UserCreateMutationResult = Apollo.MutationResult<UserCreateMutation>
export type UserCreateMutationOptions = Apollo.BaseMutationOptions<UserCreateMutation, UserCreateMutationVariables>
export const UserConfirmationEmailResendDocument = gql`
  mutation userConfirmationEmailResend($input: UserConfirmationEmailResendInput!) {
    userConfirmationEmailResend(input: $input) {
      errors
    }
  }
`
export type UserConfirmationEmailResendMutationFn = Apollo.MutationFunction<
  UserConfirmationEmailResendMutation,
  UserConfirmationEmailResendMutationVariables
>

/**
 * __useUserConfirmationEmailResendMutation__
 *
 * To run a mutation, you first call `useUserConfirmationEmailResendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserConfirmationEmailResendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userConfirmationEmailResendMutation, { data, loading, error }] = useUserConfirmationEmailResendMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserConfirmationEmailResendMutation(
  baseOptions?: Apollo.MutationHookOptions<UserConfirmationEmailResendMutation, UserConfirmationEmailResendMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserConfirmationEmailResendMutation, UserConfirmationEmailResendMutationVariables>(
    UserConfirmationEmailResendDocument,
    options
  )
}
export type UserConfirmationEmailResendMutationHookResult = ReturnType<typeof useUserConfirmationEmailResendMutation>
export type UserConfirmationEmailResendMutationResult = Apollo.MutationResult<UserConfirmationEmailResendMutation>
export type UserConfirmationEmailResendMutationOptions = Apollo.BaseMutationOptions<
  UserConfirmationEmailResendMutation,
  UserConfirmationEmailResendMutationVariables
>
export const QueryWebidAvailableFromWsDocument = gql`
  query QueryWebidAvailableFromWS($webid: String!) {
    webidAvailable(webid: $webid)
  }
`

/**
 * __useQueryWebidAvailableFromWsQuery__
 *
 * To run a query within a React component, call `useQueryWebidAvailableFromWsQuery` and pass it any options that fit your needs.
 * When your component renders, `useQueryWebidAvailableFromWsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQueryWebidAvailableFromWsQuery({
 *   variables: {
 *      webid: // value for 'webid'
 *   },
 * });
 */
export function useQueryWebidAvailableFromWsQuery(
  baseOptions: Apollo.QueryHookOptions<QueryWebidAvailableFromWsQuery, QueryWebidAvailableFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QueryWebidAvailableFromWsQuery, QueryWebidAvailableFromWsQueryVariables>(
    QueryWebidAvailableFromWsDocument,
    options
  )
}
export function useQueryWebidAvailableFromWsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<QueryWebidAvailableFromWsQuery, QueryWebidAvailableFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QueryWebidAvailableFromWsQuery, QueryWebidAvailableFromWsQueryVariables>(
    QueryWebidAvailableFromWsDocument,
    options
  )
}
export type QueryWebidAvailableFromWsQueryHookResult = ReturnType<typeof useQueryWebidAvailableFromWsQuery>
export type QueryWebidAvailableFromWsLazyQueryHookResult = ReturnType<typeof useQueryWebidAvailableFromWsLazyQuery>
export type QueryWebidAvailableFromWsQueryResult = Apollo.QueryResult<
  QueryWebidAvailableFromWsQuery,
  QueryWebidAvailableFromWsQueryVariables
>
export const GetAvailableLocalesFromWsDocument = gql`
  query GetAvailableLocalesFromWS {
    metadata {
      id
      availableLocales {
        label
        value
      }
    }
  }
`

/**
 * __useGetAvailableLocalesFromWsQuery__
 *
 * To run a query within a React component, call `useGetAvailableLocalesFromWsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAvailableLocalesFromWsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAvailableLocalesFromWsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAvailableLocalesFromWsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetAvailableLocalesFromWsQuery, GetAvailableLocalesFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAvailableLocalesFromWsQuery, GetAvailableLocalesFromWsQueryVariables>(
    GetAvailableLocalesFromWsDocument,
    options
  )
}
export function useGetAvailableLocalesFromWsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetAvailableLocalesFromWsQuery, GetAvailableLocalesFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAvailableLocalesFromWsQuery, GetAvailableLocalesFromWsQueryVariables>(
    GetAvailableLocalesFromWsDocument,
    options
  )
}
export type GetAvailableLocalesFromWsQueryHookResult = ReturnType<typeof useGetAvailableLocalesFromWsQuery>
export type GetAvailableLocalesFromWsLazyQueryHookResult = ReturnType<typeof useGetAvailableLocalesFromWsLazyQuery>
export type GetAvailableLocalesFromWsQueryResult = Apollo.QueryResult<
  GetAvailableLocalesFromWsQuery,
  GetAvailableLocalesFromWsQueryVariables
>
export const GetPodsDocument = gql`
  query GetPods {
    pods {
      id
      webid
      name
      avatar
    }
  }
`

/**
 * __useGetPodsQuery__
 *
 * To run a query within a React component, call `useGetPodsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPodsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPodsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPodsQuery(baseOptions?: Apollo.QueryHookOptions<GetPodsQuery, GetPodsQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetPodsQuery, GetPodsQueryVariables>(GetPodsDocument, options)
}
export function useGetPodsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPodsQuery, GetPodsQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetPodsQuery, GetPodsQueryVariables>(GetPodsDocument, options)
}
export type GetPodsQueryHookResult = ReturnType<typeof useGetPodsQuery>
export type GetPodsLazyQueryHookResult = ReturnType<typeof useGetPodsLazyQuery>
export type GetPodsQueryResult = Apollo.QueryResult<GetPodsQuery, GetPodsQueryVariables>
export const GetPageBlocksDocument = gql`
  query GetPageBlocks($webid: String!) {
    pageBlocks(webid: $webid) {
      id
      parentId
      data {
        title
      }
      sort
    }
  }
`

/**
 * __useGetPageBlocksQuery__
 *
 * To run a query within a React component, call `useGetPageBlocksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPageBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPageBlocksQuery({
 *   variables: {
 *      webid: // value for 'webid'
 *   },
 * });
 */
export function useGetPageBlocksQuery(baseOptions: Apollo.QueryHookOptions<GetPageBlocksQuery, GetPageBlocksQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetPageBlocksQuery, GetPageBlocksQueryVariables>(GetPageBlocksDocument, options)
}
export function useGetPageBlocksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPageBlocksQuery, GetPageBlocksQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetPageBlocksQuery, GetPageBlocksQueryVariables>(GetPageBlocksDocument, options)
}
export type GetPageBlocksQueryHookResult = ReturnType<typeof useGetPageBlocksQuery>
export type GetPageBlocksLazyQueryHookResult = ReturnType<typeof useGetPageBlocksLazyQuery>
export type GetPageBlocksQueryResult = Apollo.QueryResult<GetPageBlocksQuery, GetPageBlocksQueryVariables>
export const GetBlockSnapshotsDocument = gql`
  query GetBlockSnapshots($id: String!) {
    blockSnapshots(id: $id) {
      id
      snapshotVersion
      name
    }
  }
`

/**
 * __useGetBlockSnapshotsQuery__
 *
 * To run a query within a React component, call `useGetBlockSnapshotsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBlockSnapshotsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBlockSnapshotsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBlockSnapshotsQuery(baseOptions: Apollo.QueryHookOptions<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>(GetBlockSnapshotsDocument, options)
}
export function useGetBlockSnapshotsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>(GetBlockSnapshotsDocument, options)
}
export type GetBlockSnapshotsQueryHookResult = ReturnType<typeof useGetBlockSnapshotsQuery>
export type GetBlockSnapshotsLazyQueryHookResult = ReturnType<typeof useGetBlockSnapshotsLazyQuery>
export type GetBlockSnapshotsQueryResult = Apollo.QueryResult<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>
export const GetBlockHistoriesDocument = gql`
  query GetBlockHistories($id: String!) {
    blockHistories(id: $id) {
      id
      historyVersion
    }
  }
`

/**
 * __useGetBlockHistoriesQuery__
 *
 * To run a query within a React component, call `useGetBlockHistoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBlockHistoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBlockHistoriesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBlockHistoriesQuery(baseOptions: Apollo.QueryHookOptions<GetBlockHistoriesQuery, GetBlockHistoriesQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetBlockHistoriesQuery, GetBlockHistoriesQueryVariables>(GetBlockHistoriesDocument, options)
}
export function useGetBlockHistoriesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBlockHistoriesQuery, GetBlockHistoriesQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetBlockHistoriesQuery, GetBlockHistoriesQueryVariables>(GetBlockHistoriesDocument, options)
}
export type GetBlockHistoriesQueryHookResult = ReturnType<typeof useGetBlockHistoriesQuery>
export type GetBlockHistoriesLazyQueryHookResult = ReturnType<typeof useGetBlockHistoriesLazyQuery>
export type GetBlockHistoriesQueryResult = Apollo.QueryResult<GetBlockHistoriesQuery, GetBlockHistoriesQueryVariables>
export const BlockDeleteDocument = gql`
  mutation blockDelete($input: BlockDeleteInput!) {
    blockDelete(input: $input) {
      errors
    }
  }
`
export type BlockDeleteMutationFn = Apollo.MutationFunction<BlockDeleteMutation, BlockDeleteMutationVariables>

/**
 * __useBlockDeleteMutation__
 *
 * To run a mutation, you first call `useBlockDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockDeleteMutation, { data, loading, error }] = useBlockDeleteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockDeleteMutation(baseOptions?: Apollo.MutationHookOptions<BlockDeleteMutation, BlockDeleteMutationVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockDeleteMutation, BlockDeleteMutationVariables>(BlockDeleteDocument, options)
}
export type BlockDeleteMutationHookResult = ReturnType<typeof useBlockDeleteMutation>
export type BlockDeleteMutationResult = Apollo.MutationResult<BlockDeleteMutation>
export type BlockDeleteMutationOptions = Apollo.BaseMutationOptions<BlockDeleteMutation, BlockDeleteMutationVariables>
export const BlockCreateSnapshotDocument = gql`
  mutation blockCreateSnapshot($input: BlockCreateSnapshotInput!) {
    blockCreateSnapshot(input: $input) {
      errors
    }
  }
`
export type BlockCreateSnapshotMutationFn = Apollo.MutationFunction<BlockCreateSnapshotMutation, BlockCreateSnapshotMutationVariables>

/**
 * __useBlockCreateSnapshotMutation__
 *
 * To run a mutation, you first call `useBlockCreateSnapshotMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockCreateSnapshotMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockCreateSnapshotMutation, { data, loading, error }] = useBlockCreateSnapshotMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockCreateSnapshotMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockCreateSnapshotMutation, BlockCreateSnapshotMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockCreateSnapshotMutation, BlockCreateSnapshotMutationVariables>(BlockCreateSnapshotDocument, options)
}
export type BlockCreateSnapshotMutationHookResult = ReturnType<typeof useBlockCreateSnapshotMutation>
export type BlockCreateSnapshotMutationResult = Apollo.MutationResult<BlockCreateSnapshotMutation>
export type BlockCreateSnapshotMutationOptions = Apollo.BaseMutationOptions<
  BlockCreateSnapshotMutation,
  BlockCreateSnapshotMutationVariables
>
export const BlockSyncDocument = gql`
  mutation blockSync($input: BlockSyncInput!) {
    blockSync(input: $input) {
      errors
    }
  }
`
export type BlockSyncMutationFn = Apollo.MutationFunction<BlockSyncMutation, BlockSyncMutationVariables>

/**
 * __useBlockSyncMutation__
 *
 * To run a mutation, you first call `useBlockSyncMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockSyncMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockSyncMutation, { data, loading, error }] = useBlockSyncMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockSyncMutation(baseOptions?: Apollo.MutationHookOptions<BlockSyncMutation, BlockSyncMutationVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockSyncMutation, BlockSyncMutationVariables>(BlockSyncDocument, options)
}
export type BlockSyncMutationHookResult = ReturnType<typeof useBlockSyncMutation>
export type BlockSyncMutationResult = Apollo.MutationResult<BlockSyncMutation>
export type BlockSyncMutationOptions = Apollo.BaseMutationOptions<BlockSyncMutation, BlockSyncMutationVariables>
export const BlockSyncBatchDocument = gql`
  mutation blockSyncBatch($input: BlockSyncBatchInput!) {
    blockSyncBatch(input: $input) {
      errors
    }
  }
`
export type BlockSyncBatchMutationFn = Apollo.MutationFunction<BlockSyncBatchMutation, BlockSyncBatchMutationVariables>

/**
 * __useBlockSyncBatchMutation__
 *
 * To run a mutation, you first call `useBlockSyncBatchMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockSyncBatchMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockSyncBatchMutation, { data, loading, error }] = useBlockSyncBatchMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockSyncBatchMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockSyncBatchMutation, BlockSyncBatchMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockSyncBatchMutation, BlockSyncBatchMutationVariables>(BlockSyncBatchDocument, options)
}
export type BlockSyncBatchMutationHookResult = ReturnType<typeof useBlockSyncBatchMutation>
export type BlockSyncBatchMutationResult = Apollo.MutationResult<BlockSyncBatchMutation>
export type BlockSyncBatchMutationOptions = Apollo.BaseMutationOptions<BlockSyncBatchMutation, BlockSyncBatchMutationVariables>
export const GetChildrenBlocksDocument = gql`
  query GetChildrenBlocks($parentId: String!, $excludePages: Boolean!, $snapshotVersion: Int!) {
    __typename
    childrenBlocks(parentId: $parentId, excludePages: $excludePages, snapshotVersion: $snapshotVersion) {
      ... on MetaBlock {
        id
        sort
        parentId
        type
        meta {
          attrs
          marks
        }
      }
      ... on PageBlock {
        id
        sort
        parentId
        type
        data {
          title
        }
        meta {
          icon
          cover
          attrs
        }
      }
      ... on ParagraphBlock {
        id
        sort
        parentId
        type
        data {
          title
        }
        meta {
          attrs
        }
      }
      ... on TextBlock {
        id
        sort
        parentId
        type
        data {
          content
        }
        meta {
          marks
          attrs
        }
      }
    }
  }
`

/**
 * __useGetChildrenBlocksQuery__
 *
 * To run a query within a React component, call `useGetChildrenBlocksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChildrenBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChildrenBlocksQuery({
 *   variables: {
 *      parentId: // value for 'parentId'
 *      excludePages: // value for 'excludePages'
 *      snapshotVersion: // value for 'snapshotVersion'
 *   },
 * });
 */
export function useGetChildrenBlocksQuery(baseOptions: Apollo.QueryHookOptions<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>(GetChildrenBlocksDocument, options)
}
export function useGetChildrenBlocksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>(GetChildrenBlocksDocument, options)
}
export type GetChildrenBlocksQueryHookResult = ReturnType<typeof useGetChildrenBlocksQuery>
export type GetChildrenBlocksLazyQueryHookResult = ReturnType<typeof useGetChildrenBlocksLazyQuery>
export type GetChildrenBlocksQueryResult = Apollo.QueryResult<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>
