# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class AbstractController::ActionNotFound
  include ::DidYouMean::Correctable
  def action(); end

  def controller(); end

  def initialize(message=T.unsafe(nil), controller=T.unsafe(nil), action=T.unsafe(nil)); end
end

class AbstractController::ActionNotFound
end

module AbstractController::AssetPaths
  extend ::ActiveSupport::Concern
end

class AbstractController::Base
  include ::ActiveSupport::Configurable
  def action_methods(); end

  def action_name(); end

  def action_name=(action_name); end

  def available_action?(action_name); end

  def controller_path(); end

  def formats(); end

  def formats=(formats); end

  def performed?(); end

  def process(action, *args, **arg); end

  def response_body(); end

  def response_body=(response_body); end

  def send_action(*arg); end
end

class AbstractController::Base
  extend ::ActiveSupport::DescendantsTracker
  def self.abstract(); end

  def self.abstract!(); end

  def self.abstract?(); end

  def self.action_methods(); end

  def self.clear_action_methods!(); end

  def self.controller_path(); end

  def self.inherited(klass); end

  def self.internal_methods(); end

  def self.method_added(name); end

  def self.supports_path?(); end
end

module AbstractController::Caching
  include ::AbstractController::Caching::ConfigMethods
  def view_cache_dependencies(); end
end

module AbstractController::Caching::ClassMethods
  def view_cache_dependency(&dependency); end
end

module AbstractController::Caching::ClassMethods
end

module AbstractController::Caching::ConfigMethods
  def cache_store(); end

  def cache_store=(store); end
end

module AbstractController::Caching::ConfigMethods
end

module AbstractController::Caching::Fragments
  def combined_fragment_cache_key(key); end

  def expire_fragment(key, options=T.unsafe(nil)); end

  def fragment_exist?(key, options=T.unsafe(nil)); end

  def instrument_fragment_cache(name, key, &block); end

  def read_fragment(key, options=T.unsafe(nil)); end

  def write_fragment(key, content, options=T.unsafe(nil)); end
end

module AbstractController::Caching::Fragments::ClassMethods
  def fragment_cache_key(value=T.unsafe(nil), &key); end
end

module AbstractController::Caching::Fragments::ClassMethods
end

module AbstractController::Caching::Fragments
  extend ::ActiveSupport::Concern
end

module AbstractController::Caching
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
end

module AbstractController::Callbacks
end

class AbstractController::Callbacks::ActionFilter
  def after(controller); end

  def around(controller); end

  def before(controller); end

  def initialize(actions); end

  def match?(controller); end
end

class AbstractController::Callbacks::ActionFilter
end

module AbstractController::Callbacks::ClassMethods
  def _insert_callbacks(callbacks, block=T.unsafe(nil)); end

  def _normalize_callback_option(options, from, to); end

  def _normalize_callback_options(options); end

  def after_action(*names, &blk); end

  def append_after_action(*names, &blk); end

  def append_around_action(*names, &blk); end

  def append_before_action(*names, &blk); end

  def around_action(*names, &blk); end

  def before_action(*names, &blk); end

  def prepend_after_action(*names, &blk); end

  def prepend_around_action(*names, &blk); end

  def prepend_before_action(*names, &blk); end

  def skip_after_action(*names); end

  def skip_around_action(*names); end

  def skip_before_action(*names); end
end

module AbstractController::Callbacks::ClassMethods
end

module AbstractController::Callbacks
  extend ::ActiveSupport::Concern
end

module AbstractController::Collector
  def atom(*args, **arg, &block); end

  def bmp(*args, **arg, &block); end

  def css(*args, **arg, &block); end

  def csv(*args, **arg, &block); end

  def gif(*args, **arg, &block); end

  def gzip(*args, **arg, &block); end

  def html(*args, **arg, &block); end

  def ics(*args, **arg, &block); end

  def jpeg(*args, **arg, &block); end

  def js(*args, **arg, &block); end

  def json(*args, **arg, &block); end

  def m4a(*args, **arg, &block); end

  def mp3(*args, **arg, &block); end

  def mp4(*args, **arg, &block); end

  def mpeg(*args, **arg, &block); end

  def multipart_form(*args, **arg, &block); end

  def ogg(*args, **arg, &block); end

  def otf(*args, **arg, &block); end

  def pdf(*args, **arg, &block); end

  def png(*args, **arg, &block); end

  def rss(*args, **arg, &block); end

  def svg(*args, **arg, &block); end

  def text(*args, **arg, &block); end

  def tiff(*args, **arg, &block); end

  def ttf(*args, **arg, &block); end

  def url_encoded_form(*args, **arg, &block); end

  def vcf(*args, **arg, &block); end

  def vtt(*args, **arg, &block); end

  def webm(*args, **arg, &block); end

  def woff(*args, **arg, &block); end

  def woff2(*args, **arg, &block); end

  def xml(*args, **arg, &block); end

  def yaml(*args, **arg, &block); end

  def zip(*args, **arg, &block); end
end

module AbstractController::Collector
  def self.generate_method_for_mime(mime); end
end

class AbstractController::DoubleRenderError
  def initialize(message=T.unsafe(nil)); end
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

class AbstractController::DoubleRenderError
end

class AbstractController::Error
end

class AbstractController::Error
end

module AbstractController::Helpers
  def _helpers(); end
end

module AbstractController::Helpers::ClassMethods
  def _helpers=(_helpers); end

  def _helpers_for_modification(); end

  def clear_helpers(); end

  def helper(*args, &block); end

  def helper_method(*methods); end

  def inherited(klass); end

  def modules_for_helpers(modules_or_helper_prefixes); end
end

module AbstractController::Helpers::ClassMethods
end

class AbstractController::Helpers::MissingHelperError
  def initialize(error, path); end
end

class AbstractController::Helpers::MissingHelperError
end

module AbstractController::Helpers
  extend ::ActiveSupport::Concern
end

module AbstractController::Logger
  extend ::ActiveSupport::Concern
end

module AbstractController::Railties
end

module AbstractController::Railties::RoutesHelpers
end

module AbstractController::Railties::RoutesHelpers
  def self.with(routes, include_path_helpers=T.unsafe(nil)); end
end

module AbstractController::Railties
end

module AbstractController::Rendering
  def render(*args, &block); end

  def render_to_body(options=T.unsafe(nil)); end

  def render_to_string(*args, &block); end

  def rendered_format(); end

  def view_assigns(); end
  DEFAULT_PROTECTED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module AbstractController::Rendering
  extend ::ActiveSupport::Concern
end

module AbstractController::Translation
  def l(object, **options); end

  def localize(object, **options); end

  def raise_on_missing_translations(); end

  def raise_on_missing_translations=(val); end

  def t(key, **options); end

  def translate(key, **options); end
end

module AbstractController::Translation
  def self.raise_on_missing_translations(); end

  def self.raise_on_missing_translations=(val); end
end

module AbstractController::UrlFor
  def _routes(); end
end

module AbstractController::UrlFor::ClassMethods
  def _routes(); end

  def action_methods(); end
end

module AbstractController::UrlFor::ClassMethods
end

module AbstractController::UrlFor
  extend ::ActiveSupport::Concern
end

module AbstractController
  extend ::ActiveSupport::Autoload
end

class Accounts::Enums::AuthMethod::UnresolvedValueError
end

class Accounts::Enums::AuthMethod::UnresolvedValueError
end

class Accounts::FederatedIdentity
  include ::Accounts::FederatedIdentity::GeneratedAttributeMethods
  include ::Accounts::FederatedIdentity::GeneratedAssociationMethods
  include ::SecondLevelCache::ActiveRecord::Core
  def autosave_associated_records_for_user(*args); end
end

module Accounts::FederatedIdentity::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_user(); end

  def user(); end

  def user=(value); end

  def user_changed?(); end

  def user_previously_changed?(); end
end

module Accounts::FederatedIdentity::GeneratedAssociationMethods
end

module Accounts::FederatedIdentity::GeneratedAttributeMethods
end

module Accounts::FederatedIdentity::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Accounts::Member
  include ::Accounts::Member::GeneratedAttributeMethods
  include ::Accounts::Member::GeneratedAssociationMethods
  def autosave_associated_records_for_space(*args); end

  def autosave_associated_records_for_user(*args); end
end

module Accounts::Member::GeneratedAssociationMethods
  def build_space(*args, &block); end

  def build_user(*args, &block); end

  def create_space(*args, &block); end

  def create_space!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_space(); end

  def reload_user(); end

  def space(); end

  def space=(value); end

  def space_changed?(); end

  def space_previously_changed?(); end

  def user(); end

  def user=(value); end

  def user_changed?(); end

  def user_previously_changed?(); end
end

module Accounts::Member::GeneratedAssociationMethods
end

module Accounts::Member::GeneratedAttributeMethods
end

module Accounts::Member::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Accounts::Member
  def self.admin(*args, **arg); end

  def self.disabled(*args, **arg); end

  def self.enabled(*args, **arg); end

  def self.member(*args, **arg); end

  def self.not_admin(*args, **arg); end

  def self.not_disabled(*args, **arg); end

  def self.not_enabled(*args, **arg); end

  def self.not_member(*args, **arg); end

  def self.roles(); end

  def self.states(); end
end

class Accounts::Mutations::UserAppearanceUpdate
  def load_locale(value, _context=T.unsafe(nil)); end

  def load_timezone(value, _context=T.unsafe(nil)); end
end

class Accounts::Mutations::UserConfirmationEmailResend
  def load_email(value, _context=T.unsafe(nil)); end
end

class Accounts::Mutations::UserCreate
  def load_domain(value, _context=T.unsafe(nil)); end

  def load_email(value, _context=T.unsafe(nil)); end

  def load_locale(value, _context=T.unsafe(nil)); end

  def load_name(value, _context=T.unsafe(nil)); end

  def load_password(value, _context=T.unsafe(nil)); end

  def load_timezone(value, _context=T.unsafe(nil)); end
end

class Accounts::Mutations::UserEmailPasswordSignIn
  def load_email(value, _context=T.unsafe(nil)); end

  def load_password(value, _context=T.unsafe(nil)); end

  def load_remember(value, _context=T.unsafe(nil)); end
end

class Accounts::Mutations::UserForgetPasswordMailSend
  def load_email(value, _context=T.unsafe(nil)); end
end

class Accounts::Mutations::UserPasswordReset
  def load_password(value, _context=T.unsafe(nil)); end

  def load_token(value, _context=T.unsafe(nil)); end
end

class Accounts::User
  include ::Accounts::User::GeneratedAttributeMethods
  include ::Accounts::User::GeneratedAssociationMethods
  include ::Paranoia
  include ::Devise::Models::Authenticatable
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor
  include ::Devise::Models::DatabaseAuthenticatable
  include ::Devise::Models::Rememberable
  include ::Devise::Models::Omniauthable
  include ::Devise::Models::Recoverable
  include ::Devise::Models::Registerable
  include ::Devise::Models::Validatable
  include ::Devise::Models::Confirmable
  include ::Devise::Models::Lockable
  include ::Devise::Models::Trackable
  include ::Devise::Models::Async
  include ::DefaultValueFor::InstanceMethods
  def _default_attribute_values(); end

  def _default_attribute_values=(_default_attribute_values); end

  def _default_attribute_values?(); end

  def _default_attribute_values_not_allowing_nil(); end

  def _default_attribute_values_not_allowing_nil=(_default_attribute_values_not_allowing_nil); end

  def _default_attribute_values_not_allowing_nil?(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def autosave_associated_records_for_federated_identities(*args); end

  def autosave_associated_records_for_members(*args); end

  def autosave_associated_records_for_own_spaces(*args); end

  def autosave_associated_records_for_personal_space(*args); end

  def autosave_associated_records_for_spaces(*args); end

  def autosave_associated_records_for_stafftools_role_assignments(*args); end

  def autosave_associated_records_for_stafftools_roles(*args); end

  def current_password(); end

  def destroy_without_paranoia(); end

  def devise_modules(); end

  def devise_modules?(); end

  def paranoia_column=(paranoia_column); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(paranoia_sentinel_value); end

  def paranoia_sentinel_value?(); end

  def password(); end

  def password_confirmation(); end

  def password_confirmation=(password_confirmation); end

  def really_delete(); end

  def really_destroyed?(); end

  def validate_associated_records_for_federated_identities(*args); end

  def validate_associated_records_for_members(*args); end

  def validate_associated_records_for_own_spaces(*args); end

  def validate_associated_records_for_personal_space(*args); end

  def validate_associated_records_for_spaces(*args); end

  def validate_associated_records_for_stafftools_role_assignments(*args); end

  def validate_associated_records_for_stafftools_roles(*args); end
end

module Accounts::User::GeneratedAssociationMethods
  def build_personal_space(*args, &block); end

  def create_personal_space(*args, &block); end

  def create_personal_space!(*args, &block); end

  def federated_identities(); end

  def federated_identities=(value); end

  def federated_identity_ids(); end

  def federated_identity_ids=(ids); end

  def member_ids(); end

  def member_ids=(ids); end

  def members(); end

  def members=(value); end

  def own_space_ids(); end

  def own_space_ids=(ids); end

  def own_spaces(); end

  def own_spaces=(value); end

  def personal_space(); end

  def personal_space=(value); end

  def reload_personal_space(); end

  def space_ids(); end

  def space_ids=(ids); end

  def spaces(); end

  def spaces=(value); end

  def stafftools_role_assignment_ids(); end

  def stafftools_role_assignment_ids=(ids); end

  def stafftools_role_assignments(); end

  def stafftools_role_assignments=(value); end

  def stafftools_role_ids(); end

  def stafftools_role_ids=(ids); end

  def stafftools_roles(); end

  def stafftools_roles=(value); end
end

module Accounts::User::GeneratedAssociationMethods
end

module Accounts::User::GeneratedAttributeMethods
  def clear_confirmation_sent_at_change(); end

  def clear_confirmation_token_change(); end

  def clear_confirmed_at_change(); end

  def clear_created_at_change(); end

  def clear_current_sign_in_at_change(); end

  def clear_current_sign_in_ip_change(); end

  def clear_current_space_cache_change(); end

  def clear_current_space_id_change(); end

  def clear_deleted_at_change(); end

  def clear_email_change(); end

  def clear_encrypted_password_change(); end

  def clear_failed_attempts_change(); end

  def clear_id_change(); end

  def clear_last_block_ids_change(); end

  def clear_last_sign_in_at_change(); end

  def clear_last_sign_in_ip_change(); end

  def clear_last_space_domain_change(); end

  def clear_locale_change(); end

  def clear_locked_at_change(); end

  def clear_remember_created_at_change(); end

  def clear_reset_password_sent_at_change(); end

  def clear_reset_password_token_change(); end

  def clear_sign_in_count_change(); end

  def clear_timezone_change(); end

  def clear_unconfirmed_email_change(); end

  def clear_unlock_token_change(); end

  def clear_updated_at_change(); end

  def confirmation_sent_at(); end

  def confirmation_sent_at=(value); end

  def confirmation_sent_at?(); end

  def confirmation_sent_at_before_last_save(); end

  def confirmation_sent_at_before_type_cast(); end

  def confirmation_sent_at_came_from_user?(); end

  def confirmation_sent_at_change(); end

  def confirmation_sent_at_change_to_be_saved(); end

  def confirmation_sent_at_changed?(**options); end

  def confirmation_sent_at_for_database(); end

  def confirmation_sent_at_in_database(); end

  def confirmation_sent_at_previous_change(); end

  def confirmation_sent_at_previously_changed?(**options); end

  def confirmation_sent_at_previously_was(); end

  def confirmation_sent_at_was(); end

  def confirmation_sent_at_will_change!(); end

  def confirmation_token(); end

  def confirmation_token=(value); end

  def confirmation_token?(); end

  def confirmation_token_before_last_save(); end

  def confirmation_token_before_type_cast(); end

  def confirmation_token_came_from_user?(); end

  def confirmation_token_change(); end

  def confirmation_token_change_to_be_saved(); end

  def confirmation_token_changed?(**options); end

  def confirmation_token_for_database(); end

  def confirmation_token_in_database(); end

  def confirmation_token_previous_change(); end

  def confirmation_token_previously_changed?(**options); end

  def confirmation_token_previously_was(); end

  def confirmation_token_was(); end

  def confirmation_token_will_change!(); end

  def confirmed_at(); end

  def confirmed_at=(value); end

  def confirmed_at?(); end

  def confirmed_at_before_last_save(); end

  def confirmed_at_before_type_cast(); end

  def confirmed_at_came_from_user?(); end

  def confirmed_at_change(); end

  def confirmed_at_change_to_be_saved(); end

  def confirmed_at_changed?(**options); end

  def confirmed_at_for_database(); end

  def confirmed_at_in_database(); end

  def confirmed_at_previous_change(); end

  def confirmed_at_previously_changed?(**options); end

  def confirmed_at_previously_was(); end

  def confirmed_at_was(); end

  def confirmed_at_will_change!(); end

  def created_at(); end

  def created_at=(value); end

  def created_at?(); end

  def created_at_before_last_save(); end

  def created_at_before_type_cast(); end

  def created_at_came_from_user?(); end

  def created_at_change(); end

  def created_at_change_to_be_saved(); end

  def created_at_changed?(**options); end

  def created_at_for_database(); end

  def created_at_in_database(); end

  def created_at_previous_change(); end

  def created_at_previously_changed?(**options); end

  def created_at_previously_was(); end

  def created_at_was(); end

  def created_at_will_change!(); end

  def current_sign_in_at(); end

  def current_sign_in_at=(value); end

  def current_sign_in_at?(); end

  def current_sign_in_at_before_last_save(); end

  def current_sign_in_at_before_type_cast(); end

  def current_sign_in_at_came_from_user?(); end

  def current_sign_in_at_change(); end

  def current_sign_in_at_change_to_be_saved(); end

  def current_sign_in_at_changed?(**options); end

  def current_sign_in_at_for_database(); end

  def current_sign_in_at_in_database(); end

  def current_sign_in_at_previous_change(); end

  def current_sign_in_at_previously_changed?(**options); end

  def current_sign_in_at_previously_was(); end

  def current_sign_in_at_was(); end

  def current_sign_in_at_will_change!(); end

  def current_sign_in_ip(); end

  def current_sign_in_ip=(value); end

  def current_sign_in_ip?(); end

  def current_sign_in_ip_before_last_save(); end

  def current_sign_in_ip_before_type_cast(); end

  def current_sign_in_ip_came_from_user?(); end

  def current_sign_in_ip_change(); end

  def current_sign_in_ip_change_to_be_saved(); end

  def current_sign_in_ip_changed?(**options); end

  def current_sign_in_ip_for_database(); end

  def current_sign_in_ip_in_database(); end

  def current_sign_in_ip_previous_change(); end

  def current_sign_in_ip_previously_changed?(**options); end

  def current_sign_in_ip_previously_was(); end

  def current_sign_in_ip_was(); end

  def current_sign_in_ip_will_change!(); end

  def current_space_cache(); end

  def current_space_cache=(value); end

  def current_space_cache?(); end

  def current_space_cache_before_last_save(); end

  def current_space_cache_before_type_cast(); end

  def current_space_cache_came_from_user?(); end

  def current_space_cache_change(); end

  def current_space_cache_change_to_be_saved(); end

  def current_space_cache_changed?(**options); end

  def current_space_cache_for_database(); end

  def current_space_cache_in_database(); end

  def current_space_cache_previous_change(); end

  def current_space_cache_previously_changed?(**options); end

  def current_space_cache_previously_was(); end

  def current_space_cache_was(); end

  def current_space_cache_will_change!(); end

  def current_space_id(); end

  def current_space_id=(value); end

  def current_space_id?(); end

  def current_space_id_before_last_save(); end

  def current_space_id_before_type_cast(); end

  def current_space_id_came_from_user?(); end

  def current_space_id_change(); end

  def current_space_id_change_to_be_saved(); end

  def current_space_id_changed?(**options); end

  def current_space_id_for_database(); end

  def current_space_id_in_database(); end

  def current_space_id_previous_change(); end

  def current_space_id_previously_changed?(**options); end

  def current_space_id_previously_was(); end

  def current_space_id_was(); end

  def current_space_id_will_change!(); end

  def deleted_at(); end

  def deleted_at=(value); end

  def deleted_at?(); end

  def deleted_at_before_last_save(); end

  def deleted_at_before_type_cast(); end

  def deleted_at_came_from_user?(); end

  def deleted_at_change(); end

  def deleted_at_change_to_be_saved(); end

  def deleted_at_changed?(**options); end

  def deleted_at_for_database(); end

  def deleted_at_in_database(); end

  def deleted_at_previous_change(); end

  def deleted_at_previously_changed?(**options); end

  def deleted_at_previously_was(); end

  def deleted_at_was(); end

  def deleted_at_will_change!(); end

  def email(); end

  def email=(value); end

  def email?(); end

  def email_before_last_save(); end

  def email_before_type_cast(); end

  def email_came_from_user?(); end

  def email_change(); end

  def email_change_to_be_saved(); end

  def email_changed?(**options); end

  def email_for_database(); end

  def email_in_database(); end

  def email_previous_change(); end

  def email_previously_changed?(**options); end

  def email_previously_was(); end

  def email_was(); end

  def email_will_change!(); end

  def encrypted_password(); end

  def encrypted_password=(value); end

  def encrypted_password?(); end

  def encrypted_password_before_last_save(); end

  def encrypted_password_before_type_cast(); end

  def encrypted_password_came_from_user?(); end

  def encrypted_password_change(); end

  def encrypted_password_change_to_be_saved(); end

  def encrypted_password_changed?(**options); end

  def encrypted_password_for_database(); end

  def encrypted_password_in_database(); end

  def encrypted_password_previous_change(); end

  def encrypted_password_previously_changed?(**options); end

  def encrypted_password_previously_was(); end

  def encrypted_password_was(); end

  def encrypted_password_will_change!(); end

  def failed_attempts(); end

  def failed_attempts=(value); end

  def failed_attempts?(); end

  def failed_attempts_before_last_save(); end

  def failed_attempts_before_type_cast(); end

  def failed_attempts_came_from_user?(); end

  def failed_attempts_change(); end

  def failed_attempts_change_to_be_saved(); end

  def failed_attempts_changed?(**options); end

  def failed_attempts_for_database(); end

  def failed_attempts_in_database(); end

  def failed_attempts_previous_change(); end

  def failed_attempts_previously_changed?(**options); end

  def failed_attempts_previously_was(); end

  def failed_attempts_was(); end

  def failed_attempts_will_change!(); end

  def id_before_last_save(); end

  def id_came_from_user?(); end

  def id_change(); end

  def id_change_to_be_saved(); end

  def id_changed?(**options); end

  def id_previous_change(); end

  def id_previously_changed?(**options); end

  def id_previously_was(); end

  def id_will_change!(); end

  def last_block_ids(); end

  def last_block_ids=(value); end

  def last_block_ids?(); end

  def last_block_ids_before_last_save(); end

  def last_block_ids_before_type_cast(); end

  def last_block_ids_came_from_user?(); end

  def last_block_ids_change(); end

  def last_block_ids_change_to_be_saved(); end

  def last_block_ids_changed?(**options); end

  def last_block_ids_for_database(); end

  def last_block_ids_in_database(); end

  def last_block_ids_previous_change(); end

  def last_block_ids_previously_changed?(**options); end

  def last_block_ids_previously_was(); end

  def last_block_ids_was(); end

  def last_block_ids_will_change!(); end

  def last_sign_in_at(); end

  def last_sign_in_at=(value); end

  def last_sign_in_at?(); end

  def last_sign_in_at_before_last_save(); end

  def last_sign_in_at_before_type_cast(); end

  def last_sign_in_at_came_from_user?(); end

  def last_sign_in_at_change(); end

  def last_sign_in_at_change_to_be_saved(); end

  def last_sign_in_at_changed?(**options); end

  def last_sign_in_at_for_database(); end

  def last_sign_in_at_in_database(); end

  def last_sign_in_at_previous_change(); end

  def last_sign_in_at_previously_changed?(**options); end

  def last_sign_in_at_previously_was(); end

  def last_sign_in_at_was(); end

  def last_sign_in_at_will_change!(); end

  def last_sign_in_ip(); end

  def last_sign_in_ip=(value); end

  def last_sign_in_ip?(); end

  def last_sign_in_ip_before_last_save(); end

  def last_sign_in_ip_before_type_cast(); end

  def last_sign_in_ip_came_from_user?(); end

  def last_sign_in_ip_change(); end

  def last_sign_in_ip_change_to_be_saved(); end

  def last_sign_in_ip_changed?(**options); end

  def last_sign_in_ip_for_database(); end

  def last_sign_in_ip_in_database(); end

  def last_sign_in_ip_previous_change(); end

  def last_sign_in_ip_previously_changed?(**options); end

  def last_sign_in_ip_previously_was(); end

  def last_sign_in_ip_was(); end

  def last_sign_in_ip_will_change!(); end

  def last_space_domain(); end

  def last_space_domain=(value); end

  def last_space_domain?(); end

  def last_space_domain_before_last_save(); end

  def last_space_domain_before_type_cast(); end

  def last_space_domain_came_from_user?(); end

  def last_space_domain_change(); end

  def last_space_domain_change_to_be_saved(); end

  def last_space_domain_changed?(**options); end

  def last_space_domain_for_database(); end

  def last_space_domain_in_database(); end

  def last_space_domain_previous_change(); end

  def last_space_domain_previously_changed?(**options); end

  def last_space_domain_previously_was(); end

  def last_space_domain_was(); end

  def last_space_domain_will_change!(); end

  def locale(); end

  def locale=(value); end

  def locale?(); end

  def locale_before_last_save(); end

  def locale_before_type_cast(); end

  def locale_came_from_user?(); end

  def locale_change(); end

  def locale_change_to_be_saved(); end

  def locale_changed?(**options); end

  def locale_for_database(); end

  def locale_in_database(); end

  def locale_previous_change(); end

  def locale_previously_changed?(**options); end

  def locale_previously_was(); end

  def locale_was(); end

  def locale_will_change!(); end

  def locked_at(); end

  def locked_at=(value); end

  def locked_at?(); end

  def locked_at_before_last_save(); end

  def locked_at_before_type_cast(); end

  def locked_at_came_from_user?(); end

  def locked_at_change(); end

  def locked_at_change_to_be_saved(); end

  def locked_at_changed?(**options); end

  def locked_at_for_database(); end

  def locked_at_in_database(); end

  def locked_at_previous_change(); end

  def locked_at_previously_changed?(**options); end

  def locked_at_previously_was(); end

  def locked_at_was(); end

  def locked_at_will_change!(); end

  def remember_created_at(); end

  def remember_created_at=(value); end

  def remember_created_at?(); end

  def remember_created_at_before_last_save(); end

  def remember_created_at_before_type_cast(); end

  def remember_created_at_came_from_user?(); end

  def remember_created_at_change(); end

  def remember_created_at_change_to_be_saved(); end

  def remember_created_at_changed?(**options); end

  def remember_created_at_for_database(); end

  def remember_created_at_in_database(); end

  def remember_created_at_previous_change(); end

  def remember_created_at_previously_changed?(**options); end

  def remember_created_at_previously_was(); end

  def remember_created_at_was(); end

  def remember_created_at_will_change!(); end

  def reset_password_sent_at(); end

  def reset_password_sent_at=(value); end

  def reset_password_sent_at?(); end

  def reset_password_sent_at_before_last_save(); end

  def reset_password_sent_at_before_type_cast(); end

  def reset_password_sent_at_came_from_user?(); end

  def reset_password_sent_at_change(); end

  def reset_password_sent_at_change_to_be_saved(); end

  def reset_password_sent_at_changed?(**options); end

  def reset_password_sent_at_for_database(); end

  def reset_password_sent_at_in_database(); end

  def reset_password_sent_at_previous_change(); end

  def reset_password_sent_at_previously_changed?(**options); end

  def reset_password_sent_at_previously_was(); end

  def reset_password_sent_at_was(); end

  def reset_password_sent_at_will_change!(); end

  def reset_password_token(); end

  def reset_password_token=(value); end

  def reset_password_token?(); end

  def reset_password_token_before_last_save(); end

  def reset_password_token_before_type_cast(); end

  def reset_password_token_came_from_user?(); end

  def reset_password_token_change(); end

  def reset_password_token_change_to_be_saved(); end

  def reset_password_token_changed?(**options); end

  def reset_password_token_for_database(); end

  def reset_password_token_in_database(); end

  def reset_password_token_previous_change(); end

  def reset_password_token_previously_changed?(**options); end

  def reset_password_token_previously_was(); end

  def reset_password_token_was(); end

  def reset_password_token_will_change!(); end

  def restore_confirmation_sent_at!(); end

  def restore_confirmation_token!(); end

  def restore_confirmed_at!(); end

  def restore_created_at!(); end

  def restore_current_sign_in_at!(); end

  def restore_current_sign_in_ip!(); end

  def restore_current_space_cache!(); end

  def restore_current_space_id!(); end

  def restore_deleted_at!(); end

  def restore_email!(); end

  def restore_encrypted_password!(); end

  def restore_failed_attempts!(); end

  def restore_id!(); end

  def restore_last_block_ids!(); end

  def restore_last_sign_in_at!(); end

  def restore_last_sign_in_ip!(); end

  def restore_last_space_domain!(); end

  def restore_locale!(); end

  def restore_locked_at!(); end

  def restore_remember_created_at!(); end

  def restore_reset_password_sent_at!(); end

  def restore_reset_password_token!(); end

  def restore_sign_in_count!(); end

  def restore_timezone!(); end

  def restore_unconfirmed_email!(); end

  def restore_unlock_token!(); end

  def restore_updated_at!(); end

  def saved_change_to_confirmation_sent_at(); end

  def saved_change_to_confirmation_sent_at?(**options); end

  def saved_change_to_confirmation_token(); end

  def saved_change_to_confirmation_token?(**options); end

  def saved_change_to_confirmed_at(); end

  def saved_change_to_confirmed_at?(**options); end

  def saved_change_to_created_at(); end

  def saved_change_to_created_at?(**options); end

  def saved_change_to_current_sign_in_at(); end

  def saved_change_to_current_sign_in_at?(**options); end

  def saved_change_to_current_sign_in_ip(); end

  def saved_change_to_current_sign_in_ip?(**options); end

  def saved_change_to_current_space_cache(); end

  def saved_change_to_current_space_cache?(**options); end

  def saved_change_to_current_space_id(); end

  def saved_change_to_current_space_id?(**options); end

  def saved_change_to_deleted_at(); end

  def saved_change_to_deleted_at?(**options); end

  def saved_change_to_email(); end

  def saved_change_to_email?(**options); end

  def saved_change_to_encrypted_password(); end

  def saved_change_to_encrypted_password?(**options); end

  def saved_change_to_failed_attempts(); end

  def saved_change_to_failed_attempts?(**options); end

  def saved_change_to_id(); end

  def saved_change_to_id?(**options); end

  def saved_change_to_last_block_ids(); end

  def saved_change_to_last_block_ids?(**options); end

  def saved_change_to_last_sign_in_at(); end

  def saved_change_to_last_sign_in_at?(**options); end

  def saved_change_to_last_sign_in_ip(); end

  def saved_change_to_last_sign_in_ip?(**options); end

  def saved_change_to_last_space_domain(); end

  def saved_change_to_last_space_domain?(**options); end

  def saved_change_to_locale(); end

  def saved_change_to_locale?(**options); end

  def saved_change_to_locked_at(); end

  def saved_change_to_locked_at?(**options); end

  def saved_change_to_remember_created_at(); end

  def saved_change_to_remember_created_at?(**options); end

  def saved_change_to_reset_password_sent_at(); end

  def saved_change_to_reset_password_sent_at?(**options); end

  def saved_change_to_reset_password_token(); end

  def saved_change_to_reset_password_token?(**options); end

  def saved_change_to_sign_in_count(); end

  def saved_change_to_sign_in_count?(**options); end

  def saved_change_to_timezone(); end

  def saved_change_to_timezone?(**options); end

  def saved_change_to_unconfirmed_email(); end

  def saved_change_to_unconfirmed_email?(**options); end

  def saved_change_to_unlock_token(); end

  def saved_change_to_unlock_token?(**options); end

  def saved_change_to_updated_at(); end

  def saved_change_to_updated_at?(**options); end

  def sign_in_count(); end

  def sign_in_count=(value); end

  def sign_in_count?(); end

  def sign_in_count_before_last_save(); end

  def sign_in_count_before_type_cast(); end

  def sign_in_count_came_from_user?(); end

  def sign_in_count_change(); end

  def sign_in_count_change_to_be_saved(); end

  def sign_in_count_changed?(**options); end

  def sign_in_count_for_database(); end

  def sign_in_count_in_database(); end

  def sign_in_count_previous_change(); end

  def sign_in_count_previously_changed?(**options); end

  def sign_in_count_previously_was(); end

  def sign_in_count_was(); end

  def sign_in_count_will_change!(); end

  def timezone(); end

  def timezone=(value); end

  def timezone?(); end

  def timezone_before_last_save(); end

  def timezone_before_type_cast(); end

  def timezone_came_from_user?(); end

  def timezone_change(); end

  def timezone_change_to_be_saved(); end

  def timezone_changed?(**options); end

  def timezone_for_database(); end

  def timezone_in_database(); end

  def timezone_previous_change(); end

  def timezone_previously_changed?(**options); end

  def timezone_previously_was(); end

  def timezone_was(); end

  def timezone_will_change!(); end

  def unconfirmed_email(); end

  def unconfirmed_email=(value); end

  def unconfirmed_email?(); end

  def unconfirmed_email_before_last_save(); end

  def unconfirmed_email_before_type_cast(); end

  def unconfirmed_email_came_from_user?(); end

  def unconfirmed_email_change(); end

  def unconfirmed_email_change_to_be_saved(); end

  def unconfirmed_email_changed?(**options); end

  def unconfirmed_email_for_database(); end

  def unconfirmed_email_in_database(); end

  def unconfirmed_email_previous_change(); end

  def unconfirmed_email_previously_changed?(**options); end

  def unconfirmed_email_previously_was(); end

  def unconfirmed_email_was(); end

  def unconfirmed_email_will_change!(); end

  def unlock_token(); end

  def unlock_token=(value); end

  def unlock_token?(); end

  def unlock_token_before_last_save(); end

  def unlock_token_before_type_cast(); end

  def unlock_token_came_from_user?(); end

  def unlock_token_change(); end

  def unlock_token_change_to_be_saved(); end

  def unlock_token_changed?(**options); end

  def unlock_token_for_database(); end

  def unlock_token_in_database(); end

  def unlock_token_previous_change(); end

  def unlock_token_previously_changed?(**options); end

  def unlock_token_previously_was(); end

  def unlock_token_was(); end

  def unlock_token_will_change!(); end

  def updated_at(); end

  def updated_at=(value); end

  def updated_at?(); end

  def updated_at_before_last_save(); end

  def updated_at_before_type_cast(); end

  def updated_at_came_from_user?(); end

  def updated_at_change(); end

  def updated_at_change_to_be_saved(); end

  def updated_at_changed?(**options); end

  def updated_at_for_database(); end

  def updated_at_in_database(); end

  def updated_at_previous_change(); end

  def updated_at_previously_changed?(**options); end

  def updated_at_previously_was(); end

  def updated_at_was(); end

  def updated_at_will_change!(); end

  def will_save_change_to_confirmation_sent_at?(**options); end

  def will_save_change_to_confirmation_token?(**options); end

  def will_save_change_to_confirmed_at?(**options); end

  def will_save_change_to_created_at?(**options); end

  def will_save_change_to_current_sign_in_at?(**options); end

  def will_save_change_to_current_sign_in_ip?(**options); end

  def will_save_change_to_current_space_cache?(**options); end

  def will_save_change_to_current_space_id?(**options); end

  def will_save_change_to_deleted_at?(**options); end

  def will_save_change_to_email?(**options); end

  def will_save_change_to_encrypted_password?(**options); end

  def will_save_change_to_failed_attempts?(**options); end

  def will_save_change_to_id?(**options); end

  def will_save_change_to_last_block_ids?(**options); end

  def will_save_change_to_last_sign_in_at?(**options); end

  def will_save_change_to_last_sign_in_ip?(**options); end

  def will_save_change_to_last_space_domain?(**options); end

  def will_save_change_to_locale?(**options); end

  def will_save_change_to_locked_at?(**options); end

  def will_save_change_to_remember_created_at?(**options); end

  def will_save_change_to_reset_password_sent_at?(**options); end

  def will_save_change_to_reset_password_token?(**options); end

  def will_save_change_to_sign_in_count?(**options); end

  def will_save_change_to_timezone?(**options); end

  def will_save_change_to_unconfirmed_email?(**options); end

  def will_save_change_to_unlock_token?(**options); end

  def will_save_change_to_updated_at?(**options); end
end

module Accounts::User::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Accounts::User
  extend ::Paranoia::Query
  extend ::DefaultValueFor::DelayedClassMethods
  def self._default_attribute_values(); end

  def self._default_attribute_values=(value); end

  def self._default_attribute_values?(); end

  def self._default_attribute_values_not_allowing_nil(); end

  def self._default_attribute_values_not_allowing_nil=(value); end

  def self._default_attribute_values_not_allowing_nil?(); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_restore(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_restore(*args, **options, &block); end

  def self.devise_modules(); end

  def self.devise_modules=(value); end

  def self.devise_modules?(); end

  def self.paranoia_column(); end

  def self.paranoia_column=(value); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(value); end

  def self.paranoia_sentinel_value?(); end

  def self.without_deleted(); end
end

module ActionCable
  INTERNAL = ::T.let(nil, ::T.untyped)
end

class ActionCable::Channel::Base
  include ::ActionPolicy::Behaviours::Namespaced::InstanceMethods
  include ::Sentry::Rails::ActionCableExtensions::Channel::Actions
  def __callbacks(); end

  def __callbacks?(); end

  def _run_subscribe_callbacks(&block); end

  def _run_unsubscribe_callbacks(&block); end

  def _subscribe_callbacks(); end

  def _unsubscribe_callbacks(); end

  def connection(); end

  def identifier(); end

  def initialize(connection, identifier, params=T.unsafe(nil)); end

  def logger(*arg, **arg1, &arg2); end

  def params(); end

  def perform_action(data); end

  def periodic_timers=(periodic_timers); end

  def rescue_handlers(); end

  def rescue_handlers=(rescue_handlers); end

  def rescue_handlers?(); end

  def subscribe_to_channel(); end

  def unsubscribe_from_channel(); end
end

class ActionCable::Channel::Base
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._subscribe_callbacks(); end

  def self._subscribe_callbacks=(value); end

  def self._unsubscribe_callbacks(); end

  def self._unsubscribe_callbacks=(value); end

  def self.action_methods(); end

  def self.periodic_timers(); end

  def self.periodic_timers=(value); end

  def self.periodic_timers?(); end

  def self.rescue_handlers(); end

  def self.rescue_handlers=(value); end

  def self.rescue_handlers?(); end
end

module ActionCable::Channel::Broadcasting
  def broadcast_to(*arg, **arg1, &arg2); end

  def broadcasting_for(*arg, **arg1, &arg2); end
end

module ActionCable::Channel::Broadcasting::ClassMethods
  def broadcast_to(model, message); end

  def broadcasting_for(model); end

  def serialize_broadcasting(object); end
end

module ActionCable::Channel::Callbacks::ClassMethods
  def after_subscribe(*methods, &block); end

  def after_unsubscribe(*methods, &block); end

  def before_subscribe(*methods, &block); end

  def before_unsubscribe(*methods, &block); end

  def on_subscribe(*methods, &block); end

  def on_unsubscribe(*methods, &block); end
end

module ActionCable::Channel::ChannelStub
  def confirmed?(); end

  def rejected?(); end

  def start_periodic_timers(); end

  def stop_all_streams(); end

  def stop_periodic_timers(); end

  def stream_from(broadcasting, *arg); end

  def streams(); end
end

class ActionCable::Channel::ConnectionStub
  def connection_identifier(); end

  def identifiers(); end

  def initialize(identifiers=T.unsafe(nil)); end

  def logger(); end

  def subscriptions(); end

  def transmissions(); end

  def transmit(cable_message); end
end

module ActionCable::Channel::Naming
  def channel_name(*arg, **arg1, &arg2); end
end

module ActionCable::Channel::Naming::ClassMethods
  def channel_name(); end
end

class ActionCable::Channel::NonInferrableChannelError
  def initialize(name); end
end

module ActionCable::Channel::PeriodicTimers::ClassMethods
  def periodically(callback_or_method_name=T.unsafe(nil), every:, &block); end
end

module ActionCable::Channel::Streams
  def pubsub(*arg, **arg1, &arg2); end

  def stop_all_streams(); end

  def stop_stream_for(model); end

  def stop_stream_from(broadcasting); end

  def stream_for(model, callback=T.unsafe(nil), coder: T.unsafe(nil), &block); end

  def stream_from(broadcasting, callback=T.unsafe(nil), coder: T.unsafe(nil), &block); end

  def stream_or_reject_for(model); end
end

class ActionCable::Channel::TestCase
  def _channel_class(); end

  def _channel_class=(_channel_class); end

  def _channel_class?(); end

  def connection(); end

  def subscription(); end
end

module ActionCable::Channel::TestCase::Behavior
  def assert_broadcast_on(stream_or_object, *args); end

  def assert_broadcasts(stream_or_object, *args); end

  def assert_has_stream(stream); end

  def assert_has_stream_for(object); end

  def assert_no_streams(); end

  def perform(action, data=T.unsafe(nil)); end

  def stub_connection(identifiers=T.unsafe(nil)); end

  def subscribe(params=T.unsafe(nil)); end

  def transmissions(); end

  def unsubscribe(); end
  CHANNEL_IDENTIFIER = ::T.let(nil, ::T.untyped)
end

module ActionCable::Channel::TestCase::Behavior::ClassMethods
  def channel_class(); end

  def determine_default_channel(name); end

  def tests(channel); end
end

class ActionCable::Channel::TestCase
  def self._channel_class(); end

  def self._channel_class=(value); end

  def self._channel_class?(); end
end

module ActionCable::Connection::Assertions
  def assert_reject_connection(&block); end
end

module ActionCable::Connection::Authorization
  def reject_unauthorized_connection(); end
end

class ActionCable::Connection::Base
  include ::Sentry::Rails::ActionCableExtensions::Connection
  def beat(); end

  def close(reason: T.unsafe(nil), reconnect: T.unsafe(nil)); end

  def dispatch_websocket_message(websocket_message); end

  def env(); end

  def event_loop(*arg, **arg1, &arg2); end

  def identifiers(); end

  def identifiers=(identifiers); end

  def identifiers?(); end

  def initialize(server, env, coder: T.unsafe(nil)); end

  def logger(); end

  def on_close(reason, code); end

  def on_error(message); end

  def on_message(message); end

  def on_open(); end

  def process(); end

  def protocol(); end

  def pubsub(*arg, **arg1, &arg2); end

  def receive(websocket_message); end

  def rescue_handlers(); end

  def rescue_handlers=(rescue_handlers); end

  def rescue_handlers?(); end

  def send_async(method, *arguments); end

  def server(); end

  def statistics(); end

  def subscriptions(); end

  def transmit(cable_message); end

  def worker_pool(); end
end

class ActionCable::Connection::Base
  def self.identifiers(); end

  def self.identifiers=(value); end

  def self.identifiers?(); end

  def self.rescue_handlers(); end

  def self.rescue_handlers=(value); end

  def self.rescue_handlers?(); end
end

class ActionCable::Connection::ClientSocket
  def alive?(); end

  def client_gone(); end

  def close(code=T.unsafe(nil), reason=T.unsafe(nil)); end

  def env(); end

  def initialize(env, event_target, event_loop, protocols); end

  def parse(data); end

  def protocol(); end

  def rack_response(); end

  def start_driver(); end

  def transmit(message); end

  def url(); end

  def write(data); end
  CLOSED = ::T.let(nil, ::T.untyped)
  CLOSING = ::T.let(nil, ::T.untyped)
  CONNECTING = ::T.let(nil, ::T.untyped)
  OPEN = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::ClientSocket
  def self.determine_url(env); end

  def self.secure_request?(env); end
end

module ActionCable::Connection::Identification
  def connection_identifier(); end
end

module ActionCable::Connection::Identification::ClassMethods
  def identified_by(*identifiers); end
end

class ActionCable::Connection::MessageBuffer
  def append(message); end

  def initialize(connection); end

  def process!(); end

  def processing?(); end
end

class ActionCable::Connection::NonInferrableConnectionError
  def initialize(name); end
end

class ActionCable::Connection::Stream
  def close(); end

  def each(&callback); end

  def flush_write_buffer(); end

  def hijack_rack_socket(); end

  def initialize(event_loop, socket); end

  def receive(data); end

  def shutdown(); end

  def write(data); end
end

class ActionCable::Connection::StreamEventLoop
  def attach(io, stream); end

  def detach(io, stream); end

  def post(task=T.unsafe(nil), &block); end

  def stop(); end

  def timer(interval, &block); end

  def writes_pending(io); end
end

class ActionCable::Connection::Subscriptions
  def add(data); end

  def execute_command(data); end

  def identifiers(); end

  def initialize(connection); end

  def logger(*arg, **arg1, &arg2); end

  def perform_action(data); end

  def remove(data); end

  def remove_subscription(subscription); end

  def unsubscribe_from_all(); end
end

class ActionCable::Connection::TaggedLoggerProxy
  def add_tags(*tags); end

  def debug(message); end

  def error(message); end

  def fatal(message); end

  def info(message); end

  def initialize(logger, tags:); end

  def tag(logger, &block); end

  def tags(); end

  def unknown(message); end

  def warn(message); end
end

class ActionCable::Connection::TestCase
  def _connection_class(); end

  def _connection_class=(_connection_class); end

  def _connection_class?(); end

  def connection(); end
end

module ActionCable::Connection::TestCase::Behavior
  def connect(path=T.unsafe(nil), **request_params); end

  def cookies(); end

  def disconnect(); end
  DEFAULT_PATH = ::T.let(nil, ::T.untyped)
end

module ActionCable::Connection::TestCase::Behavior::ClassMethods
  def connection_class(); end

  def determine_default_connection(name); end

  def tests(connection); end
end

class ActionCable::Connection::TestCase
  def self._connection_class(); end

  def self._connection_class=(value); end

  def self._connection_class?(); end
end

module ActionCable::Connection::TestConnection
  def initialize(request); end

  def logger(); end

  def request(); end
end

class ActionCable::Connection::TestCookieJar
  def encrypted(); end

  def signed(); end
end

class ActionCable::Connection::TestRequest
  def cookie_jar=(cookie_jar); end

  def session=(session); end
end

class ActionCable::Connection::WebSocket
  def alive?(); end

  def close(); end

  def initialize(env, event_target, event_loop, protocols: T.unsafe(nil)); end

  def possible?(); end

  def protocol(); end

  def rack_response(); end

  def transmit(data); end
end

class ActionCable::RemoteConnections
  def initialize(server); end

  def server(); end

  def where(identifier); end
end

class ActionCable::RemoteConnections::RemoteConnection
  include ::ActionCable::Connection::InternalChannel
  def disconnect(); end

  def identifiers(); end

  def identifiers=(identifiers); end

  def identifiers?(); end

  def initialize(server, ids); end

  def server(); end
end

class ActionCable::RemoteConnections::RemoteConnection
  def self.identifiers(); end

  def self.identifiers=(value); end

  def self.identifiers?(); end
end

class ActionCable::Server::Base
  def call(env); end

  def config(); end

  def connection_identifiers(); end

  def disconnect(identifiers); end

  def event_loop(); end

  def initialize(config: T.unsafe(nil)); end

  def logger(*arg, **arg1, &arg2); end

  def mutex(); end

  def pubsub(); end

  def remote_connections(); end

  def restart(); end

  def worker_pool(); end
end

class ActionCable::Server::Base
  def self.config(); end

  def self.config=(val); end

  def self.logger(); end
end

module ActionCable::Server::Broadcasting
  def broadcast(broadcasting, message, coder: T.unsafe(nil)); end

  def broadcaster_for(broadcasting, coder: T.unsafe(nil)); end
end

class ActionCable::Server::Broadcasting::Broadcaster
  def broadcast(message); end

  def broadcasting(); end

  def coder(); end

  def initialize(server, broadcasting, coder:); end

  def server(); end
end

class ActionCable::Server::Configuration
  def allow_same_origin_as_host(); end

  def allow_same_origin_as_host=(allow_same_origin_as_host); end

  def allowed_request_origins(); end

  def allowed_request_origins=(allowed_request_origins); end

  def cable(); end

  def cable=(cable); end

  def connection_class(); end

  def connection_class=(connection_class); end

  def disable_request_forgery_protection(); end

  def disable_request_forgery_protection=(disable_request_forgery_protection); end

  def log_tags(); end

  def log_tags=(log_tags); end

  def logger(); end

  def logger=(logger); end

  def mount_path(); end

  def mount_path=(mount_path); end

  def precompile_assets(); end

  def precompile_assets=(precompile_assets); end

  def pubsub_adapter(); end

  def url(); end

  def url=(url); end

  def worker_pool_size(); end

  def worker_pool_size=(worker_pool_size); end
end

module ActionCable::Server::Connections
  def add_connection(connection); end

  def connections(); end

  def open_connections_statistics(); end

  def remove_connection(connection); end

  def setup_heartbeat_timer(); end
end

class ActionCable::Server::Worker
  def __callbacks(); end

  def __callbacks?(); end

  def _run_work_callbacks(&block); end

  def _work_callbacks(); end

  def async_exec(receiver, *args, connection:, &block); end

  def async_invoke(receiver, method, *args, connection: T.unsafe(nil), &block); end

  def connection(); end

  def connection=(obj); end

  def executor(); end

  def halt(); end

  def initialize(max_size: T.unsafe(nil)); end

  def invoke(receiver, method, *args, connection:, &block); end

  def stopping?(); end

  def work(connection, &block); end
end

module ActionCable::Server::Worker::ActiveRecordConnectionManagement
  def with_database_connections(&block); end
end

class ActionCable::Server::Worker
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._work_callbacks(); end

  def self._work_callbacks=(value); end

  def self.connection(); end

  def self.connection=(obj); end
end

class ActionCable::SubscriptionAdapter::Async::AsyncSubscriberMap
  def add_subscriber(*arg); end

  def initialize(event_loop); end

  def invoke_callback(*arg); end
end

class ActionCable::SubscriptionAdapter::Base
  def broadcast(channel, payload); end

  def identifier(); end

  def initialize(server); end

  def logger(); end

  def server(); end

  def shutdown(); end

  def subscribe(channel, message_callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, message_callback); end
end

module ActionCable::SubscriptionAdapter::ChannelPrefix
  def broadcast(channel, payload); end

  def subscribe(channel, callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, callback); end
end

class ActionCable::SubscriptionAdapter::Inline
  def initialize(*arg); end

  def subscribe(channel, callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, callback); end
end

class ActionCable::SubscriptionAdapter::Redis
  include ::ActionCable::SubscriptionAdapter::ChannelPrefix
  def initialize(*arg); end

  def redis_connection_for_subscriptions(); end

  def redis_connector(); end

  def redis_connector=(val); end
end

class ActionCable::SubscriptionAdapter::Redis::Listener
  def initialize(adapter, event_loop); end

  def invoke_callback(*arg); end

  def listen(conn); end

  def shutdown(); end
end

class ActionCable::SubscriptionAdapter::Redis
  def self.redis_connector(); end

  def self.redis_connector=(val); end
end

class ActionCable::SubscriptionAdapter::SubscriberMap
  def add_channel(channel, on_success); end

  def add_subscriber(channel, subscriber, on_success); end

  def broadcast(channel, message); end

  def invoke_callback(callback, message); end

  def remove_channel(channel); end

  def remove_subscriber(channel, subscriber); end
end

class ActionCable::SubscriptionAdapter::Test
  def broadcasts(channel); end

  def clear(); end

  def clear_messages(channel); end
end

module ActionCable::TestHelper
  def after_teardown(); end

  def assert_broadcast_on(stream, data, &block); end

  def assert_broadcasts(stream, number, &block); end

  def assert_no_broadcasts(stream, &block); end

  def before_setup(); end

  def broadcasts(*arg, **arg1, &arg2); end

  def clear_messages(*arg, **arg1, &arg2); end

  def pubsub_adapter(); end
end

module ActionCable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActionController::API
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionController::ApiRendering
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::ConditionalGet
  include ::ActionController::Head
  include ::ActionController::BasicImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::DataStreaming
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  include ::ActionController::RespondWith
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::ActiveRecord::Railties::ControllerRuntime
  include ::Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  include ::Devise::Controllers::UrlHelpers
  include ::Devise::OmniAuth::UrlHelpers
  def __callbacks(); end

  def __callbacks?(); end

  def _process_action_callbacks(); end

  def _renderers(); end

  def _renderers=(_renderers); end

  def _renderers?(); end

  def _run_process_action_callbacks(&block); end

  def _wrapper_options(); end

  def _wrapper_options=(_wrapper_options); end

  def _wrapper_options?(); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def etaggers(); end

  def etaggers=(etaggers); end

  def etaggers?(); end

  def logger(); end

  def logger=(value); end

  def mimes_for_respond_to(); end

  def mimes_for_respond_to=(mimes_for_respond_to); end

  def mimes_for_respond_to?(); end

  def raise_on_open_redirects(); end

  def raise_on_open_redirects=(val); end

  def rescue_handlers(); end

  def rescue_handlers=(rescue_handlers); end

  def rescue_handlers?(); end

  def responder(); end

  def responder=(responder); end

  def responder?(); end
  MODULES = ::T.let(nil, ::T.untyped)
end

class ActionController::API
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActionController::Railties::Helpers
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._process_action_callbacks(); end

  def self._process_action_callbacks=(value); end

  def self._renderers(); end

  def self._renderers=(value); end

  def self._renderers?(); end

  def self._wrapper_options(); end

  def self._wrapper_options=(value); end

  def self._wrapper_options?(); end

  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end

  def self.etaggers(); end

  def self.etaggers=(value); end

  def self.etaggers?(); end

  def self.logger(); end

  def self.logger=(value); end

  def self.mimes_for_respond_to(); end

  def self.mimes_for_respond_to=(value); end

  def self.mimes_for_respond_to?(); end

  def self.raise_on_open_redirects(); end

  def self.raise_on_open_redirects=(val); end

  def self.rescue_handlers(); end

  def self.rescue_handlers=(value); end

  def self.rescue_handlers?(); end

  def self.responder(); end

  def self.responder=(value); end

  def self.responder?(); end

  def self.without_modules(*modules); end
end

module ActionController::ApiRendering
  def render_to_body(options=T.unsafe(nil)); end
end

module ActionController::ApiRendering
  extend ::ActiveSupport::Concern
end

class ActionController::BadRequest
  def initialize(msg=T.unsafe(nil)); end
end

class ActionController::BadRequest
end

class ActionController::Base
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::AbstractController::Translation
  include ::AbstractController::AssetPaths
  include ::AbstractController::Helpers
  include ::ActionController::Helpers
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionView::Rendering
  include ::ActionView::Layouts
  include ::ActionController::Rendering
  include ::ActionController::Renderers
  include ::ActionController::Renderers::All
  include ::ActionController::ConditionalGet
  include ::ActionController::Head
  include ::ActionController::EtagWithTemplateDigest
  include ::ActionController::EtagWithFlash
  include ::ActionController::Caching
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching
  include ::AbstractController::Caching::ConfigMethods
  include ::ActionController::MimeResponds
  include ::ActionController::ImplicitRender
  include ::ActionController::BasicImplicitRender
  include ::ActionController::StrongParameters
  include ::ActionController::ParameterEncoding
  include ::ActionController::Cookies
  include ::ActionController::Flash
  include ::ActionController::FormBuilder
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActionController::RequestForgeryProtection
  include ::ActionController::ContentSecurityPolicy
  include ::ActionController::PermissionsPolicy
  include ::ActionController::Streaming
  include ::ActionController::DataStreaming
  include ::ActionController::HttpAuthentication::Basic::ControllerMethods
  include ::ActionController::HttpAuthentication::Digest::ControllerMethods
  include ::ActionController::HttpAuthentication::Token::ControllerMethods
  include ::ActionController::DefaultHeaders
  include ::ActionController::Logging
  include ::ActiveSupport::Rescuable
  include ::ActionController::Rescue
  include ::ActionController::Instrumentation
  include ::ActionController::ParamsWrapper
  include ::InertiaRails::Controller
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::ActiveRecord::Railties::ControllerRuntime
  include ::Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  include ::Devise::Controllers::UrlHelpers
  include ::Devise::OmniAuth::UrlHelpers
  include ::ActionPolicy::Controller
  include ::ActionPolicy::Behaviour
  include ::ActionPolicy::Behaviours::PolicyFor
  include ::ActionPolicy::Behaviours::Scoping
  include ::ActionPolicy::Behaviours::ThreadMemoized
  include ::ActionPolicy::Behaviours::Memoized
  include ::ActionPolicy::Behaviours::Namespaced
  include ::ActionPolicy::Behaviours::ThreadMemoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Memoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Namespaced::InstanceMethods
  def __callbacks(); end

  def __callbacks?(); end

  def _helper_methods(); end

  def _helper_methods=(_helper_methods); end

  def _helper_methods?(); end

  def _process_action_callbacks(); end

  def _renderers(); end

  def _renderers=(_renderers); end

  def _renderers?(); end

  def _run_process_action_callbacks(&block); end

  def _view_cache_dependencies(); end

  def _view_cache_dependencies=(_view_cache_dependencies); end

  def _view_cache_dependencies?(); end

  def _wrapper_options(); end

  def _wrapper_options=(_wrapper_options); end

  def _wrapper_options?(); end

  def alert(); end

  def allow_forgery_protection(); end

  def allow_forgery_protection=(value); end

  def asset_host(); end

  def asset_host=(value); end

  def assets_dir(); end

  def assets_dir=(value); end

  def authorize_count=(authorize_count); end

  def default_asset_host_protocol(); end

  def default_asset_host_protocol=(value); end

  def default_protect_from_forgery(); end

  def default_protect_from_forgery=(value); end

  def default_static_extension(); end

  def default_static_extension=(value); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def enable_fragment_cache_logging(); end

  def enable_fragment_cache_logging=(value); end

  def etag_with_template_digest(); end

  def etag_with_template_digest=(etag_with_template_digest); end

  def etag_with_template_digest?(); end

  def etaggers(); end

  def etaggers=(etaggers); end

  def etaggers?(); end

  def flash(*arg, **arg1, &arg2); end

  def forgery_protection_origin_check(); end

  def forgery_protection_origin_check=(value); end

  def forgery_protection_strategy(); end

  def forgery_protection_strategy=(value); end

  def fragment_cache_keys(); end

  def fragment_cache_keys=(fragment_cache_keys); end

  def fragment_cache_keys?(); end

  def helpers_path(); end

  def helpers_path=(helpers_path); end

  def helpers_path?(); end

  def include_all_helpers(); end

  def include_all_helpers=(include_all_helpers); end

  def include_all_helpers?(); end

  def javascripts_dir(); end

  def javascripts_dir=(value); end

  def log_warning_on_csrf_failure(); end

  def log_warning_on_csrf_failure=(value); end

  def logger(); end

  def logger=(value); end

  def mimes_for_respond_to(); end

  def mimes_for_respond_to=(mimes_for_respond_to); end

  def mimes_for_respond_to?(); end

  def notice(); end

  def per_form_csrf_tokens(); end

  def per_form_csrf_tokens=(value); end

  def perform_caching(); end

  def perform_caching=(value); end

  def raise_on_open_redirects(); end

  def raise_on_open_redirects=(val); end

  def relative_url_root(); end

  def relative_url_root=(value); end

  def request_forgery_protection_token(); end

  def request_forgery_protection_token=(value); end

  def rescue_handlers(); end

  def rescue_handlers=(rescue_handlers); end

  def rescue_handlers?(); end

  def responder(); end

  def responder=(responder); end

  def responder?(); end

  def stylesheets_dir(); end

  def stylesheets_dir=(value); end

  def urlsafe_csrf_tokens(); end

  def verify_authorized_skipped(); end
  MODULES = ::T.let(nil, ::T.untyped)
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionController::Base::HelperMethods
  include ::InertiaRails::Helper
  include ::ViteRails::TagHelpers
  def alert(*args, **arg, &block); end

  def allowed_to?(*args, **arg, &block); end

  def combined_fragment_cache_key(*args, **arg, &block); end

  def content_security_policy?(*args, **arg, &block); end

  def content_security_policy_nonce(*args, **arg, &block); end

  def cookies(*args, **arg, &block); end

  def current_user(*args, **arg, &block); end

  def devise_controller?(*args, **arg, &block); end

  def form_authenticity_token(*args, **arg, &block); end

  def notice(*args, **arg, &block); end

  def protect_against_forgery?(*args, **arg, &block); end

  def signed_in?(*args, **arg, &block); end

  def user_session(*args, **arg, &block); end

  def user_signed_in?(*args, **arg, &block); end

  def view_cache_dependencies(*args, **arg, &block); end

  def warden(*args, **arg, &block); end
end

module ActionController::Base::HelperMethods
end

class ActionController::Base
  extend ::AbstractController::Helpers::ClassMethods
  extend ::AbstractController::UrlFor::ClassMethods
  extend ::AbstractController::Caching::Fragments::ClassMethods
  extend ::AbstractController::Caching::ClassMethods
  extend ::AbstractController::Caching::ConfigMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::ActionController::Railties::Helpers
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._default_form_builder(); end

  def self._default_form_builder=(value); end

  def self._default_form_builder?(); end

  def self._flash_types(); end

  def self._flash_types=(value); end

  def self._flash_types?(); end

  def self._helper_methods(); end

  def self._helper_methods=(value); end

  def self._helper_methods?(); end

  def self._layout(); end

  def self._layout=(value); end

  def self._layout?(); end

  def self._layout_conditions(); end

  def self._layout_conditions=(value); end

  def self._layout_conditions?(); end

  def self._process_action_callbacks(); end

  def self._process_action_callbacks=(value); end

  def self._renderers(); end

  def self._renderers=(value); end

  def self._renderers?(); end

  def self._view_cache_dependencies(); end

  def self._view_cache_dependencies=(value); end

  def self._view_cache_dependencies?(); end

  def self._wrapper_options(); end

  def self._wrapper_options=(value); end

  def self._wrapper_options?(); end

  def self.allow_forgery_protection(); end

  def self.allow_forgery_protection=(value); end

  def self.asset_host(); end

  def self.asset_host=(value); end

  def self.assets_dir(); end

  def self.assets_dir=(value); end

  def self.default_asset_host_protocol(); end

  def self.default_asset_host_protocol=(value); end

  def self.default_protect_from_forgery(); end

  def self.default_protect_from_forgery=(value); end

  def self.default_static_extension(); end

  def self.default_static_extension=(value); end

  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end

  def self.enable_fragment_cache_logging(); end

  def self.enable_fragment_cache_logging=(value); end

  def self.etag_with_template_digest(); end

  def self.etag_with_template_digest=(value); end

  def self.etag_with_template_digest?(); end

  def self.etaggers(); end

  def self.etaggers=(value); end

  def self.etaggers?(); end

  def self.forgery_protection_origin_check(); end

  def self.forgery_protection_origin_check=(value); end

  def self.forgery_protection_strategy(); end

  def self.forgery_protection_strategy=(value); end

  def self.fragment_cache_keys(); end

  def self.fragment_cache_keys=(value); end

  def self.fragment_cache_keys?(); end

  def self.helpers_path(); end

  def self.helpers_path=(value); end

  def self.helpers_path?(); end

  def self.include_all_helpers(); end

  def self.include_all_helpers=(value); end

  def self.include_all_helpers?(); end

  def self.javascripts_dir(); end

  def self.javascripts_dir=(value); end

  def self.log_warning_on_csrf_failure(); end

  def self.log_warning_on_csrf_failure=(value); end

  def self.logger(); end

  def self.logger=(value); end

  def self.mimes_for_respond_to(); end

  def self.mimes_for_respond_to=(value); end

  def self.mimes_for_respond_to?(); end

  def self.per_form_csrf_tokens(); end

  def self.per_form_csrf_tokens=(value); end

  def self.perform_caching(); end

  def self.perform_caching=(value); end

  def self.raise_on_open_redirects(); end

  def self.raise_on_open_redirects=(val); end

  def self.relative_url_root(); end

  def self.relative_url_root=(value); end

  def self.request_forgery_protection_token(); end

  def self.request_forgery_protection_token=(value); end

  def self.rescue_handlers(); end

  def self.rescue_handlers=(value); end

  def self.rescue_handlers?(); end

  def self.responder(); end

  def self.responder=(value); end

  def self.responder?(); end

  def self.stylesheets_dir(); end

  def self.stylesheets_dir=(value); end

  def self.urlsafe_csrf_tokens(); end

  def self.urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end

  def self.without_modules(*modules); end
end

module ActionController::BasicImplicitRender
  def default_render(); end

  def send_action(method, *args); end
end

module ActionController::BasicImplicitRender
end

module ActionController::Caching
end

module ActionController::Caching
  extend ::ActiveSupport::Concern
end

module ActionController::ConditionalGet
  include ::ActionController::Head
  def expires_in(seconds, options=T.unsafe(nil)); end

  def expires_now(); end

  def fresh_when(object=T.unsafe(nil), etag: T.unsafe(nil), weak_etag: T.unsafe(nil), strong_etag: T.unsafe(nil), last_modified: T.unsafe(nil), public: T.unsafe(nil), cache_control: T.unsafe(nil), template: T.unsafe(nil)); end

  def http_cache_forever(public: T.unsafe(nil)); end

  def no_store(); end

  def stale?(object=T.unsafe(nil), **freshness_kwargs); end
end

module ActionController::ConditionalGet
  extend ::ActiveSupport::Concern
end

module ActionController::ContentSecurityPolicy
end

module ActionController::ContentSecurityPolicy
  extend ::ActiveSupport::Concern
end

module ActionController::Cookies
  extend ::ActiveSupport::Concern
end

module ActionController::DataStreaming
  DEFAULT_SEND_FILE_DISPOSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SEND_FILE_TYPE = ::T.let(nil, ::T.untyped)
end

module ActionController::DataStreaming
  extend ::ActiveSupport::Concern
end

module ActionController::DefaultHeaders
end

module ActionController::DefaultHeaders
  extend ::ActiveSupport::Concern
end

module ActionController::EtagWithFlash
end

module ActionController::EtagWithFlash
  extend ::ActiveSupport::Concern
end

module ActionController::EtagWithTemplateDigest
end

module ActionController::EtagWithTemplateDigest
  extend ::ActiveSupport::Concern
end

module ActionController::Flash
end

module ActionController::Flash
  extend ::ActiveSupport::Concern
end

module ActionController::FormBuilder
  def default_form_builder(); end
end

module ActionController::FormBuilder
  extend ::ActiveSupport::Concern
end

module ActionController::Head
  def head(status, options=T.unsafe(nil)); end
end

module ActionController::Head
end

module ActionController::Helpers
  def helpers(); end
end

module ActionController::Helpers
  extend ::ActiveSupport::Concern
  def self.helpers_path(); end

  def self.helpers_path=(helpers_path); end
end

module ActionController::HttpAuthentication
end

module ActionController::HttpAuthentication::Basic
  def auth_param(request); end

  def auth_scheme(request); end

  def authenticate(request, &login_procedure); end

  def authentication_request(controller, realm, message); end

  def decode_credentials(request); end

  def encode_credentials(user_name, password); end

  def has_basic_credentials?(request); end

  def user_name_and_password(request); end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods
  def authenticate_or_request_with_http_basic(realm=T.unsafe(nil), message=T.unsafe(nil), &login_procedure); end

  def authenticate_with_http_basic(&login_procedure); end

  def http_basic_authenticate_or_request_with(name:, password:, realm: T.unsafe(nil), message: T.unsafe(nil)); end

  def request_http_basic_authentication(realm=T.unsafe(nil), message=T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Basic::ControllerMethods
  extend ::ActiveSupport::Concern
end

module ActionController::HttpAuthentication::Basic
  extend ::ActionController::HttpAuthentication::Basic
end

module ActionController::HttpAuthentication::Digest
  def authenticate(request, realm, &password_procedure); end

  def authentication_header(controller, realm); end

  def authentication_request(controller, realm, message=T.unsafe(nil)); end

  def decode_credentials(header); end

  def decode_credentials_header(request); end

  def encode_credentials(http_method, credentials, password, password_is_ha1); end

  def expected_response(http_method, uri, credentials, password, password_is_ha1=T.unsafe(nil)); end

  def ha1(credentials, password); end

  def nonce(secret_key, time=T.unsafe(nil)); end

  def opaque(secret_key); end

  def secret_token(request); end

  def validate_digest_response(request, realm, &password_procedure); end

  def validate_nonce(secret_key, request, value, seconds_to_timeout=T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Digest::ControllerMethods
  def authenticate_or_request_with_http_digest(realm=T.unsafe(nil), message=T.unsafe(nil), &password_procedure); end

  def authenticate_with_http_digest(realm=T.unsafe(nil), &password_procedure); end

  def request_http_digest_authentication(realm=T.unsafe(nil), message=T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Digest::ControllerMethods
end

module ActionController::HttpAuthentication::Digest
  extend ::ActionController::HttpAuthentication::Digest
end

module ActionController::HttpAuthentication::Token
  def authenticate(controller, &login_procedure); end

  def authentication_request(controller, realm, message=T.unsafe(nil)); end

  def encode_credentials(token, options=T.unsafe(nil)); end

  def params_array_from(raw_params); end

  def raw_params(auth); end

  def rewrite_param_values(array_params); end

  def token_and_options(request); end

  def token_params_from(auth); end
  AUTHN_PAIR_DELIMITERS = ::T.let(nil, ::T.untyped)
  TOKEN_KEY = ::T.let(nil, ::T.untyped)
  TOKEN_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionController::HttpAuthentication::Token::ControllerMethods
  def authenticate_or_request_with_http_token(realm=T.unsafe(nil), message=T.unsafe(nil), &login_procedure); end

  def authenticate_with_http_token(&login_procedure); end

  def request_http_token_authentication(realm=T.unsafe(nil), message=T.unsafe(nil)); end
end

module ActionController::HttpAuthentication::Token::ControllerMethods
end

module ActionController::HttpAuthentication::Token
  extend ::ActionController::HttpAuthentication::Token
end

module ActionController::HttpAuthentication
end

module ActionController::ImplicitRender
  include ::ActionController::BasicImplicitRender
  def default_render(); end

  def method_for_action(action_name); end
end

module ActionController::ImplicitRender
end

module ActionController::Instrumentation
  def redirect_to(*arg); end

  def render(*arg); end

  def send_data(data, options=T.unsafe(nil)); end

  def send_file(path, options=T.unsafe(nil)); end

  def view_runtime(); end

  def view_runtime=(view_runtime); end
end

module ActionController::Instrumentation
  extend ::ActiveSupport::Concern
end

class ActionController::InvalidAuthenticityToken
end

class ActionController::InvalidAuthenticityToken
end

class ActionController::InvalidCrossOriginRequest
end

class ActionController::InvalidCrossOriginRequest
end

module ActionController::Live
  def new_controller_thread(); end

  def process(name); end

  def response_body=(body); end

  def send_stream(filename:, disposition: T.unsafe(nil), type: T.unsafe(nil)); end
end

class ActionController::Live::Buffer
  include ::MonitorMixin
  def call_on_error(); end

  def connected?(); end

  def ignore_disconnect(); end

  def ignore_disconnect=(ignore_disconnect); end

  def initialize(response); end

  def on_error(&block); end

  def writeln(string); end
end

class ActionController::Live::Buffer
  def self.queue_size(); end

  def self.queue_size=(queue_size); end
end

module ActionController::Live::ClassMethods
  def make_response!(request); end
end

module ActionController::Live::ClassMethods
end

class ActionController::Live::ClientDisconnected
end

class ActionController::Live::ClientDisconnected
end

class ActionController::Live::Response
end

class ActionController::Live::Response
end

class ActionController::Live::SSE
  def close(); end

  def initialize(stream, options=T.unsafe(nil)); end

  def write(object, options=T.unsafe(nil)); end
  PERMITTED_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionController::Live::SSE
end

module ActionController::Live
  extend ::ActiveSupport::Concern
end

class ActionController::LiveTestResponse
  def error?(); end

  def missing?(); end

  def success?(); end
end

class ActionController::LiveTestResponse
end

class ActionController::LogSubscriber
  def exist_fragment?(event); end

  def expire_fragment(event); end

  def halted_callback(event); end

  def process_action(event); end

  def read_fragment(event); end

  def redirect_to(event); end

  def send_data(event); end

  def send_file(event); end

  def start_processing(event); end

  def unpermitted_parameters(event); end

  def write_fragment(event); end
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
end

class ActionController::LogSubscriber
end

module ActionController::Logging
end

module ActionController::Logging
  extend ::ActiveSupport::Concern
end

class ActionController::Metal
  include ::ActionController::Testing::Functional
  def content_type(*arg, **arg1, &arg2); end

  def content_type=(arg); end

  def controller_name(); end

  def dispatch(name, request, response); end

  def headers(*arg, **arg1, &arg2); end

  def location(*arg, **arg1, &arg2); end

  def location=(arg); end

  def media_type(*arg, **arg1, &arg2); end

  def middleware_stack(); end

  def middleware_stack=(middleware_stack); end

  def middleware_stack?(); end

  def params(); end

  def params=(val); end

  def request(); end

  def request=(request); end

  def reset_session(); end

  def response(); end

  def response=(response); end

  def response_body=(body); end

  def response_code(*arg, **arg1, &arg2); end

  def session(*arg, **arg1, &arg2); end

  def set_request!(request); end

  def set_response!(response); end

  def status(*arg, **arg1, &arg2); end

  def status=(arg); end

  def to_a(); end

  def url_for(string); end
end

class ActionController::Metal
  def self.action(name); end

  def self.action_encoding_template(action); end

  def self.controller_name(); end

  def self.dispatch(name, req, res); end

  def self.inherited(base); end

  def self.make_response!(request); end

  def self.middleware(); end

  def self.middleware_stack(); end

  def self.middleware_stack=(value); end

  def self.middleware_stack?(); end

  def self.use(*arg, **arg1, &arg2); end
end

class ActionController::MethodNotAllowed
  def initialize(*allowed_methods); end
end

class ActionController::MethodNotAllowed
end

class ActionController::MiddlewareStack
  def build(action, app=T.unsafe(nil), &block); end
  EXCLUDE = ::T.let(nil, ::T.untyped)
  INCLUDE = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
end

class ActionController::MiddlewareStack::Middleware
  def initialize(klass, args, actions, strategy, block); end

  def valid?(action); end
end

class ActionController::MiddlewareStack::Middleware
end

class ActionController::MiddlewareStack
end

module ActionController::MimeResponds
  def respond_to(*mimes); end
end

class ActionController::MissingExactTemplate
end

class ActionController::MissingExactTemplate
end

class ActionController::MissingFile
end

class ActionController::MissingFile
end

class ActionController::MissingRenderer
  def initialize(format); end
end

class ActionController::MissingRenderer
end

class ActionController::NotImplemented
end

class ActionController::NotImplemented
end

module ActionController::ParameterEncoding
end

module ActionController::ParameterEncoding
  extend ::ActiveSupport::Concern
end

class ActionController::ParameterMissing
  def initialize(param, keys=T.unsafe(nil)); end

  def keys(); end

  def param(); end
end

class ActionController::ParameterMissing
end

class ActionController::Parameters
  def ==(other); end

  def [](key); end

  def []=(key, value); end

  def always_permitted_parameters(); end

  def always_permitted_parameters=(val); end

  def as_json(*arg, **arg1, &arg2); end

  def compact(); end

  def compact!(); end

  def compact_blank(); end

  def compact_blank!(); end

  def converted_arrays(); end

  def deep_transform_keys(&block); end

  def deep_transform_keys!(&block); end

  def delete(key, &block); end

  def delete_if(&block); end

  def dig(*keys); end

  def each(&block); end

  def each_key(*arg, **arg1, &arg2); end

  def each_nested_attribute(); end

  def each_pair(&block); end

  def each_value(&block); end

  def empty?(*arg, **arg1, &arg2); end

  def encode_with(coder); end

  def eql?(other); end

  def except(*keys); end

  def extract!(*keys); end

  def fetch(key, *args); end

  def has_key?(*arg, **arg1, &arg2); end

  def has_value?(*arg, **arg1, &arg2); end

  def include?(*arg, **arg1, &arg2); end

  def init_with(coder); end

  def initialize(parameters=T.unsafe(nil), logging_context=T.unsafe(nil)); end

  def keep_if(&block); end

  def key?(*arg, **arg1, &arg2); end

  def keys(*arg, **arg1, &arg2); end

  def member?(*arg, **arg1, &arg2); end

  def merge(other_hash); end

  def merge!(other_hash); end

  def nested_attributes?(); end

  def parameters(); end

  def permit(*filters); end

  def permit!(); end

  def permitted=(permitted); end

  def permitted?(); end

  def reject(&block); end

  def reject!(&block); end

  def require(key); end

  def required(key); end

  def reverse_merge(other_hash); end

  def reverse_merge!(other_hash); end

  def select(&block); end

  def select!(&block); end

  def slice(*keys); end

  def slice!(*keys); end

  def stringify_keys(); end

  def to_h(); end

  def to_hash(); end

  def to_param(*args); end

  def to_query(*args); end

  def to_s(*arg, **arg1, &arg2); end

  def to_unsafe_h(); end

  def to_unsafe_hash(); end

  def transform_keys(&block); end

  def transform_keys!(&block); end

  def transform_values(); end

  def transform_values!(); end

  def value?(*arg, **arg1, &arg2); end

  def values(*arg, **arg1, &arg2); end

  def values_at(*keys); end

  def with_defaults(other_hash); end

  def with_defaults!(other_hash); end
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  PERMITTED_SCALAR_TYPES = ::T.let(nil, ::T.untyped)
end

class ActionController::Parameters
  def self.action_on_unpermitted_parameters(); end

  def self.action_on_unpermitted_parameters=(val); end

  def self.always_permitted_parameters(); end

  def self.always_permitted_parameters=(val); end

  def self.hook_into_yaml_loading(); end

  def self.nested_attribute?(key, value); end

  def self.permit_all_parameters(); end

  def self.permit_all_parameters=(val); end
end

module ActionController::ParamsWrapper
  EXCLUDE_PARAMETERS = ::T.let(nil, ::T.untyped)
end

module ActionController::ParamsWrapper
  extend ::ActiveSupport::Concern
end

module ActionController::PermissionsPolicy
end

module ActionController::PermissionsPolicy
  extend ::ActiveSupport::Concern
end

class ActionController::Railtie
end

class ActionController::Railtie
end

module ActionController::Railties
end

module ActionController::Railties::Helpers
  def inherited(klass); end
end

module ActionController::Railties::Helpers
end

module ActionController::Railties
end

module ActionController::Redirecting
  def _compute_redirect_to_location(request, options); end

  def redirect_back(fallback_location:, allow_other_host: T.unsafe(nil), **args); end

  def redirect_back_or_to(fallback_location, allow_other_host: T.unsafe(nil), **options); end

  def redirect_to(options=T.unsafe(nil), response_options=T.unsafe(nil)); end

  def url_from(location); end
end

module ActionController::Redirecting
  extend ::ActiveSupport::Concern
  def self._compute_redirect_to_location(request, options); end
end

class ActionController::RenderError
end

class ActionController::RenderError
end

class ActionController::Renderer
  def controller(); end

  def defaults(); end

  def initialize(controller, env, defaults); end

  def new(env=T.unsafe(nil)); end

  def render(*args); end

  def render_to_string(*args); end

  def with_defaults(defaults); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
  RACK_KEY_TRANSLATION = ::T.let(nil, ::T.untyped)
end

class ActionController::Renderer
  def self.for(controller, env=T.unsafe(nil), defaults=T.unsafe(nil)); end
end

module ActionController::Renderers
  def _render_to_body_with_renderer(options); end

  def _render_with_renderer_js(js, options); end

  def _render_with_renderer_json(json, options); end

  def _render_with_renderer_xml(xml, options); end

  def render_to_body(options); end
  RENDERERS = ::T.let(nil, ::T.untyped)
end

module ActionController::Renderers::All
end

module ActionController::Renderers::All
  extend ::ActiveSupport::Concern
end

module ActionController::Renderers
  extend ::ActiveSupport::Concern
  def self._render_with_renderer_method_name(key); end

  def self.add(key, &block); end

  def self.remove(key); end
end

module ActionController::Rendering
  def render(*args); end

  def render_to_body(options=T.unsafe(nil)); end

  def render_to_string(*arg); end
  RENDER_FORMATS_IN_PRIORITY = ::T.let(nil, ::T.untyped)
end

module ActionController::Rendering
  extend ::ActiveSupport::Concern
end

module ActionController::RequestForgeryProtection
  AUTHENTICITY_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
  NULL_ORIGIN_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActionController::RequestForgeryProtection
  extend ::ActiveSupport::Concern
end

module ActionController::Rescue
  def show_detailed_exceptions?(); end
end

module ActionController::Rescue
  extend ::ActiveSupport::Concern
end

class ActionController::RespondToMismatchError
  def initialize(message=T.unsafe(nil)); end
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActionController::RespondToMismatchError
end

class ActionController::RoutingError
  def failures(); end

  def initialize(message, failures=T.unsafe(nil)); end
end

class ActionController::SessionOverflowError
  def initialize(message=T.unsafe(nil)); end
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActionController::SessionOverflowError
end

module ActionController::Streaming
end

module ActionController::Streaming
end

module ActionController::StrongParameters
  def params(); end

  def params=(value); end
end

module ActionController::StrongParameters
end

module ActionController::TemplateAssertions
  def assert_template(options=T.unsafe(nil), message=T.unsafe(nil)); end
end

module ActionController::TemplateAssertions
end

class ActionController::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionController::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  def _controller_class(); end

  def _controller_class=(_controller_class); end

  def _controller_class?(); end
end

module ActionController::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  def build_response(klass); end

  def controller_class_name(); end

  def delete(action, **args); end

  def generated_path(generated_extras); end

  def get(action, **args); end

  def head(action, **args); end

  def patch(action, **args); end

  def post(action, **args); end

  def process(action, method: T.unsafe(nil), params: T.unsafe(nil), session: T.unsafe(nil), body: T.unsafe(nil), flash: T.unsafe(nil), format: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  def put(action, **args); end

  def query_parameter_names(generated_extras); end

  def request(); end

  def response(); end

  def setup_controller_request_and_response(); end
end

module ActionController::TestCase::Behavior::ClassMethods
  def controller_class(); end

  def controller_class=(new_class); end

  def determine_default_controller_class(name); end

  def tests(controller_class); end
end

module ActionController::TestCase::Behavior::ClassMethods
end

module ActionController::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

class ActionController::TestCase
  extend ::ActionController::TestCase::Behavior::ClassMethods
  def self._controller_class(); end

  def self._controller_class=(value); end

  def self._controller_class?(); end

  def self.executor_around_each_request(); end

  def self.executor_around_each_request=(executor_around_each_request); end
end

class ActionController::TestRequest
  def assign_parameters(routes, controller_path, action, parameters, generated_path, query_string_keys); end

  def content_type=(type); end

  def initialize(env, session, controller_class); end

  def query_string=(string); end
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionController::TestRequest
  def self.create(controller_class); end

  def self.new_session(); end
end

class ActionController::TestSession
  def dig(*keys); end

  def enabled?(); end

  def fetch(key, *args, &block); end

  def initialize(session=T.unsafe(nil)); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionController::TestSession
end

module ActionController::Testing
end

module ActionController::Testing::Functional
  def clear_instance_variables_between_requests(); end

  def recycle!(); end
end

module ActionController::Testing::Functional
end

module ActionController::Testing
end

class ActionController::UnfilteredParameters
  def initialize(); end
end

class ActionController::UnfilteredParameters
end

class ActionController::UnknownFormat
end

class ActionController::UnknownFormat
end

class ActionController::UnknownHttpMethod
end

class ActionController::UnknownHttpMethod
end

class ActionController::UnpermittedParameters
  def initialize(params); end

  def params(); end
end

class ActionController::UnpermittedParameters
end

module ActionController::UrlFor
  def url_options(); end
end

module ActionController::UrlFor
  extend ::ActiveSupport::Concern
end

class ActionController::UrlGenerationError
  include ::DidYouMean::Correctable
  def initialize(message, routes=T.unsafe(nil), route_name=T.unsafe(nil), method_name=T.unsafe(nil)); end

  def method_name(); end

  def route_name(); end

  def routes(); end
end

class ActionController::UrlGenerationError
end

module ActionDispatch
  def test_app(); end

  def test_app=(val); end
end

class ActionDispatch::ActionableExceptions
  def call(env); end

  def endpoint(); end

  def endpoint=(val); end

  def initialize(app); end
end

class ActionDispatch::ActionableExceptions
  def self.endpoint(); end

  def self.endpoint=(val); end
end

class ActionDispatch::AssertionResponse
  def code(); end

  def code_and_name(); end

  def initialize(code_or_name); end

  def name(); end
  GENERIC_RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
end

module ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  def html_document(); end
end

module ActionDispatch::Assertions::ResponseAssertions
  def assert_redirected_to(options=T.unsafe(nil), message=T.unsafe(nil)); end

  def assert_response(type, message=T.unsafe(nil)); end
  RESPONSE_PREDICATES = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Assertions::ResponseAssertions
end

module ActionDispatch::Assertions::RoutingAssertions
  def assert_generates(expected_path, options, defaults=T.unsafe(nil), extras=T.unsafe(nil), message=T.unsafe(nil)); end

  def assert_recognizes(expected_options, path, extras=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_routing(path, options, defaults=T.unsafe(nil), extras=T.unsafe(nil), message=T.unsafe(nil)); end

  def method_missing(selector, *args, **arg, &block); end

  def setup(); end

  def with_routing(); end
end

module ActionDispatch::Assertions::RoutingAssertions
end

module ActionDispatch::Assertions
end

class ActionDispatch::Callbacks
  include ::ActiveSupport::Callbacks
  def __callbacks(); end

  def __callbacks?(); end

  def _call_callbacks(); end

  def _run_call_callbacks(&block); end

  def call(env); end

  def initialize(app); end
end

class ActionDispatch::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._call_callbacks(); end

  def self._call_callbacks=(value); end

  def self.after(*args, &block); end

  def self.before(*args, &block); end
end

class ActionDispatch::ContentSecurityPolicy
  def base_uri(*sources); end

  def block_all_mixed_content(enabled=T.unsafe(nil)); end

  def build(context=T.unsafe(nil), nonce=T.unsafe(nil), nonce_directives=T.unsafe(nil)); end

  def child_src(*sources); end

  def connect_src(*sources); end

  def default_src(*sources); end

  def directives(); end

  def font_src(*sources); end

  def form_action(*sources); end

  def frame_ancestors(*sources); end

  def frame_src(*sources); end

  def img_src(*sources); end

  def manifest_src(*sources); end

  def media_src(*sources); end

  def object_src(*sources); end

  def plugin_types(*types); end

  def prefetch_src(*sources); end

  def report_uri(uri); end

  def require_sri_for(*types); end

  def require_trusted_types_for(*sources); end

  def sandbox(*values); end

  def script_src(*sources); end

  def script_src_attr(*sources); end

  def script_src_elem(*sources); end

  def style_src(*sources); end

  def style_src_attr(*sources); end

  def style_src_elem(*sources); end

  def trusted_types(*sources); end

  def upgrade_insecure_requests(enabled=T.unsafe(nil)); end

  def worker_src(*sources); end
end

class ActionDispatch::ContentSecurityPolicy::Middleware
  def call(env); end

  def initialize(app); end
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::ContentSecurityPolicy::Middleware
end

module ActionDispatch::ContentSecurityPolicy::Request
  def content_security_policy(); end

  def content_security_policy=(policy); end

  def content_security_policy_nonce(); end

  def content_security_policy_nonce_directives(); end

  def content_security_policy_nonce_directives=(generator); end

  def content_security_policy_nonce_generator(); end

  def content_security_policy_nonce_generator=(generator); end

  def content_security_policy_report_only(); end

  def content_security_policy_report_only=(value); end
  NONCE = ::T.let(nil, ::T.untyped)
  NONCE_DIRECTIVES = ::T.let(nil, ::T.untyped)
  NONCE_GENERATOR = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::ContentSecurityPolicy::Request
end

class ActionDispatch::ContentSecurityPolicy
end

class ActionDispatch::Cookies
  def call(env); end

  def initialize(app); end
  AUTHENTICATED_ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  COOKIES_DIGEST = ::T.let(nil, ::T.untyped)
  COOKIES_ROTATIONS = ::T.let(nil, ::T.untyped)
  COOKIES_SAME_SITE_PROTECTION = ::T.let(nil, ::T.untyped)
  COOKIES_SERIALIZER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_CIPHER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  ENCRYPTED_SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  GENERATOR_KEY = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
  MAX_COOKIE_SIZE = ::T.let(nil, ::T.untyped)
  SECRET_KEY_BASE = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_DIGEST = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  USE_AUTHENTICATED_COOKIE_ENCRYPTION = ::T.let(nil, ::T.untyped)
  USE_COOKIES_WITH_METADATA = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies::AbstractCookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  def [](name); end

  def []=(name, options); end

  def initialize(parent_jar); end

  def request(); end
end

class ActionDispatch::Cookies::AbstractCookieJar
end

module ActionDispatch::Cookies::ChainedCookieJars
  def encrypted(); end

  def permanent(); end

  def signed(); end

  def signed_or_encrypted(); end
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  include ::Enumerable
  def [](name); end

  def []=(name, options); end

  def always_write_cookie(); end

  def always_write_cookie=(val); end

  def clear(options=T.unsafe(nil)); end

  def commit!(); end

  def committed?(); end

  def delete(name, options=T.unsafe(nil)); end

  def deleted?(name, options=T.unsafe(nil)); end

  def each(&block); end

  def fetch(name, *args, &block); end

  def has_key?(name); end

  def initialize(request); end

  def key?(name); end

  def request(); end

  def to_hash(*arg); end

  def to_header(); end

  def update(other_hash); end

  def update_cookies_from_jar(); end

  def write(headers); end
  DOMAIN_REGEXP = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies::CookieJar
  def self.always_write_cookie(); end

  def self.always_write_cookie=(val); end

  def self.build(req, cookies); end
end

class ActionDispatch::Cookies::CookieOverflow
end

class ActionDispatch::Cookies::CookieOverflow
end

class ActionDispatch::Cookies::EncryptedKeyRotatingCookieJar
  include ::ActionDispatch::Cookies::SerializedCookieJars
end

class ActionDispatch::Cookies::EncryptedKeyRotatingCookieJar
end

class ActionDispatch::Cookies::JsonSerializer
end

class ActionDispatch::Cookies::JsonSerializer
  def self.dump(value); end

  def self.load(value); end
end

class ActionDispatch::Cookies::MarshalWithJsonFallback
end

class ActionDispatch::Cookies::MarshalWithJsonFallback
  def self.dump(value); end

  def self.load(value); end
end

class ActionDispatch::Cookies::PermanentCookieJar
end

class ActionDispatch::Cookies::PermanentCookieJar
end

module ActionDispatch::Cookies::SerializedCookieJars
  def deserialize(name); end

  def digest(); end

  def needs_migration?(value); end

  def serialize(value); end

  def serializer(); end
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

ActionDispatch::Cookies::SerializedCookieJars::SERIALIZER = ActiveSupport::MessageEncryptor::NullSerializer

module ActionDispatch::Cookies::SerializedCookieJars
end

class ActionDispatch::Cookies::SignedKeyRotatingCookieJar
  include ::ActionDispatch::Cookies::SerializedCookieJars
end

class ActionDispatch::Cookies::SignedKeyRotatingCookieJar
end

class ActionDispatch::DebugExceptions
  include ::InertiaDebugExceptions
  def call(env); end

  def initialize(app, routes_app=T.unsafe(nil), response_format=T.unsafe(nil), interceptors=T.unsafe(nil)); end
end

class ActionDispatch::DebugExceptions
  def self.interceptors(); end

  def self.register_interceptor(object=T.unsafe(nil), &block); end
end

class ActionDispatch::DebugLocks
  def call(env); end

  def initialize(app, path=T.unsafe(nil)); end
end

class ActionDispatch::DebugLocks
end

class ActionDispatch::DebugView
  def debug_hash(object); end

  def debug_headers(headers); end

  def debug_params(params); end

  def initialize(assigns); end

  def params_valid?(); end

  def protect_against_forgery?(); end

  def render(*arg); end
  RESCUES_TEMPLATE_PATH = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::DebugView
end

class ActionDispatch::ExceptionWrapper
  def application_trace(); end

  def backtrace_cleaner(); end

  def exception(); end

  def exception_trace(); end

  def file(); end

  def framework_trace(); end

  def full_trace(); end

  def initialize(backtrace_cleaner, exception); end

  def line_number(); end

  def rescue_response?(); end

  def rescue_responses(); end

  def rescue_responses=(val); end

  def rescue_template(); end

  def rescue_templates(); end

  def rescue_templates=(val); end

  def silent_exceptions(); end

  def silent_exceptions=(val); end

  def source_extracts(); end

  def source_to_show_id(); end

  def status_code(); end

  def trace_to_show(); end

  def traces(); end

  def unwrapped_exception(); end

  def wrapped_causes(); end

  def wrapper_exceptions(); end

  def wrapper_exceptions=(val); end
end

class ActionDispatch::ExceptionWrapper
  def self.rescue_responses(); end

  def self.rescue_responses=(val); end

  def self.rescue_templates(); end

  def self.rescue_templates=(val); end

  def self.silent_exceptions(); end

  def self.silent_exceptions=(val); end

  def self.status_code_for_exception(class_name); end

  def self.wrapper_exceptions(); end

  def self.wrapper_exceptions=(val); end
end

class ActionDispatch::Executor
  def call(env); end

  def initialize(app, executor); end
end

class ActionDispatch::Executor
end

class ActionDispatch::FileHandler
  def attempt(env); end

  def call(env); end

  def initialize(root, index: T.unsafe(nil), headers: T.unsafe(nil), precompressed: T.unsafe(nil), compressible_content_types: T.unsafe(nil)); end
  PRECOMPRESSED = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::FileHandler
end

class ActionDispatch::Flash
  KEY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Flash::FlashHash
  include ::Enumerable
  def [](k); end

  def []=(k, v); end

  def alert(); end

  def alert=(message); end

  def clear(); end

  def delete(key); end

  def discard(k=T.unsafe(nil)); end

  def each(&block); end

  def empty?(); end

  def initialize(flashes=T.unsafe(nil), discard=T.unsafe(nil)); end

  def keep(k=T.unsafe(nil)); end

  def key?(name); end

  def keys(); end

  def merge!(h); end

  def notice(); end

  def notice=(message); end

  def now(); end

  def now_is_loaded?(); end

  def replace(h); end

  def sweep(); end

  def to_hash(); end

  def to_session_value(); end

  def update(h); end
end

class ActionDispatch::Flash::FlashHash
  def self.from_session_value(value); end
end

class ActionDispatch::Flash::FlashNow
  def [](k); end

  def []=(k, v); end

  def alert=(message); end

  def flash(); end

  def flash=(flash); end

  def initialize(flash); end

  def notice=(message); end
end

class ActionDispatch::Flash::FlashNow
end

module ActionDispatch::Flash::RequestMethods
  def commit_flash(); end

  def flash(); end

  def flash=(flash); end

  def flash_hash(); end

  def reset_session(); end
end

module ActionDispatch::Flash::RequestMethods
end

class ActionDispatch::Flash
  def self.new(app); end
end

class ActionDispatch::HostAuthorization
  def call(env); end

  def initialize(app, hosts, exclude: T.unsafe(nil), response_app: T.unsafe(nil)); end
  ALLOWED_HOSTS_IN_DEVELOPMENT = ::T.let(nil, ::T.untyped)
  IPV4_HOSTNAME = ::T.let(nil, ::T.untyped)
  IPV6_HOSTNAME = ::T.let(nil, ::T.untyped)
  IPV6_HOSTNAME_WITH_PORT = ::T.let(nil, ::T.untyped)
  PORT_REGEX = ::T.let(nil, ::T.untyped)
  VALID_IP_HOSTNAME = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::HostAuthorization::DefaultResponseApp
  def call(env); end
  RESPONSE_STATUS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::HostAuthorization::DefaultResponseApp
end

class ActionDispatch::HostAuthorization::Permissions
  def allows?(host); end

  def empty?(); end

  def initialize(hosts); end
end

class ActionDispatch::HostAuthorization::Permissions
end

class ActionDispatch::HostAuthorization
end

module ActionDispatch::Http
end

module ActionDispatch::Http::Cache
end

module ActionDispatch::Http::Cache::Request
  def etag_matches?(etag); end

  def fresh?(response); end

  def if_modified_since(); end

  def if_none_match(); end

  def if_none_match_etags(); end

  def not_modified?(modified_at); end
  HTTP_IF_MODIFIED_SINCE = ::T.let(nil, ::T.untyped)
  HTTP_IF_NONE_MATCH = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Cache::Request
end

module ActionDispatch::Http::Cache::Response
  def cache_control(); end

  def date(); end

  def date=(utc_time); end

  def date?(); end

  def etag=(weak_validators); end

  def etag?(); end

  def last_modified(); end

  def last_modified=(utc_time); end

  def last_modified?(); end

  def strong_etag=(strong_validators); end

  def strong_etag?(); end

  def weak_etag=(weak_validators); end

  def weak_etag?(); end
  DATE = ::T.let(nil, ::T.untyped)
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  LAST_MODIFIED = ::T.let(nil, ::T.untyped)
  MUST_REVALIDATE = ::T.let(nil, ::T.untyped)
  NO_CACHE = ::T.let(nil, ::T.untyped)
  NO_STORE = ::T.let(nil, ::T.untyped)
  PRIVATE = ::T.let(nil, ::T.untyped)
  PUBLIC = ::T.let(nil, ::T.untyped)
  SPECIAL_KEYS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Cache::Response
end

module ActionDispatch::Http::Cache
end

class ActionDispatch::Http::ContentDisposition
  def ascii_filename(); end

  def disposition(); end

  def filename(); end

  def initialize(disposition:, filename:); end

  def utf8_filename(); end
  RFC_5987_ESCAPED_CHAR = ::T.let(nil, ::T.untyped)
  TRADITIONAL_ESCAPED_CHAR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Http::ContentDisposition
  def self.format(disposition:, filename:); end
end

module ActionDispatch::Http::FilterParameters
  def filtered_env(); end

  def filtered_parameters(); end

  def filtered_path(); end

  def initialize(); end
  ENV_MATCH = ::T.let(nil, ::T.untyped)
  KV_RE = ::T.let(nil, ::T.untyped)
  NULL_ENV_FILTER = ::T.let(nil, ::T.untyped)
  NULL_PARAM_FILTER = ::T.let(nil, ::T.untyped)
  PAIR_RE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::FilterParameters
end

module ActionDispatch::Http::FilterRedirect
  def filtered_location(); end
  FILTERED = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::FilterRedirect
end

class ActionDispatch::Http::Headers
  include ::Enumerable
  def [](key); end

  def []=(key, value); end

  def add(key, value); end

  def each(&block); end

  def env(); end

  def fetch(key, default=T.unsafe(nil)); end

  def include?(key); end

  def initialize(request); end

  def key?(key); end

  def merge(headers_or_env); end

  def merge!(headers_or_env); end
  CGI_VARIABLES = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Http::Headers
  def self.from_hash(hash); end
end

module ActionDispatch::Http::MimeNegotiation
  def accepts(); end

  def content_mime_type(); end

  def content_type(); end

  def format(view_path=T.unsafe(nil)); end

  def format=(extension); end

  def formats(); end

  def formats=(extensions); end

  def has_content_type?(); end

  def negotiate_mime(order); end

  def should_apply_vary_header?(); end

  def variant(); end

  def variant=(variant); end
  BROWSER_LIKE_ACCEPTS = ::T.let(nil, ::T.untyped)
  RESCUABLE_MIME_FORMAT_ERRORS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::MimeNegotiation
  extend ::ActiveSupport::Concern
end

module ActionDispatch::Http::Parameters
  def parameters(); end

  def params(); end

  def path_parameters(); end

  def path_parameters=(parameters); end
  DEFAULT_PARSERS = ::T.let(nil, ::T.untyped)
  PARAMETERS_KEY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Parameters
  extend ::ActiveSupport::Concern
end

module ActionDispatch::Http::URL
  def domain(tld_length=T.unsafe(nil)); end

  def host(); end

  def host_with_port(); end

  def initialize(); end

  def optional_port(); end

  def port(); end

  def port_string(); end

  def protocol(); end

  def raw_host_with_port(); end

  def secure_protocol(); end

  def secure_protocol=(val); end

  def server_port(); end

  def standard_port(); end

  def standard_port?(); end

  def subdomain(tld_length=T.unsafe(nil)); end

  def subdomains(tld_length=T.unsafe(nil)); end

  def tld_length(); end

  def tld_length=(val); end

  def url(); end
  HOST_REGEXP = ::T.let(nil, ::T.untyped)
  IP_HOST_REGEXP = ::T.let(nil, ::T.untyped)
  PROTOCOL_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::URL
  def self.extract_domain(host, tld_length); end

  def self.extract_subdomain(host, tld_length); end

  def self.extract_subdomains(host, tld_length); end

  def self.full_url_for(options); end

  def self.path_for(options); end

  def self.secure_protocol(); end

  def self.secure_protocol=(val); end

  def self.tld_length(); end

  def self.tld_length=(val); end

  def self.url_for(options); end
end

class ActionDispatch::Http::UploadedFile
  def close(unlink_now=T.unsafe(nil)); end

  def content_type(); end

  def content_type=(content_type); end

  def eof?(); end

  def headers(); end

  def headers=(headers); end

  def initialize(hash); end

  def open(); end

  def original_filename(); end

  def original_filename=(original_filename); end

  def path(); end

  def read(length=T.unsafe(nil), buffer=T.unsafe(nil)); end

  def rewind(); end

  def size(); end

  def tempfile(); end

  def tempfile=(tempfile); end

  def to_io(); end

  def to_path(); end
end

class ActionDispatch::Http::UploadedFile
end

module ActionDispatch::Http
  extend ::ActiveSupport::Autoload
end

class ActionDispatch::IllegalStateError
end

class ActionDispatch::IllegalStateError
end

module ActionDispatch::Integration
end

module ActionDispatch::Integration::RequestHelpers
  def delete(path, **args); end

  def follow_redirect!(**args); end

  def get(path, **args); end

  def head(path, **args); end

  def options(path, **args); end

  def patch(path, **args); end

  def post(path, **args); end

  def put(path, **args); end
end

module ActionDispatch::Integration::RequestHelpers
end

module ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  def app(); end

  def assertions(); end

  def assertions=(assertions); end

  def assigns(*arg, **arg1, &arg2); end

  def before_setup(); end

  def cookies(*arg, **arg1, &arg2); end

  def copy_session_variables!(); end

  def create_session(app); end

  def default_url_options(); end

  def default_url_options=(options); end

  def delete(*arg, **arg1, &arg2); end

  def follow_redirect!(*arg, **arg1, &arg2); end

  def get(*arg, **arg1, &arg2); end

  def head(*arg, **arg1, &arg2); end

  def initialize(*args, &blk); end

  def integration_session(); end

  def open_session(); end

  def patch(*arg, **arg1, &arg2); end

  def post(*arg, **arg1, &arg2); end

  def put(*arg, **arg1, &arg2); end

  def remove!(); end

  def reset!(); end

  def root_session(); end

  def root_session=(root_session); end
  APP_SESSIONS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration::Runner
end

class ActionDispatch::Integration::Session
  include ::Minitest::Assertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionDispatch::Integration::RequestHelpers
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def accept(); end

  def accept=(accept); end

  def body(*arg, **arg1, &arg2); end

  def controller(); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def headers(*arg, **arg1, &arg2); end

  def host(); end

  def host!(arg); end

  def host=(host); end

  def https!(flag=T.unsafe(nil)); end

  def https?(); end

  def initialize(app); end

  def path(*arg, **arg1, &arg2); end

  def process(method, path, params: T.unsafe(nil), headers: T.unsafe(nil), env: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  def redirect?(*arg, **arg1, &arg2); end

  def remote_addr(); end

  def remote_addr=(remote_addr); end

  def request(); end

  def request_count(); end

  def request_count=(request_count); end

  def reset!(); end

  def response(); end

  def status(*arg, **arg1, &arg2); end

  def status_message(*arg, **arg1, &arg2); end
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Integration::Session
  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end
end

module ActionDispatch::Integration
end

class ActionDispatch::IntegrationTest
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::IntegrationTest::UrlOptions
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActionMailer::TestCase::ClearTestDeliveries
end

module ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionController::TemplateAssertions
  def app(); end

  def document_root_element(); end
end

module ActionDispatch::IntegrationTest::Behavior::ClassMethods
  def app(); end

  def app=(app); end

  def register_encoder(*args, **options); end
end

module ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

module ActionDispatch::IntegrationTest::Behavior
  extend ::ActiveSupport::Concern
end

module ActionDispatch::IntegrationTest::UrlOptions
  def url_options(); end
end

module ActionDispatch::IntegrationTest::UrlOptions
  extend ::ActiveSupport::Concern
end

class ActionDispatch::IntegrationTest
  extend ::ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

module ActionDispatch::Journey
end

class ActionDispatch::Journey::Ast
  def glob?(); end

  def initialize(tree, formatted); end

  def names(); end

  def path_params(); end

  def requirements=(requirements); end

  def root(); end

  def route=(route); end

  def terminals(); end

  def tree(); end

  def wildcard_options(); end
end

class ActionDispatch::Journey::Ast
end

class ActionDispatch::Journey::Format
  def evaluate(hash); end

  def initialize(parts); end
  ESCAPE_PATH = ::T.let(nil, ::T.untyped)
  ESCAPE_SEGMENT = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Format::Parameter
  def escape(value); end

  def escaper(); end

  def escaper=(_); end

  def name(); end

  def name=(_); end
end

class ActionDispatch::Journey::Format::Parameter
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActionDispatch::Journey::Format
  def self.required_path(symbol); end

  def self.required_segment(symbol); end
end

class ActionDispatch::Journey::Formatter
  def clear(); end

  def generate(name, options, path_parameters); end

  def initialize(routes); end

  def routes(); end
end

class ActionDispatch::Journey::Formatter::MissingRoute
  def constraints(); end

  def initialize(constraints, missing_keys, unmatched_keys, routes, name); end

  def message(); end

  def missing_keys(); end

  def name(); end

  def params(); end

  def path(method_name); end

  def routes(); end

  def unmatched_keys(); end
end

class ActionDispatch::Journey::Formatter::MissingRoute
end

class ActionDispatch::Journey::Formatter::RouteWithParams
  def initialize(route, parameterized_parts, params); end

  def params(); end

  def path(_); end
end

class ActionDispatch::Journey::Formatter::RouteWithParams
end

class ActionDispatch::Journey::Formatter
end

module ActionDispatch::Journey::GTG
end

class ActionDispatch::Journey::GTG::Builder
  def ast(); end

  def endpoints(); end

  def firstpos(node); end

  def initialize(root); end

  def lastpos(node); end

  def nullable?(node); end

  def root(); end

  def transition_table(); end
  DUMMY_END_NODE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Builder
end

class ActionDispatch::Journey::GTG::MatchData
  def initialize(memos); end

  def memos(); end
end

class ActionDispatch::Journey::GTG::MatchData
end

class ActionDispatch::Journey::GTG::Simulator
  def initialize(transition_table); end

  def memos(string); end

  def tt(); end
  INITIAL_STATE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Simulator
end

class ActionDispatch::Journey::GTG::TransitionTable
  include ::ActionDispatch::Journey::NFA::Dot
  def []=(from, to, sym); end

  def accepting?(state); end

  def accepting_states(); end

  def add_accepting(state); end

  def add_memo(idx, memo); end

  def eclosure(t); end

  def memo(idx); end

  def memos(); end

  def move(t, full_string, start_index, end_index); end

  def states(); end

  def to_svg(); end

  def transitions(); end

  def visualizer(paths, title=T.unsafe(nil)); end
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
  DEFAULT_EXP_ANCHORED = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::TransitionTable
end

module ActionDispatch::Journey::GTG
end

module ActionDispatch::Journey::NFA
end

module ActionDispatch::Journey::NFA::Dot
  def to_dot(); end
end

module ActionDispatch::Journey::NFA::Dot
end

module ActionDispatch::Journey::NFA
end

module ActionDispatch::Journey::Nodes
end

class ActionDispatch::Journey::Nodes::Binary
  def children(); end

  def initialize(left, right); end

  def right(); end

  def right=(right); end
end

class ActionDispatch::Journey::Nodes::Binary
end

class ActionDispatch::Journey::Nodes::Cat
end

class ActionDispatch::Journey::Nodes::Cat
end

class ActionDispatch::Journey::Nodes::Dot
end

class ActionDispatch::Journey::Nodes::Dot
end

class ActionDispatch::Journey::Nodes::Dummy
  def initialize(x=T.unsafe(nil)); end
end

class ActionDispatch::Journey::Nodes::Dummy
end

class ActionDispatch::Journey::Nodes::Group
end

class ActionDispatch::Journey::Nodes::Group
end

class ActionDispatch::Journey::Nodes::Literal
end

class ActionDispatch::Journey::Nodes::Literal
end

class ActionDispatch::Journey::Nodes::Node
  include ::Enumerable
  def cat?(); end

  def each(&block); end

  def group?(); end

  def initialize(left); end

  def left(); end

  def left=(left); end

  def literal?(); end

  def memo(); end

  def memo=(memo); end

  def name(); end

  def star?(); end

  def symbol?(); end

  def terminal?(); end

  def to_dot(); end

  def to_sym(); end

  def type(); end
end

class ActionDispatch::Journey::Nodes::Node
end

class ActionDispatch::Journey::Nodes::Or
  def children(); end

  def initialize(children); end
end

class ActionDispatch::Journey::Nodes::Or
end

class ActionDispatch::Journey::Nodes::Slash
end

class ActionDispatch::Journey::Nodes::Slash
end

class ActionDispatch::Journey::Nodes::Star
  def regexp(); end

  def regexp=(regexp); end
end

class ActionDispatch::Journey::Nodes::Star
end

class ActionDispatch::Journey::Nodes::Symbol
  def initialize(left, regexp=T.unsafe(nil)); end

  def regexp(); end

  def regexp=(regexp); end
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
  GREEDY_EXP = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Nodes::Symbol
end

class ActionDispatch::Journey::Nodes::Terminal
  def symbol(); end
end

class ActionDispatch::Journey::Nodes::Terminal
end

class ActionDispatch::Journey::Nodes::Unary
  def children(); end
end

class ActionDispatch::Journey::Nodes::Unary
end

module ActionDispatch::Journey::Nodes
end

class ActionDispatch::Journey::Parser
  include ::ActionDispatch::Journey::Nodes
  def _reduce_1(val, _values); end

  def _reduce_10(val, _values); end

  def _reduce_15(val, _values); end

  def _reduce_16(val, _values); end

  def _reduce_17(val, _values); end

  def _reduce_18(val, _values); end

  def _reduce_2(val, _values); end

  def _reduce_7(val, _values); end

  def _reduce_8(val, _values); end

  def _reduce_9(val, _values); end

  def _reduce_none(val, _values); end

  def parse(string); end
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Parser
  def self.parse(string); end
end

module ActionDispatch::Journey::Path
end

class ActionDispatch::Journey::Path::Pattern
  def =~(other); end

  def anchored(); end

  def ast(); end

  def build_formatter(); end

  def eager_load!(); end

  def initialize(ast, requirements, separators, anchored); end

  def match(other); end

  def match?(other); end

  def names(); end

  def optional_names(); end

  def required_names(); end

  def requirements(); end

  def requirements_anchored?(); end

  def requirements_for_missing_keys_check(); end

  def source(); end

  def spec(); end

  def to_regexp(); end
end

class ActionDispatch::Journey::Path::Pattern::AnchoredRegexp
  def initialize(separator, matchers); end

  def visit_CAT(node); end

  def visit_DOT(node); end

  def visit_GROUP(node); end

  def visit_LITERAL(node); end

  def visit_OR(node); end

  def visit_SLASH(node); end

  def visit_STAR(node); end

  def visit_SYMBOL(node); end
end

class ActionDispatch::Journey::Path::Pattern::AnchoredRegexp
end

class ActionDispatch::Journey::Path::Pattern::MatchData
  def [](x); end

  def captures(); end

  def initialize(names, offsets, match); end

  def length(); end

  def named_captures(); end

  def names(); end

  def post_match(); end
end

class ActionDispatch::Journey::Path::Pattern::MatchData
end

class ActionDispatch::Journey::Path::Pattern::UnanchoredRegexp
end

class ActionDispatch::Journey::Path::Pattern::UnanchoredRegexp
end

class ActionDispatch::Journey::Path::Pattern
end

module ActionDispatch::Journey::Path
end

class ActionDispatch::Journey::Route
  def app(); end

  def ast(); end

  def conditions(); end

  def constraints(); end

  def defaults(); end

  def dispatcher?(); end

  def eager_load!(); end

  def format(path_options); end

  def glob?(); end

  def initialize(name:, path:, app: T.unsafe(nil), constraints: T.unsafe(nil), required_defaults: T.unsafe(nil), defaults: T.unsafe(nil), request_method_match: T.unsafe(nil), precedence: T.unsafe(nil), scope_options: T.unsafe(nil), internal: T.unsafe(nil)); end

  def internal(); end

  def ip(); end

  def matches?(request); end

  def name(); end

  def parts(); end

  def path(); end

  def precedence(); end

  def required_default?(key); end

  def required_defaults(); end

  def required_keys(); end

  def required_parts(); end

  def requirements(); end

  def requires_matching_verb?(); end

  def scope_options(); end

  def score(supplied_keys); end

  def segment_keys(); end

  def segments(); end

  def verb(); end
end

module ActionDispatch::Journey::Route::VerbMatchers
  VERBS = ::T.let(nil, ::T.untyped)
  VERB_TO_CLASS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Route::VerbMatchers::All
end

class ActionDispatch::Journey::Route::VerbMatchers::All
  def self.call(_); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::DELETE
end

class ActionDispatch::Journey::Route::VerbMatchers::DELETE
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::GET
end

class ActionDispatch::Journey::Route::VerbMatchers::GET
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::HEAD
end

class ActionDispatch::Journey::Route::VerbMatchers::HEAD
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::LINK
end

class ActionDispatch::Journey::Route::VerbMatchers::LINK
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::OPTIONS
end

class ActionDispatch::Journey::Route::VerbMatchers::OPTIONS
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::PATCH
end

class ActionDispatch::Journey::Route::VerbMatchers::PATCH
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::POST
end

class ActionDispatch::Journey::Route::VerbMatchers::POST
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::PUT
end

class ActionDispatch::Journey::Route::VerbMatchers::PUT
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::TRACE
end

class ActionDispatch::Journey::Route::VerbMatchers::TRACE
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::UNLINK
end

class ActionDispatch::Journey::Route::VerbMatchers::UNLINK
  def self.call(req); end

  def self.verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::Unknown
  def call(request); end

  def initialize(verb); end

  def verb(); end
end

class ActionDispatch::Journey::Route::VerbMatchers::Unknown
end

module ActionDispatch::Journey::Route::VerbMatchers
end

class ActionDispatch::Journey::Route
  def self.verb_matcher(verb); end
end

class ActionDispatch::Journey::Router
  def eager_load!(); end

  def initialize(routes); end

  def recognize(rails_req); end

  def routes(); end

  def routes=(routes); end

  def serve(req); end

  def visualizer(); end
end

class ActionDispatch::Journey::Router::Utils
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils::UriEncoder
  def escape_fragment(fragment); end

  def escape_path(path); end

  def escape_segment(segment); end

  def unescape_uri(uri); end
  ALPHA = ::T.let(nil, ::T.untyped)
  DEC2HEX = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODE = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  SEGMENT = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils::UriEncoder
end

class ActionDispatch::Journey::Router::Utils
  def self.escape_fragment(fragment); end

  def self.escape_path(path); end

  def self.escape_segment(segment); end

  def self.normalize_path(path); end

  def self.unescape_uri(uri); end
end

class ActionDispatch::Journey::Router
end

class ActionDispatch::Journey::Routes
  include ::Enumerable
  def add_route(name, mapping); end

  def anchored_routes(); end

  def ast(); end

  def clear(); end

  def custom_routes(); end

  def each(&block); end

  def empty?(); end

  def last(); end

  def length(); end

  def partition_route(route); end

  def routes(); end

  def simulator(); end

  def size(); end
end

class ActionDispatch::Journey::Routes
end

class ActionDispatch::Journey::Scanner
  def eos?(); end

  def next_token(); end

  def pos(); end

  def pre_match(); end

  def scan_setup(str); end
end

class ActionDispatch::Journey::Scanner
end

module ActionDispatch::Journey::Visitors
end

class ActionDispatch::Journey::Visitors::Dot
  def accept(node, seed=T.unsafe(nil)); end
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Dot
end

class ActionDispatch::Journey::Visitors::Each
  def visit(node, block); end
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Each
end

class ActionDispatch::Journey::Visitors::FormatBuilder
end

class ActionDispatch::Journey::Visitors::FormatBuilder
end

class ActionDispatch::Journey::Visitors::FunctionalVisitor
  def accept(node, seed); end

  def binary(node, seed); end

  def nary(node, seed); end

  def terminal(node, seed); end

  def unary(node, seed); end

  def visit(node, seed); end

  def visit_CAT(n, seed); end

  def visit_DOT(n, seed); end

  def visit_GROUP(n, seed); end

  def visit_LITERAL(n, seed); end

  def visit_OR(n, seed); end

  def visit_SLASH(n, seed); end

  def visit_STAR(n, seed); end

  def visit_SYMBOL(n, seed); end
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::FunctionalVisitor
end

class ActionDispatch::Journey::Visitors::String
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::String
end

class ActionDispatch::Journey::Visitors::Visitor
  def accept(node); end
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Visitor
end

module ActionDispatch::Journey::Visitors
end

module ActionDispatch::Journey
end

class ActionDispatch::MiddlewareStack
  include ::Enumerable
  def [](i); end

  def build(app=T.unsafe(nil), &block); end

  def delete(target); end

  def delete!(target); end

  def each(&block); end

  def initialize(*args); end

  def insert(index, klass, *args, **arg, &block); end

  def insert_after(index, *args, **arg, &block); end

  def insert_before(index, klass, *args, **arg, &block); end

  def last(); end

  def middlewares(); end

  def middlewares=(middlewares); end

  def move(target, source); end

  def move_after(target, source); end

  def move_before(target, source); end

  def size(); end

  def swap(target, *args, **arg, &block); end

  def unshift(klass, *args, **arg, &block); end

  def use(klass, *args, **arg, &block); end
end

class ActionDispatch::MiddlewareStack::Middleware
  def ==(middleware); end

  def args(); end

  def block(); end

  def build(app); end

  def build_instrumented(app); end

  def initialize(klass, args, block); end

  def klass(); end

  def name(); end
end

class ActionDispatch::MiddlewareStack::Middleware
end

class ActionDispatch::MiddlewareStack
end

class ActionDispatch::MissingController
end

class ActionDispatch::MissingController
end

class ActionDispatch::PermissionsPolicy
  def accelerometer(*sources); end

  def ambient_light_sensor(*sources); end

  def autoplay(*sources); end

  def build(context=T.unsafe(nil)); end

  def camera(*sources); end

  def directives(); end

  def encrypted_media(*sources); end

  def fullscreen(*sources); end

  def geolocation(*sources); end

  def gyroscope(*sources); end

  def magnetometer(*sources); end

  def microphone(*sources); end

  def midi(*sources); end

  def payment(*sources); end

  def picture_in_picture(*sources); end

  def speaker(*sources); end

  def usb(*sources); end

  def vibrate(*sources); end

  def vr(*sources); end
end

class ActionDispatch::PermissionsPolicy::Middleware
  def call(env); end

  def initialize(app); end
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::PermissionsPolicy::Middleware
end

module ActionDispatch::PermissionsPolicy::Request
  def permissions_policy(); end

  def permissions_policy=(policy); end
  POLICY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::PermissionsPolicy::Request
end

class ActionDispatch::PermissionsPolicy
end

class ActionDispatch::PublicExceptions
  def call(env); end

  def initialize(public_path); end

  def public_path(); end

  def public_path=(public_path); end
end

class ActionDispatch::PublicExceptions
end

class ActionDispatch::Railtie
end

class ActionDispatch::Railtie
end

class ActionDispatch::Reloader
end

class ActionDispatch::Reloader
end

class ActionDispatch::RemoteIp
  def call(env); end

  def check_ip(); end

  def initialize(app, ip_spoofing_check=T.unsafe(nil), custom_proxies=T.unsafe(nil)); end

  def proxies(); end
  TRUSTED_PROXIES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::RemoteIp::GetIp
  def calculate_ip(); end

  def initialize(req, check_ip, proxies); end
end

class ActionDispatch::RemoteIp::GetIp
end

class ActionDispatch::RemoteIp::IpSpoofAttackError
end

class ActionDispatch::RemoteIp::IpSpoofAttackError
end

class ActionDispatch::RemoteIp
end

class ActionDispatch::Request
  include ::Rack::Request::Helpers
  include ::ActionDispatch::Http::Cache::Request
  include ::ActionDispatch::Http::MimeNegotiation
  include ::ActionDispatch::Http::Parameters
  include ::ActionDispatch::Http::FilterParameters
  include ::ActionDispatch::Http::URL
  include ::ActionDispatch::ContentSecurityPolicy::Request
  include ::ActionDispatch::PermissionsPolicy::Request
  include ::Rack::Request::Env
  include ::ActionDispatch::RequestCookieMethods
  include ::ActionDispatch::Flash::RequestMethods
  def accept(); end

  def accept_charset(); end

  def auth_type(); end

  def authorization(); end

  def body_stream(); end

  def cache_control(); end

  def client_ip(); end

  def controller_class(); end

  def controller_class_for(name); end

  def controller_instance(); end

  def controller_instance=(controller); end

  def engine_script_name(_routes); end

  def engine_script_name=(name); end

  def from(); end

  def gateway_interface(); end

  def headers(); end

  def http_auth_salt(); end

  def ignore_accept_header(); end

  def ignore_accept_header=(val); end

  def key?(key); end

  def local?(); end

  def method(); end

  def method_symbol(); end

  def negotiate(); end

  def origin(); end

  def original_fullpath(); end

  def original_script_name(); end

  def original_url(); end

  def path_translated(); end

  def pragma(); end

  def query_parameters(); end

  def raw_post(); end

  def raw_request_method(); end

  def remote_addr(); end

  def remote_host(); end

  def remote_ident(); end

  def remote_ip(); end

  def remote_ip=(remote_ip); end

  def remote_user(); end

  def request_id(); end

  def request_id=(id); end

  def request_method=(request_method); end

  def request_method_symbol(); end

  def request_parameters(); end

  def request_parameters=(params); end

  def return_only_media_type_on_content_type(); end

  def return_only_media_type_on_content_type=(val); end

  def routes(); end

  def routes=(routes); end

  def send_early_hints(links); end

  def server_protocol(); end

  def server_software(); end

  def session=(session); end

  def session_options=(options); end

  def show_exceptions?(); end

  def uuid(); end

  def version(); end

  def x_csrf_token(); end

  def x_forwarded_for(); end

  def x_forwarded_host(); end

  def x_request_id(); end

  def xml_http_request?(); end
  ACTION_DISPATCH_REQUEST_ID = ::T.let(nil, ::T.untyped)
  ENV_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_LOOKUP = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  RFC2518 = ::T.let(nil, ::T.untyped)
  RFC2616 = ::T.let(nil, ::T.untyped)
  RFC3253 = ::T.let(nil, ::T.untyped)
  RFC3648 = ::T.let(nil, ::T.untyped)
  RFC3744 = ::T.let(nil, ::T.untyped)
  RFC4791 = ::T.let(nil, ::T.untyped)
  RFC5323 = ::T.let(nil, ::T.untyped)
  RFC5789 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Request
  def self.empty(); end

  def self.ignore_accept_header(); end

  def self.ignore_accept_header=(val); end

  def self.parameter_parsers(); end

  def self.return_only_media_type_on_content_type(); end

  def self.return_only_media_type_on_content_type=(val); end
end

module ActionDispatch::RequestCookieMethods
  def authenticated_encrypted_cookie_salt(); end

  def commit_cookie_jar!(); end

  def cookie_jar(); end

  def cookie_jar=(jar); end

  def cookies_digest(); end

  def cookies_rotations(); end

  def cookies_same_site_protection(); end

  def cookies_serializer(); end

  def encrypted_cookie_cipher(); end

  def encrypted_cookie_salt(); end

  def encrypted_signed_cookie_salt(); end

  def have_cookie_jar?(); end

  def key_generator(); end

  def secret_key_base(); end

  def signed_cookie_digest(); end

  def signed_cookie_salt(); end

  def use_authenticated_cookie_encryption(); end

  def use_cookies_with_metadata(); end
end

module ActionDispatch::RequestCookieMethods
end

class ActionDispatch::RequestId
  def call(env); end

  def initialize(app, header:); end
end

class ActionDispatch::RequestId
end

class ActionDispatch::Response
  include ::Rack::Response::Helpers
  include ::ActionDispatch::Http::FilterRedirect
  include ::ActionDispatch::Http::Cache::Response
  include ::MonitorMixin
  def [](*arg, **arg1, &arg2); end

  def []=(*arg, **arg1, &arg2); end

  def _cache_control(); end

  def _cache_control=(v); end

  def abort(); end

  def await_commit(); end

  def await_sent(); end

  def body(); end

  def body=(body); end

  def body_parts(); end

  def charset(); end

  def charset=(charset); end

  def close(); end

  def code(); end

  def commit!(); end

  def committed?(); end

  def cookies(); end

  def default_charset(); end

  def default_charset=(val); end

  def default_headers(); end

  def default_headers=(val); end

  def delete_header(key); end

  def each(&block); end

  def get_header(key); end

  def has_header?(key); end

  def header(); end

  def headers(); end

  def initialize(status=T.unsafe(nil), header=T.unsafe(nil), body=T.unsafe(nil)); end

  def message(); end

  def prepare!(); end

  def redirect_url(); end

  def request(); end

  def request=(request); end

  def reset_body!(); end

  def response_code(); end

  def send_file(path); end

  def sending!(); end

  def sending?(); end

  def sending_file=(v); end

  def sent!(); end

  def sent?(); end

  def set_header(key, v); end

  def status(); end

  def status=(status); end

  def status_message(); end

  def stream(); end

  def to_a(); end

  def write(string); end
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE_PARSER = ::T.let(nil, ::T.untyped)
  LOCATION = ::T.let(nil, ::T.untyped)
  NO_CONTENT_CODES = ::T.let(nil, ::T.untyped)
  NullContentTypeHeader = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Response::Buffer
  def abort(); end

  def body(); end

  def close(); end

  def closed?(); end

  def each(&block); end

  def initialize(response, buf); end

  def write(string); end
end

class ActionDispatch::Response::Buffer
end

class ActionDispatch::Response
  def self.create(status=T.unsafe(nil), header=T.unsafe(nil), body=T.unsafe(nil), default_headers: T.unsafe(nil)); end

  def self.default_charset(); end

  def self.default_charset=(val); end

  def self.default_headers(); end

  def self.default_headers=(val); end

  def self.merge_default_headers(original, default); end
end

module ActionDispatch::Routing
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::ConsoleFormatter
end

class ActionDispatch::Routing::ConsoleFormatter::Base
  def header(routes); end

  def no_routes(routes, filter); end

  def result(); end

  def section(routes); end

  def section_title(title); end
end

class ActionDispatch::Routing::ConsoleFormatter::Base
end

class ActionDispatch::Routing::ConsoleFormatter::Expanded
  def initialize(width: T.unsafe(nil)); end
end

class ActionDispatch::Routing::ConsoleFormatter::Expanded
end

class ActionDispatch::Routing::ConsoleFormatter::Sheet
end

class ActionDispatch::Routing::ConsoleFormatter::Sheet
end

module ActionDispatch::Routing::ConsoleFormatter
end

class ActionDispatch::Routing::Endpoint
  def app(); end

  def dispatcher?(); end

  def engine?(); end

  def matches?(req); end

  def rack_app(); end

  def redirect?(); end
end

class ActionDispatch::Routing::Endpoint
end

class ActionDispatch::Routing::HtmlTableFormatter
  def header(routes); end

  def initialize(view); end

  def no_routes(*arg); end

  def result(); end

  def section(routes); end

  def section_title(title); end
end

class ActionDispatch::Routing::HtmlTableFormatter
end

class ActionDispatch::Routing::Mapper
  include ::ActionDispatch::Routing::Mapper::Base
  include ::ActionDispatch::Routing::Mapper::HttpHelpers
  include ::ActionDispatch::Routing::Redirection
  include ::ActionDispatch::Routing::Mapper::Scoping
  include ::ActionDispatch::Routing::Mapper::Concerns
  include ::ActionDispatch::Routing::Mapper::Resources
  include ::ActionDispatch::Routing::Mapper::CustomUrls
  include ::Patches::ActionDispatch::DrawRoute
  def initialize(set); end
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Base
  def default_url_options(options); end

  def default_url_options=(options); end

  def has_named_route?(name); end

  def match(path, options=T.unsafe(nil)); end

  def mount(app, options=T.unsafe(nil)); end

  def with_default_scope(scope, &block); end
end

module ActionDispatch::Routing::Mapper::Base
end

module ActionDispatch::Routing::Mapper::Concerns
  def concern(name, callable=T.unsafe(nil), &block); end

  def concerns(*args); end
end

module ActionDispatch::Routing::Mapper::Concerns
end

class ActionDispatch::Routing::Mapper::Constraints
  def constraints(); end

  def initialize(app, constraints, strategy); end

  def serve(req); end
  CALL = ::T.let(nil, ::T.untyped)
  SERVE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Constraints
end

module ActionDispatch::Routing::Mapper::CustomUrls
  def direct(name, options=T.unsafe(nil), &block); end

  def resolve(*args, &block); end
end

module ActionDispatch::Routing::Mapper::CustomUrls
end

module ActionDispatch::Routing::Mapper::HttpHelpers
  def delete(*args, &block); end

  def get(*args, &block); end

  def options(*args, &block); end

  def patch(*args, &block); end

  def post(*args, &block); end

  def put(*args, &block); end
end

module ActionDispatch::Routing::Mapper::HttpHelpers
end

class ActionDispatch::Routing::Mapper::Mapping
  def application(); end

  def ast(); end

  def conditions(); end

  def default_action(); end

  def default_controller(); end

  def defaults(); end

  def initialize(set:, ast:, controller:, default_action:, to:, formatted:, via:, options_constraints:, anchor:, scope_params:, options:); end

  def make_route(name, precedence); end

  def path(); end

  def required_defaults(); end

  def requirements(); end

  def scope_options(); end

  def to(); end
  ANCHOR_CHARACTERS_REGEX = ::T.let(nil, ::T.untyped)
  JOINED_SEPARATORS = ::T.let(nil, ::T.untyped)
  OPTIONAL_FORMAT_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Mapping
  def self.build(scope, set, ast, controller, default_action, to, via, formatted, options_constraints, anchor, options); end

  def self.check_via(via); end

  def self.normalize_path(path, format); end

  def self.optional_format?(path, format); end
end

module ActionDispatch::Routing::Mapper::Resources
  def collection(&block); end

  def draw(name); end

  def match(path, *rest, &block); end

  def member(&block); end

  def namespace(path, options=T.unsafe(nil)); end

  def nested(&block); end

  def new(&block); end

  def resource(*resources, &block); end

  def resources(*resources, &block); end

  def resources_path_names(options); end

  def root(path, options=T.unsafe(nil)); end

  def shallow(); end

  def shallow?(); end
  CANONICAL_ACTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_ON_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Resources::Resource
  def actions(); end

  def available_actions(); end

  def collection_name(); end

  def collection_scope(); end

  def controller(); end

  def default_actions(); end

  def initialize(entities, api_only, shallow, options=T.unsafe(nil)); end

  def member_name(); end

  def member_scope(); end

  def name(); end

  def nested_param(); end

  def nested_scope(); end

  def new_scope(new_path); end

  def param(); end

  def path(); end

  def plural(); end

  def resource_scope(); end

  def shallow?(); end

  def shallow_scope(); end

  def singleton?(); end

  def singular(); end
end

class ActionDispatch::Routing::Mapper::Resources::Resource
end

class ActionDispatch::Routing::Mapper::Resources::SingletonResource
  def initialize(entities, api_only, shallow, options); end
end

class ActionDispatch::Routing::Mapper::Resources::SingletonResource
end

module ActionDispatch::Routing::Mapper::Resources
end

class ActionDispatch::Routing::Mapper::Scope
  include ::Enumerable
  def [](key); end

  def action_name(name_prefix, prefix, collection_name, member_name); end

  def each(&blk); end

  def frame(); end

  def initialize(hash, parent=T.unsafe(nil), scope_level=T.unsafe(nil)); end

  def nested?(); end

  def new(hash); end

  def new_level(level); end

  def null?(); end

  def options(); end

  def parent(); end

  def resource_method_scope?(); end

  def resource_scope?(); end

  def resources?(); end

  def root?(); end

  def scope_level(); end
  NULL = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_METHOD_SCOPES = ::T.let(nil, ::T.untyped)
  RESOURCE_SCOPES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Scope
end

module ActionDispatch::Routing::Mapper::Scoping
  def constraints(constraints=T.unsafe(nil), &block); end

  def controller(controller); end

  def defaults(defaults=T.unsafe(nil)); end

  def namespace(path, options=T.unsafe(nil), &block); end

  def scope(*args); end
  POISON = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Scoping
end

class ActionDispatch::Routing::Mapper
  def self.normalize_name(name); end

  def self.normalize_path(path); end
end

class ActionDispatch::Routing::OptionRedirect
  def options(); end
end

class ActionDispatch::Routing::OptionRedirect
end

class ActionDispatch::Routing::PathRedirect
  URL_PARTS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::PathRedirect
end

module ActionDispatch::Routing::PolymorphicRoutes
  def edit_polymorphic_path(record_or_hash, options=T.unsafe(nil)); end

  def edit_polymorphic_url(record_or_hash, options=T.unsafe(nil)); end

  def new_polymorphic_path(record_or_hash, options=T.unsafe(nil)); end

  def new_polymorphic_url(record_or_hash, options=T.unsafe(nil)); end

  def polymorphic_path(record_or_hash_or_array, options=T.unsafe(nil)); end

  def polymorphic_url(record_or_hash_or_array, options=T.unsafe(nil)); end
end

class ActionDispatch::Routing::Redirect
  def block(); end

  def call(env); end

  def initialize(status, block); end

  def path(params, request); end

  def serve(req); end

  def status(); end
end

class ActionDispatch::Routing::Redirect
end

module ActionDispatch::Routing::Redirection
  def redirect(*args, &block); end
end

module ActionDispatch::Routing::Redirection
end

class ActionDispatch::Routing::RouteSet
  include ::Devise::RouteSet
  def add_polymorphic_mapping(klass, options, &block); end

  def add_route(mapping, name); end

  def add_url_helper(name, options, &block); end

  def api_only?(); end

  def append(&block); end

  def call(env); end

  def clear!(); end

  def default_scope(); end

  def default_scope=(default_scope); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def define_mounted_helper(name, script_namer=T.unsafe(nil)); end

  def disable_clear_and_finalize(); end

  def disable_clear_and_finalize=(disable_clear_and_finalize); end

  def draw(&block); end

  def draw_paths(); end

  def draw_paths=(draw_paths); end

  def eager_load!(); end

  def empty?(); end

  def env_key(); end

  def extra_keys(options, recall=T.unsafe(nil)); end

  def find_relative_url_root(options); end

  def find_script_name(options); end

  def formatter(); end

  def formatter=(formatter); end

  def generate_extras(options, recall=T.unsafe(nil)); end

  def generate_url_helpers(supports_path); end

  def initialize(config=T.unsafe(nil)); end

  def mounted_helpers(); end

  def named_routes(); end

  def named_routes=(named_routes); end

  def optimize_routes_generation?(); end

  def path_for(options, route_name=T.unsafe(nil), reserved=T.unsafe(nil)); end

  def polymorphic_mappings(); end

  def prepend(&block); end

  def recognize_path(path, environment=T.unsafe(nil)); end

  def recognize_path_with_request(req, path, extras, raise_on_missing: T.unsafe(nil)); end

  def relative_url_root(); end

  def request_class(); end

  def resources_path_names(); end

  def resources_path_names=(resources_path_names); end

  def router(); end

  def router=(router); end

  def routes(); end

  def set(); end

  def set=(set); end

  def url_for(options, route_name=T.unsafe(nil), url_strategy=T.unsafe(nil), method_name=T.unsafe(nil), reserved=T.unsafe(nil)); end

  def url_helpers(supports_path=T.unsafe(nil)); end
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet::Config
  def api_only(); end

  def api_only=(_); end

  def relative_url_root(); end

  def relative_url_root=(_); end
end

class ActionDispatch::Routing::RouteSet::Config
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActionDispatch::Routing::RouteSet::CustomUrlHelper
  def block(); end

  def call(t, args, only_path=T.unsafe(nil)); end

  def defaults(); end

  def initialize(name, defaults, &block); end

  def name(); end
end

class ActionDispatch::Routing::RouteSet::CustomUrlHelper
end

class ActionDispatch::Routing::RouteSet::Dispatcher
  def initialize(raise_on_name_error); end

  def serve(req); end
end

class ActionDispatch::Routing::RouteSet::Dispatcher
end

class ActionDispatch::Routing::RouteSet::Generator
  def controller(); end

  def current_controller(); end

  def different_controller?(); end

  def generate(); end

  def initialize(named_route, options, recall, set); end

  def named_route(); end

  def normalize_controller!(); end

  def normalize_controller_action_id!(); end

  def normalize_options!(); end

  def options(); end

  def recall(); end

  def set(); end

  def use_recall_for(key); end

  def use_relative_controller!(); end
end

class ActionDispatch::Routing::RouteSet::Generator
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  def _main_app(); end

  def main_app(); end
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  extend ::ActiveSupport::Concern
end

class ActionDispatch::Routing::RouteSet::NamedRouteCollection
  include ::Enumerable
  def [](name); end

  def []=(name, route); end

  def add(name, route); end

  def add_url_helper(name, defaults, &block); end

  def clear(); end

  def clear!(); end

  def each(&block); end

  def get(name); end

  def helper_names(); end

  def key?(name); end

  def length(); end

  def names(); end

  def path_helpers_module(); end

  def route_defined?(name); end

  def url_helpers_module(); end
end

class ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper
  def call(t, method_name, args, inner_options, url_strategy); end

  def handle_positional_args(controller_options, inner_options, args, result, path_params); end

  def initialize(route, options, route_name); end

  def route_name(); end
end

class ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper::OptimizedUrlHelper
  def arg_size(); end
end

class ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper::OptimizedUrlHelper
end

class ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper
  def self.create(route, options, route_name); end

  def self.optimize_helper?(route); end
end

class ActionDispatch::Routing::RouteSet::NamedRouteCollection
end

class ActionDispatch::Routing::RouteSet::StaticDispatcher
  def initialize(controller_class); end
end

class ActionDispatch::Routing::RouteSet::StaticDispatcher
end

class ActionDispatch::Routing::RouteSet
  def self.default_resources_path_names(); end

  def self.new_with_config(config); end
end

class ActionDispatch::Routing::RouteWrapper
  def action(); end

  def constraints(); end

  def controller(); end

  def endpoint(); end

  def engine?(); end

  def internal?(); end

  def name(); end

  def path(); end

  def rack_app(); end

  def reqs(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteWrapper
end

class ActionDispatch::Routing::RoutesInspector
  def format(formatter, filter=T.unsafe(nil)); end

  def initialize(routes); end
end

class ActionDispatch::Routing::RoutesInspector
end

class ActionDispatch::Routing::RoutesProxy
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def initialize(routes, scope, helpers, script_namer=T.unsafe(nil)); end

  def routes(); end

  def routes=(routes); end

  def scope(); end

  def scope=(scope); end
end

class ActionDispatch::Routing::RoutesProxy
  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end
end

module ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def full_url_for(options=T.unsafe(nil)); end

  def initialize(*arg, **arg1, &arg2); end

  def optimize_routes_generation?(); end

  def route_for(name, *args); end

  def url_for(options=T.unsafe(nil)); end

  def url_options(); end
end

module ActionDispatch::Routing::UrlFor
  extend ::ActiveSupport::Concern
end

module ActionDispatch::Routing
  extend ::ActiveSupport::Autoload
end

class ActionDispatch::SSL
  def call(env); end

  def initialize(app, redirect: T.unsafe(nil), hsts: T.unsafe(nil), secure_cookies: T.unsafe(nil), ssl_default_redirect_status: T.unsafe(nil)); end
  HSTS_EXPIRES_IN = ::T.let(nil, ::T.untyped)
  PERMANENT_REDIRECT_REQUEST_METHODS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SSL
  def self.default_hsts_options(); end
end

class ActionDispatch::ServerTiming
  def call(env); end

  def initialize(app); end
  SERVER_TIMING_HEADER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::ServerTiming
end

module ActionDispatch::Session
end

class ActionDispatch::Session::AbstractSecureStore
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::AbstractSecureStore
end

class ActionDispatch::Session::AbstractStore
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::AbstractStore
end

class ActionDispatch::Session::CacheStore
  def delete_session(env, sid, options); end

  def write_session(env, sid, session, options); end
end

class ActionDispatch::Session::CacheStore
end

module ActionDispatch::Session::Compatibility
  def generate_sid(); end

  def initialize(app, options=T.unsafe(nil)); end
end

module ActionDispatch::Session::Compatibility
end

class ActionDispatch::Session::CookieStore
  def delete_session(req, session_id, options); end

  def load_session(req); end
end

class ActionDispatch::Session::CookieStore::SessionId
  def cookie_value(); end

  def initialize(session_id, cookie_value=T.unsafe(nil)); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Session::CookieStore::SessionId
end

class ActionDispatch::Session::CookieStore
end

module ActionDispatch::Session::SessionObject
  def loaded_session?(session); end

  def prepare_session(req); end
end

module ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::SessionRestoreError
  def initialize(); end
end

class ActionDispatch::Session::SessionRestoreError
end

module ActionDispatch::Session::StaleSessionCheck
  def extract_session_id(env); end

  def load_session(env); end

  def stale_session_check!(); end
end

module ActionDispatch::Session::StaleSessionCheck
end

module ActionDispatch::Session
end

class ActionDispatch::ShowExceptions
  def call(env); end

  def initialize(app, exceptions_app); end
end

class ActionDispatch::ShowExceptions
end

class ActionDispatch::Static
  def call(env); end

  def initialize(app, path, index: T.unsafe(nil), headers: T.unsafe(nil)); end
end

class ActionDispatch::Static
end

module ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  def assigns(key=T.unsafe(nil)); end

  def cookies(); end

  def flash(); end

  def redirect_to_url(); end

  def session(); end
end

module ActionDispatch::TestProcess::FixtureFile
  def fixture_file_upload(path, mime_type=T.unsafe(nil), binary=T.unsafe(nil)); end
end

module ActionDispatch::TestProcess::FixtureFile
end

module ActionDispatch::TestProcess
end

class ActionDispatch::TestRequest
  def accept=(mime_types); end

  def action=(action_name); end

  def host=(host); end

  def if_modified_since=(last_modified); end

  def if_none_match=(etag); end

  def path=(path); end

  def port=(number); end

  def remote_addr=(addr); end

  def request_method=(method); end

  def request_uri=(uri); end

  def user_agent=(user_agent); end
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::TestRequest
  def self.create(env=T.unsafe(nil)); end
end

class ActionDispatch::TestResponse
  def parsed_body(); end

  def response_parser(); end
end

class ActionDispatch::TestResponse
  def self.from_response(response); end
end

module ActionDispatch
  extend ::ActiveSupport::Autoload
  def self.test_app(); end

  def self.test_app=(val); end
end

module ActionMailbox
  def incinerate(); end

  def incinerate=(val); end

  def incinerate_after(); end

  def incinerate_after=(val); end

  def ingress(); end

  def ingress=(val); end

  def logger(); end

  def logger=(val); end

  def queues(); end

  def queues=(val); end

  def storage_service(); end

  def storage_service=(val); end
end

class ActionMailbox::Base
  include ::ActionMailbox::Routing
  def __callbacks(); end

  def __callbacks?(); end

  def _process_callbacks(); end

  def _run_process_callbacks(&block); end

  def bounce_with(message); end

  def bounced!(*arg, **arg1, &arg2); end

  def delivered!(*arg, **arg1, &arg2); end

  def finished_processing?(); end

  def inbound_email(); end

  def initialize(inbound_email); end

  def logger(*arg, **arg1, &arg2); end

  def mail(*arg, **arg1, &arg2); end

  def perform_processing(); end

  def process(); end

  def rescue_handlers(); end

  def rescue_handlers=(rescue_handlers); end

  def rescue_handlers?(); end

  def router(); end

  def router=(val); end
end

class ActionMailbox::Base
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._process_callbacks(); end

  def self._process_callbacks=(value); end

  def self.receive(inbound_email); end

  def self.rescue_handlers(); end

  def self.rescue_handlers=(value); end

  def self.rescue_handlers?(); end

  def self.router(); end

  def self.router=(val); end
end

module ActionMailbox::Callbacks
  TERMINATOR = ::T.let(nil, ::T.untyped)
end

module ActionMailbox::Callbacks::ClassMethods
  def after_processing(*methods, &block); end

  def around_processing(*methods, &block); end

  def before_processing(*methods, &block); end
end

class ActionMailbox::Router
  def add_route(address, to:); end

  def add_routes(routes); end

  def mailbox_for(inbound_email); end

  def route(inbound_email); end
end

class ActionMailbox::Router::Route
  def address(); end

  def initialize(address, to:); end

  def mailbox_class(); end

  def mailbox_name(); end

  def match?(inbound_email); end
end

module ActionMailbox::Routing::ClassMethods
  def mailbox_for(inbound_email); end

  def route(inbound_email); end

  def routing(routes); end
end

module ActionMailbox::TestHelper
  def create_inbound_email_from_fixture(fixture_name, status: T.unsafe(nil)); end

  def create_inbound_email_from_mail(status: T.unsafe(nil), **mail_options, &block); end

  def create_inbound_email_from_source(source, status: T.unsafe(nil)); end

  def receive_inbound_email_from_fixture(*args); end

  def receive_inbound_email_from_mail(**kwargs, &block); end

  def receive_inbound_email_from_source(*args); end
end

module ActionMailbox
  def self.incinerate(); end

  def self.incinerate=(val); end

  def self.incinerate_after(); end

  def self.incinerate_after=(val); end

  def self.ingress(); end

  def self.ingress=(val); end

  def self.logger(); end

  def self.logger=(val); end

  def self.queues(); end

  def self.queues=(val); end

  def self.railtie_helpers_paths(); end

  def self.railtie_namespace(); end

  def self.railtie_routes_url_helpers(include_path_helpers=T.unsafe(nil)); end

  def self.storage_service(); end

  def self.storage_service=(val); end

  def self.table_name_prefix(); end

  def self.use_relative_model_naming?(); end
end

class ActionMailer::Base
  include ::ActionMailer::DeliveryMethods
  include ::ActiveSupport::Rescuable
  include ::ActionMailer::Rescuable
  include ::ActionMailer::Parameterized
  include ::ActionMailer::Previews
  include ::ActionView::ViewPaths
  include ::AbstractController::Rendering
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::AbstractController::Helpers
  include ::AbstractController::Translation
  include ::AbstractController::AssetPaths
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::AbstractController::Caching::Fragments
  include ::AbstractController::Caching
  include ::AbstractController::Caching::ConfigMethods
  include ::ActionView::Rendering
  include ::ActionView::Layouts
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::AbstractController::UrlFor
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  def __callbacks(); end

  def __callbacks?(); end

  def _helper_methods(); end

  def _helper_methods=(_helper_methods); end

  def _helper_methods?(); end

  def _process_action_callbacks(); end

  def _run_process_action_callbacks(&block); end

  def _view_cache_dependencies(); end

  def _view_cache_dependencies=(_view_cache_dependencies); end

  def _view_cache_dependencies?(); end

  def asset_host(); end

  def asset_host=(value); end

  def assets_dir(); end

  def assets_dir=(value); end

  def attachments(); end

  def default_asset_host_protocol(); end

  def default_asset_host_protocol=(value); end

  def default_params(); end

  def default_params=(default_params); end

  def default_params?(); end

  def default_static_extension(); end

  def default_static_extension=(value); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def deliver_later_queue_name(); end

  def deliver_later_queue_name=(val); end

  def delivery_job(); end

  def delivery_job=(delivery_job); end

  def delivery_job?(); end

  def delivery_method(); end

  def delivery_method=(delivery_method); end

  def delivery_method?(); end

  def delivery_methods(); end

  def delivery_methods=(delivery_methods); end

  def delivery_methods?(); end

  def email_address_with_name(address, name); end

  def enable_fragment_cache_logging(); end

  def enable_fragment_cache_logging=(value); end

  def file_settings(); end

  def file_settings=(file_settings); end

  def file_settings?(); end

  def fragment_cache_keys(); end

  def fragment_cache_keys=(fragment_cache_keys); end

  def fragment_cache_keys?(); end

  def headers(args=T.unsafe(nil)); end

  def initialize(); end

  def javascripts_dir(); end

  def javascripts_dir=(value); end

  def logger(); end

  def logger=(value); end

  def mailer_name(); end

  def message(); end

  def message=(message); end

  def params(); end

  def params=(params); end

  def perform_caching(); end

  def perform_caching=(value); end

  def perform_deliveries(); end

  def perform_deliveries=(val); end

  def preview_interceptors(); end

  def preview_path(); end

  def process(method_name, *args, **arg); end

  def raise_delivery_errors(); end

  def raise_delivery_errors=(val); end

  def relative_url_root(); end

  def relative_url_root=(value); end

  def rescue_handlers(); end

  def rescue_handlers=(rescue_handlers); end

  def rescue_handlers?(); end

  def sendmail_settings(); end

  def sendmail_settings=(sendmail_settings); end

  def sendmail_settings?(); end

  def show_previews(); end

  def smtp_settings(); end

  def smtp_settings=(smtp_settings); end

  def smtp_settings?(); end

  def stylesheets_dir(); end

  def stylesheets_dir=(value); end

  def test_settings(); end

  def test_settings=(test_settings); end

  def test_settings?(); end
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionMailer::Base::HelperMethods
  include ::ActionMailer::MailHelper
  def combined_fragment_cache_key(*args, **arg, &block); end

  def view_cache_dependencies(*args, **arg, &block); end
end

module ActionMailer::Base::HelperMethods
end

class ActionMailer::Base::LateAttachmentsProxy
  def []=(_name, _content); end

  def inline(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base::LateAttachmentsProxy
end

class ActionMailer::Base::NullMail
  def body(); end

  def header(); end

  def method_missing(*args); end

  def respond_to?(string, include_all=T.unsafe(nil)); end
end

class ActionMailer::Base::NullMail
end

class ActionMailer::Base
  extend ::ActionMailer::DeliveryMethods::ClassMethods
  extend ::ActionMailer::Rescuable::ClassMethods
  extend ::ActionMailer::Parameterized::ClassMethods
  extend ::ActionMailer::Previews::ClassMethods
  extend ::AbstractController::Helpers::ClassMethods
  extend ::AbstractController::Callbacks::ClassMethods
  extend ::AbstractController::Caching::Fragments::ClassMethods
  extend ::AbstractController::Caching::ClassMethods
  extend ::AbstractController::Caching::ConfigMethods
  extend ::AbstractController::UrlFor::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._helper_methods(); end

  def self._helper_methods=(value); end

  def self._helper_methods?(); end

  def self._layout(); end

  def self._layout=(value); end

  def self._layout?(); end

  def self._layout_conditions(); end

  def self._layout_conditions=(value); end

  def self._layout_conditions?(); end

  def self._process_action_callbacks(); end

  def self._process_action_callbacks=(value); end

  def self._view_cache_dependencies(); end

  def self._view_cache_dependencies=(value); end

  def self._view_cache_dependencies?(); end

  def self.asset_host(); end

  def self.asset_host=(value); end

  def self.assets_dir(); end

  def self.assets_dir=(value); end

  def self.default(value=T.unsafe(nil)); end

  def self.default_asset_host_protocol(); end

  def self.default_asset_host_protocol=(value); end

  def self.default_options=(value=T.unsafe(nil)); end

  def self.default_params(); end

  def self.default_params=(value); end

  def self.default_params?(); end

  def self.default_static_extension(); end

  def self.default_static_extension=(value); end

  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end

  def self.deliver_later_queue_name(); end

  def self.deliver_later_queue_name=(val); end

  def self.deliver_mail(mail); end

  def self.delivery_job(); end

  def self.delivery_job=(value); end

  def self.delivery_job?(); end

  def self.delivery_method(); end

  def self.delivery_method=(value); end

  def self.delivery_method?(); end

  def self.delivery_methods(); end

  def self.delivery_methods=(value); end

  def self.delivery_methods?(); end

  def self.email_address_with_name(address, name); end

  def self.enable_fragment_cache_logging(); end

  def self.enable_fragment_cache_logging=(value); end

  def self.file_settings(); end

  def self.file_settings=(value); end

  def self.file_settings?(); end

  def self.fragment_cache_keys(); end

  def self.fragment_cache_keys=(value); end

  def self.fragment_cache_keys?(); end

  def self.javascripts_dir(); end

  def self.javascripts_dir=(value); end

  def self.logger(); end

  def self.logger=(value); end

  def self.mailer_name(); end

  def self.mailer_name=(mailer_name); end

  def self.perform_caching(); end

  def self.perform_caching=(value); end

  def self.perform_deliveries(); end

  def self.perform_deliveries=(val); end

  def self.preview_interceptors(); end

  def self.preview_interceptors=(val); end

  def self.preview_path(); end

  def self.preview_path=(val); end

  def self.raise_delivery_errors(); end

  def self.raise_delivery_errors=(val); end

  def self.register_interceptor(interceptor); end

  def self.register_interceptors(*interceptors); end

  def self.register_observer(observer); end

  def self.register_observers(*observers); end

  def self.relative_url_root(); end

  def self.relative_url_root=(value); end

  def self.rescue_handlers(); end

  def self.rescue_handlers=(value); end

  def self.rescue_handlers?(); end

  def self.sendmail_settings(); end

  def self.sendmail_settings=(value); end

  def self.sendmail_settings?(); end

  def self.show_previews(); end

  def self.show_previews=(val); end

  def self.smtp_settings(); end

  def self.smtp_settings=(value); end

  def self.smtp_settings?(); end

  def self.stylesheets_dir(); end

  def self.stylesheets_dir=(value); end

  def self.test_settings(); end

  def self.test_settings=(value); end

  def self.test_settings?(); end

  def self.unregister_interceptor(interceptor); end

  def self.unregister_interceptors(*interceptors); end

  def self.unregister_observer(observer); end

  def self.unregister_observers(*observers); end
end

class ActionMailer::Collector
  include ::AbstractController::Collector
  def all(*args, &block); end

  def any(*args, &block); end

  def custom(mime, options=T.unsafe(nil)); end

  def initialize(context, &block); end

  def responses(); end
end

class ActionMailer::Collector
end

module ActionMailer::DeliveryMethods
  def wrap_delivery_behavior!(*args); end
end

module ActionMailer::DeliveryMethods::ClassMethods
  def add_delivery_method(symbol, klass, default_options=T.unsafe(nil)); end

  def deliveries(*arg, **arg1, &arg2); end

  def deliveries=(arg); end

  def wrap_delivery_behavior(mail, method=T.unsafe(nil), options=T.unsafe(nil)); end
end

module ActionMailer::DeliveryMethods::ClassMethods
end

module ActionMailer::DeliveryMethods
  extend ::ActiveSupport::Concern
end

class ActionMailer::InlinePreviewInterceptor
  include ::Base64
  def initialize(message); end

  def transform!(); end
  PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionMailer::InlinePreviewInterceptor
  def self.previewing_email(message); end
end

class ActionMailer::LogSubscriber
  def deliver(event); end

  def process(event); end
end

class ActionMailer::LogSubscriber
end

class ActionMailer::MailDeliveryJob
  def perform(mailer, mail_method, delivery_method, args:, kwargs: T.unsafe(nil), params: T.unsafe(nil)); end
end

class ActionMailer::MailDeliveryJob
end

module ActionMailer::MailHelper
  def attachments(); end

  def block_format(text); end

  def format_paragraph(text, len=T.unsafe(nil), indent=T.unsafe(nil)); end

  def mailer(); end

  def message(); end
end

module ActionMailer::MailHelper
end

class ActionMailer::MessageDelivery
  def __setobj__(mail_message); end

  def deliver_later(options=T.unsafe(nil)); end

  def deliver_later!(options=T.unsafe(nil)); end

  def deliver_now(); end

  def deliver_now!(); end

  def initialize(mailer_class, action, *args, **arg); end

  def message(); end

  def processed?(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::MessageDelivery
end

class ActionMailer::NonInferrableMailerError
  def initialize(name); end
end

class ActionMailer::NonInferrableMailerError
end

module ActionMailer::Parameterized
end

module ActionMailer::Parameterized::ClassMethods
  def with(params); end
end

module ActionMailer::Parameterized::ClassMethods
end

class ActionMailer::Parameterized::Mailer
  def initialize(mailer, params); end
end

class ActionMailer::Parameterized::Mailer
end

class ActionMailer::Parameterized::MessageDelivery
  def initialize(mailer_class, action, params, *args, **arg); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Parameterized::MessageDelivery
end

module ActionMailer::Parameterized
  extend ::ActiveSupport::Concern
end

class ActionMailer::Preview
  def initialize(params=T.unsafe(nil)); end

  def params(); end
end

class ActionMailer::Preview
  extend ::ActiveSupport::DescendantsTracker
  def self.all(); end

  def self.call(email, params=T.unsafe(nil)); end

  def self.email_exists?(email); end

  def self.emails(); end

  def self.exists?(preview); end

  def self.find(preview); end

  def self.preview_name(); end
end

module ActionMailer::Previews
end

module ActionMailer::Previews::ClassMethods
  def register_preview_interceptor(interceptor); end

  def register_preview_interceptors(*interceptors); end

  def unregister_preview_interceptor(interceptor); end

  def unregister_preview_interceptors(*interceptors); end
end

module ActionMailer::Previews::ClassMethods
end

module ActionMailer::Previews
  extend ::ActiveSupport::Concern
end

class ActionMailer::Railtie
end

class ActionMailer::Railtie
end

module ActionMailer::Rescuable
  def handle_exceptions(); end
end

module ActionMailer::Rescuable::ClassMethods
  def handle_exception(exception); end
end

module ActionMailer::Rescuable::ClassMethods
end

module ActionMailer::Rescuable
  extend ::ActiveSupport::Concern
end

class ActionMailer::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionMailer::TestCase::Behavior
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  def _mailer_class(); end

  def _mailer_class=(_mailer_class); end

  def _mailer_class?(); end
end

module ActionMailer::TestCase::Behavior
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::Rails::Dom::Testing::Assertions::DomAssertions
end

module ActionMailer::TestCase::Behavior::ClassMethods
  def determine_default_mailer(name); end

  def mailer_class(); end

  def tests(mailer); end
end

module ActionMailer::TestCase::Behavior::ClassMethods
end

module ActionMailer::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

module ActionMailer::TestCase::ClearTestDeliveries
end

module ActionMailer::TestCase::ClearTestDeliveries
  extend ::ActiveSupport::Concern
end

class ActionMailer::TestCase
  extend ::ActionMailer::TestCase::Behavior::ClassMethods
  def self._mailer_class(); end

  def self._mailer_class=(value); end

  def self._mailer_class?(); end
end

module ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  def assert_emails(number, &block); end

  def assert_enqueued_email_with(mailer, method, args: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_enqueued_emails(number, &block); end

  def assert_no_emails(&block); end

  def assert_no_enqueued_emails(&block); end
end

module ActionMailer::TestHelper
end

module ActionMailer::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionMailer::VERSION
end

module ActionMailer
  extend ::ActiveSupport::Autoload
  def self.gem_version(); end

  def self.version(); end
end

module ActionPack
end

module ActionPack::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionPack::VERSION
end

module ActionPack
  def self.gem_version(); end

  def self.version(); end
end

module ActionPolicy
  CACHE_NAMESPACE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class ActionPolicy::AuthorizationContextMissing
  MESSAGE_TEMPLATE = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::Authorizer
  extend ::ActionPolicy::Rails::Authorizer
end

class ActionPolicy::Base
  include ::ActionPolicy::Policy::Rails::Instrumentation
  def user(); end
end

class ActionPolicy::Base::APR
  include ::ActionPolicy::Policy::ResultFailureReasons
end

module ActionPolicy::Channel
  include ::ActionPolicy::Behaviours::Namespaced::InstanceMethods
end

module ActionPolicy::Controller
  include ::ActionPolicy::Behaviours::ThreadMemoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Memoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Namespaced::InstanceMethods
end

class ActionPolicy::GraphQL::AuthorizedField::AuthorizeExtension
  DEPRECATION_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::I18n
  DEFAULT_UNAUTHORIZED_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::LookupChain
  CLASSIFY_SYMBOL_LOOKUP = ::T.let(nil, ::T.untyped)
  CLASS_POLICY_CLASS = ::T.let(nil, ::T.untyped)
  INFER_FROM_CLASS = ::T.let(nil, ::T.untyped)
  INSTANCE_POLICY_CLASS = ::T.let(nil, ::T.untyped)
  SYMBOL_LOOKUP = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::PerThreadCache
  CACHE_KEY = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::Policy::Aliases
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::Policy::Rails::Instrumentation
  def apply(rule); end

  def initialize(record=T.unsafe(nil), **params); end
  APPLY_EVENT_NAME = ::T.let(nil, ::T.untyped)
  INIT_EVENT_NAME = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::PrettyPrint
  FALSE = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::Rails::Authorizer
  def authorize(policy, rule); end
  EVENT_NAME = ::T.let(nil, ::T.untyped)
end

module ActionPolicy::ScopeMatchers::ActionControllerParams
  def params_filter(*args, &block); end
end

module ActionPolicy::ScopeMatchers::ActiveRecord
  def relation_scope(*args, &block); end
end

class ActionPolicy::UnknownNamedScope
  MESSAGE_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class ActionPolicy::UnknownScopeType
  MESSAGE_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class ActionPolicy::UnrecognizedScopeTarget
  MESSAGE_TEMPLATE = ::T.let(nil, ::T.untyped)
end

module ActionText::Attachable
  def as_json(*arg); end

  def attachable_content_type(); end

  def attachable_filename(); end

  def attachable_filesize(); end

  def attachable_metadata(); end

  def attachable_sgid(); end

  def previewable_attachable?(); end

  def to_attachable_partial_path(); end

  def to_rich_text_attributes(attributes=T.unsafe(nil)); end

  def to_trix_content_attachment_partial_path(); end
  LOCATOR_NAME = ::T.let(nil, ::T.untyped)
end

module ActionText::Attachable::ClassMethods
  def from_attachable_sgid(sgid); end
end

module ActionText::Attachable
  def self.from_attachable_sgid(sgid, options=T.unsafe(nil)); end

  def self.from_node(node); end
end

class ActionText::Attachables::ContentAttachment
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def attachable_plain_text_representation(caption); end

  def model_name(*arg, **arg1, &arg2); end

  def name(); end

  def name=(name); end

  def to_trix_content_attachment_partial_path(); end

  def validation_context(); end
end

class ActionText::Attachables::ContentAttachment
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(value); end

  def self._validators?(); end

  def self.from_node(node); end
end

module ActionText::Attachables::MissingAttachable
  def model_name(*arg, **arg1, &arg2); end
end

module ActionText::Attachables::MissingAttachable
  def self.to_partial_path(); end
end

class ActionText::Attachables::RemoteImage
  def attachable_plain_text_representation(caption); end

  def content_type(); end

  def height(); end

  def initialize(attributes=T.unsafe(nil)); end

  def model_name(*arg, **arg1, &arg2); end

  def to_partial_path(); end

  def url(); end

  def width(); end
end

class ActionText::Attachables::RemoteImage
  def self.from_node(node); end
end

class ActionText::Attachment
  include ::ActionText::Attachments::Caching
  include ::ActionText::Attachments::Minification
  def attachable(); end

  def caption(); end

  def full_attributes(); end

  def initialize(node, attachable); end

  def method_missing(method, *args, **arg, &block); end

  def node(); end

  def tag_name(); end

  def tag_name=(val); end

  def to_html(); end

  def to_param(*arg, **arg1, &arg2); end

  def to_plain_text(); end

  def with_full_attributes(); end
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class ActionText::Attachment
  def self.fragment_by_canonicalizing_attachments(content); end

  def self.from_attachable(attachable, attributes=T.unsafe(nil)); end

  def self.from_attachables(attachables); end

  def self.from_attributes(attributes, attachable=T.unsafe(nil)); end

  def self.from_node(node, attachable=T.unsafe(nil)); end

  def self.tag_name(); end

  def self.tag_name=(val); end
end

class ActionText::AttachmentGallery
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def attachments(); end

  def initialize(node); end

  def model_name(*arg, **arg1, &arg2); end

  def node(); end

  def size(); end

  def validation_context(); end
end

class ActionText::AttachmentGallery
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(value); end

  def self._validators?(); end

  def self.attachment_selector(); end

  def self.find_attachment_gallery_nodes(content); end

  def self.fragment_by_canonicalizing_attachment_galleries(content); end

  def self.fragment_by_replacing_attachment_gallery_nodes(content); end

  def self.from_node(node); end

  def self.selector(); end
end

module ActionText::Attachments::Caching
  def cache_key(*args); end
end

module ActionText::Attachments::TrixConversion
  def to_trix_attachment(content=T.unsafe(nil)); end
end

module ActionText::Attribute::ClassMethods
  def has_rich_text(name, encrypted: T.unsafe(nil)); end

  def rich_text_association_names(); end

  def with_all_rich_text(); end
end

class ActionText::Content
  include ::ActionText::Serialization
  def ==(other); end

  def append_attachables(attachables); end

  def as_json(*arg); end

  def attachables(); end

  def attachment_galleries(); end

  def attachments(); end

  def blank?(*arg, **arg1, &arg2); end

  def empty?(*arg, **arg1, &arg2); end

  def fragment(); end

  def gallery_attachments(); end

  def html_safe(*arg, **arg1, &arg2); end

  def initialize(content=T.unsafe(nil), options=T.unsafe(nil)); end

  def links(); end

  def present?(*arg, **arg1, &arg2); end

  def render(*arg, **arg1, &arg2); end

  def render_attachment_galleries(&block); end

  def render_attachments(**options, &block); end

  def to_html(); end

  def to_partial_path(); end

  def to_plain_text(); end

  def to_rendered_html_with_layout(); end

  def to_trix_html(); end
end

class ActionText::Content
  def self.default_renderer(); end

  def self.default_renderer=(val); end

  def self.fragment_by_canonicalizing_content(content); end

  def self.renderer(); end

  def self.renderer=(obj); end
end

module ActionText::Encryption
  def decrypt(); end

  def encrypt(); end
end

module ActionText::Encryption
end

class ActionText::FixtureSet
end

class ActionText::FixtureSet
  def self.attachment(fixture_set_name, label, column_type: T.unsafe(nil)); end
end

class ActionText::Fragment
  def find_all(selector); end

  def initialize(source); end

  def replace(selector); end

  def source(); end

  def to_html(); end

  def to_plain_text(); end

  def update(); end
end

class ActionText::Fragment
  def self.from_html(html); end

  def self.wrap(fragment_or_html); end
end

module ActionText::HtmlConversion
  def create_element(tag_name, attributes=T.unsafe(nil)); end

  def fragment_for_html(html); end

  def node_to_html(node); end
end

module ActionText::PlainTextConversion
  def node_to_plain_text(node); end
end

module ActionText::Rendering::ClassMethods
  def render(*args, &block); end

  def with_renderer(renderer); end
end

module ActionText::Serialization
  def _dump(*arg); end
end

module ActionText::Serialization::ClassMethods
  def _load(content); end

  def dump(content); end

  def load(content); end
end

class ActionText::TrixAttachment
  def attributes(); end

  def initialize(node); end

  def node(); end

  def to_html(); end
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_TYPES = ::T.let(nil, ::T.untyped)
  COMPOSED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SELECTOR = ::T.let(nil, ::T.untyped)
  TAG_NAME = ::T.let(nil, ::T.untyped)
end

class ActionText::TrixAttachment
  def self.from_attributes(attributes); end
end

module ActionText
  def self.railtie_helpers_paths(); end

  def self.railtie_namespace(); end

  def self.railtie_routes_url_helpers(include_path_helpers=T.unsafe(nil)); end

  def self.table_name_prefix(); end

  def self.use_relative_model_naming?(); end
end

module ActionView
  ENCODING_FLAG = ::T.let(nil, ::T.untyped)
end

class ActionView::AbstractRenderer
  def any_templates?(*arg, **arg1, &arg2); end

  def formats(*arg, **arg1, &arg2); end

  def initialize(lookup_context); end

  def render(); end

  def template_exists?(*arg, **arg1, &arg2); end
  NO_DETAILS = ::T.let(nil, ::T.untyped)
end

module ActionView::AbstractRenderer::ObjectRendering
  def initialize(lookup_context, options); end
  IDENTIFIER_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  OPTION_AS_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  PREFIXED_PARTIAL_NAMES = ::T.let(nil, ::T.untyped)
end

module ActionView::AbstractRenderer::ObjectRendering
end

class ActionView::AbstractRenderer::RenderedCollection
  def body(); end

  def format(); end

  def initialize(rendered_templates, spacer); end

  def rendered_templates(); end
end

class ActionView::AbstractRenderer::RenderedCollection::EmptyCollection
  def body(); end

  def format(); end

  def initialize(format); end
end

class ActionView::AbstractRenderer::RenderedCollection::EmptyCollection
end

class ActionView::AbstractRenderer::RenderedCollection
  def self.empty(format); end
end

class ActionView::AbstractRenderer::RenderedTemplate
  def body(); end

  def format(); end

  def initialize(body, template); end

  def template(); end
  EMPTY_SPACER = ::T.let(nil, ::T.untyped)
end

class ActionView::AbstractRenderer::RenderedTemplate
end

class ActionView::AbstractRenderer
end

class ActionView::Base
  include ::ActionView::Context
  include ::ERB::Util
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActionCable::Helpers::ActionCableHelper
  include ::ViteRails::TagHelpers
  include ::Devise::Controllers::UrlHelpers
  include ::Devise::OmniAuth::UrlHelpers
  def _routes(); end

  def _routes=(_routes); end

  def _routes?(); end

  def _run(method, template, locals, buffer, add_to_stack: T.unsafe(nil), &block); end

  def annotate_rendered_view_with_filenames(); end

  def annotate_rendered_view_with_filenames=(val); end

  def assign(new_assigns); end

  def assigns(); end

  def assigns=(assigns); end

  def automatically_disable_submit_tag(); end

  def automatically_disable_submit_tag=(val); end

  def compiled_method_container(); end

  def config(); end

  def config=(config); end

  def debug_missing_translation(); end

  def debug_missing_translation=(val); end

  def default_formats(); end

  def default_formats=(val); end

  def field_error_proc(); end

  def field_error_proc=(val); end

  def formats(*arg, **arg1, &arg2); end

  def formats=(arg); end

  def in_rendering_context(options); end

  def initialize(lookup_context, assigns, controller); end

  def locale(*arg, **arg1, &arg2); end

  def locale=(arg); end

  def logger=(logger); end

  def logger?(); end

  def lookup_context(); end

  def prefix_partial_path_with_controller_namespace(); end

  def prefix_partial_path_with_controller_namespace=(prefix_partial_path_with_controller_namespace); end

  def prefix_partial_path_with_controller_namespace?(); end

  def streaming_completion_on_exception(); end

  def streaming_completion_on_exception=(val); end

  def view_paths(*arg, **arg1, &arg2); end

  def view_paths=(arg); end

  def view_renderer(); end
end

class ActionView::Base
  def self._routes(); end

  def self._routes=(value); end

  def self._routes?(); end

  def self.annotate_rendered_view_with_filenames(); end

  def self.annotate_rendered_view_with_filenames=(val); end

  def self.automatically_disable_submit_tag(); end

  def self.automatically_disable_submit_tag=(val); end

  def self.cache_template_loading(); end

  def self.cache_template_loading=(value); end

  def self.changed?(other); end

  def self.debug_missing_translation(); end

  def self.debug_missing_translation=(val); end

  def self.default_form_builder(); end

  def self.default_form_builder=(val); end

  def self.default_formats(); end

  def self.default_formats=(val); end

  def self.empty(); end

  def self.erb_trim_mode=(arg); end

  def self.field_error_proc(); end

  def self.field_error_proc=(val); end

  def self.logger(); end

  def self.logger=(value); end

  def self.logger?(); end

  def self.prefix_partial_path_with_controller_namespace(); end

  def self.prefix_partial_path_with_controller_namespace=(value); end

  def self.prefix_partial_path_with_controller_namespace?(); end

  def self.streaming_completion_on_exception(); end

  def self.streaming_completion_on_exception=(val); end

  def self.with_context(context, assigns=T.unsafe(nil), controller=T.unsafe(nil)); end

  def self.with_empty_template_cache(); end

  def self.with_view_paths(view_paths, assigns=T.unsafe(nil), controller=T.unsafe(nil)); end

  def self.xss_safe?(); end
end

class ActionView::CacheExpiry
end

class ActionView::CacheExpiry::Executor
  def complete(_); end

  def initialize(watcher:); end

  def run(); end
end

class ActionView::CacheExpiry::Executor
end

class ActionView::CacheExpiry::ViewModificationWatcher
  def execute_if_updated(); end

  def initialize(watcher:, &block); end
end

class ActionView::CacheExpiry::ViewModificationWatcher
end

class ActionView::CacheExpiry
end

module ActionView::CollectionCaching
end

module ActionView::CollectionCaching
  extend ::ActiveSupport::Concern
end

class ActionView::CollectionRenderer
  include ::ActionView::AbstractRenderer::ObjectRendering
  def render_collection_derive_partial(collection, context, block); end

  def render_collection_with_partial(collection, partial, context, block); end
end

class ActionView::CollectionRenderer::CollectionIterator
  include ::Enumerable
  def each(&blk); end

  def initialize(collection); end

  def length(); end

  def size(); end
end

class ActionView::CollectionRenderer::CollectionIterator
end

class ActionView::CollectionRenderer::MixedCollectionIterator
  def each_with_info(); end

  def initialize(collection, paths); end
end

class ActionView::CollectionRenderer::MixedCollectionIterator
end

class ActionView::CollectionRenderer::PreloadCollectionIterator
  def initialize(collection, path, variables, relation); end
end

class ActionView::CollectionRenderer::PreloadCollectionIterator
end

class ActionView::CollectionRenderer::SameCollectionIterator
  def each_with_info(); end

  def from_collection(collection); end

  def initialize(collection, path, variables); end
end

class ActionView::CollectionRenderer::SameCollectionIterator
end

class ActionView::CollectionRenderer
end

module ActionView::Context
  def _layout_for(name=T.unsafe(nil)); end

  def _prepare_context(); end

  def output_buffer(); end

  def output_buffer=(output_buffer); end

  def view_flow(); end

  def view_flow=(view_flow); end
end

module ActionView::Context
end

class ActionView::DependencyTracker
end

class ActionView::DependencyTracker::ERBTracker
  def dependencies(); end

  def initialize(name, template, view_paths=T.unsafe(nil)); end
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  IDENTIFIER = ::T.let(nil, ::T.untyped)
  LAYOUT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  LAYOUT_HASH_KEY = ::T.let(nil, ::T.untyped)
  PARTIAL_HASH_KEY = ::T.let(nil, ::T.untyped)
  RENDER_ARGUMENTS = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  VARIABLE_OR_METHOD_CHAIN = ::T.let(nil, ::T.untyped)
end

class ActionView::DependencyTracker::ERBTracker
  def self.call(name, template, view_paths=T.unsafe(nil)); end

  def self.supports_view_paths?(); end
end

class ActionView::DependencyTracker::RipperTracker
  def dependencies(); end

  def initialize(name, template, view_paths=T.unsafe(nil)); end
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
end

class ActionView::DependencyTracker::RipperTracker
  def self.call(name, template, view_paths=T.unsafe(nil)); end

  def self.supports_view_paths?(); end
end

class ActionView::DependencyTracker
  extend ::ActiveSupport::Autoload
  def self.find_dependencies(name, template, view_paths=T.unsafe(nil)); end

  def self.register_tracker(extension, tracker); end

  def self.remove_tracker(handler); end
end

class ActionView::Digestor
end

class ActionView::Digestor::Injected
  def digest(finder, _=T.unsafe(nil)); end
end

class ActionView::Digestor::Injected
end

class ActionView::Digestor::Missing
  def digest(finder, _=T.unsafe(nil)); end
end

class ActionView::Digestor::Missing
end

class ActionView::Digestor::Node
  def children(); end

  def dependency_digest(finder, stack); end

  def digest(finder, stack=T.unsafe(nil)); end

  def initialize(name, logical_name, template, children=T.unsafe(nil)); end

  def logical_name(); end

  def name(); end

  def template(); end

  def to_dep_map(); end
end

class ActionView::Digestor::Node
  def self.create(name, logical_name, template, partial); end
end

class ActionView::Digestor::NullLogger
end

class ActionView::Digestor::NullLogger
  def self.debug(_); end

  def self.error(_); end
end

class ActionView::Digestor::Partial
end

class ActionView::Digestor::Partial
end

class ActionView::Digestor
  def self.digest(name:, finder:, format: T.unsafe(nil), dependencies: T.unsafe(nil)); end

  def self.logger(); end

  def self.tree(name, finder, partial=T.unsafe(nil), seen=T.unsafe(nil)); end
end

class ActionView::FileSystemResolver
  def ==(resolver); end

  def eql?(resolver); end

  def initialize(path); end

  def path(); end

  def to_path(); end
end

class ActionView::FileSystemResolver
end

module ActionView::Helpers
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
end

module ActionView::Helpers::ActiveModelHelper
end

module ActionView::Helpers::ActiveModelHelper
end

module ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  def apply_stylesheet_media_default(); end

  def apply_stylesheet_media_default=(val); end

  def audio_tag(*sources); end

  def auto_discovery_link_tag(type=T.unsafe(nil), url_options=T.unsafe(nil), tag_options=T.unsafe(nil)); end

  def favicon_link_tag(source=T.unsafe(nil), options=T.unsafe(nil)); end

  def image_decoding(); end

  def image_decoding=(val); end

  def image_loading(); end

  def image_loading=(val); end

  def image_tag(source, options=T.unsafe(nil)); end

  def javascript_include_tag(*sources); end

  def preload_link_tag(source, options=T.unsafe(nil)); end

  def preload_links_header(); end

  def preload_links_header=(val); end

  def stylesheet_link_tag(*sources); end

  def video_tag(*sources); end
  MAX_HEADER_SIZE = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::AssetTagHelper
  def self.apply_stylesheet_media_default(); end

  def self.apply_stylesheet_media_default=(val); end

  def self.image_decoding(); end

  def self.image_decoding=(val); end

  def self.image_loading(); end

  def self.image_loading=(val); end

  def self.preload_links_header(); end

  def self.preload_links_header=(val); end
end

module ActionView::Helpers::AssetUrlHelper
  def asset_path(source, options=T.unsafe(nil)); end

  def asset_url(source, options=T.unsafe(nil)); end

  def audio_path(source, options=T.unsafe(nil)); end

  def audio_url(source, options=T.unsafe(nil)); end

  def compute_asset_extname(source, options=T.unsafe(nil)); end

  def compute_asset_host(source=T.unsafe(nil), options=T.unsafe(nil)); end

  def compute_asset_path(source, options=T.unsafe(nil)); end

  def font_path(source, options=T.unsafe(nil)); end

  def font_url(source, options=T.unsafe(nil)); end

  def image_path(source, options=T.unsafe(nil)); end

  def image_url(source, options=T.unsafe(nil)); end

  def javascript_path(source, options=T.unsafe(nil)); end

  def javascript_url(source, options=T.unsafe(nil)); end

  def path_to_asset(source, options=T.unsafe(nil)); end

  def path_to_audio(source, options=T.unsafe(nil)); end

  def path_to_font(source, options=T.unsafe(nil)); end

  def path_to_image(source, options=T.unsafe(nil)); end

  def path_to_javascript(source, options=T.unsafe(nil)); end

  def path_to_stylesheet(source, options=T.unsafe(nil)); end

  def path_to_video(source, options=T.unsafe(nil)); end

  def public_compute_asset_path(source, options=T.unsafe(nil)); end

  def stylesheet_path(source, options=T.unsafe(nil)); end

  def stylesheet_url(source, options=T.unsafe(nil)); end

  def url_to_asset(source, options=T.unsafe(nil)); end

  def url_to_audio(source, options=T.unsafe(nil)); end

  def url_to_font(source, options=T.unsafe(nil)); end

  def url_to_image(source, options=T.unsafe(nil)); end

  def url_to_javascript(source, options=T.unsafe(nil)); end

  def url_to_stylesheet(source, options=T.unsafe(nil)); end

  def url_to_video(source, options=T.unsafe(nil)); end

  def video_path(source, options=T.unsafe(nil)); end

  def video_url(source, options=T.unsafe(nil)); end
end

module ActionView::Helpers::AtomFeedHelper
  def atom_feed(options=T.unsafe(nil), &block); end
end

module ActionView::Helpers::CacheHelper
  def cache(name=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def cache_fragment_name(name=T.unsafe(nil), skip_digest: T.unsafe(nil), digest_path: T.unsafe(nil)); end

  def cache_if(condition, name=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def cache_unless(condition, name=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def caching?(); end

  def digest_path_from_template(template); end

  def uncacheable!(); end
end

module ActionView::Helpers::CacheHelper
end

module ActionView::Helpers::CaptureHelper
  def capture(*args); end

  def content_for(name, content=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def content_for?(name); end

  def provide(name, content=T.unsafe(nil), &block); end

  def with_output_buffer(buf=T.unsafe(nil)); end
end

module ActionView::Helpers::CaptureHelper
end

module ActionView::Helpers::ControllerHelper
  def action_name(*arg, **arg1, &arg2); end

  def assign_controller(controller); end

  def controller(); end

  def controller=(controller); end

  def controller_name(*arg, **arg1, &arg2); end

  def controller_path(*arg, **arg1, &arg2); end

  def cookies(*arg, **arg1, &arg2); end

  def flash(*arg, **arg1, &arg2); end

  def headers(*arg, **arg1, &arg2); end

  def logger(); end

  def params(*arg, **arg1, &arg2); end

  def request(); end

  def request=(request); end

  def request_forgery_protection_token(*arg, **arg1, &arg2); end

  def respond_to?(method_name, include_private=T.unsafe(nil)); end

  def response(*arg, **arg1, &arg2); end

  def session(*arg, **arg1, &arg2); end
end

module ActionView::Helpers::CspHelper
  def csp_meta_tag(**options); end
end

module ActionView::Helpers::CspHelper
end

module ActionView::Helpers::CsrfHelper
  def csrf_meta_tag(); end

  def csrf_meta_tags(); end
end

module ActionView::Helpers::CsrfHelper
end

module ActionView::Helpers::DateHelper
  def date_select(object_name, method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def datetime_select(object_name, method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def distance_of_time_in_words(from_time, to_time=T.unsafe(nil), options=T.unsafe(nil)); end

  def distance_of_time_in_words_to_now(from_time, options=T.unsafe(nil)); end

  def select_date(date=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def select_datetime(datetime=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def select_day(date, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def select_hour(datetime, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def select_minute(datetime, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def select_month(date, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def select_second(datetime, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def select_time(datetime=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def select_year(date, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def time_ago_in_words(from_time, options=T.unsafe(nil)); end

  def time_select(object_name, method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def time_tag(date_or_time, *args, &block); end
end

module ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  def debug(object); end
end

module ActionView::Helpers::DebugHelper
end

module ActionView::Helpers::FormHelper
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  def _object_for_form_builder(object); end

  def check_box(object_name, method, options=T.unsafe(nil), checked_value=T.unsafe(nil), unchecked_value=T.unsafe(nil)); end

  def color_field(object_name, method, options=T.unsafe(nil)); end

  def date_field(object_name, method, options=T.unsafe(nil)); end

  def datetime_field(object_name, method, options=T.unsafe(nil)); end

  def datetime_local_field(object_name, method, options=T.unsafe(nil)); end

  def default_form_builder(); end

  def default_form_builder=(default_form_builder); end

  def email_field(object_name, method, options=T.unsafe(nil)); end

  def fields(scope=T.unsafe(nil), model: T.unsafe(nil), **options, &block); end

  def fields_for(record_name, record_object=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def file_field(object_name, method, options=T.unsafe(nil)); end

  def form_for(record, options=T.unsafe(nil), &block); end

  def form_with(model: T.unsafe(nil), scope: T.unsafe(nil), url: T.unsafe(nil), format: T.unsafe(nil), **options, &block); end

  def form_with_generates_ids(); end

  def form_with_generates_ids=(val); end

  def form_with_generates_remote_forms(); end

  def form_with_generates_remote_forms=(val); end

  def hidden_field(object_name, method, options=T.unsafe(nil)); end

  def label(object_name, method, content_or_options=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def month_field(object_name, method, options=T.unsafe(nil)); end

  def multiple_file_field_include_hidden(); end

  def multiple_file_field_include_hidden=(val); end

  def number_field(object_name, method, options=T.unsafe(nil)); end

  def password_field(object_name, method, options=T.unsafe(nil)); end

  def phone_field(object_name, method, options=T.unsafe(nil)); end

  def radio_button(object_name, method, tag_value, options=T.unsafe(nil)); end

  def range_field(object_name, method, options=T.unsafe(nil)); end

  def search_field(object_name, method, options=T.unsafe(nil)); end

  def telephone_field(object_name, method, options=T.unsafe(nil)); end

  def text_area(object_name, method, options=T.unsafe(nil)); end

  def text_field(object_name, method, options=T.unsafe(nil)); end

  def time_field(object_name, method, options=T.unsafe(nil)); end

  def url_field(object_name, method, options=T.unsafe(nil)); end

  def week_field(object_name, method, options=T.unsafe(nil)); end
end

module ActionView::Helpers::FormHelper
  extend ::ActiveSupport::Concern
  def self.form_with_generates_ids(); end

  def self.form_with_generates_ids=(val); end

  def self.form_with_generates_remote_forms(); end

  def self.form_with_generates_remote_forms=(val); end

  def self.multiple_file_field_include_hidden(); end

  def self.multiple_file_field_include_hidden=(val); end
end

module ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  def collection_check_boxes(object, method, collection, value_method, text_method, options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def collection_radio_buttons(object, method, collection, value_method, text_method, options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def collection_select(object, method, collection, value_method, text_method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def grouped_collection_select(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def grouped_options_for_select(grouped_options, selected_key=T.unsafe(nil), options=T.unsafe(nil)); end

  def option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key=T.unsafe(nil)); end

  def options_for_select(container, selected=T.unsafe(nil)); end

  def options_from_collection_for_select(collection, value_method, text_method, selected=T.unsafe(nil)); end

  def select(object, method, choices=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def time_zone_options_for_select(selected=T.unsafe(nil), priority_zones=T.unsafe(nil), model=T.unsafe(nil)); end

  def time_zone_select(object, method, priority_zones=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def weekday_options_for_select(selected=T.unsafe(nil), index_as_value: T.unsafe(nil), day_format: T.unsafe(nil), beginning_of_week: T.unsafe(nil)); end

  def weekday_select(object, method, options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end
end

module ActionView::Helpers::FormOptionsHelper
end

module ActionView::Helpers::FormTagHelper
  def button_tag(content_or_options=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def check_box_tag(name, value=T.unsafe(nil), checked=T.unsafe(nil), options=T.unsafe(nil)); end

  def color_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def date_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def datetime_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def datetime_local_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def default_enforce_utf8(); end

  def default_enforce_utf8=(val); end

  def email_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def embed_authenticity_token_in_remote_forms(); end

  def embed_authenticity_token_in_remote_forms=(val); end

  def field_id(object_name, method_name, *suffixes, index: T.unsafe(nil), namespace: T.unsafe(nil)); end

  def field_name(object_name, method_name, *method_names, multiple: T.unsafe(nil), index: T.unsafe(nil)); end

  def field_set_tag(legend=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def file_field_tag(name, options=T.unsafe(nil)); end

  def form_tag(url_for_options=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def hidden_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def image_submit_tag(source, options=T.unsafe(nil)); end

  def label_tag(name=T.unsafe(nil), content_or_options=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def month_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def number_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def password_field_tag(name=T.unsafe(nil), value=T.unsafe(nil), options=T.unsafe(nil)); end

  def phone_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def radio_button_tag(name, value, checked=T.unsafe(nil), options=T.unsafe(nil)); end

  def range_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def search_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def select_tag(name, option_tags=T.unsafe(nil), options=T.unsafe(nil)); end

  def submit_tag(value=T.unsafe(nil), options=T.unsafe(nil)); end

  def telephone_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def text_area_tag(name, content=T.unsafe(nil), options=T.unsafe(nil)); end

  def text_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def time_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def url_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end

  def utf8_enforcer_tag(); end

  def week_field_tag(name, value=T.unsafe(nil), options=T.unsafe(nil)); end
end

module ActionView::Helpers::FormTagHelper
  extend ::ActiveSupport::Concern
  def self.default_enforce_utf8(); end

  def self.default_enforce_utf8=(val); end

  def self.embed_authenticity_token_in_remote_forms(); end

  def self.embed_authenticity_token_in_remote_forms=(val); end
end

module ActionView::Helpers::JavaScriptHelper
  def escape_javascript(javascript); end

  def j(javascript); end

  def javascript_cdata_section(content); end

  def javascript_tag(content_or_options_with_block=T.unsafe(nil), html_options=T.unsafe(nil), &block); end
end

module ActionView::Helpers::OutputSafetyHelper
  def raw(stringish); end

  def safe_join(array, sep=T.unsafe(nil)); end

  def to_sentence(array, options=T.unsafe(nil)); end
end

module ActionView::Helpers::OutputSafetyHelper
end

module ActionView::Helpers::RenderingHelper
  def _layout_for(*args, &block); end

  def render(options=T.unsafe(nil), locals=T.unsafe(nil), &block); end
end

module ActionView::Helpers::RenderingHelper
end

module ActionView::Helpers::SanitizeHelper
  def sanitize(html, options=T.unsafe(nil)); end

  def sanitize_css(style); end

  def strip_links(html); end

  def strip_tags(html); end
end

module ActionView::Helpers::SanitizeHelper
  extend ::ActiveSupport::Concern
end

module ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  def cdata_section(content); end

  def class_names(*args); end

  def content_tag(name, content_or_options_with_block=T.unsafe(nil), options=T.unsafe(nil), escape=T.unsafe(nil), &block); end

  def escape_once(html); end

  def tag(name=T.unsafe(nil), options=T.unsafe(nil), open=T.unsafe(nil), escape=T.unsafe(nil)); end

  def token_list(*args); end
  ARIA_PREFIXES = ::T.let(nil, ::T.untyped)
  DATA_PREFIXES = ::T.let(nil, ::T.untyped)
  TAG_TYPES = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::TagHelper
  def self.build_tag_values(*args); end
end

module ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  def concat(string); end

  def current_cycle(name=T.unsafe(nil)); end

  def cycle(first_value, *values); end

  def excerpt(text, phrase, options=T.unsafe(nil)); end

  def highlight(text, phrases, options=T.unsafe(nil), &block); end

  def pluralize(count, singular, plural_arg=T.unsafe(nil), plural: T.unsafe(nil), locale: T.unsafe(nil)); end

  def reset_cycle(name=T.unsafe(nil)); end

  def safe_concat(string); end

  def simple_format(text, html_options=T.unsafe(nil), options=T.unsafe(nil)); end

  def truncate(text, options=T.unsafe(nil), &block); end

  def word_wrap(text, line_width: T.unsafe(nil), break_sequence: T.unsafe(nil)); end
end

module ActionView::Helpers::TextHelper
  extend ::ActiveSupport::Concern
end

module ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  def l(object, **options); end

  def localize(object, **options); end

  def t(key, **options); end

  def translate(key, **options); end
end

module ActionView::Helpers::TranslationHelper
  extend ::ActiveSupport::Concern
  def self.raise_on_missing_translations(); end

  def self.raise_on_missing_translations=(raise_on_missing_translations); end
end

module ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  def button_to(name=T.unsafe(nil), options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def button_to_generates_button_tag(); end

  def button_to_generates_button_tag=(val); end

  def link_to_unless(condition, name, options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def link_to_unless_current(name, options=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def mail_to(email_address, name=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def phone_to(phone_number, name=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def sms_to(phone_number, name=T.unsafe(nil), html_options=T.unsafe(nil), &block); end

  def url_for(options=T.unsafe(nil)); end
end

module ActionView::Helpers::UrlHelper
  def self.button_to_generates_button_tag(); end

  def self.button_to_generates_button_tag=(val); end
end

module ActionView::Helpers
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Concern
end

class ActionView::I18nProxy
  def initialize(original_config, lookup_context); end

  def locale=(value); end

  def lookup_context(); end

  def original_config(); end
end

class ActionView::I18nProxy
end

module ActionView::Layouts
  def _layout_conditions(*arg, **arg1, &arg2); end

  def _normalize_options(options); end

  def action_has_layout=(action_has_layout); end

  def action_has_layout?(); end

  def initialize(*arg); end
end

module ActionView::Layouts
  extend ::ActiveSupport::Concern
end

class ActionView::LogSubscriber
  def render_collection(event); end

  def render_layout(event); end

  def render_partial(event); end

  def render_template(event); end
  EMPTY = ::T.let(nil, ::T.untyped)
  VIEWS_PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionView::LogSubscriber
end

class ActionView::LookupContext
  include ::ActionView::LookupContext::Accessors
  include ::ActionView::LookupContext::DetailsCache
  include ::ActionView::LookupContext::ViewPaths
  def digest_cache(); end

  def formats=(values); end

  def initialize(view_paths, details=T.unsafe(nil), prefixes=T.unsafe(nil)); end

  def prefixes(); end

  def prefixes=(prefixes); end

  def rendered_format(); end

  def rendered_format=(rendered_format); end

  def with_prepended_formats(formats); end
end

module ActionView::LookupContext::Accessors
  def default_formats(); end

  def default_handlers(); end

  def default_locale(); end

  def default_variants(); end

  def formats(); end

  def formats=(value); end

  def handlers(); end

  def handlers=(value); end

  def locale(); end

  def locale=(value); end

  def variants(); end

  def variants=(value); end
  DEFAULT_PROCS = ::T.let(nil, ::T.untyped)
end

module ActionView::LookupContext::Accessors
end

module ActionView::LookupContext::DetailsCache
  def cache(); end

  def cache=(cache); end

  def details_key(); end

  def disable_cache(); end
end

module ActionView::LookupContext::DetailsCache
end

class ActionView::LookupContext::DetailsKey
end

class ActionView::LookupContext::DetailsKey
  def self.clear(); end

  def self.details_cache_key(details); end

  def self.digest_cache(details); end

  def self.digest_caches(); end

  def self.view_context_class(klass); end
end

module ActionView::LookupContext::ViewPaths
  def any?(name, prefixes=T.unsafe(nil), partial=T.unsafe(nil)); end

  def any_templates?(name, prefixes=T.unsafe(nil), partial=T.unsafe(nil)); end

  def exists?(name, prefixes=T.unsafe(nil), partial=T.unsafe(nil), keys=T.unsafe(nil), **options); end

  def find(name, prefixes=T.unsafe(nil), partial=T.unsafe(nil), keys=T.unsafe(nil), options=T.unsafe(nil)); end

  def find_all(name, prefixes=T.unsafe(nil), partial=T.unsafe(nil), keys=T.unsafe(nil), options=T.unsafe(nil)); end

  def find_template(name, prefixes=T.unsafe(nil), partial=T.unsafe(nil), keys=T.unsafe(nil), options=T.unsafe(nil)); end

  def html_fallback_for_js(); end

  def template_exists?(name, prefixes=T.unsafe(nil), partial=T.unsafe(nil), keys=T.unsafe(nil), **options); end

  def view_paths(); end
end

module ActionView::LookupContext::ViewPaths
end

class ActionView::LookupContext
  def self.register_detail(name, &block); end

  def self.registered_details(); end

  def self.registered_details=(registered_details); end
end

class ActionView::MissingTemplate
  include ::DidYouMean::Correctable
  def initialize(paths, path, prefixes, partial, details, *arg); end

  def partial(); end

  def paths(); end

  def prefixes(); end
end

class ActionView::MissingTemplate::Results
  def add(path, score); end

  def initialize(size); end

  def should_record?(score); end

  def to_a(); end
end

class ActionView::MissingTemplate::Results::Result
  def path(); end

  def path=(_); end

  def score(); end

  def score=(_); end
end

class ActionView::MissingTemplate::Results::Result
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActionView::MissingTemplate::Results
end

module ActionView::ModelNaming
  def convert_to_model(object); end

  def model_name_from_record_or_class(record_or_class); end
end

module ActionView::ModelNaming
end

class ActionView::ObjectRenderer
  include ::ActionView::AbstractRenderer::ObjectRendering
  def render_object_derive_partial(object, context, block); end

  def render_object_with_partial(object, partial, context, block); end
end

class ActionView::ObjectRenderer
end

class ActionView::OutputBuffer
  def append=(value); end

  def initialize(*arg); end

  def safe_append=(value); end

  def safe_expr_append=(val); end
end

class ActionView::OutputBuffer
end

class ActionView::OutputFlow
  def append(key, value); end

  def append!(key, value); end

  def content(); end

  def get(key); end

  def set(key, value); end
end

class ActionView::OutputFlow
end

class ActionView::PartialRenderer
  include ::ActionView::CollectionCaching
  def collection_cache(); end

  def collection_cache=(val); end

  def initialize(lookup_context, options); end

  def render(partial, context, block); end
end

class ActionView::PartialRenderer
  def self.collection_cache(); end

  def self.collection_cache=(val); end
end

class ActionView::PathSet
  include ::Enumerable
  def +(array); end

  def <<(*args); end

  def [](*arg, **arg1, &arg2); end

  def concat(*args); end

  def each(*arg, **arg1, &arg2); end

  def exists?(path, prefixes, partial, details, details_key, locals); end

  def find(path, prefixes, partial, details, details_key, locals); end

  def find_all(path, prefixes, partial, details, details_key, locals); end

  def include?(*arg, **arg1, &arg2); end

  def initialize(paths=T.unsafe(nil)); end

  def insert(*args); end

  def paths(); end

  def pop(*arg, **arg1, &arg2); end

  def push(*args); end

  def size(*arg, **arg1, &arg2); end

  def to_ary(); end

  def unshift(*args); end
end

class ActionView::PathSet
end

class ActionView::Railtie
end

class ActionView::Railtie
end

module ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  def dom_class(record_or_class, prefix=T.unsafe(nil)); end

  def dom_id(record, prefix=T.unsafe(nil)); end
end

module ActionView::RecordIdentifier
  extend ::ActionView::RecordIdentifier
  extend ::ActionView::ModelNaming
end

class ActionView::RenderParser
  def initialize(name, code); end

  def render_calls(); end
  ALL_KNOWN_KEYS = ::T.let(nil, ::T.untyped)
  RENDER_TYPE_KEYS = ::T.let(nil, ::T.untyped)
end

module ActionView::RenderParser::RipperASTParser
  def parse_render_nodes(code); end
end

class ActionView::RenderParser::RipperASTParser::Node
  def argument_nodes(); end

  def call?(); end

  def call_method_name(); end

  def children(); end

  def fcall?(); end

  def fcall_named?(name); end

  def hash?(); end

  def hash_from_body(body); end

  def initialize(type, arr, opts=T.unsafe(nil)); end

  def string?(); end

  def symbol?(); end

  def to_hash(); end

  def to_string(); end

  def to_symbol(); end

  def type(); end

  def variable_name(); end

  def variable_reference?(); end

  def vcall?(); end
end

class ActionView::RenderParser::RipperASTParser::Node
end

class ActionView::RenderParser::RipperASTParser::NodeParser
  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(list, item); end

  def on_args_add_block(list, item); end

  def on_args_add_star(list, item); end

  def on_args_forward(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_aryptn(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_fndptn(*args); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_dedent(*args); end

  def on_heredoc_end(tok); end

  def on_hshptn(*args); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_in(*args); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(list, item); end

  def on_method_add_block(list, item); end

  def on_mlhs_add(list, item); end

  def on_mlhs_add_post(list, item); end

  def on_mlhs_add_star(list, item); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(list, item); end

  def on_mrhs_add_star(list, item); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_nokw_param(*args); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_parse_error(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(list, item); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(list, item); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(list, item); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(list, item); end

  def on_stmts_new(*args); end

  def on_string_add(list, item); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(list, item); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(list, item); end

  def on_word_new(*args); end

  def on_words_add(list, item); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(list, item); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class ActionView::RenderParser::RipperASTParser::NodeParser
end

class ActionView::RenderParser::RipperASTParser::RenderCallExtractor
  def initialize(*args); end

  def render_calls(); end
  METHODS_TO_PARSE = ::T.let(nil, ::T.untyped)
end

class ActionView::RenderParser::RipperASTParser::RenderCallExtractor
end

module ActionView::RenderParser::RipperASTParser
  extend ::ActionView::RenderParser::RipperASTParser
end

class ActionView::RenderParser
end

class ActionView::Renderer
  def cache_hits(); end

  def initialize(lookup_context); end

  def lookup_context(); end

  def lookup_context=(lookup_context); end

  def render(context, options); end

  def render_body(context, options); end

  def render_partial(context, options, &block); end

  def render_partial_to_object(context, options, &block); end

  def render_template(context, options); end

  def render_template_to_object(context, options); end

  def render_to_object(context, options); end
end

class ActionView::Renderer
end

module ActionView::Rendering
  def initialize(); end

  def process(*arg, **arg1, &arg2); end

  def render_to_body(options=T.unsafe(nil)); end

  def rendered_format(); end

  def view_context(); end

  def view_context_class(); end

  def view_renderer(); end
end

module ActionView::Rendering
  extend ::ActiveSupport::Concern
end

class ActionView::Resolver
  def all_template_paths(); end

  def caching(); end

  def caching=(val); end

  def caching?(*arg, **arg1, &arg2); end

  def clear_cache(); end

  def find_all(name, prefix=T.unsafe(nil), partial=T.unsafe(nil), details=T.unsafe(nil), key=T.unsafe(nil), locals=T.unsafe(nil)); end
end

ActionView::Resolver::Path = ActionView::TemplatePath

class ActionView::Resolver::PathParser
  def build_path_regex(); end

  def parse(path); end
end

class ActionView::Resolver::PathParser::ParsedPath
  def details(); end

  def details=(_); end

  def path(); end

  def path=(_); end
end

class ActionView::Resolver::PathParser::ParsedPath
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActionView::Resolver::PathParser
end

class ActionView::Resolver
  def self.caching(); end

  def self.caching=(val); end

  def self.caching?(); end
end

module ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def default_url_options=(val); end

  def url_for(options=T.unsafe(nil)); end

  def url_options(); end
end

module ActionView::RoutingUrlFor
  def self.default_url_options=(val); end
end

class ActionView::StreamingBuffer
  def <<(value); end

  def append=(value); end

  def concat(value); end

  def html_safe(); end

  def initialize(block); end

  def safe_append=(value); end

  def safe_concat(value); end
end

class ActionView::StreamingBuffer
end

class ActionView::StreamingFlow
  def initialize(view, fiber); end
end

class ActionView::StreamingFlow
end

class ActionView::StreamingTemplateRenderer
  def render_template(view, template, layout_name=T.unsafe(nil), locals=T.unsafe(nil)); end
end

class ActionView::StreamingTemplateRenderer::Body
  def each(&block); end

  def initialize(&start); end
end

class ActionView::StreamingTemplateRenderer::Body
end

class ActionView::StreamingTemplateRenderer
end

class ActionView::SyntaxErrorInTemplate
  def initialize(template, offending_code_string); end
end

class ActionView::Template
  def encode!(); end

  def format(); end

  def handler(); end

  def identifier(); end

  def initialize(source, identifier, handler, locals:, format: T.unsafe(nil), variant: T.unsafe(nil), virtual_path: T.unsafe(nil)); end

  def locals(); end

  def marshal_dump(); end

  def marshal_load(array); end

  def render(view, locals, buffer=T.unsafe(nil), add_to_stack: T.unsafe(nil), &block); end

  def short_identifier(); end

  def source(); end

  def supports_streaming?(); end

  def type(); end

  def variable(); end

  def variant(); end

  def virtual_path(); end
end

class ActionView::Template::Error
  def annotated_source_code(); end

  def file_name(); end

  def initialize(template); end

  def line_number(); end

  def source_extract(indentation=T.unsafe(nil)); end

  def sub_template_message(); end

  def sub_template_of(template_path); end
  SOURCE_CODE_RADIUS = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::HTML
  def format(); end

  def identifier(); end

  def initialize(string, type); end

  def render(*args); end

  def to_str(); end

  def type(); end
end

class ActionView::Template::HTML
end

module ActionView::Template::Handlers
  def handler_for_extension(extension); end

  def register_default_template_handler(extension, klass); end

  def register_template_handler(*extensions, handler); end

  def registered_template_handler(extension); end

  def template_handler_extensions(); end

  def unregister_template_handler(*extensions); end
end

class ActionView::Template::Handlers::Builder
  def call(template, source); end

  def default_format(); end

  def default_format=(default_format); end

  def default_format?(); end
end

class ActionView::Template::Handlers::Builder
  def self.default_format(); end

  def self.default_format=(value); end

  def self.default_format?(); end
end

class ActionView::Template::Handlers::ERB
  def call(template, source); end

  def erb_implementation(); end

  def erb_implementation=(erb_implementation); end

  def erb_implementation?(); end

  def erb_trim_mode(); end

  def erb_trim_mode=(erb_trim_mode); end

  def erb_trim_mode?(); end

  def escape_ignore_list(); end

  def escape_ignore_list=(escape_ignore_list); end

  def escape_ignore_list?(); end

  def handles_encoding?(); end

  def strip_trailing_newlines(); end

  def strip_trailing_newlines=(strip_trailing_newlines); end

  def strip_trailing_newlines?(); end

  def supports_streaming?(); end
  ENCODING_TAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB::Erubi
  def evaluate(action_view_erb_handler_context); end
  BLOCK_EXPR = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB::Erubi
end

class ActionView::Template::Handlers::ERB
  def self.call(template, source); end

  def self.erb_implementation(); end

  def self.erb_implementation=(value); end

  def self.erb_implementation?(); end

  def self.erb_trim_mode(); end

  def self.erb_trim_mode=(value); end

  def self.erb_trim_mode?(); end

  def self.escape_ignore_list(); end

  def self.escape_ignore_list=(value); end

  def self.escape_ignore_list?(); end

  def self.strip_trailing_newlines(); end

  def self.strip_trailing_newlines=(value); end

  def self.strip_trailing_newlines?(); end
end

class ActionView::Template::Handlers::Html
end

class ActionView::Template::Handlers::Html
end

class ActionView::Template::Handlers::Raw
  def call(template, source); end
end

class ActionView::Template::Handlers::Raw
end

module ActionView::Template::Handlers
  def self.extended(base); end

  def self.extensions(); end
end

class ActionView::Template::Inline
  Finalizer = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Inline
end

class ActionView::Template::RawFile
  def format(); end

  def format=(format); end

  def identifier(); end

  def initialize(filename); end

  def render(*args); end

  def type(); end

  def type=(type); end
end

class ActionView::Template::RawFile
end

class ActionView::Template::Renderable
  def format(); end

  def identifier(); end

  def initialize(renderable); end

  def render(context, *args); end
end

class ActionView::Template::Renderable
end

module ActionView::Template::Sources
end

class ActionView::Template::Sources::File
  def initialize(filename); end
end

class ActionView::Template::Sources::File
end

module ActionView::Template::Sources
  extend ::ActiveSupport::Autoload
end

class ActionView::Template::Text
  def format(); end

  def identifier(); end

  def initialize(string); end

  def render(*args); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class ActionView::Template::Text
end

module ActionView::Template::Types
end

class ActionView::Template::Types::Type
  def ==(type); end

  def initialize(symbol); end

  def ref(); end

  def symbol(); end

  def to_str(); end

  def to_sym(); end
  SET = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Types::Type
  def self.[](type); end
end

module ActionView::Template::Types
  def self.[](type); end

  def self.delegate_to(klass); end

  def self.symbols(); end

  def self.type_klass(); end

  def self.type_klass=(type_klass); end
end

class ActionView::Template
  extend ::ActiveSupport::Autoload
  extend ::ActionView::Template::Handlers
  def self.frozen_string_literal(); end

  def self.frozen_string_literal=(frozen_string_literal); end
end

class ActionView::TemplateDetails
  def format(); end

  def format_or_default(); end

  def handler(); end

  def handler_class(); end

  def initialize(locale, handler, format, variant); end

  def locale(); end

  def matches?(requested); end

  def sort_key_for(requested); end

  def variant(); end
end

class ActionView::TemplateDetails::Requested
  def formats(); end

  def formats_idx(); end

  def handlers(); end

  def handlers_idx(); end

  def initialize(locale:, handlers:, formats:, variants:); end

  def locale(); end

  def locale_idx(); end

  def variants(); end

  def variants_idx(); end
  ANY_HASH = ::T.let(nil, ::T.untyped)
end

class ActionView::TemplateDetails::Requested
end

class ActionView::TemplateDetails
end

class ActionView::TemplatePath
  def ==(other); end

  def eql?(other); end

  def initialize(name, prefix, partial, virtual); end

  def name(); end

  def partial(); end

  def partial?(); end

  def prefix(); end

  def to_str(); end

  def virtual(); end

  def virtual_path(); end
end

class ActionView::TemplatePath
  def self.build(name, prefix, partial); end

  def self.parse(virtual); end

  def self.virtual(name, prefix, partial); end
end

class ActionView::TemplateRenderer
  def render(context, options); end
end

class ActionView::TemplateRenderer
end

class ActionView::TestCase
  include ::AbstractController::Helpers
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _helper_methods(); end

  def _helper_methods=(_helper_methods); end

  def _helper_methods?(); end

  def debug_missing_translation(); end

  def debug_missing_translation=(val); end
end

module ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def config(); end

  def controller(); end

  def controller=(controller); end

  def lookup_context(*arg, **arg1, &arg2); end

  def output_buffer(); end

  def output_buffer=(output_buffer); end

  def render(options=T.unsafe(nil), local_assigns=T.unsafe(nil), &block); end

  def rendered(); end

  def rendered=(rendered); end

  def rendered_views(); end

  def request(); end

  def request=(request); end

  def setup_with_controller(); end
  INTERNAL_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionView::TestCase::Behavior::ClassMethods
  def determine_default_helper_class(name); end

  def helper_class(); end

  def helper_class=(helper_class); end

  def helper_method(*methods); end

  def new(*arg); end

  def tests(helper_class); end
end

module ActionView::TestCase::Behavior::ClassMethods
end

module ActionView::TestCase::Behavior::Locals
  def render(options=T.unsafe(nil), local_assigns=T.unsafe(nil)); end

  def rendered_views(); end

  def rendered_views=(rendered_views); end
end

module ActionView::TestCase::Behavior::Locals
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
  def add(view, locals); end

  def locals_for(view); end

  def rendered_views(); end

  def view_rendered?(view, expected_locals); end
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
end

module ActionView::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

module ActionView::TestCase::HelperMethods
  def _test_case(); end

  def protect_against_forgery?(); end
end

module ActionView::TestCase::HelperMethods
end

class ActionView::TestCase::TestController
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  def controller_path=(path); end

  def initialize(); end

  def params=(params); end
end

module ActionView::TestCase::TestController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::InertiaRails::Helper
  include ::ViteRails::TagHelpers
  include ::ApplicationHelper
  include ::DeviseHelper
end

module ActionView::TestCase::TestController::HelperMethods
end

class ActionView::TestCase::TestController
  def self.controller_path=(controller_path); end
end

class ActionView::TestCase
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionView::TestCase::Behavior::ClassMethods
  def self._helper_methods(); end

  def self._helper_methods=(value); end

  def self._helper_methods?(); end

  def self._helpers(); end

  def self.debug_missing_translation(); end

  def self.debug_missing_translation=(val); end
end

class ActionView::UnboundTemplate
  def bind_locals(locals); end

  def details(); end

  def format(*arg, **arg1, &arg2); end

  def handler(*arg, **arg1, &arg2); end

  def initialize(source, identifier, details:, virtual_path:); end

  def locale(*arg, **arg1, &arg2); end

  def variant(*arg, **arg1, &arg2); end

  def virtual_path(); end
end

class ActionView::UnboundTemplate
end

module ActionView::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionView::VERSION
end

module ActionView::ViewPaths
  def _prefixes(); end

  def any_templates?(*arg, **arg1, &arg2); end

  def append_view_path(path); end

  def details_for_lookup(); end

  def formats(*arg, **arg1, &arg2); end

  def formats=(arg); end

  def locale(*arg, **arg1, &arg2); end

  def locale=(arg); end

  def lookup_context(); end

  def prepend_view_path(path); end

  def template_exists?(*arg, **arg1, &arg2); end

  def view_paths(*arg, **arg1, &arg2); end
end

module ActionView::ViewPaths
  extend ::ActiveSupport::Concern
  def self.all_view_paths(); end

  def self.get_view_paths(klass); end

  def self.set_view_paths(klass, paths); end
end

class ActionView::WrongEncodingError
  def initialize(string, encoding); end
end

module ActionView
  extend ::ActiveSupport::Autoload
  def self.gem_version(); end

  def self.version(); end
end

module ActiveJob::Arguments
  def deserialize(arguments); end

  def serialize(arguments); end
  OBJECT_SERIALIZER_KEY = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Base
  include ::ActiveJob::TestHelper::TestQueueAdapter
  include ::Sentry::Rails::ActiveJobExtensions
  def __callbacks(); end

  def __callbacks?(); end

  def _enqueue_callbacks(); end

  def _perform_callbacks(); end

  def _run_enqueue_callbacks(&block); end

  def _run_perform_callbacks(&block); end

  def logger(); end

  def logger=(val); end

  def queue_adapter(*arg, **arg1, &arg2); end

  def queue_name_prefix(); end

  def queue_name_prefix=(queue_name_prefix); end

  def queue_name_prefix?(); end

  def rescue_handlers(); end

  def rescue_handlers=(rescue_handlers); end

  def rescue_handlers?(); end
end

class ActiveJob::Base
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._enqueue_callbacks(); end

  def self._enqueue_callbacks=(value); end

  def self._perform_callbacks(); end

  def self._perform_callbacks=(value); end

  def self._queue_adapter(); end

  def self._queue_adapter=(value); end

  def self._queue_adapter_name(); end

  def self._queue_adapter_name=(value); end

  def self._test_adapter(); end

  def self._test_adapter=(value); end

  def self.log_arguments(); end

  def self.log_arguments=(value); end

  def self.log_arguments?(); end

  def self.logger(); end

  def self.logger=(val); end

  def self.priority(); end

  def self.priority=(value); end

  def self.priority?(); end

  def self.queue_name(); end

  def self.queue_name=(value); end

  def self.queue_name?(); end

  def self.queue_name_delimiter(); end

  def self.queue_name_delimiter=(value); end

  def self.queue_name_delimiter?(); end

  def self.queue_name_prefix(); end

  def self.queue_name_prefix=(value); end

  def self.queue_name_prefix?(); end

  def self.rescue_handlers(); end

  def self.rescue_handlers=(value); end

  def self.rescue_handlers?(); end

  def self.retry_jitter(); end

  def self.retry_jitter=(value); end

  def self.return_false_on_aborted_enqueue(); end

  def self.return_false_on_aborted_enqueue=(value); end

  def self.skip_after_callbacks_if_terminated(*args, **arg, &block); end

  def self.skip_after_callbacks_if_terminated=(*args, **arg, &block); end
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Callbacks
  def self.__callbacks(); end

  def self.__callbacks?(); end

  def self._execute_callbacks(); end

  def self._run_execute_callbacks(&block); end
end

class ActiveJob::ConfiguredJob
  def initialize(job_class, options=T.unsafe(nil)); end

  def perform_later(*arg, **arg1, &arg2); end

  def perform_now(*arg, **arg1, &arg2); end
end

class ActiveJob::ConfiguredJob
end

module ActiveJob::Core
  def arguments(); end

  def arguments=(arguments); end

  def deserialize(job_data); end

  def enqueue_error(); end

  def enqueue_error=(enqueue_error); end

  def enqueued_at(); end

  def enqueued_at=(enqueued_at); end

  def exception_executions(); end

  def exception_executions=(exception_executions); end

  def executions(); end

  def executions=(executions); end

  def initialize(*arguments, **arg); end

  def job_id(); end

  def job_id=(job_id); end

  def locale(); end

  def locale=(locale); end

  def priority=(priority); end

  def provider_job_id(); end

  def provider_job_id=(provider_job_id); end

  def queue_name=(queue_name); end

  def scheduled_at(); end

  def scheduled_at=(scheduled_at); end

  def serialize(); end

  def serialized_arguments=(serialized_arguments); end

  def set(options=T.unsafe(nil)); end

  def successfully_enqueued=(successfully_enqueued); end

  def successfully_enqueued?(); end

  def timezone(); end

  def timezone=(timezone); end
end

class ActiveJob::DeserializationError
  def initialize(); end
end

module ActiveJob::Enqueuing
  def enqueue(options=T.unsafe(nil)); end
end

module ActiveJob::Exceptions
  def retry_job(options=T.unsafe(nil)); end
end

module ActiveJob::Execution
  def perform(*arg); end

  def perform_now(); end
end

module ActiveJob::Instrumentation
  def perform_now(); end
end

class ActiveJob::LogSubscriber
  def discard(event); end

  def enqueue(event); end

  def enqueue_at(event); end

  def enqueue_retry(event); end

  def perform(event); end

  def perform_start(event); end

  def retry_stopped(event); end
end

module ActiveJob::Logging
  def perform_now(); end
end

class ActiveJob::QueueAdapters::AsyncAdapter
  def enqueue(job); end

  def enqueue_at(job, timestamp); end

  def immediate=(immediate); end

  def initialize(**executor_options); end

  def shutdown(wait: T.unsafe(nil)); end
end

class ActiveJob::QueueAdapters::AsyncAdapter::JobWrapper
  def initialize(job); end

  def perform(); end
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  def enqueue(job, queue_name:); end

  def enqueue_at(job, timestamp, queue_name:); end

  def executor(); end

  def immediate(); end

  def immediate=(immediate); end

  def initialize(**options); end

  def shutdown(wait: T.unsafe(nil)); end
  DEFAULT_EXECUTOR_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::QueueAdapters::InlineAdapter
  def enqueue(job); end

  def enqueue_at(*arg); end
end

class ActiveJob::QueueAdapters::InlineAdapter
end

class ActiveJob::QueueAdapters::TestAdapter
  def at(); end

  def at=(at); end

  def enqueue(job); end

  def enqueue_at(job, timestamp); end

  def enqueued_jobs(); end

  def enqueued_jobs=(enqueued_jobs); end

  def filter(); end

  def filter=(filter); end

  def perform_enqueued_at_jobs(); end

  def perform_enqueued_at_jobs=(perform_enqueued_at_jobs); end

  def perform_enqueued_jobs(); end

  def perform_enqueued_jobs=(perform_enqueued_jobs); end

  def performed_jobs(); end

  def performed_jobs=(performed_jobs); end

  def queue(); end

  def queue=(queue); end

  def reject(); end

  def reject=(reject); end
end

class ActiveJob::QueueAdapters::TestAdapter
end

module ActiveJob::QueueAdapters
  def self.lookup(name); end
end

module ActiveJob::QueueName
  def queue_name(); end
end

module ActiveJob::QueuePriority
  def priority(); end
end

module ActiveJob::Serializers
  def _additional_serializers(); end

  def _additional_serializers=(val); end
end

class ActiveJob::Serializers::DateSerializer
  def deserialize(hash); end

  def serialize(date); end
end

class ActiveJob::Serializers::DateTimeSerializer
  def deserialize(hash); end
end

class ActiveJob::Serializers::DurationSerializer
  def deserialize(hash); end

  def serialize(duration); end
end

class ActiveJob::Serializers::ModuleSerializer
  def deserialize(hash); end

  def serialize(constant); end
end

class ActiveJob::Serializers::ObjectSerializer
  def deserialize(json); end

  def serialize(hash); end

  def serialize?(argument); end
end

class ActiveJob::Serializers::ObjectSerializer
  def self.deserialize(*arg, **arg1, &arg2); end

  def self.serialize(*arg, **arg1, &arg2); end

  def self.serialize?(*arg, **arg1, &arg2); end
end

class ActiveJob::Serializers::RangeSerializer
  def deserialize(hash); end

  def serialize(range); end
  KEYS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Serializers::SymbolSerializer
  def deserialize(argument); end

  def serialize(argument); end
end

class ActiveJob::Serializers::TimeObjectSerializer
  def serialize(time); end
  NANO_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Serializers::TimeSerializer
  def deserialize(hash); end
end

class ActiveJob::Serializers::TimeWithZoneSerializer
  def deserialize(hash); end
end

module ActiveJob::Serializers
  def self._additional_serializers(); end

  def self._additional_serializers=(val); end

  def self.add_serializers(*new_serializers); end

  def self.deserialize(argument); end

  def self.serialize(argument); end

  def self.serializers(); end
end

class ActiveJob::TestCase
  include ::ActiveJob::TestHelper
end

class ActiveJob::TestCase
end

module ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  def after_teardown(); end

  def assert_enqueued_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_enqueued_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  def assert_no_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_no_performed_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_performed_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_performed_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  def before_setup(); end

  def enqueued_jobs(*arg, **arg1, &arg2); end

  def enqueued_jobs=(arg); end

  def perform_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  def performed_jobs(*arg, **arg1, &arg2); end

  def performed_jobs=(arg); end

  def queue_adapter(); end

  def queue_adapter_for_test(); end
end

module ActiveJob::TestHelper::TestQueueAdapter
end

module ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveSupport::Concern
end

module ActiveJob::TestHelper
end

module ActiveJob::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveModel::API
  def initialize(attributes=T.unsafe(nil)); end

  def persisted?(); end
end

class ActiveModel::Attribute::UserProvidedDefault
  def initialize(name, value, type, database_default); end

  def marshal_dump(); end

  def marshal_load(values); end
end

module ActiveModel::AttributeAssignment
  def assign_attributes(new_attributes); end

  def attributes=(new_attributes); end
end

module ActiveModel::AttributeMethods
  FORWARD_PARAMETERS = ::T.let(nil, ::T.untyped)
end

class ActiveModel::AttributeMutationTracker
  def any_changes?(); end

  def change_to_attribute(attr_name); end

  def changed?(attr_name, from: T.unsafe(nil), to: T.unsafe(nil)); end

  def changed_attribute_names(); end

  def changed_in_place?(attr_name); end

  def changed_values(); end

  def changes(); end

  def force_change(attr_name); end

  def forget_change(attr_name); end

  def initialize(attributes); end

  def original_value(attr_name); end
  OPTION_NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Attributes
  def attribute_names(); end

  def attributes(); end

  def freeze(); end

  def initialize(*arg); end
end

module ActiveModel::Attributes::ClassMethods
  def attribute(name, cast_type=T.unsafe(nil), default: T.unsafe(nil), **options); end

  def attribute_names(); end
end

module ActiveModel::Attributes::ClassMethods
end

module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
end

module ActiveModel::Callbacks
  def define_model_callbacks(*callbacks); end
end

module ActiveModel::Callbacks
  def self.extended(base); end
end

module ActiveModel::Conversion
  def to_key(); end

  def to_model(); end

  def to_param(); end

  def to_partial_path(); end
end

module ActiveModel::Dirty
  def as_json(options=T.unsafe(nil)); end

  def attribute_previously_was(attr_name); end

  def attribute_was(attr_name); end

  def changed(); end

  def changed_attributes(); end

  def changes(); end

  def changes_applied(); end

  def clear_attribute_changes(attr_names); end

  def clear_changes_information(); end

  def restore_attributes(attr_names=T.unsafe(nil)); end
end

class ActiveModel::Error
  CALLBACKS_OPTIONS = ::T.let(nil, ::T.untyped)
  MESSAGE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Errors
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
end

class ActiveModel::ForcedMutationTracker
  def finalize_changes(); end
end

module ActiveModel::Lint
end

module ActiveModel::Lint::Tests
  def test_errors_aref(); end

  def test_model_naming(); end

  def test_persisted?(); end

  def test_to_key(); end

  def test_to_param(); end

  def test_to_partial_path(); end
end

module ActiveModel::Lint::Tests
end

module ActiveModel::Lint
end

class ActiveModel::Name
  def !~(*arg, **arg1, &arg2); end

  def ==(arg); end

  def ===(arg); end

  def =~(*arg, **arg1, &arg2); end

  def as_json(*arg, **arg1, &arg2); end

  def cache_key(); end

  def collection(); end

  def collection=(collection); end

  def element(); end

  def element=(element); end

  def eql?(*arg, **arg1, &arg2); end

  def human(options=T.unsafe(nil)); end

  def i18n_key(); end

  def i18n_key=(i18n_key); end

  def initialize(klass, namespace=T.unsafe(nil), name=T.unsafe(nil), locale=T.unsafe(nil)); end

  def match?(*arg, **arg1, &arg2); end

  def name(); end

  def name=(name); end

  def param_key(); end

  def param_key=(param_key); end

  def plural(); end

  def plural=(plural); end

  def route_key(); end

  def route_key=(route_key); end

  def singular(); end

  def singular=(singular); end

  def singular_route_key(); end

  def singular_route_key=(singular_route_key); end

  def to_s(*arg, **arg1, &arg2); end

  def to_str(*arg, **arg1, &arg2); end

  def uncountable?(); end
end

module ActiveModel::Naming
  def model_name(); end
end

module ActiveModel::Naming
  def self.extended(base); end

  def self.param_key(record_or_class); end

  def self.plural(record_or_class); end

  def self.route_key(record_or_class); end

  def self.singular(record_or_class); end

  def self.singular_route_key(record_or_class); end

  def self.uncountable?(record_or_class); end
end

class ActiveModel::NullMutationTracker
  def any_changes?(); end

  def change_to_attribute(attr_name); end

  def changed?(attr_name, **arg); end

  def changed_attribute_names(); end

  def changed_in_place?(attr_name); end

  def changed_values(); end

  def changes(); end

  def original_value(attr_name); end
end

module ActiveModel::SecurePassword
  def self.min_cost(); end

  def self.min_cost=(min_cost); end
end

module ActiveModel::Serialization
  def read_attribute_for_serialization(*arg); end

  def serializable_hash(options=T.unsafe(nil)); end
end

module ActiveModel::Serializers::JSON
  def as_json(options=T.unsafe(nil)); end

  def from_json(json, include_root=T.unsafe(nil)); end
end

module ActiveModel::Translation
  def human_attribute_name(attribute, options=T.unsafe(nil)); end

  def i18n_scope(); end

  def lookup_ancestors(); end
end

class ActiveModel::Type::Binary
  def changed_in_place?(raw_old_value, value); end
end

class ActiveModel::Type::Binary::Data
  def ==(other); end

  def hex(); end

  def initialize(value); end

  def to_str(); end
end

class ActiveModel::Type::Boolean
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Date
  ISO_DATE = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Decimal
  BIGDECIMAL_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Helpers::AcceptsMultiparameterTime
  def initialize(defaults: T.unsafe(nil)); end
end

module ActiveModel::Type::Helpers::AcceptsMultiparameterTime::InstanceMethods
  def assert_valid_value(value); end

  def cast(value); end

  def serialize(value); end

  def value_constructed_by_mass_assignment?(value); end
end

module ActiveModel::Type::Helpers::Mutable
  def cast(value); end

  def changed_in_place?(raw_old_value, new_value); end
end

module ActiveModel::Type::Helpers::Numeric
  def cast(value); end

  def changed?(old_value, _new_value, new_value_before_type_cast); end

  def serialize(value); end
end

module ActiveModel::Type::Helpers::TimeValue
  def apply_seconds_precision(value); end

  def serialize(value); end

  def type_cast_for_schema(value); end

  def user_input_in_time_zone(value); end
  ISO_DATETIME = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type::Helpers::Timezone
  def default_timezone(); end

  def is_utc?(); end
end

class ActiveModel::Type::ImmutableString
  def initialize(**args); end
end

class ActiveModel::Type::Integer
  def initialize(**arg); end
  DEFAULT_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Registry
  def lookup(symbol, *args, **arg); end

  def register(type_name, klass=T.unsafe(nil), &block); end
end

class ActiveModel::Type::String
  def to_immutable_string(); end
end

class ActiveModel::Type::Value
  def ==(other); end

  def assert_valid_value(_); end

  def binary?(); end

  def changed?(old_value, new_value, _new_value_before_type_cast); end

  def changed_in_place?(raw_old_value, new_value); end

  def deserialize(value); end

  def eql?(other); end

  def force_equality?(_value); end

  def limit(); end

  def map(value); end

  def precision(); end

  def scale(); end

  def serializable?(value); end

  def serialize(value); end

  def type(); end

  def type_cast_for_schema(value); end

  def value_constructed_by_mass_assignment?(_value); end
end

module ActiveModel::Type
  def self.default_value(); end

  def self.lookup(*arg, **arg1, &arg2); end

  def self.register(type_name, klass=T.unsafe(nil), &block); end

  def self.registry(); end

  def self.registry=(registry); end
end

module ActiveModel::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ActiveJobRequiredError
end

class ActiveRecord::ActiveJobRequiredError
end

class ActiveRecord::AdapterTimeout
end

class ActiveRecord::AdapterTimeout
end

module ActiveRecord::Aggregations
  def reload(*arg); end
end

module ActiveRecord::Aggregations::ClassMethods
  def composed_of(part_id, options=T.unsafe(nil)); end
end

module ActiveRecord::Aggregations::ClassMethods
end

class ActiveRecord::AmbiguousSourceReflectionForThroughAssociation
  def initialize(klass, macro, association_name, options, possible_sources); end
end

class ActiveRecord::AssociationNotFoundError
  include ::DidYouMean::Correctable
  def association_name(); end

  def initialize(record=T.unsafe(nil), association_name=T.unsafe(nil)); end

  def record(); end
end

class ActiveRecord::AssociationRelation
  def initialize(klass, association, **arg); end

  def insert(attributes, **kwargs); end

  def insert!(attributes, **kwargs); end

  def insert_all(attributes, **kwargs); end

  def insert_all!(attributes, **kwargs); end

  def proxy_association(); end

  def upsert(attributes, **kwargs); end

  def upsert_all(attributes, **kwargs); end
end

class ActiveRecord::AssociationRelation
end

module ActiveRecord::Associations
  def association(name); end

  def association_cached?(name); end
end

module ActiveRecord::Associations
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Concern
end

class ActiveRecord::AsynchronousQueriesTracker
  def current_session(); end

  def finalize_session(); end

  def start_session(); end
end

module ActiveRecord::AsynchronousQueriesTracker::NullSession
end

module ActiveRecord::AsynchronousQueriesTracker::NullSession
  def self.active?(); end

  def self.finalize(); end
end

class ActiveRecord::AsynchronousQueriesTracker::Session
  def active?(); end

  def finalize(); end
end

class ActiveRecord::AsynchronousQueriesTracker::Session
end

class ActiveRecord::AsynchronousQueriesTracker
  def self.complete(asynchronous_queries_tracker); end

  def self.install_executor_hooks(executor=T.unsafe(nil)); end

  def self.run(); end
end

class ActiveRecord::AsynchronousQueryInsideTransactionError
end

class ActiveRecord::AsynchronousQueryInsideTransactionError
end

module ActiveRecord::AttributeAssignment
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection
end

class ActiveRecord::AttributeAssignmentError
  def attribute(); end

  def exception(); end

  def initialize(message=T.unsafe(nil), exception=T.unsafe(nil), attribute=T.unsafe(nil)); end
end

module ActiveRecord::AttributeMethods
  def [](attr_name); end

  def []=(attr_name, value); end

  def _has_attribute?(attr_name); end

  def accessed_fields(); end

  def attribute_for_inspect(attr_name); end

  def attribute_names(); end

  def attribute_present?(attr_name); end

  def attributes(); end

  def has_attribute?(attr_name); end

  def respond_to?(name, include_private=T.unsafe(nil)); end
end

module ActiveRecord::AttributeMethods::BeforeTypeCast
  def attributes_before_type_cast(); end

  def attributes_for_database(); end

  def read_attribute_before_type_cast(attr_name); end
end

module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AttributeMethods::Dirty
  def attribute_before_last_save(attr_name); end

  def attribute_change_to_be_saved(attr_name); end

  def attribute_in_database(attr_name); end

  def attributes_in_database(); end

  def changed_attribute_names_to_save(); end

  def changes_to_save(); end

  def has_changes_to_save?(); end

  def reload(*arg); end

  def saved_change_to_attribute(attr_name); end

  def saved_changes(); end

  def saved_changes?(); end

  def will_save_change_to_attribute?(attr_name, **options); end
end

module ActiveRecord::AttributeMethods::Dirty
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AttributeMethods::PrimaryKey
  def id(); end

  def id=(value); end

  def id?(); end

  def id_before_type_cast(); end

  def id_for_database(); end

  def id_in_database(); end

  def id_was(); end

  def to_key(); end
end

module ActiveRecord::AttributeMethods::PrimaryKey
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AttributeMethods::Query
  def query_attribute(attr_name); end
end

module ActiveRecord::AttributeMethods::Query
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AttributeMethods::Read
  def _read_attribute(attr_name, &block); end

  def read_attribute(attr_name, &block); end
end

module ActiveRecord::AttributeMethods::Read
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AttributeMethods::Serialization
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AttributeMethods::Write
  def _write_attribute(attr_name, value); end

  def write_attribute(attr_name, value); end
end

module ActiveRecord::AttributeMethods::Write
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AttributeMethods
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  def self.dangerous_attribute_methods(); end
end

module ActiveRecord::Attributes
  extend ::ActiveSupport::Concern
end

module ActiveRecord::AutosaveAssociation
  def changed_for_autosave?(); end

  def destroyed_by_association(); end

  def destroyed_by_association=(reflection); end

  def mark_for_destruction(); end

  def marked_for_destruction?(); end

  def reload(options=T.unsafe(nil)); end
end

module ActiveRecord::AutosaveAssociation
  extend ::ActiveSupport::Concern
end

class ActiveRecord::Base
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::Validations
  include ::ActiveRecord::Base::GeneratedAttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveModel::Dirty
  include ::ActiveModel::Serializers::JSON
  include ::ActiveModel::Serialization
  include ::ActiveRecord::SignedId
  include ::ActiveRecord::Encryption::EncryptableRecord
  include ::SecondLevelCache::Adapter::Paranoia::ActiveRecord
  include ::SecondLevelCache::Adapter::Paranoia::Mixin
  include ::SecondLevelCache::Mixin
  include ::GlobalID::Identification
  include ::Flipper::Identifier
  include ::ActiveStorage::Attached::Model
  include ::ActiveStorage::Reflection::ActiveRecordExtensions
  include ::SecondLevelCache::ActiveRecord::Base
  include ::SecondLevelCache::ActiveRecord::Persistence
  def __callbacks(); end

  def __callbacks?(); end

  def _before_commit_callbacks(); end

  def _commit_callbacks(); end

  def _create_callbacks(); end

  def _destroy_callbacks(); end

  def _find_callbacks(); end

  def _initialize_callbacks(); end

  def _reflections(); end

  def _reflections?(); end

  def _rollback_callbacks(); end

  def _run_before_commit_callbacks(&block); end

  def _run_commit_callbacks(&block); end

  def _run_create_callbacks(&block); end

  def _run_destroy_callbacks(&block); end

  def _run_find_callbacks(&block); end

  def _run_initialize_callbacks(&block); end

  def _run_rollback_callbacks(&block); end

  def _run_save_callbacks(&block); end

  def _run_touch_callbacks(&block); end

  def _run_update_callbacks(&block); end

  def _run_validate_callbacks(&block); end

  def _run_validation_callbacks(&block); end

  def _save_callbacks(); end

  def _touch_callbacks(); end

  def _update_callbacks(); end

  def _validate_callbacks(); end

  def _validation_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def aggregate_reflections(); end

  def aggregate_reflections?(); end

  def attachment_reflections(); end

  def attachment_reflections?(); end

  def attribute_aliases(); end

  def attribute_aliases?(); end

  def attribute_method_matchers(); end

  def attribute_method_matchers?(); end

  def automatic_scope_inversing(); end

  def automatic_scope_inversing?(); end

  def cache_timestamp_format(); end

  def cache_timestamp_format?(); end

  def cache_versioning(); end

  def cache_versioning?(); end

  def collection_cache_versioning(); end

  def collection_cache_versioning?(); end

  def column_for_attribute(*arg, **arg1, &arg2); end

  def default_connection_handler(); end

  def default_connection_handler?(); end

  def default_role(); end

  def default_role?(); end

  def default_scope_override(); end

  def default_scopes(); end

  def default_shard(); end

  def default_shard?(); end

  def defined_enums(); end

  def defined_enums?(); end

  def destroy_association_async_job(); end

  def encrypted_attributes(); end

  def encrypted_attributes=(encrypted_attributes); end

  def encrypted_attributes?(); end

  def include_root_in_json(); end

  def include_root_in_json?(); end

  def lock_optimistically(); end

  def lock_optimistically?(); end

  def logger(); end

  def logger?(); end

  def model_name(*arg, **arg1, &arg2); end

  def nested_attributes_options(); end

  def nested_attributes_options?(); end

  def paranoid?(); end

  def partial_inserts(); end

  def partial_inserts?(); end

  def partial_updates(); end

  def partial_updates?(); end

  def pluralize_table_names(); end

  def pluralize_table_names?(); end

  def primary_key_prefix_type(); end

  def primary_key_prefix_type?(); end

  def record_timestamps(); end

  def record_timestamps=(record_timestamps); end

  def record_timestamps?(); end

  def signed_id_verifier_secret(); end

  def signed_id_verifier_secret?(); end

  def skip_time_zone_conversion_for_attributes(); end

  def skip_time_zone_conversion_for_attributes?(); end

  def store_full_class_name(); end

  def store_full_class_name?(); end

  def store_full_sti_class(); end

  def store_full_sti_class?(); end

  def table_name_prefix(); end

  def table_name_prefix?(); end

  def table_name_suffix(); end

  def table_name_suffix?(); end

  def time_zone_aware_attributes(); end

  def time_zone_aware_attributes?(); end

  def time_zone_aware_types(); end

  def time_zone_aware_types?(); end

  def type_for_attribute(*arg, **arg1, &arg2); end

  def validation_context(); end
end

module ActiveRecord::Base::GeneratedAssociationMethods
end

module ActiveRecord::Base::GeneratedAssociationMethods
end

module ActiveRecord::Base::GeneratedAttributeMethods
end

module ActiveRecord::Base::GeneratedAttributeMethods
  extend ::Mutex_m
end

class ActiveRecord::Base
  extend ::ActiveModel::Translation
  extend ::ActiveRecord::DelegatedType
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveModel::Validations::HelperMethods
  extend ::SecondLevelCache::ActiveRecord::FetchByUniqKey
  extend ::Lockbox::Model
  extend ::Lockbox::Model::Attached
  extend ::OrmAdapter::ToAdapter
  extend ::DefaultValueFor::ClassMethods
  def self.I_AM_THE_DESTROYER!(); end

  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._attr_readonly(); end

  def self._attr_readonly=(value); end

  def self._attr_readonly?(); end

  def self._before_commit_callbacks(); end

  def self._before_commit_callbacks=(value); end

  def self._commit_callbacks(); end

  def self._commit_callbacks=(value); end

  def self._create_callbacks(); end

  def self._create_callbacks=(value); end

  def self._destroy_callbacks(); end

  def self._destroy_callbacks=(value); end

  def self._find_callbacks(); end

  def self._find_callbacks=(value); end

  def self._initialize_callbacks(); end

  def self._initialize_callbacks=(value); end

  def self._reflections(); end

  def self._reflections=(value); end

  def self._reflections?(); end

  def self._rollback_callbacks(); end

  def self._rollback_callbacks=(value); end

  def self._save_callbacks(); end

  def self._save_callbacks=(value); end

  def self._touch_callbacks(); end

  def self._touch_callbacks=(value); end

  def self._update_callbacks(); end

  def self._update_callbacks=(value); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validation_callbacks(); end

  def self._validation_callbacks=(value); end

  def self._validators(); end

  def self._validators=(value); end

  def self._validators?(); end

  def self.acts_as_paranoid(options=T.unsafe(nil)); end

  def self.after_find(*args, **options, &block); end

  def self.after_initialize(*args, **options, &block); end

  def self.after_touch(*args, **options, &block); end

  def self.aggregate_reflections(); end

  def self.aggregate_reflections=(value); end

  def self.aggregate_reflections?(); end

  def self.application_record_class?(); end

  def self.asynchronous_queries_session(); end

  def self.asynchronous_queries_tracker(); end

  def self.attachment_reflections(); end

  def self.attachment_reflections=(value); end

  def self.attachment_reflections?(); end

  def self.attribute_aliases(); end

  def self.attribute_aliases=(value); end

  def self.attribute_aliases?(); end

  def self.attribute_method_matchers(); end

  def self.attribute_method_matchers=(value); end

  def self.attribute_method_matchers?(); end

  def self.attributes_to_define_after_schema_loads(); end

  def self.attributes_to_define_after_schema_loads=(value); end

  def self.attributes_to_define_after_schema_loads?(); end

  def self.automatic_scope_inversing(); end

  def self.automatic_scope_inversing=(value); end

  def self.automatic_scope_inversing?(); end

  def self.belongs_to_required_by_default(); end

  def self.belongs_to_required_by_default=(value); end

  def self.belongs_to_required_by_default?(); end

  def self.cache_timestamp_format(); end

  def self.cache_timestamp_format=(value); end

  def self.cache_timestamp_format?(); end

  def self.cache_versioning(); end

  def self.cache_versioning=(value); end

  def self.cache_versioning?(); end

  def self.collection_cache_versioning(); end

  def self.collection_cache_versioning=(value); end

  def self.collection_cache_versioning?(); end

  def self.configurations(); end

  def self.configurations=(config); end

  def self.connected_to_stack(); end

  def self.connection_class(); end

  def self.connection_class=(b); end

  def self.connection_class?(); end

  def self.connection_class_for_self(); end

  def self.connection_handler(); end

  def self.connection_handler=(handler); end

  def self.connection_handlers(); end

  def self.connection_handlers=(handlers); end

  def self.current_preventing_writes(); end

  def self.current_role(); end

  def self.current_shard(); end

  def self.default_connection_handler(); end

  def self.default_connection_handler=(value); end

  def self.default_connection_handler?(); end

  def self.default_role(); end

  def self.default_role=(value); end

  def self.default_role?(); end

  def self.default_scope_override(); end

  def self.default_scope_override=(value); end

  def self.default_scopes(); end

  def self.default_scopes=(value); end

  def self.default_shard(); end

  def self.default_shard=(value); end

  def self.default_shard?(); end

  def self.defined_enums(); end

  def self.defined_enums=(value); end

  def self.defined_enums?(); end

  def self.destroy_association_async_job(); end

  def self.destroy_association_async_job=(value); end

  def self.encrypted_attributes(); end

  def self.encrypted_attributes=(value); end

  def self.encrypted_attributes?(); end

  def self.enumerate_columns_in_select_statements(); end

  def self.enumerate_columns_in_select_statements=(value); end

  def self.enumerate_columns_in_select_statements?(); end

  def self.has_many_inversing(); end

  def self.has_many_inversing=(value); end

  def self.has_many_inversing?(); end

  def self.immutable_strings_by_default(); end

  def self.immutable_strings_by_default=(value); end

  def self.immutable_strings_by_default?(); end

  def self.implicit_order_column(); end

  def self.implicit_order_column=(value); end

  def self.implicit_order_column?(); end

  def self.include_root_in_json(); end

  def self.include_root_in_json=(value); end

  def self.include_root_in_json?(); end

  def self.inheritance_column(); end

  def self.inheritance_column=(value); end

  def self.inheritance_column?(); end

  def self.internal_metadata_table_name(); end

  def self.internal_metadata_table_name=(value); end

  def self.internal_metadata_table_name?(); end

  def self.local_stored_attributes(); end

  def self.local_stored_attributes=(local_stored_attributes); end

  def self.lock_optimistically(); end

  def self.lock_optimistically=(value); end

  def self.lock_optimistically?(); end

  def self.logger(); end

  def self.logger=(value); end

  def self.logger?(); end

  def self.nested_attributes_options(); end

  def self.nested_attributes_options=(value); end

  def self.nested_attributes_options?(); end

  def self.paranoid?(); end

  def self.partial_inserts(); end

  def self.partial_inserts=(value); end

  def self.partial_inserts?(); end

  def self.partial_updates(); end

  def self.partial_updates=(value); end

  def self.partial_updates?(); end

  def self.pluralize_table_names(); end

  def self.pluralize_table_names=(value); end

  def self.pluralize_table_names?(); end

  def self.primary_key_prefix_type(); end

  def self.primary_key_prefix_type=(value); end

  def self.primary_key_prefix_type?(); end

  def self.record_timestamps(); end

  def self.record_timestamps=(value); end

  def self.record_timestamps?(); end

  def self.schema_migrations_table_name(); end

  def self.schema_migrations_table_name=(value); end

  def self.schema_migrations_table_name?(); end

  def self.shard_selector(); end

  def self.shard_selector=(value); end

  def self.shard_selector?(); end

  def self.signed_id_verifier_secret(); end

  def self.signed_id_verifier_secret=(value); end

  def self.signed_id_verifier_secret?(); end

  def self.skip_time_zone_conversion_for_attributes(); end

  def self.skip_time_zone_conversion_for_attributes=(value); end

  def self.skip_time_zone_conversion_for_attributes?(); end

  def self.store_full_class_name(); end

  def self.store_full_class_name=(value); end

  def self.store_full_class_name?(); end

  def self.store_full_sti_class(); end

  def self.store_full_sti_class=(value); end

  def self.store_full_sti_class?(); end

  def self.strict_loading_by_default(); end

  def self.strict_loading_by_default=(value); end

  def self.strict_loading_by_default?(); end

  def self.strict_loading_violation!(owner:, reflection:); end

  def self.table_name_prefix(); end

  def self.table_name_prefix=(value); end

  def self.table_name_prefix?(); end

  def self.table_name_suffix(); end

  def self.table_name_suffix=(value); end

  def self.table_name_suffix?(); end

  def self.time_zone_aware_attributes(); end

  def self.time_zone_aware_attributes=(value); end

  def self.time_zone_aware_attributes?(); end

  def self.time_zone_aware_types(); end

  def self.time_zone_aware_types=(value); end

  def self.time_zone_aware_types?(); end
end

module ActiveRecord::Batches
  def find_each(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil), &block); end

  def find_in_batches(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil)); end

  def in_batches(of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil), load: T.unsafe(nil), error_on_ignore: T.unsafe(nil), order: T.unsafe(nil)); end
  ORDER_IGNORE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Batches::BatchEnumerator
  include ::Enumerable
  def batch_size(); end

  def delete_all(); end

  def destroy_all(); end

  def each(&block); end

  def each_record(&block); end

  def finish(); end

  def initialize(relation:, of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil)); end

  def relation(); end

  def start(); end

  def update_all(updates); end
end

class ActiveRecord::Batches::BatchEnumerator
end

module ActiveRecord::Batches
end

module ActiveRecord::Calculations
  def average(column_name); end

  def calculate(operation, column_name); end

  def count(column_name=T.unsafe(nil)); end

  def ids(); end

  def maximum(column_name); end

  def minimum(column_name); end

  def pick(*column_names); end

  def pluck(*column_names); end

  def sum(identity_or_column=T.unsafe(nil), &block); end
end

module ActiveRecord::Callbacks
  def destroy(); end

  def increment!(attribute, by=T.unsafe(nil), touch: T.unsafe(nil)); end

  def touch(*arg, **arg1); end
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Callbacks
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Coders
end

class ActiveRecord::Coders::JSON
end

class ActiveRecord::Coders::JSON
  def self.dump(obj); end

  def self.load(json); end
end

class ActiveRecord::Coders::YAMLColumn
  def assert_valid_value(obj, action:); end

  def dump(obj); end

  def initialize(attr_name, object_class=T.unsafe(nil)); end

  def load(yaml); end

  def object_class(); end

  def object_class=(object_class); end
end

class ActiveRecord::Coders::YAMLColumn
end

module ActiveRecord::Coders
end

class ActiveRecord::ConcurrentMigrationError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
  RELEASE_LOCK_FAILED_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveSupport::Callbacks
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  include ::ActiveRecord::ConnectionAdapters::Quoting
  include ::ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ::ActiveRecord::ConnectionAdapters::QueryCache
  include ::ActiveRecord::ConnectionAdapters::Savepoints
  def __callbacks(); end

  def __callbacks?(); end

  def _checkin_callbacks(); end

  def _checkout_callbacks(); end

  def _run_checkin_callbacks(&block); end

  def _run_checkout_callbacks(&block); end

  def active?(); end

  def adapter_name(); end

  def advisory_locks_enabled?(); end

  def all_foreign_keys_valid?(); end

  def async_enabled?(); end

  def build_insert_sql(insert); end

  def case_insensitive_comparison(attribute, value); end

  def case_sensitive_comparison(attribute, value); end

  def check_if_write_query(sql); end

  def check_version(); end

  def clear_cache!(); end

  def close(); end

  def connection_class(); end

  def create(*arg); end

  def create_enum(*arg); end

  def database_version(); end

  def default_index_type?(index); end

  def default_uniqueness_comparison(attribute, value); end

  def delete(*arg); end

  def disable_extension(name); end

  def disable_referential_integrity(); end

  def discard!(); end

  def disconnect!(); end

  def enable_extension(name); end

  def exec_insert_all(*arg); end

  def expire(); end

  def extensions(); end

  def field_ordered_value(column, values); end

  def get_advisory_lock(lock_id); end

  def get_database_version(); end

  def in_use?(); end

  def index_algorithms(); end

  def initialize(connection, logger=T.unsafe(nil), config=T.unsafe(nil)); end

  def insert(*arg); end

  def lease(); end

  def lock(); end

  def logger(); end

  def migration_context(); end

  def migrations_paths(); end

  def owner(); end

  def pool(); end

  def pool=(pool); end

  def prefetch_primary_key?(table_name=T.unsafe(nil)); end

  def prepared_statements(); end

  def prepared_statements?(); end

  def prepared_statements_disabled_cache(); end

  def preventing_writes?(); end

  def raw_connection(); end

  def reconnect!(); end

  def release_advisory_lock(lock_id); end

  def replica?(); end

  def requires_reloading?(); end

  def reset!(); end

  def role(); end

  def rollback_db_transaction(*arg); end

  def rollback_to_savepoint(*arg); end

  def schema_cache(); end

  def schema_cache=(cache); end

  def schema_migration(); end

  def schema_version(); end

  def seconds_idle(); end

  def shard(); end

  def steal!(); end

  def supports_advisory_locks?(); end

  def supports_bulk_alter?(); end

  def supports_check_constraints?(); end

  def supports_comments?(); end

  def supports_comments_in_create?(); end

  def supports_common_table_expressions?(); end

  def supports_concurrent_connections?(); end

  def supports_datetime_with_precision?(); end

  def supports_ddl_transactions?(); end

  def supports_deferrable_constraints?(); end

  def supports_explain?(); end

  def supports_expression_index?(); end

  def supports_extensions?(); end

  def supports_foreign_keys?(); end

  def supports_foreign_tables?(); end

  def supports_index_sort_order?(); end

  def supports_indexes_in_create?(); end

  def supports_insert_conflict_target?(); end

  def supports_insert_on_duplicate_skip?(); end

  def supports_insert_on_duplicate_update?(); end

  def supports_insert_returning?(); end

  def supports_json?(); end

  def supports_lazy_transactions?(); end

  def supports_materialized_views?(); end

  def supports_optimizer_hints?(); end

  def supports_partial_index?(); end

  def supports_partitioned_indexes?(); end

  def supports_savepoints?(); end

  def supports_transaction_isolation?(); end

  def supports_validate_constraints?(); end

  def supports_views?(); end

  def supports_virtual_columns?(); end

  def throw_away!(); end

  def truncate(*arg); end

  def truncate_tables(*arg); end

  def unprepared_statement(); end

  def update(*arg); end

  def use_metadata_table?(); end

  def valid_type?(type); end

  def verify!(); end

  def visitor(); end

  def with_instrumenter(instrumenter, &block); end
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  COMMENT_REGEX = ::T.let(nil, ::T.untyped)
  SIMPLE_INT = ::T.let(nil, ::T.untyped)
  TYPE_MAP = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
  include ::Comparable
  def full_version_string(); end

  def initialize(version_string, full_version_string=T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  extend ::ActiveSupport::DescendantsTracker
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._checkin_callbacks(); end

  def self._checkin_callbacks=(value); end

  def self._checkout_callbacks(); end

  def self._checkout_callbacks=(value); end

  def self.build_read_query_regexp(*parts); end

  def self.database_exists?(config); end

  def self.quoted_column_names(); end

  def self.quoted_table_names(); end

  def self.type_cast_config_to_boolean(config); end

  def self.type_cast_config_to_integer(config); end
end

module ActiveRecord::ConnectionAdapters::AbstractPool
  def get_schema_cache(connection); end

  def lazily_set_schema_cache(); end

  def set_schema_cache(cache); end
end

module ActiveRecord::ConnectionAdapters::AbstractPool
end

class ActiveRecord::ConnectionAdapters::AddColumnDefinition
  def column(); end

  def column=(_); end
end

class ActiveRecord::ConnectionAdapters::AddColumnDefinition
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::ConnectionAdapters::AlterTable
  def add_check_constraint(expression, options); end

  def add_column(name, type, **options); end

  def add_foreign_key(to_table, options); end

  def adds(); end

  def check_constraint_adds(); end

  def check_constraint_drops(); end

  def drop_check_constraint(constraint_name); end

  def drop_foreign_key(name); end

  def foreign_key_adds(); end

  def foreign_key_drops(); end

  def initialize(td); end

  def name(); end
end

class ActiveRecord::ConnectionAdapters::AlterTable
end

class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition
  def column(); end

  def column=(_); end

  def name(); end

  def name=(_); end
end

class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::ConnectionAdapters::CheckConstraintDefinition
  def export_name_on_schema_dump?(); end

  def expression(); end

  def expression=(_); end

  def name(); end

  def options(); end

  def options=(_); end

  def table_name(); end

  def table_name=(_); end

  def validate?(); end

  def validated?(); end
end

class ActiveRecord::ConnectionAdapters::CheckConstraintDefinition
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::ConnectionAdapters::Column
  include ::ActiveRecord::ConnectionAdapters::Deduplicable
  def ==(other); end

  def bigint?(); end

  def collation(); end

  def comment(); end

  def default(); end

  def default_function(); end

  def encode_with(coder); end

  def eql?(other); end

  def has_default?(); end

  def human_name(); end

  def init_with(coder); end

  def initialize(name, default, sql_type_metadata=T.unsafe(nil), null=T.unsafe(nil), default_function=T.unsafe(nil), collation: T.unsafe(nil), comment: T.unsafe(nil), **arg); end

  def limit(*arg, **arg1, &arg2); end

  def name(); end

  def null(); end

  def precision(*arg, **arg1, &arg2); end

  def scale(*arg, **arg1, &arg2); end

  def sql_type(*arg, **arg1, &arg2); end

  def sql_type_metadata(); end

  def type(*arg, **arg1, &arg2); end

  def virtual?(); end
end

class ActiveRecord::ConnectionAdapters::Column
  extend ::ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
end

class ActiveRecord::ConnectionAdapters::ColumnDefinition
  def aliased_types(name, fallback); end

  def collation(); end

  def collation=(value); end

  def comment(); end

  def comment=(value); end

  def default(); end

  def default=(value); end

  def limit(); end

  def limit=(value); end

  def name(); end

  def name=(_); end

  def null(); end

  def null=(value); end

  def options(); end

  def options=(_); end

  def precision(); end

  def precision=(value); end

  def primary_key?(); end

  def scale(); end

  def scale=(value); end

  def sql_type(); end

  def sql_type=(_); end

  def type(); end

  def type=(_); end
end

class ActiveRecord::ConnectionAdapters::ColumnDefinition
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
end

module ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
end

module ActiveRecord::ConnectionAdapters::ColumnMethods
  extend ::ActiveSupport::Concern
end

class ActiveRecord::ConnectionAdapters::ConnectionHandler
  def active_connections?(role=T.unsafe(nil)); end

  def all_connection_pools(); end

  def clear_active_connections!(role=T.unsafe(nil)); end

  def clear_all_connections!(role=T.unsafe(nil)); end

  def clear_reloadable_connections!(role=T.unsafe(nil)); end

  def connected?(spec_name, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  def connection_pool_list(role=T.unsafe(nil)); end

  def connection_pool_names(); end

  def connection_pools(role=T.unsafe(nil)); end

  def establish_connection(config, owner_name: T.unsafe(nil), role: T.unsafe(nil), shard: T.unsafe(nil)); end

  def flush_idle_connections!(role=T.unsafe(nil)); end

  def prevent_writes(); end

  def prevent_writes=(prevent_writes); end

  def remove_connection_pool(owner, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  def retrieve_connection(spec_name, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  def retrieve_connection_pool(owner, role: T.unsafe(nil), shard: T.unsafe(nil)); end

  def while_preventing_writes(enabled=T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::ConnectionHandler::StringConnectionOwner
  def current_preventing_writes(); end

  def initialize(name); end

  def name(); end

  def primary_class?(); end
end

class ActiveRecord::ConnectionAdapters::ConnectionHandler::StringConnectionOwner
end

class ActiveRecord::ConnectionAdapters::ConnectionHandler
end

class ActiveRecord::ConnectionAdapters::ConnectionPool
  include ::MonitorMixin
  include ::ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  include ::ActiveRecord::ConnectionAdapters::AbstractPool
  def active_connection?(); end

  def async_executor(); end

  def automatic_reconnect(); end

  def automatic_reconnect=(automatic_reconnect); end

  def checkin(conn); end

  def checkout(checkout_timeout=T.unsafe(nil)); end

  def checkout_timeout(); end

  def checkout_timeout=(checkout_timeout); end

  def clear_reloadable_connections(raise_on_acquisition_timeout=T.unsafe(nil)); end

  def clear_reloadable_connections!(); end

  def connected?(); end

  def connection(); end

  def connection_class(); end

  def connection_klass(*args, **arg, &block); end

  def connections(); end

  def db_config(); end

  def discard!(); end

  def discarded?(); end

  def disconnect(raise_on_acquisition_timeout=T.unsafe(nil)); end

  def disconnect!(); end

  def flush(minimum_idle=T.unsafe(nil)); end

  def flush!(); end

  def initialize(pool_config); end

  def lock_thread=(lock_thread); end

  def num_waiting_in_queue(); end

  def pool_config(); end

  def reap(); end

  def reaper(); end

  def release_connection(owner_thread=T.unsafe(nil)); end

  def remove(conn); end

  def role(); end

  def schedule_query(future_result); end

  def schema_cache(*arg, **arg1, &arg2); end

  def schema_cache=(arg); end

  def shard(); end

  def size(); end

  def stat(); end

  def with_connection(); end
end

module ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
  def with_a_bias_for(thread); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable
  def broadcast(); end

  def broadcast_on_biased(); end

  def initialize(lock, other_cond, preferred_thread); end

  def signal(); end

  def wait(timeout); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable
end

module ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue
  include ::ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  def add(element); end

  def any_waiting?(); end

  def clear(); end

  def delete(element); end

  def initialize(lock=T.unsafe(nil)); end

  def num_waiting(); end

  def poll(timeout=T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper
  def frequency(); end

  def initialize(pool, frequency); end

  def pool(); end

  def run(); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper
  def self.register_pool(pool, frequency); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool
end

class ActiveRecord::ConnectionAdapters::CreateIndexDefinition
  def algorithm(); end

  def algorithm=(_); end

  def if_not_exists(); end

  def if_not_exists=(_); end

  def index(); end

  def index=(_); end
end

class ActiveRecord::ConnectionAdapters::CreateIndexDefinition
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module ActiveRecord::ConnectionAdapters::DatabaseLimits
  def index_name_length(); end

  def max_identifier_length(); end

  def table_alias_length(); end
end

module ActiveRecord::ConnectionAdapters::DatabaseLimits
end

module ActiveRecord::ConnectionAdapters::DatabaseStatements
  def add_transaction_record(record, ensure_finalize=T.unsafe(nil)); end

  def begin_db_transaction(); end

  def begin_isolated_db_transaction(isolation); end

  def begin_transaction(*arg, **arg1, &arg2); end

  def cacheable_query(klass, arel); end

  def commit_db_transaction(); end

  def commit_transaction(*arg, **arg1, &arg2); end

  def create(arel, name=T.unsafe(nil), pk=T.unsafe(nil), id_value=T.unsafe(nil), sequence_name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def current_transaction(*arg, **arg1, &arg2); end

  def default_sequence_name(table, column); end

  def delete(arel, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def disable_lazy_transactions!(*arg, **arg1, &arg2); end

  def empty_insert_statement_value(primary_key=T.unsafe(nil)); end

  def enable_lazy_transactions!(*arg, **arg1, &arg2); end

  def exec_delete(sql, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def exec_insert(sql, name=T.unsafe(nil), binds=T.unsafe(nil), pk=T.unsafe(nil), sequence_name=T.unsafe(nil)); end

  def exec_insert_all(sql, name); end

  def exec_query(sql, name=T.unsafe(nil), binds=T.unsafe(nil), prepare: T.unsafe(nil)); end

  def exec_rollback_db_transaction(); end

  def exec_update(sql, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def execute(sql, name=T.unsafe(nil)); end

  def explain(arel, binds=T.unsafe(nil)); end

  def high_precision_current_timestamp(); end

  def initialize(); end

  def insert(arel, name=T.unsafe(nil), pk=T.unsafe(nil), id_value=T.unsafe(nil), sequence_name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def insert_fixture(fixture, table_name); end

  def insert_fixtures_set(fixture_set, tables_to_delete=T.unsafe(nil)); end

  def mark_transaction_written_if_write(sql); end

  def materialize_transactions(*arg, **arg1, &arg2); end

  def open_transactions(*arg, **arg1, &arg2); end

  def query(sql, name=T.unsafe(nil)); end

  def query_value(sql, name=T.unsafe(nil)); end

  def query_values(sql, name=T.unsafe(nil)); end

  def reset_sequence!(table, column, sequence=T.unsafe(nil)); end

  def reset_transaction(); end

  def rollback_db_transaction(); end

  def rollback_to_savepoint(name=T.unsafe(nil)); end

  def rollback_transaction(*arg, **arg1, &arg2); end

  def sanitize_limit(limit); end

  def select_all(arel, name=T.unsafe(nil), binds=T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil)); end

  def select_one(arel, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def select_rows(arel, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def select_value(arel, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def select_values(arel, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def to_sql(arel_or_sql_string, binds=T.unsafe(nil)); end

  def transaction(requires_new: T.unsafe(nil), isolation: T.unsafe(nil), joinable: T.unsafe(nil), &block); end

  def transaction_isolation_levels(); end

  def transaction_manager(); end

  def transaction_open?(); end

  def truncate(table_name, name=T.unsafe(nil)); end

  def truncate_tables(*table_names); end

  def update(arel, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def with_yaml_fallback(value); end

  def within_new_transaction(*arg, **arg1, &arg2); end

  def write_query?(sql); end
end

module ActiveRecord::ConnectionAdapters::DatabaseStatements
end

module ActiveRecord::ConnectionAdapters::Deduplicable
  def -@(); end

  def deduplicate(); end
end

module ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  def new(*arg, **arg1); end

  def registry(); end
end

module ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
end

module ActiveRecord::ConnectionAdapters::Deduplicable
  extend ::ActiveSupport::Concern
end

class ActiveRecord::ConnectionAdapters::ForeignKeyDefinition
  def column(); end

  def custom_primary_key?(); end

  def deferrable(); end

  def defined_for?(to_table: T.unsafe(nil), validate: T.unsafe(nil), **options); end

  def export_name_on_schema_dump?(); end

  def from_table(); end

  def from_table=(_); end

  def name(); end

  def on_delete(); end

  def on_update(); end

  def options(); end

  def options=(_); end

  def primary_key(); end

  def to_table(); end

  def to_table=(_); end

  def validate?(); end

  def validated?(); end
end

class ActiveRecord::ConnectionAdapters::ForeignKeyDefinition
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::ConnectionAdapters::IndexDefinition
  def column_options(); end

  def columns(); end

  def comment(); end

  def initialize(table, name, unique=T.unsafe(nil), columns=T.unsafe(nil), lengths: T.unsafe(nil), orders: T.unsafe(nil), opclasses: T.unsafe(nil), where: T.unsafe(nil), type: T.unsafe(nil), using: T.unsafe(nil), comment: T.unsafe(nil)); end

  def lengths(); end

  def name(); end

  def opclasses(); end

  def orders(); end

  def table(); end

  def type(); end

  def unique(); end

  def using(); end

  def where(); end
end

class ActiveRecord::ConnectionAdapters::IndexDefinition
end

class ActiveRecord::ConnectionAdapters::LegacyPoolManager
  def get_pool_config(_, shard); end

  def pool_configs(_=T.unsafe(nil)); end

  def remove_pool_config(_, shard); end

  def set_pool_config(role, shard, pool_config); end

  def shard_names(); end
end

class ActiveRecord::ConnectionAdapters::LegacyPoolManager
end

class ActiveRecord::ConnectionAdapters::NullColumn
  def initialize(name, **arg); end
end

class ActiveRecord::ConnectionAdapters::NullColumn
end

class ActiveRecord::ConnectionAdapters::NullPool
  include ::ActiveRecord::ConnectionAdapters::AbstractPool
  def async_executor(); end

  def checkin(_); end

  def connection_class(); end

  def remove(_); end

  def schema_cache(); end

  def schema_cache=(schema_cache); end
end

class ActiveRecord::ConnectionAdapters::NullPool
end

class ActiveRecord::ConnectionAdapters::NullTransaction
  def add_record(record, _=T.unsafe(nil)); end

  def closed?(); end

  def joinable?(); end

  def open?(); end

  def state(); end
end

class ActiveRecord::ConnectionAdapters::NullTransaction
end

class ActiveRecord::ConnectionAdapters::PoolConfig
  include ::Mutex_m
  def connection_class(); end

  def connection_specification_name(); end

  def db_config(); end

  def discard_pool!(); end

  def disconnect!(); end

  def initialize(connection_class, db_config, role, shard); end

  def lock(); end

  def locked?(); end

  def pool(); end

  def role(); end

  def schema_cache(); end

  def schema_cache=(schema_cache); end

  def shard(); end

  def synchronize(&block); end

  def try_lock(); end

  def unlock(); end
end

class ActiveRecord::ConnectionAdapters::PoolConfig
  def self.discard_pools!(); end
end

class ActiveRecord::ConnectionAdapters::PoolManager
  def get_pool_config(role, shard); end

  def pool_configs(role=T.unsafe(nil)); end

  def remove_pool_config(role, shard); end

  def remove_role(role); end

  def role_names(); end

  def set_pool_config(role, shard, pool_config); end

  def shard_names(); end
end

class ActiveRecord::ConnectionAdapters::PoolManager
end

module ActiveRecord::ConnectionAdapters::PostgreSQL
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::AlterTable
  def constraint_validations(); end

  def validate_constraint(name); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::AlterTable
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::Column
  def array(); end

  def array?(); end

  def enum?(); end

  def fmod(*arg, **arg1, &arg2); end

  def initialize(*arg, serial: T.unsafe(nil), generated: T.unsafe(nil), **arg1); end

  def oid(*arg, **arg1, &arg2); end

  def serial?(); end

  def sql_type(); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::Column
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
  def primary_key(name, type=T.unsafe(nil), **options); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
  extend ::ActiveSupport::Concern
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
  def begin_db_transaction(); end

  def begin_isolated_db_transaction(isolation); end

  def commit_db_transaction(); end

  def exec_delete(sql, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def exec_insert(sql, name=T.unsafe(nil), binds=T.unsafe(nil), pk=T.unsafe(nil), sequence_name=T.unsafe(nil)); end

  def exec_query(sql, name=T.unsafe(nil), binds=T.unsafe(nil), prepare: T.unsafe(nil), async: T.unsafe(nil)); end

  def exec_rollback_db_transaction(); end

  def exec_update(sql, name=T.unsafe(nil), binds=T.unsafe(nil)); end

  def execute(sql, name=T.unsafe(nil)); end

  def explain(arel, binds=T.unsafe(nil)); end

  def high_precision_current_timestamp(); end

  def query(sql, name=T.unsafe(nil)); end

  def write_query?(sql); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::ExplainPrettyPrinter
  def pp(result); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::ExplainPrettyPrinter
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::Name
  def ==(o); end

  def eql?(o); end

  def identifier(); end

  def initialize(schema, identifier); end

  def parts(); end

  def quoted(); end

  def schema(); end
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::Name
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::OID
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array
  include ::ActiveModel::Type::Helpers::Mutable
  def delimiter(); end

  def force_equality?(value); end

  def initialize(subtype, delimiter=T.unsafe(nil)); end

  def limit(*arg, **arg1, &arg2); end

  def map(value, &block); end

  def precision(*arg, **arg1, &arg2); end

  def scale(*arg, **arg1, &arg2); end

  def subtype(); end

  def type(*arg, **arg1, &arg2); end

  def user_input_in_time_zone(*arg, **arg1, &arg2); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array::Data
  def encoder(); end

  def encoder=(_); end

  def values=(_); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array::Data
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data
  def binary?(); end

  def hex?(); end

  def initialize(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::BitVarying
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::BitVarying
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bytea
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bytea
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Cidr
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Cidr
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Date
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Date
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime
  def real_type_unless_aliased(real_type); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Decimal
  def infinity(options=T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Decimal
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Enum
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Enum
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore
  include ::ActiveModel::Type::Helpers::Mutable
  def accessor(); end
  ERROR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Inet
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Inet
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Interval
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Interval
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Jsonb
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Jsonb
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::LegacyPoint
  include ::ActiveModel::Type::Helpers::Mutable
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::LegacyPoint
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Macaddr
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Macaddr
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Money
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Money
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Oid
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Oid
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Point
  include ::ActiveModel::Type::Helpers::Mutable
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Point
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range
  def force_equality?(value); end

  def initialize(subtype, type=T.unsafe(nil)); end

  def subtype(); end

  def user_input_in_time_zone(*arg, **arg1, &arg2); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::SpecializedString
  def initialize(type, **options); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::SpecializedString
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Timestamp
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Timestamp
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TimestampWithTimeZone
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TimestampWithTimeZone
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TypeMapInitializer
  def initialize(store); end

  def query_conditions_for_array_types(); end

  def query_conditions_for_known_type_names(); end

  def query_conditions_for_known_type_types(); end

  def run(records); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TypeMapInitializer
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid
  ACCEPTABLE_UUID = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Vector
  def delim(); end

  def initialize(delim, subtype); end

  def subtype(); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Vector
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml::Data
  def initialize(value); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml::Data
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::OID
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting
  def column_name_matcher(); end

  def column_name_with_order_matcher(); end

  def escape_bytea(value); end

  def lookup_cast_type_from_column(column); end

  def quote(value); end

  def quote_column_name(name); end

  def quote_default_expression(value, column); end

  def quote_schema_name(name); end

  def quote_string(s); end

  def quote_table_name(name); end

  def quote_table_name_for_assignment(table, attr); end

  def quoted_binary(value); end

  def quoted_date(value); end

  def type_cast(value); end

  def unescape_bytea(value); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity
  def all_foreign_keys_valid?(); end

  def disable_referential_integrity(); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaDumper
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaDumper
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements
  def add_column(table_name, column_name, type, **options); end

  def add_index(table_name, column_name, **options); end

  def change_column(table_name, column_name, type, **options); end

  def change_column_comment(table_name, column_name, comment_or_changes); end

  def change_column_default(table_name, column_name, default_or_changes); end

  def change_column_null(table_name, column_name, null, default=T.unsafe(nil)); end

  def change_table_comment(table_name, comment_or_changes); end

  def check_constraints(table_name); end

  def client_min_messages(); end

  def client_min_messages=(level); end

  def collation(); end

  def columns_for_distinct(columns, orders); end

  def create_database(name, options=T.unsafe(nil)); end

  def create_schema(schema_name); end

  def create_schema_dumper(options); end

  def ctype(); end

  def current_database(); end

  def current_schema(); end

  def default_sequence_name(table_name, pk=T.unsafe(nil)); end

  def drop_database(name); end

  def drop_schema(schema_name, **options); end

  def drop_table(table_name, **options); end

  def encoding(); end

  def foreign_keys(table_name); end

  def foreign_table_exists?(table_name); end

  def foreign_tables(); end

  def index_name_exists?(table_name, index_name); end

  def indexes(table_name); end

  def pk_and_sequence_for(table); end

  def primary_keys(table_name); end

  def recreate_database(name, options=T.unsafe(nil)); end

  def remove_index(table_name, column_name=T.unsafe(nil), **options); end

  def rename_column(table_name, column_name, new_column_name); end

  def rename_index(table_name, old_name, new_name); end

  def rename_table(table_name, new_name); end

  def reset_pk_sequence!(table, pk=T.unsafe(nil), sequence=T.unsafe(nil)); end

  def schema_exists?(name); end

  def schema_names(); end

  def schema_search_path(); end

  def schema_search_path=(schema_csv); end

  def serial_sequence(table, column); end

  def set_pk_sequence!(table, value); end

  def table_comment(table_name); end

  def table_options(table_name); end

  def type_to_sql(type, limit: T.unsafe(nil), precision: T.unsafe(nil), scale: T.unsafe(nil), array: T.unsafe(nil), enum_type: T.unsafe(nil), **arg); end

  def update_table_definition(table_name, base); end

  def validate_check_constraint(table_name, **options); end

  def validate_constraint(table_name, constraint_name); end

  def validate_foreign_key(from_table, to_table=T.unsafe(nil), **options); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::Table
  include ::ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
  def bigserial(*names, **options); end

  def bit(*names, **options); end

  def bit_varying(*names, **options); end

  def box(*names, **options); end

  def cidr(*names, **options); end

  def circle(*names, **options); end

  def citext(*names, **options); end

  def daterange(*names, **options); end

  def enum(*names, **options); end

  def hstore(*names, **options); end

  def inet(*names, **options); end

  def int4range(*names, **options); end

  def int8range(*names, **options); end

  def interval(*names, **options); end

  def jsonb(*names, **options); end

  def line(*names, **options); end

  def lseg(*names, **options); end

  def ltree(*names, **options); end

  def macaddr(*names, **options); end

  def money(*names, **options); end

  def numrange(*names, **options); end

  def oid(*names, **options); end

  def path(*names, **options); end

  def point(*names, **options); end

  def polygon(*names, **options); end

  def serial(*names, **options); end

  def timestamptz(*names, **options); end

  def tsrange(*names, **options); end

  def tstzrange(*names, **options); end

  def tsvector(*names, **options); end

  def uuid(*names, **options); end

  def xml(*names, **options); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::Table
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition
  include ::ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
  def bigserial(*names, **options); end

  def bit(*names, **options); end

  def bit_varying(*names, **options); end

  def box(*names, **options); end

  def cidr(*names, **options); end

  def circle(*names, **options); end

  def citext(*names, **options); end

  def daterange(*names, **options); end

  def enum(*names, **options); end

  def hstore(*names, **options); end

  def inet(*names, **options); end

  def initialize(*arg, **arg1); end

  def int4range(*names, **options); end

  def int8range(*names, **options); end

  def interval(*names, **options); end

  def jsonb(*names, **options); end

  def line(*names, **options); end

  def lseg(*names, **options); end

  def ltree(*names, **options); end

  def macaddr(*names, **options); end

  def money(*names, **options); end

  def numrange(*names, **options); end

  def oid(*names, **options); end

  def path(*names, **options); end

  def point(*names, **options); end

  def polygon(*names, **options); end

  def serial(*names, **options); end

  def timestamptz(*names, **options); end

  def tsrange(*names, **options); end

  def tstzrange(*names, **options); end

  def tsvector(*names, **options); end

  def unlogged(); end

  def uuid(*names, **options); end

  def xml(*names, **options); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
  include ::ActiveRecord::ConnectionAdapters::Deduplicable
  def ==(other); end

  def eql?(other); end

  def fmod(); end

  def hash(); end

  def initialize(type_metadata, oid: T.unsafe(nil), fmod: T.unsafe(nil)); end

  def oid(); end

  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata
  extend ::ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::Utils
  def extract_schema_qualified_name(string); end
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::Utils
  extend ::ActiveRecord::ConnectionAdapters::PostgreSQL::Utils
end

module ActiveRecord::ConnectionAdapters::PostgreSQL
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
  include ::ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting
  include ::ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity
  include ::ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements
  include ::ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
  def create_enum(name, values); end

  def create_unlogged_tables(); end

  def create_unlogged_tables=(create_unlogged_tables); end

  def create_unlogged_tables?(); end

  def datetime_type(); end

  def datetime_type=(datetime_type); end

  def datetime_type?(); end

  def enum_types(); end

  def extension_available?(name); end

  def extension_enabled?(name); end

  def initialize(connection, logger, connection_parameters, config); end

  def postgresql_version(); end

  def reload_type_map(); end

  def session_auth=(user); end

  def set_standard_conforming_strings(); end

  def supports_insert_on_conflict?(); end

  def supports_pgcrypto_uuid?(); end

  def use_insert_returning?(); end
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  DEADLOCK_DETECTED = ::T.let(nil, ::T.untyped)
  DUPLICATE_DATABASE = ::T.let(nil, ::T.untyped)
  FEATURE_NOT_SUPPORTED = ::T.let(nil, ::T.untyped)
  FOREIGN_KEY_VIOLATION = ::T.let(nil, ::T.untyped)
  LOCK_NOT_AVAILABLE = ::T.let(nil, ::T.untyped)
  NATIVE_DATABASE_TYPES = ::T.let(nil, ::T.untyped)
  NOT_NULL_VIOLATION = ::T.let(nil, ::T.untyped)
  NUMERIC_VALUE_OUT_OF_RANGE = ::T.let(nil, ::T.untyped)
  QUERY_CANCELED = ::T.let(nil, ::T.untyped)
  SERIALIZATION_FAILURE = ::T.let(nil, ::T.untyped)
  UNIQUE_VIOLATION = ::T.let(nil, ::T.untyped)
  VALUE_LIMIT_VIOLATION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::MoneyDecoder
  def decode(value, tuple=T.unsafe(nil), field=T.unsafe(nil)); end
  TYPE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::MoneyDecoder
end

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID = ActiveRecord::ConnectionAdapters::PostgreSQL::OID

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool
  def initialize(connection, max); end

  def next_key(); end
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
  def self.create_unlogged_tables(); end

  def self.create_unlogged_tables=(value); end

  def self.create_unlogged_tables?(); end

  def self.datetime_type(); end

  def self.datetime_type=(value); end

  def self.datetime_type?(); end

  def self.native_database_types(); end

  def self.new_client(conn_params); end
end

ActiveRecord::ConnectionAdapters::PostgreSQLColumn = ActiveRecord::ConnectionAdapters::PostgreSQL::Column

ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata = ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata

class ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition
  def name(); end

  def name=(_); end
end

class ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module ActiveRecord::ConnectionAdapters::QueryCache
  def cache(); end

  def clear_query_cache(); end

  def disable_query_cache!(); end

  def enable_query_cache!(); end

  def initialize(*arg); end

  def query_cache(); end

  def query_cache_enabled(); end

  def select_all(arel, name=T.unsafe(nil), binds=T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil)); end

  def uncached(); end
end

module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  def disable_query_cache!(); end

  def enable_query_cache!(); end

  def initialize(*arg); end

  def query_cache_enabled(); end
end

module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
end

module ActiveRecord::ConnectionAdapters::QueryCache
  def self.dirties_query_cache(base, *method_names); end

  def self.included(base); end
end

module ActiveRecord::ConnectionAdapters::Quoting
  def column_name_matcher(); end

  def column_name_with_order_matcher(); end

  def lookup_cast_type_from_column(column); end

  def quote(value); end

  def quote_bound_value(value); end

  def quote_column_name(column_name); end

  def quote_default_expression(value, column); end

  def quote_string(s); end

  def quote_table_name(table_name); end

  def quote_table_name_for_assignment(table, attr); end

  def quoted_binary(value); end

  def quoted_date(value); end

  def quoted_false(); end

  def quoted_time(value); end

  def quoted_true(); end

  def sanitize_as_sql_comment(value); end

  def type_cast(value); end

  def unquoted_false(); end

  def unquoted_true(); end
end

module ActiveRecord::ConnectionAdapters::Quoting
end

class ActiveRecord::ConnectionAdapters::RealTransaction
  def commit(); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::RealTransaction
end

class ActiveRecord::ConnectionAdapters::ReferenceDefinition
  def add_to(table); end

  def initialize(name, polymorphic: T.unsafe(nil), index: T.unsafe(nil), foreign_key: T.unsafe(nil), type: T.unsafe(nil), **options); end
end

class ActiveRecord::ConnectionAdapters::ReferenceDefinition
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction
  def commit(); end

  def initialize(connection, savepoint_name, parent_transaction, **options); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction
end

module ActiveRecord::ConnectionAdapters::Savepoints
  def create_savepoint(name=T.unsafe(nil)); end

  def current_savepoint_name(); end

  def exec_rollback_to_savepoint(name=T.unsafe(nil)); end

  def release_savepoint(name=T.unsafe(nil)); end
end

module ActiveRecord::ConnectionAdapters::Savepoints
end

class ActiveRecord::ConnectionAdapters::SchemaCache
  def add(table_name); end

  def clear!(); end

  def clear_data_source_cache!(name); end

  def columns(table_name); end

  def columns_hash(table_name); end

  def columns_hash?(table_name); end

  def connection(); end

  def connection=(connection); end

  def data_source_exists?(name); end

  def data_sources(name); end

  def database_version(); end

  def dump_to(filename); end

  def encode_with(coder); end

  def indexes(table_name); end

  def init_with(coder); end

  def initialize(conn); end

  def marshal_dump(); end

  def marshal_load(array); end

  def primary_keys(table_name); end

  def size(); end

  def version(); end
end

class ActiveRecord::ConnectionAdapters::SchemaCache
  def self.load_from(filename); end
end

class ActiveRecord::ConnectionAdapters::SchemaCreation
  def accept(o); end

  def initialize(conn); end
end

class ActiveRecord::ConnectionAdapters::SchemaCreation
end

class ActiveRecord::ConnectionAdapters::SchemaDumper
  DEFAULT_DATETIME_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::SchemaDumper
  def self.create(connection, options); end
end

module ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable
  def add_belongs_to(table_name, ref_name, **options); end

  def add_check_constraint(table_name, expression, **options); end

  def add_column(table_name, column_name, type, **options); end

  def add_columns(table_name, *column_names, type:, **options); end

  def add_foreign_key(from_table, to_table, **options); end

  def add_index(table_name, column_name, **options); end

  def add_index_options(table_name, column_name, name: T.unsafe(nil), if_not_exists: T.unsafe(nil), internal: T.unsafe(nil), **options); end

  def add_reference(table_name, ref_name, **options); end

  def add_timestamps(table_name, **options); end

  def assume_migrated_upto_version(version); end

  def change_column(table_name, column_name, type, **options); end

  def change_column_comment(table_name, column_name, comment_or_changes); end

  def change_column_default(table_name, column_name, default_or_changes); end

  def change_column_null(table_name, column_name, null, default=T.unsafe(nil)); end

  def change_table(table_name, **options); end

  def change_table_comment(table_name, comment_or_changes); end

  def check_constraint_options(table_name, expression, options); end

  def check_constraints(table_name); end

  def column_exists?(table_name, column_name, type=T.unsafe(nil), **options); end

  def columns(table_name); end

  def columns_for_distinct(columns, orders); end

  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end

  def create_schema_dumper(options); end

  def create_table(table_name, id: T.unsafe(nil), primary_key: T.unsafe(nil), force: T.unsafe(nil), **options); end

  def data_source_exists?(name); end

  def data_sources(); end

  def distinct_relation_for_primary_key(relation); end

  def drop_join_table(table_1, table_2, **options); end

  def drop_table(table_name, **options); end

  def dump_schema_information(); end

  def foreign_key_column_for(table_name); end

  def foreign_key_exists?(from_table, to_table=T.unsafe(nil), **options); end

  def foreign_key_options(from_table, to_table, options); end

  def foreign_keys(table_name); end

  def index_algorithm(algorithm); end

  def index_exists?(table_name, column_name, **options); end

  def index_name(table_name, options); end

  def index_name_exists?(table_name, index_name); end

  def indexes(table_name); end

  def internal_string_options_for_primary_key(); end

  def native_database_types(); end

  def options_include_default?(options); end

  def primary_key(table_name); end

  def quoted_columns_for_index(column_names, options); end

  def remove_belongs_to(table_name, ref_name, foreign_key: T.unsafe(nil), polymorphic: T.unsafe(nil), **options); end

  def remove_check_constraint(table_name, expression=T.unsafe(nil), **options); end

  def remove_column(table_name, column_name, type=T.unsafe(nil), **options); end

  def remove_columns(table_name, *column_names, type: T.unsafe(nil), **options); end

  def remove_foreign_key(from_table, to_table=T.unsafe(nil), **options); end

  def remove_index(table_name, column_name=T.unsafe(nil), **options); end

  def remove_reference(table_name, ref_name, foreign_key: T.unsafe(nil), polymorphic: T.unsafe(nil), **options); end

  def remove_timestamps(table_name, **options); end

  def rename_column(table_name, column_name, new_column_name); end

  def rename_index(table_name, old_name, new_name); end

  def rename_table(table_name, new_name); end

  def table_alias_for(table_name); end

  def table_comment(table_name); end

  def table_exists?(table_name); end

  def table_options(table_name); end

  def tables(); end

  def type_to_sql(type, limit: T.unsafe(nil), precision: T.unsafe(nil), scale: T.unsafe(nil), **arg); end

  def update_table_definition(table_name, base); end

  def view_exists?(view_name); end

  def views(); end
end

module ActiveRecord::ConnectionAdapters::SchemaStatements
end

class ActiveRecord::ConnectionAdapters::SqlTypeMetadata
  include ::ActiveRecord::ConnectionAdapters::Deduplicable
  def ==(other); end

  def eql?(other); end

  def initialize(sql_type: T.unsafe(nil), type: T.unsafe(nil), limit: T.unsafe(nil), precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  def limit(); end

  def precision(); end

  def scale(); end

  def sql_type(); end

  def type(); end
end

class ActiveRecord::ConnectionAdapters::SqlTypeMetadata
  extend ::ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
end

class ActiveRecord::ConnectionAdapters::StatementPool
  include ::Enumerable
  def [](key); end

  def []=(sql, stmt); end

  def clear(); end

  def delete(key); end

  def each(&block); end

  def initialize(statement_limit=T.unsafe(nil)); end

  def key?(key); end

  def length(); end
  DEFAULT_STATEMENT_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::StatementPool
end

class ActiveRecord::ConnectionAdapters::Table
  def bigint(*names, **options); end

  def binary(*names, **options); end

  def blob(*names, **options); end

  def boolean(*names, **options); end

  def change_null(column_name, null, default=T.unsafe(nil)); end

  def check_constraint(*args, **options); end

  def date(*names, **options); end

  def datetime(*names, **options); end

  def decimal(*names, **options); end

  def float(*names, **options); end

  def initialize(table_name, base); end

  def integer(*names, **options); end

  def json(*names, **options); end

  def name(); end

  def numeric(*names, **options); end

  def remove_check_constraint(*args, **options); end

  def string(*names, **options); end

  def text(*names, **options); end

  def time(*names, **options); end

  def timestamp(*names, **options); end

  def virtual(*names, **options); end
end

class ActiveRecord::ConnectionAdapters::Table
  extend ::ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
end

class ActiveRecord::ConnectionAdapters::TableDefinition
  def as(); end

  def bigint(*names, **options); end

  def binary(*names, **options); end

  def blob(*names, **options); end

  def boolean(*names, **options); end

  def check_constraint(expression, **options); end

  def check_constraints(); end

  def comment(); end

  def date(*names, **options); end

  def datetime(*names, **options); end

  def decimal(*names, **options); end

  def float(*names, **options); end

  def foreign_key(to_table, **options); end

  def foreign_keys(); end

  def if_not_exists(); end

  def indexes(); end

  def initialize(conn, name, temporary: T.unsafe(nil), if_not_exists: T.unsafe(nil), options: T.unsafe(nil), as: T.unsafe(nil), comment: T.unsafe(nil), **arg); end

  def integer(*names, **options); end

  def json(*names, **options); end

  def name(); end

  def new_check_constraint_definition(expression, options); end

  def new_column_definition(name, type, **options); end

  def new_foreign_key_definition(to_table, options); end

  def numeric(*names, **options); end

  def options(); end

  def primary_keys(name=T.unsafe(nil)); end

  def string(*names, **options); end

  def temporary(); end

  def text(*names, **options); end

  def time(*names, **options); end

  def timestamp(*names, **options); end

  def virtual(*names, **options); end
end

class ActiveRecord::ConnectionAdapters::TableDefinition
  extend ::ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
end

class ActiveRecord::ConnectionAdapters::Transaction
  def add_record(record, ensure_finalize=T.unsafe(nil)); end

  def before_commit_records(); end

  def closed?(); end

  def commit_records(); end

  def connection(); end

  def full_rollback?(); end

  def initialize(connection, isolation: T.unsafe(nil), joinable: T.unsafe(nil), run_commit_callbacks: T.unsafe(nil)); end

  def isolation_level(); end

  def joinable?(); end

  def materialize!(); end

  def materialized?(); end

  def open?(); end

  def records(); end

  def rollback_records(); end

  def savepoint_name(); end

  def state(); end

  def written(); end

  def written=(written); end
end

class ActiveRecord::ConnectionAdapters::Transaction
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  def begin_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil), _lazy: T.unsafe(nil)); end

  def commit_transaction(); end

  def current_transaction(); end

  def disable_lazy_transactions!(); end

  def enable_lazy_transactions!(); end

  def initialize(connection); end

  def lazy_transactions_enabled?(); end

  def materialize_transactions(); end

  def open_transactions(); end

  def rollback_transaction(transaction=T.unsafe(nil)); end

  def within_new_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil)); end
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::TransactionManager
end

class ActiveRecord::ConnectionAdapters::TransactionState
  def add_child(state); end

  def commit!(); end

  def committed?(); end

  def completed?(); end

  def finalized?(); end

  def full_commit!(); end

  def full_rollback!(); end

  def fully_committed?(); end

  def fully_completed?(); end

  def fully_rolledback?(); end

  def initialize(state=T.unsafe(nil)); end

  def invalidate!(); end

  def invalidated?(); end

  def nullify!(); end

  def rollback!(); end

  def rolledback?(); end
end

class ActiveRecord::ConnectionAdapters::TransactionState
end

module ActiveRecord::ConnectionAdapters
  extend ::ActiveSupport::Autoload
end

module ActiveRecord::ConnectionHandling
  def clear_active_connections!(*arg, **arg1, &arg2); end

  def clear_all_connections!(*arg, **arg1, &arg2); end

  def clear_cache!(); end

  def clear_query_caches_for_current_thread(); end

  def clear_reloadable_connections!(*arg, **arg1, &arg2); end

  def connected?(); end

  def connected_to_many(*classes, role:, shard: T.unsafe(nil), prevent_writes: T.unsafe(nil)); end

  def connecting_to(role: T.unsafe(nil), shard: T.unsafe(nil), prevent_writes: T.unsafe(nil)); end

  def connection(); end

  def connection_db_config(); end

  def connection_pool(); end

  def connection_specification_name(); end

  def connection_specification_name=(connection_specification_name); end

  def establish_connection(config_or_env=T.unsafe(nil)); end

  def flush_idle_connections!(*arg, **arg1, &arg2); end

  def lookup_connection_handler(handler_key); end

  def postgresql_connection(config); end

  def primary_class?(); end

  def prohibit_shard_swapping(enabled=T.unsafe(nil)); end

  def remove_connection(name=T.unsafe(nil)); end

  def retrieve_connection(); end

  def shard_swapping_prohibited?(); end

  def while_preventing_writes(enabled=T.unsafe(nil), &block); end
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  RAILS_ENV = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Core
  def ==(comparison_object); end

  def connection_handler(); end

  def encode_with(coder); end

  def eql?(comparison_object); end

  def freeze(); end

  def frozen?(); end

  def hash(); end

  def init_with(coder, &block); end

  def init_with_attributes(attributes, new_record=T.unsafe(nil)); end

  def initialize(attributes=T.unsafe(nil)); end

  def inspect(); end

  def pretty_print(pp); end

  def readonly!(); end

  def readonly?(); end

  def slice(*methods); end

  def strict_loading!(value=T.unsafe(nil), mode: T.unsafe(nil)); end

  def strict_loading?(); end

  def strict_loading_mode(); end

  def strict_loading_n_plus_one_only?(); end

  def values_at(*methods); end
end

module ActiveRecord::Core
  extend ::ActiveSupport::Concern
end

module ActiveRecord::CounterCache
  extend ::ActiveSupport::Concern
end

class ActiveRecord::DatabaseAlreadyExists
end

class ActiveRecord::DatabaseAlreadyExists
end

class ActiveRecord::DatabaseConfigurations
  def any?(*arg, **arg1, &arg2); end

  def configs_for(env_name: T.unsafe(nil), name: T.unsafe(nil), include_replicas: T.unsafe(nil), include_hidden: T.unsafe(nil)); end

  def configurations(); end

  def empty?(); end

  def find_db_config(env); end

  def initialize(configurations=T.unsafe(nil)); end

  def primary?(name); end

  def resolve(config); end
end

class ActiveRecord::DatabaseConfigurations::ConnectionUrlResolver
  def initialize(url); end

  def to_hash(); end
end

class ActiveRecord::DatabaseConfigurations::ConnectionUrlResolver
end

class ActiveRecord::DatabaseConfigurations::DatabaseConfig
  def _database=(database); end

  def adapter(); end

  def adapter_method(); end

  def checkout_timeout(); end

  def database(); end

  def env_name(); end

  def for_current_env?(); end

  def host(); end

  def idle_timeout(); end

  def initialize(env_name, name); end

  def max_queue(); end

  def max_threads(); end

  def migrations_paths(); end

  def min_threads(); end

  def name(); end

  def owner_name(); end

  def owner_name=(owner_name); end

  def pool(); end

  def reaping_frequency(); end

  def replica?(); end

  def schema_cache_path(); end
end

class ActiveRecord::DatabaseConfigurations::DatabaseConfig
end

class ActiveRecord::DatabaseConfigurations::HashConfig
  def configuration_hash(); end

  def database_tasks?(); end

  def default_schema_cache_path(); end

  def initialize(env_name, name, configuration_hash); end

  def lazy_schema_cache_path(); end

  def primary?(); end

  def schema_dump(format=T.unsafe(nil)); end

  def socket(); end
end

class ActiveRecord::DatabaseConfigurations::HashConfig
end

class ActiveRecord::DatabaseConfigurations::InvalidConfigurationError
end

class ActiveRecord::DatabaseConfigurations::InvalidConfigurationError
end

class ActiveRecord::DatabaseConfigurations::UrlConfig
  def initialize(env_name, name, url, configuration_hash=T.unsafe(nil)); end

  def url(); end
end

class ActiveRecord::DatabaseConfigurations::UrlConfig
end

class ActiveRecord::DatabaseConfigurations
end

class ActiveRecord::DatabaseConnectionError
  def initialize(message=T.unsafe(nil)); end
end

class ActiveRecord::DatabaseConnectionError
  def self.hostname_error(hostname); end

  def self.username_error(username); end
end

module ActiveRecord::DelegatedType
  def delegated_type(role, types:, **options); end
end

module ActiveRecord::DelegatedType
end

module ActiveRecord::Delegation
  def &(*arg, **arg1, &arg2); end

  def +(*arg, **arg1, &arg2); end

  def -(*arg, **arg1, &arg2); end

  def [](*arg, **arg1, &arg2); end

  def as_json(*arg, **arg1, &arg2); end

  def compact(*arg, **arg1, &arg2); end

  def connection(*arg, **arg1, &arg2); end

  def each(*arg, **arg1, &arg2); end

  def encode_with(*arg, **arg1, &arg2); end

  def in_groups(*arg, **arg1, &arg2); end

  def in_groups_of(*arg, **arg1, &arg2); end

  def index(*arg, **arg1, &arg2); end

  def join(*arg, **arg1, &arg2); end

  def length(*arg, **arg1, &arg2); end

  def primary_key(*arg, **arg1, &arg2); end

  def reverse(*arg, **arg1, &arg2); end

  def rindex(*arg, **arg1, &arg2); end

  def rotate(*arg, **arg1, &arg2); end

  def sample(*arg, **arg1, &arg2); end

  def shuffle(*arg, **arg1, &arg2); end

  def slice(*arg, **arg1, &arg2); end

  def split(*arg, **arg1, &arg2); end

  def to_formatted_s(*arg, **arg1, &arg2); end

  def to_fs(*arg, **arg1, &arg2); end

  def to_sentence(*arg, **arg1, &arg2); end

  def to_xml(*arg, **arg1, &arg2); end

  def |(*arg, **arg1, &arg2); end
end

module ActiveRecord::Delegation::ClassMethods
  def create(klass, *args, **kwargs); end
end

module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  def name(); end
end

module ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Delegation::DelegateCache
  def generate_relation_method(method); end

  def include_relation_methods(delegate); end

  def inherited(child_class); end

  def initialize_relation_delegate_cache(); end

  def relation_delegate_class(klass); end
end

module ActiveRecord::Delegation
  extend ::ActiveSupport::Concern
end

class ActiveRecord::DeleteRestrictionError
  def initialize(name=T.unsafe(nil)); end
end

class ActiveRecord::DestroyAssociationAsyncError
end

class ActiveRecord::DestroyAssociationAsyncError
end

class ActiveRecord::DestroyAssociationAsyncJob
  def perform(owner_model_name: T.unsafe(nil), owner_id: T.unsafe(nil), association_class: T.unsafe(nil), association_ids: T.unsafe(nil), association_primary_key_column: T.unsafe(nil), ensuring_owner_was_method: T.unsafe(nil)); end
end

class ActiveRecord::DestroyAssociationAsyncJob
end

class ActiveRecord::DisableJoinsAssociationRelation
  def initialize(klass, key, ids); end

  def key(); end

  def load(); end
end

class ActiveRecord::DisableJoinsAssociationRelation
end

class ActiveRecord::DuplicateMigrationNameError
  def initialize(name=T.unsafe(nil)); end
end

class ActiveRecord::DuplicateMigrationVersionError
  def initialize(version=T.unsafe(nil)); end
end

class ActiveRecord::DynamicMatchers::FindBy
end

class ActiveRecord::DynamicMatchers::FindBy
end

class ActiveRecord::DynamicMatchers::FindByBang
end

class ActiveRecord::DynamicMatchers::FindByBang
end

class ActiveRecord::DynamicMatchers::Method
  def attribute_names(); end

  def define(); end

  def initialize(model, method_name); end

  def model(); end

  def name(); end

  def valid?(); end
end

class ActiveRecord::DynamicMatchers::Method
  def self.match(model, name); end

  def self.matchers(); end

  def self.pattern(); end

  def self.prefix(); end

  def self.suffix(); end
end

class ActiveRecord::EagerLoadPolymorphicError
  def initialize(reflection=T.unsafe(nil)); end
end

module ActiveRecord::Encryption
  include ::ActiveRecord::Encryption::Configurable
  include ::ActiveRecord::Encryption::Contexts
  def config(); end

  def custom_contexts(); end

  def custom_contexts=(obj); end

  def default_context(); end

  def encrypted_attribute_declaration_listeners(); end

  def encrypted_attribute_declaration_listeners=(val); end
end

class ActiveRecord::Encryption::Cipher
  def decrypt(encrypted_message, key:); end

  def encrypt(clean_text, key:, deterministic: T.unsafe(nil)); end

  def iv_length(); end

  def key_length(); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Cipher::Aes256Gcm
  def decrypt(encrypted_message); end

  def encrypt(clear_text); end

  def initialize(secret, deterministic: T.unsafe(nil)); end
  CIPHER_TYPE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Cipher::Aes256Gcm
  def self.iv_length(); end

  def self.key_length(); end
end

class ActiveRecord::Encryption::Cipher
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::Encryption::Config
  def add_to_filter_parameters(); end

  def add_to_filter_parameters=(add_to_filter_parameters); end

  def deterministic_key(); end

  def deterministic_key=(deterministic_key); end

  def encrypt_fixtures(); end

  def encrypt_fixtures=(encrypt_fixtures); end

  def excluded_from_filter_parameters(); end

  def excluded_from_filter_parameters=(excluded_from_filter_parameters); end

  def extend_queries(); end

  def extend_queries=(extend_queries); end

  def forced_encoding_for_deterministic_encryption(); end

  def forced_encoding_for_deterministic_encryption=(forced_encoding_for_deterministic_encryption); end

  def key_derivation_salt(); end

  def key_derivation_salt=(key_derivation_salt); end

  def previous=(previous_schemes_properties); end

  def previous_schemes(); end

  def previous_schemes=(previous_schemes); end

  def primary_key(); end

  def primary_key=(primary_key); end

  def store_key_references(); end

  def store_key_references=(store_key_references); end

  def support_unencrypted_data(); end

  def support_unencrypted_data=(support_unencrypted_data); end

  def validate_column_size(); end

  def validate_column_size=(validate_column_size); end
end

class ActiveRecord::Encryption::Config
end

module ActiveRecord::Encryption::Configurable
end

module ActiveRecord::Encryption::Configurable::ClassMethods
  def cipher(*arg, **arg1, &arg2); end

  def configure(primary_key:, deterministic_key:, key_derivation_salt:, **properties); end

  def encrypted_attribute_was_declared(klass, name); end

  def encryptor(*arg, **arg1, &arg2); end

  def frozen_encryption(*arg, **arg1, &arg2); end

  def install_auto_filtered_parameters_hook(application); end

  def key_generator(*arg, **arg1, &arg2); end

  def key_provider(*arg, **arg1, &arg2); end

  def message_serializer(*arg, **arg1, &arg2); end

  def on_encrypted_attribute_declared(&block); end
end

module ActiveRecord::Encryption::Configurable::ClassMethods
end

module ActiveRecord::Encryption::Configurable
  extend ::ActiveSupport::Concern
end

class ActiveRecord::Encryption::Context
  def cipher(); end

  def cipher=(cipher); end

  def encryptor(); end

  def encryptor=(encryptor); end

  def frozen_encryption(); end

  def frozen_encryption=(frozen_encryption); end

  def frozen_encryption?(); end

  def key_generator(); end

  def key_generator=(key_generator); end

  def key_provider(); end

  def key_provider=(key_provider); end

  def message_serializer(); end

  def message_serializer=(message_serializer); end
  PROPERTIES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Context
end

module ActiveRecord::Encryption::Contexts
end

module ActiveRecord::Encryption::Contexts::ClassMethods
  def context(); end

  def current_custom_context(); end

  def protecting_encrypted_data(&block); end

  def with_encryption_context(properties); end

  def without_encryption(&block); end
end

module ActiveRecord::Encryption::Contexts::ClassMethods
end

module ActiveRecord::Encryption::Contexts
  extend ::ActiveSupport::Concern
end

class ActiveRecord::Encryption::DerivedSecretKeyProvider
  def initialize(passwords); end
end

class ActiveRecord::Encryption::DerivedSecretKeyProvider
end

class ActiveRecord::Encryption::DeterministicKeyProvider
  def initialize(password); end
end

class ActiveRecord::Encryption::DeterministicKeyProvider
end

module ActiveRecord::Encryption::EncryptableRecord
  def ciphertext_for(attribute_name); end

  def decrypt(); end

  def encrypt(); end

  def encrypted_attribute?(attribute_name); end
  ORIGINAL_ATTRIBUTE_PREFIX = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Encryption::EncryptableRecord
  extend ::ActiveSupport::Concern
end

class ActiveRecord::Encryption::EncryptedAttributeType
  include ::ActiveModel::Type::Helpers::Mutable
  def accessor(*arg, **arg1, &arg2); end

  def cast_type(); end

  def deterministic?(*arg, **arg1, &arg2); end

  def downcase?(*arg, **arg1, &arg2); end

  def fixed?(*arg, **arg1, &arg2); end

  def initialize(scheme:, cast_type: T.unsafe(nil), previous_type: T.unsafe(nil)); end

  def key_provider(*arg, **arg1, &arg2); end

  def previous_schemes(*arg, **arg1, &arg2); end

  def previous_types(); end

  def scheme(); end

  def with_context(*arg, **arg1, &arg2); end
end

class ActiveRecord::Encryption::EncryptedAttributeType
end

module ActiveRecord::Encryption::EncryptedFixtures
  def initialize(fixture, model_class); end
end

module ActiveRecord::Encryption::EncryptedFixtures
end

class ActiveRecord::Encryption::EncryptingOnlyEncryptor
end

class ActiveRecord::Encryption::EncryptingOnlyEncryptor
end

class ActiveRecord::Encryption::Encryptor
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypt(clear_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypted?(text); end
  DECRYPT_ERRORS = ::T.let(nil, ::T.untyped)
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
  THRESHOLD_TO_JUSTIFY_COMPRESSION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Encryptor
end

class ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider
  def active_primary_key(); end

  def decryption_keys(encrypted_message); end

  def encryption_key(); end
end

class ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider
end

module ActiveRecord::Encryption::Errors
end

class ActiveRecord::Encryption::Errors::Base
end

class ActiveRecord::Encryption::Errors::Base
end

class ActiveRecord::Encryption::Errors::Configuration
end

class ActiveRecord::Encryption::Errors::Configuration
end

class ActiveRecord::Encryption::Errors::Decryption
end

class ActiveRecord::Encryption::Errors::Decryption
end

class ActiveRecord::Encryption::Errors::Encoding
end

class ActiveRecord::Encryption::Errors::Encoding
end

class ActiveRecord::Encryption::Errors::EncryptedContentIntegrity
end

class ActiveRecord::Encryption::Errors::EncryptedContentIntegrity
end

class ActiveRecord::Encryption::Errors::Encryption
end

class ActiveRecord::Encryption::Errors::Encryption
end

class ActiveRecord::Encryption::Errors::ForbiddenClass
end

class ActiveRecord::Encryption::Errors::ForbiddenClass
end

module ActiveRecord::Encryption::Errors
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries
end

class ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue
  def initialize(value, type); end

  def type(); end

  def value(); end
end

class ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
  include ::ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQueryArgumentProcessor
  def find_by(*args); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQueryArgumentProcessor
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQueryArgumentProcessor
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType
  def serialize(data); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::InWithAdditionalValues
  def encryption_aware_type_caster(); end

  def proc_for_binds(); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::InWithAdditionalValues
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries
  include ::ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQueryArgumentProcessor
  def exists?(*args); end

  def find_or_create_by(attributes, &block); end

  def find_or_create_by!(attributes, &block); end

  def where(*args); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries
  def self.install_support(); end
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator
  def validate_each(record, attribute, value); end
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator
  def self.install_support(); end
end

class ActiveRecord::Encryption::Key
  def id(); end

  def initialize(secret); end

  def public_tags(); end

  def secret(); end
end

class ActiveRecord::Encryption::Key
  def self.derive_from(password); end
end

class ActiveRecord::Encryption::KeyGenerator
  def derive_key_from(password, length: T.unsafe(nil)); end

  def generate_random_hex_key(length: T.unsafe(nil)); end

  def generate_random_key(length: T.unsafe(nil)); end
end

class ActiveRecord::Encryption::KeyGenerator
end

class ActiveRecord::Encryption::KeyProvider
  def decryption_keys(encrypted_message); end

  def encryption_key(); end

  def initialize(keys); end
end

class ActiveRecord::Encryption::KeyProvider
end

class ActiveRecord::Encryption::Message
  def ==(other_message); end

  def headers(); end

  def headers=(headers); end

  def initialize(payload: T.unsafe(nil), headers: T.unsafe(nil)); end

  def payload(); end

  def payload=(payload); end
end

class ActiveRecord::Encryption::Message
end

class ActiveRecord::Encryption::MessageSerializer
  def dump(message); end

  def load(serialized_content); end
end

class ActiveRecord::Encryption::MessageSerializer
end

class ActiveRecord::Encryption::NullEncryptor
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypted?(text); end
end

class ActiveRecord::Encryption::NullEncryptor
end

class ActiveRecord::Encryption::Properties
  def ==(arg); end

  def []=(key, value); end

  def add(other_properties); end

  def auth_tag(); end

  def auth_tag=(value); end

  def compressed(); end

  def compressed=(value); end

  def encoding(); end

  def encoding=(value); end

  def encrypted_data_key(); end

  def encrypted_data_key=(value); end

  def encrypted_data_key_id(); end

  def encrypted_data_key_id=(value); end

  def initialize(initial_properties=T.unsafe(nil)); end

  def iv(); end

  def iv=(value); end

  def method_missing(method, *args, **arg, &block); end

  def to_h(); end

  def validate_value_type(value); end
  ALLOWED_VALUE_CLASSES = ::T.let(nil, ::T.untyped)
  DEFAULT_PROPERTIES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Properties
end

class ActiveRecord::Encryption::ReadOnlyNullEncryptor
  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypted?(text); end
end

class ActiveRecord::Encryption::ReadOnlyNullEncryptor
end

class ActiveRecord::Encryption::Scheme
  def deterministic?(); end

  def downcase?(); end

  def fixed?(); end

  def ignore_case?(); end

  def initialize(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous_schemes: T.unsafe(nil), **context_properties); end

  def key_provider(); end

  def merge(other_scheme); end

  def previous_schemes(); end

  def previous_schemes=(previous_schemes); end

  def to_h(); end

  def with_context(&block); end
end

class ActiveRecord::Encryption::Scheme
end

module ActiveRecord::Encryption
  extend ::ActiveSupport::Autoload
  extend ::ActiveRecord::Encryption::Configurable::ClassMethods
  extend ::ActiveRecord::Encryption::Contexts::ClassMethods
  def self.config(); end

  def self.custom_contexts(); end

  def self.custom_contexts=(obj); end

  def self.default_context(); end

  def self.encrypted_attribute_declaration_listeners(); end

  def self.encrypted_attribute_declaration_listeners=(val); end
end

module ActiveRecord::Enum
  def enum(name=T.unsafe(nil), values=T.unsafe(nil), **options); end

  def inherited(base); end
end

class ActiveRecord::Enum::EnumType
  def assert_valid_value(value); end

  def initialize(name, mapping, subtype); end

  def serializable?(value, &block); end

  def subtype(); end

  def type(*arg, **arg1, &arg2); end
end

class ActiveRecord::Enum::EnumType
end

module ActiveRecord::Enum
  def self.extended(base); end
end

class ActiveRecord::EnvironmentMismatchError
  def initialize(current: T.unsafe(nil), stored: T.unsafe(nil)); end
end

class ActiveRecord::EnvironmentStorageError
  def initialize(); end
end

class ActiveRecord::EnvironmentStorageError
end

module ActiveRecord::Explain
  def collecting_queries_for_explain(); end

  def exec_explain(queries); end
end

class ActiveRecord::ExplainRegistry
  def collect(); end

  def collect=(collect); end

  def collect?(); end

  def queries(); end

  def reset(); end
end

class ActiveRecord::ExplainRegistry
  def self.collect(*arg, **arg1, &arg2); end

  def self.collect=(arg); end

  def self.collect?(*arg, **arg1, &arg2); end

  def self.queries(*arg, **arg1, &arg2); end

  def self.reset(*arg, **arg1, &arg2); end
end

class ActiveRecord::ExplainSubscriber
  def finish(name, id, payload); end

  def ignore_payload?(payload); end

  def start(name, id, payload); end
  EXPLAINED_SQLS = ::T.let(nil, ::T.untyped)
  IGNORED_PAYLOADS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ExplainSubscriber
end

module ActiveRecord::FinderMethods
  def exists?(conditions=T.unsafe(nil)); end

  def fifth(); end

  def fifth!(); end

  def find(*args); end

  def find_by(arg, *args); end

  def find_by!(arg, *args); end

  def find_sole_by(arg, *args); end

  def first(limit=T.unsafe(nil)); end

  def first!(); end

  def forty_two(); end

  def forty_two!(); end

  def fourth(); end

  def fourth!(); end

  def include?(record); end

  def last(limit=T.unsafe(nil)); end

  def last!(); end

  def member?(record); end

  def raise_record_not_found_exception!(ids=T.unsafe(nil), result_size=T.unsafe(nil), expected_size=T.unsafe(nil), key=T.unsafe(nil), not_found_ids=T.unsafe(nil)); end

  def second(); end

  def second!(); end

  def second_to_last(); end

  def second_to_last!(); end

  def sole(); end

  def take(limit=T.unsafe(nil)); end

  def take!(); end

  def third(); end

  def third!(); end

  def third_to_last(); end

  def third_to_last!(); end
  ONE_AS_ONE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::FinderMethods
end

class ActiveRecord::FutureResult
  def cancel(); end

  def empty?(*arg, **arg1, &arg2); end

  def execute!(connection); end

  def execute_or_skip(); end

  def initialize(pool, *args, **kwargs); end

  def lock_wait(); end

  def pending?(); end

  def result(); end

  def schedule!(session); end

  def to_a(*arg, **arg1, &arg2); end
end

class ActiveRecord::FutureResult::Canceled
end

class ActiveRecord::FutureResult::Canceled
end

class ActiveRecord::FutureResult::EventBuffer
  def flush(); end

  def initialize(future_result, instrumenter); end

  def instrument(name, payload=T.unsafe(nil), &block); end
end

class ActiveRecord::FutureResult::EventBuffer
end

class ActiveRecord::FutureResult::SelectAll
end

class ActiveRecord::FutureResult::SelectAll
end

class ActiveRecord::FutureResult
end

class ActiveRecord::HasManyThroughAssociationNotFoundError
  include ::DidYouMean::Correctable
  def initialize(owner_class=T.unsafe(nil), reflection=T.unsafe(nil)); end

  def owner_class(); end

  def reflection(); end
end

class ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError
  def initialize(owner_class_name=T.unsafe(nil), reflection=T.unsafe(nil), source_reflection=T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughAssociationPolymorphicSourceError
  def initialize(owner_class_name=T.unsafe(nil), reflection=T.unsafe(nil), source_reflection=T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughAssociationPolymorphicThroughError
  def initialize(owner_class_name=T.unsafe(nil), reflection=T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughOrderError
  def initialize(owner_class_name=T.unsafe(nil), reflection=T.unsafe(nil), through_reflection=T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughSourceAssociationNotFoundError
  def initialize(reflection=T.unsafe(nil)); end
end

class ActiveRecord::HasOneAssociationPolymorphicThroughError
  def initialize(owner_class_name=T.unsafe(nil), reflection=T.unsafe(nil)); end
end

class ActiveRecord::HasOneThroughCantAssociateThroughCollection
  def initialize(owner_class_name=T.unsafe(nil), reflection=T.unsafe(nil), through_reflection=T.unsafe(nil)); end
end

class ActiveRecord::IllegalMigrationNameError
  def initialize(name=T.unsafe(nil)); end
end

module ActiveRecord::Inheritance
  extend ::ActiveSupport::Concern
end

class ActiveRecord::InsertAll
  def connection(); end

  def execute(); end

  def initialize(model, inserts, on_duplicate:, update_only: T.unsafe(nil), returning: T.unsafe(nil), unique_by: T.unsafe(nil), record_timestamps: T.unsafe(nil)); end

  def inserts(); end

  def keys(); end

  def keys_including_timestamps(); end

  def map_key_with_value(); end

  def model(); end

  def on_duplicate(); end

  def primary_keys(); end

  def record_timestamps?(); end

  def returning(); end

  def skip_duplicates?(); end

  def unique_by(); end

  def updatable_columns(); end

  def update_duplicates?(); end

  def update_only(); end

  def update_sql(); end
end

class ActiveRecord::InsertAll::Builder
  def conflict_target(); end

  def initialize(insert_all); end

  def into(); end

  def keys(*arg, **arg1, &arg2); end

  def keys_including_timestamps(*arg, **arg1, &arg2); end

  def model(); end

  def raw_update_sql(); end

  def raw_update_sql?(); end

  def record_timestamps?(*arg, **arg1, &arg2); end

  def returning(); end

  def skip_duplicates?(*arg, **arg1, &arg2); end

  def touch_model_timestamps_unless(&block); end

  def updatable_columns(); end

  def update_duplicates?(*arg, **arg1, &arg2); end

  def values_list(); end
end

class ActiveRecord::InsertAll::Builder
end

class ActiveRecord::InsertAll
end

module ActiveRecord::Integration
  def cache_key(); end

  def cache_key_with_version(); end

  def cache_version(); end

  def to_param(); end
end

module ActiveRecord::Integration
  extend ::ActiveSupport::Concern
end

class ActiveRecord::InternalMetadata
  include ::ActiveRecord::InternalMetadata::GeneratedAttributeMethods
  include ::ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAttributeMethods
end

module ActiveRecord::InternalMetadata::GeneratedAttributeMethods
  extend ::Mutex_m
end

class ActiveRecord::InternalMetadata
  def self.enabled?(); end
end

class ActiveRecord::InverseOfAssociationNotFoundError
  include ::DidYouMean::Correctable
  def associated_class(); end

  def initialize(reflection=T.unsafe(nil), associated_class=T.unsafe(nil)); end

  def reflection(); end
end

class ActiveRecord::InverseOfAssociationRecursiveError
  def initialize(reflection=T.unsafe(nil)); end

  def reflection(); end
end

class ActiveRecord::InverseOfAssociationRecursiveError
end

module ActiveRecord::LegacyYamlAdapter
end

module ActiveRecord::LegacyYamlAdapter
  def self.convert(coder); end
end

class ActiveRecord::Locking::LockingType
  def deserialize(value); end

  def encode_with(coder); end

  def init_with(coder); end

  def serialize(value); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Locking::LockingType
  def self.new(subtype); end
end

module ActiveRecord::Locking::Optimistic
  def increment!(*arg, **arg1); end

  def locking_enabled?(); end
end

module ActiveRecord::Locking::Optimistic
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Locking::Pessimistic
  def lock!(lock=T.unsafe(nil)); end
end

module ActiveRecord::Locking
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::LogSubscriber
  def backtrace_cleaner(); end

  def backtrace_cleaner=(backtrace_cleaner); end

  def backtrace_cleaner?(); end

  def sql(event); end

  def strict_loading_violation(event); end
end

class ActiveRecord::LogSubscriber
  def self.backtrace_cleaner(); end

  def self.backtrace_cleaner=(value); end

  def self.backtrace_cleaner?(); end

  def self.reset_runtime(); end

  def self.runtime(); end

  def self.runtime=(value); end
end

module ActiveRecord::Middleware
end

class ActiveRecord::Middleware::DatabaseSelector
  def call(env); end

  def context_klass(); end

  def initialize(app, resolver_klass=T.unsafe(nil), context_klass=T.unsafe(nil), options=T.unsafe(nil)); end

  def options(); end

  def resolver_klass(); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  def context(); end

  def delay(); end

  def initialize(context, options=T.unsafe(nil)); end

  def instrumenter(); end

  def read(&blk); end

  def update_context(response); end

  def write(&blk); end
  SEND_TO_REPLICA_DELAY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  def initialize(session); end

  def last_write_timestamp(); end

  def save(response); end

  def session(); end

  def update_last_write_timestamp(); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  def self.call(request); end

  def self.convert_time_to_timestamp(time); end

  def self.convert_timestamp_to_time(timestamp); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  def self.call(context, options=T.unsafe(nil)); end
end

class ActiveRecord::Middleware::DatabaseSelector
end

class ActiveRecord::Middleware::ShardSelector
  def call(env); end

  def initialize(app, resolver, options=T.unsafe(nil)); end

  def options(); end

  def resolver(); end
end

class ActiveRecord::Middleware::ShardSelector
end

module ActiveRecord::Middleware
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::Migration
  def announce(message); end

  def connection(); end

  def copy(destination, sources, options=T.unsafe(nil)); end

  def disable_ddl_transaction(); end

  def down(); end

  def exec_migration(conn, direction); end

  def initialize(name=T.unsafe(nil), version=T.unsafe(nil)); end

  def method_missing(method, *arguments, **arg, &block); end

  def migrate(direction); end

  def name(); end

  def name=(name); end

  def next_migration_number(number); end

  def proper_table_name(name, options=T.unsafe(nil)); end

  def reversible(); end

  def revert(*migration_classes, &block); end

  def reverting?(); end

  def run(*migration_classes); end

  def say(message, subitem=T.unsafe(nil)); end

  def say_with_time(message); end

  def suppress_messages(); end

  def table_name_options(config=T.unsafe(nil)); end

  def up(); end

  def up_only(&block); end

  def verbose(); end

  def verbose=(val); end

  def version(); end

  def version=(version); end

  def write(text=T.unsafe(nil)); end
end

class ActiveRecord::Migration::CheckPending
  def call(env); end

  def initialize(app, file_watcher: T.unsafe(nil)); end
end

class ActiveRecord::Migration::CheckPending
end

class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions
  def add_belongs_to(*args, **arg, &block); end

  def add_check_constraint(*args, **arg, &block); end

  def add_column(*args, **arg, &block); end

  def add_foreign_key(*args, **arg, &block); end

  def add_index(*args, **arg, &block); end

  def add_reference(*args, **arg, &block); end

  def add_timestamps(*args, **arg, &block); end

  def change_column(*args, **arg, &block); end

  def change_column_comment(*args, **arg, &block); end

  def change_column_default(*args, **arg, &block); end

  def change_column_null(*args, **arg, &block); end

  def change_table(table_name, **options); end

  def change_table_comment(*args, **arg, &block); end

  def commands(); end

  def commands=(commands); end

  def create_join_table(*args, **arg, &block); end

  def create_table(*args, **arg, &block); end

  def delegate(); end

  def delegate=(delegate); end

  def disable_extension(*args, **arg, &block); end

  def drop_join_table(*args, **arg, &block); end

  def drop_table(*args, **arg, &block); end

  def enable_extension(*args, **arg, &block); end

  def execute(*args, **arg, &block); end

  def execute_block(*args, **arg, &block); end

  def initialize(delegate=T.unsafe(nil)); end

  def inverse_of(command, args, &block); end

  def invert_add_belongs_to(args, &block); end

  def invert_remove_belongs_to(args, &block); end

  def record(*command, &block); end

  def remove_belongs_to(*args, **arg, &block); end

  def remove_check_constraint(*args, **arg, &block); end

  def remove_column(*args, **arg, &block); end

  def remove_columns(*args, **arg, &block); end

  def remove_foreign_key(*args, **arg, &block); end

  def remove_index(*args, **arg, &block); end

  def remove_reference(*args, **arg, &block); end

  def remove_timestamps(*args, **arg, &block); end

  def rename_column(*args, **arg, &block); end

  def rename_index(*args, **arg, &block); end

  def rename_table(*args, **arg, &block); end

  def replay(migration); end

  def revert(); end

  def reverting(); end

  def reverting=(reverting); end

  def transaction(*args, **arg, &block); end
  ReversibleAndIrreversibleMethods = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  def invert_add_check_constraint(args, &block); end

  def invert_add_column(args, &block); end

  def invert_add_foreign_key(args, &block); end

  def invert_add_index(args, &block); end

  def invert_add_reference(args, &block); end

  def invert_add_timestamps(args, &block); end

  def invert_create_join_table(args, &block); end

  def invert_create_table(args, &block); end

  def invert_disable_extension(args, &block); end

  def invert_drop_join_table(args, &block); end

  def invert_drop_table(args, &block); end

  def invert_enable_extension(args, &block); end

  def invert_execute_block(args, &block); end

  def invert_remove_check_constraint(args, &block); end

  def invert_remove_column(args, &block); end

  def invert_remove_foreign_key(args, &block); end

  def invert_remove_index(args, &block); end

  def invert_remove_reference(args, &block); end

  def invert_remove_timestamps(args, &block); end
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
end

class ActiveRecord::Migration::CommandRecorder
end

class ActiveRecord::Migration::Compatibility::V4_2
  def index_exists?(table_name, column_name, **options); end

  def remove_index(table_name, column_name=T.unsafe(nil), **options); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  def belongs_to(*arg, **options); end

  def references(*arg, **options); end

  def timestamps(**options); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
end

class ActiveRecord::Migration::Compatibility::V4_2
end

class ActiveRecord::Migration::Compatibility::V5_0
  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  def belongs_to(*args, **options); end

  def primary_key(name, type=T.unsafe(nil), **options); end

  def references(*args, **options); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
end

class ActiveRecord::Migration::Compatibility::V5_1
  def change_column(table_name, column_name, type, **options); end
end

class ActiveRecord::Migration::Compatibility::V5_2
  def add_timestamps(table_name, **options); end
end

module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
  def invert_change_column_comment(args); end

  def invert_change_table_comment(args); end

  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
end

module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
  def column(name, type, index: T.unsafe(nil), **options); end

  def timestamps(**options); end
end

module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
end

class ActiveRecord::Migration::Compatibility::V6_0
  def add_belongs_to(table_name, ref_name, **options); end

  def add_reference(table_name, ref_name, **options); end

  def change_table(table_name, **options); end

  def create_join_table(table_1, table_2, **options); end
end

class ActiveRecord::Migration::Compatibility::V6_0::ReferenceDefinition
end

class ActiveRecord::Migration::Compatibility::V6_0::ReferenceDefinition
end

module ActiveRecord::Migration::Compatibility::V6_0::TableDefinition
  def belongs_to(*args, **options); end

  def column(name, type, index: T.unsafe(nil), **options); end

  def references(*args, **options); end
end

module ActiveRecord::Migration::Compatibility::V6_0::TableDefinition
end

class ActiveRecord::Migration::Compatibility::V6_1
  def add_column(table_name, column_name, type, **options); end

  def create_table(table_name, **options); end
end

class ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat
end

class ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat
  def self.compatible_timestamp_type(type, connection); end
end

module ActiveRecord::Migration::Compatibility::V6_1::TableDefinition
  def column(name, type, index: T.unsafe(nil), **options); end

  def new_column_definition(name, type, **options); end
end

module ActiveRecord::Migration::Compatibility::V6_1::TableDefinition
end

module ActiveRecord::Migration::Compatibility
  def self.find(version); end
end

class ActiveRecord::Migration::ReversibleBlockHelper
  def down(); end

  def reverting(); end

  def reverting=(_); end

  def up(); end
end

class ActiveRecord::Migration::ReversibleBlockHelper
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::Migration
  def self.[](version); end

  def self.check_pending!(connection=T.unsafe(nil)); end

  def self.current_version(); end

  def self.delegate(); end

  def self.delegate=(delegate); end

  def self.disable_ddl_transaction(); end

  def self.disable_ddl_transaction!(); end

  def self.disable_ddl_transaction=(disable_ddl_transaction); end

  def self.inherited(subclass); end

  def self.load_schema_if_pending!(); end

  def self.maintain_test_schema!(); end

  def self.method_missing(name, *args, **arg, &block); end

  def self.migrate(direction); end

  def self.nearest_delegate(); end

  def self.verbose(); end

  def self.verbose=(val); end
end

class ActiveRecord::MigrationContext
  def current_environment(); end

  def current_version(); end

  def down(target_version=T.unsafe(nil), &block); end

  def forward(steps=T.unsafe(nil)); end

  def get_all_versions(); end

  def initialize(migrations_paths, schema_migration=T.unsafe(nil)); end

  def last_stored_environment(); end

  def migrate(target_version=T.unsafe(nil), &block); end

  def migrations(); end

  def migrations_paths(); end

  def migrations_status(); end

  def needs_migration?(); end

  def open(); end

  def pending_migration_versions(); end

  def protected_environment?(); end

  def rollback(steps=T.unsafe(nil)); end

  def run(direction, target_version); end

  def schema_migration(); end

  def up(target_version=T.unsafe(nil), &block); end
end

class ActiveRecord::MigrationContext
end

class ActiveRecord::MigrationError
  def initialize(message=T.unsafe(nil)); end
end

class ActiveRecord::MigrationProxy
  def announce(*arg, **arg1, &arg2); end

  def basename(); end

  def disable_ddl_transaction(*arg, **arg1, &arg2); end

  def filename(); end

  def filename=(_); end

  def initialize(name, version, filename, scope); end

  def migrate(*arg, **arg1, &arg2); end

  def name(); end

  def name=(_); end

  def scope(); end

  def scope=(_); end

  def version(); end

  def version=(_); end

  def write(*arg, **arg1, &arg2); end
end

class ActiveRecord::MigrationProxy
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::Migrator
  def current(); end

  def current_migration(); end

  def current_version(); end

  def initialize(direction, migrations, schema_migration, target_version=T.unsafe(nil)); end

  def load_migrated(); end

  def migrate(); end

  def migrated(); end

  def migrations(); end

  def pending_migrations(); end

  def run(); end

  def runnable(); end
end

class ActiveRecord::Migrator
  def self.current_version(); end

  def self.migrations_paths(); end

  def self.migrations_paths=(migrations_paths); end
end

class ActiveRecord::MismatchedForeignKey
  def initialize(message: T.unsafe(nil), sql: T.unsafe(nil), binds: T.unsafe(nil), table: T.unsafe(nil), foreign_key: T.unsafe(nil), target_table: T.unsafe(nil), primary_key: T.unsafe(nil), primary_key_column: T.unsafe(nil)); end
end

module ActiveRecord::ModelSchema
  extend ::ActiveSupport::Concern
  def self.derive_join_table_name(first_table, second_table); end
end

class ActiveRecord::MultiparameterAssignmentErrors
  def errors(); end

  def initialize(errors=T.unsafe(nil)); end
end

module ActiveRecord::NestedAttributes
  def _destroy(); end
  UNASSIGNABLE_KEYS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NestedAttributes
  extend ::ActiveSupport::Concern
end

class ActiveRecord::NoDatabaseError
  include ::ActiveSupport::ActionableError
  def _actions(); end

  def _actions=(_actions); end

  def _actions?(); end

  def initialize(message=T.unsafe(nil)); end
end

class ActiveRecord::NoDatabaseError
  def self._actions(); end

  def self._actions=(value); end

  def self._actions?(); end

  def self.db_error(db_name); end
end

class ActiveRecord::NoEnvironmentInSchemaError
  def initialize(); end
end

module ActiveRecord::NoTouching
  def no_touching?(); end

  def touch(*arg, **arg1); end

  def touch_later(*arg); end
end

module ActiveRecord::NoTouching
  extend ::ActiveSupport::Concern
  def self.applied_to?(klass); end

  def self.apply_to(klass); end
end

module ActiveRecord::NullRelation
  def any?(); end

  def calculate(operation, _column_name); end

  def delete(_id_or_array); end

  def delete_all(); end

  def empty?(); end

  def exists?(_conditions=T.unsafe(nil)); end

  def many?(); end

  def none?(); end

  def one?(); end

  def or(other); end

  def pluck(*column_names); end

  def update_all(_updates); end
end

module ActiveRecord::NullRelation
end

class ActiveRecord::PendingMigrationError
  include ::ActiveSupport::ActionableError
  def _actions(); end

  def _actions=(_actions); end

  def _actions?(); end
end

class ActiveRecord::PendingMigrationError
  def self._actions(); end

  def self._actions=(value); end

  def self._actions?(); end
end

module ActiveRecord::Persistence
  def previously_new_record?(); end

  def previously_persisted?(); end
end

module ActiveRecord::Persistence
  extend ::ActiveSupport::Concern
end

class ActiveRecord::Point
  def x(); end

  def x=(_); end

  def y(); end

  def y=(_); end
end

class ActiveRecord::Point
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::PredicateBuilder
  def [](attr_name, value, operator=T.unsafe(nil)); end

  def build(attribute, value, operator=T.unsafe(nil)); end

  def build_bind_attribute(column_name, value); end

  def build_from_hash(attributes, &block); end

  def expand_from_hash(attributes, &block); end

  def initialize(table); end

  def register_handler(klass, handler); end

  def resolve_arel_attribute(table_name, column_name, &block); end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
  def self.or(other); end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
  def initialize(associated_table, value); end

  def queries(); end
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
  def initialize(associated_table, values); end

  def queries(); end
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
end

class ActiveRecord::PredicateBuilder::RangeHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds
  def begin(); end

  def begin=(_); end

  def end(); end

  def end=(_); end

  def exclude_end?(); end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::PredicateBuilder::RangeHandler
end

class ActiveRecord::PredicateBuilder::RelationHandler
  def call(attribute, value); end
end

class ActiveRecord::PredicateBuilder::RelationHandler
end

class ActiveRecord::PredicateBuilder
  def self.references(attributes); end
end

class ActiveRecord::ProtectedEnvironmentError
  def initialize(env=T.unsafe(nil)); end
end

module ActiveRecord::QueryCache::ClassMethods
  def cache(&block); end

  def uncached(&block); end
end

class ActiveRecord::QueryCache
  def self.complete(pools); end

  def self.install_executor_hooks(executor=T.unsafe(nil)); end

  def self.run(); end
end

module ActiveRecord::QueryLogs
end

module ActiveRecord::QueryLogs
  def self.cache_query_log_tags(); end

  def self.cache_query_log_tags=(val); end

  def self.cached_comment(); end

  def self.cached_comment=(obj); end

  def self.call(sql); end

  def self.clear_cache(); end

  def self.prepend_comment(); end

  def self.prepend_comment=(val); end

  def self.taggings(); end

  def self.taggings=(val); end

  def self.tags(); end

  def self.tags=(val); end
end

module ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  def _select!(*fields); end

  def and(other); end

  def and!(other); end

  def annotate(*args); end

  def annotate!(*args); end

  def annotate_values(); end

  def annotate_values=(value); end

  def arel(aliases=T.unsafe(nil)); end

  def build_having_clause(opts, rest=T.unsafe(nil)); end

  def build_subquery(subquery_alias, select_value); end

  def build_where_clause(opts, rest=T.unsafe(nil)); end

  def construct_join_dependency(associations, join_type); end

  def create_with(value); end

  def create_with!(value); end

  def create_with_value(); end

  def create_with_value=(value); end

  def distinct(value=T.unsafe(nil)); end

  def distinct!(value=T.unsafe(nil)); end

  def distinct_value(); end

  def distinct_value=(value); end

  def eager_load(*args); end

  def eager_load!(*args); end

  def eager_load_values(); end

  def eager_load_values=(value); end

  def excluding(*records); end

  def excluding!(records); end

  def extending(*modules, &block); end

  def extending!(*modules, &block); end

  def extending_values(); end

  def extending_values=(value); end

  def extensions(); end

  def extract_associated(association); end

  def from(value, subquery_name=T.unsafe(nil)); end

  def from!(value, subquery_name=T.unsafe(nil)); end

  def from_clause(); end

  def from_clause=(value); end

  def group(*args); end

  def group!(*args); end

  def group_values(); end

  def group_values=(value); end

  def having(opts, *rest); end

  def having!(opts, *rest); end

  def having_clause(); end

  def having_clause=(value); end

  def in_order_of(column, values); end

  def includes(*args); end

  def includes!(*args); end

  def includes_values(); end

  def includes_values=(value); end

  def invert_where(); end

  def invert_where!(); end

  def joins(*args); end

  def joins!(*args); end

  def joins_values(); end

  def joins_values=(value); end

  def left_joins(*args); end

  def left_outer_joins(*args); end

  def left_outer_joins!(*args); end

  def left_outer_joins_values(); end

  def left_outer_joins_values=(value); end

  def limit(value); end

  def limit!(value); end

  def limit_value(); end

  def limit_value=(value); end

  def lock(locks=T.unsafe(nil)); end

  def lock!(locks=T.unsafe(nil)); end

  def lock_value(); end

  def lock_value=(value); end

  def none(); end

  def none!(); end

  def offset(value); end

  def offset!(value); end

  def offset_value(); end

  def offset_value=(value); end

  def optimizer_hints(*args); end

  def optimizer_hints!(*args); end

  def optimizer_hints_values(); end

  def optimizer_hints_values=(value); end

  def or(other); end

  def or!(other); end

  def order(*args); end

  def order!(*args); end

  def order_values(); end

  def order_values=(value); end

  def preload(*args); end

  def preload!(*args); end

  def preload_values(); end

  def preload_values=(value); end

  def readonly(value=T.unsafe(nil)); end

  def readonly!(value=T.unsafe(nil)); end

  def readonly_value(); end

  def readonly_value=(value); end

  def references(*table_names); end

  def references!(*table_names); end

  def references_values(); end

  def references_values=(value); end

  def reorder(*args); end

  def reorder!(*args); end

  def reordering_value(); end

  def reordering_value=(value); end

  def reselect(*args); end

  def reselect!(*args); end

  def reverse_order(); end

  def reverse_order!(); end

  def reverse_order_value(); end

  def reverse_order_value=(value); end

  def rewhere(conditions); end

  def select(*fields); end

  def select_values(); end

  def select_values=(value); end

  def skip_preloading!(); end

  def skip_query_cache!(value=T.unsafe(nil)); end

  def skip_query_cache_value(); end

  def skip_query_cache_value=(value); end

  def strict_loading(value=T.unsafe(nil)); end

  def strict_loading!(value=T.unsafe(nil)); end

  def strict_loading_value(); end

  def strict_loading_value=(value); end

  def structurally_compatible?(other); end

  def uniq!(name); end

  def unscope(*args); end

  def unscope!(*args); end

  def unscope_values(); end

  def unscope_values=(value); end

  def where(*args); end

  def where!(opts, *rest); end

  def where_clause(); end

  def where_clause=(value); end

  def without(*records); end
  FROZEN_EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_HASH = ::T.let(nil, ::T.untyped)
  STRUCTURAL_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALID_DIRECTIONS = ::T.let(nil, ::T.untyped)
  VALID_UNSCOPING_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::QueryMethods::WhereChain
  def associated(*associations); end

  def initialize(scope); end

  def missing(*associations); end

  def not(opts, *rest); end
end

class ActiveRecord::QueryMethods::WhereChain
end

module ActiveRecord::QueryMethods
end

module ActiveRecord::Querying
  def _load_from_sql(result_set, &block); end

  def _query_by_sql(sql, binds=T.unsafe(nil), preparable: T.unsafe(nil), async: T.unsafe(nil)); end

  def and(*arg, **arg1, &arg2); end

  def annotate(*arg, **arg1, &arg2); end

  def any?(*arg, **arg1, &arg2); end

  def average(*arg, **arg1, &arg2); end

  def calculate(*arg, **arg1, &arg2); end

  def count(*arg, **arg1, &arg2); end

  def count_by_sql(sql); end

  def create_or_find_by(*arg, **arg1, &arg2); end

  def create_or_find_by!(*arg, **arg1, &arg2); end

  def create_with(*arg, **arg1, &arg2); end

  def delete_all(*arg, **arg1, &arg2); end

  def delete_by(*arg, **arg1, &arg2); end

  def destroy_all(*arg, **arg1, &arg2); end

  def destroy_by(*arg, **arg1, &arg2); end

  def distinct(*arg, **arg1, &arg2); end

  def eager_load(*arg, **arg1, &arg2); end

  def except(*arg, **arg1, &arg2); end

  def excluding(*arg, **arg1, &arg2); end

  def exists?(*arg, **arg1, &arg2); end

  def extending(*arg, **arg1, &arg2); end

  def extract_associated(*arg, **arg1, &arg2); end

  def fifth(*arg, **arg1, &arg2); end

  def fifth!(*arg, **arg1, &arg2); end

  def find(*arg, **arg1, &arg2); end

  def find_by(*arg, **arg1, &arg2); end

  def find_by!(*arg, **arg1, &arg2); end

  def find_by_sql(sql, binds=T.unsafe(nil), preparable: T.unsafe(nil), &block); end

  def find_each(*arg, **arg1, &arg2); end

  def find_in_batches(*arg, **arg1, &arg2); end

  def find_or_create_by(*arg, **arg1, &arg2); end

  def find_or_create_by!(*arg, **arg1, &arg2); end

  def find_or_initialize_by(*arg, **arg1, &arg2); end

  def find_sole_by(*arg, **arg1, &arg2); end

  def first(*arg, **arg1, &arg2); end

  def first!(*arg, **arg1, &arg2); end

  def first_or_create(*arg, **arg1, &arg2); end

  def first_or_create!(*arg, **arg1, &arg2); end

  def first_or_initialize(*arg, **arg1, &arg2); end

  def forty_two(*arg, **arg1, &arg2); end

  def forty_two!(*arg, **arg1, &arg2); end

  def fourth(*arg, **arg1, &arg2); end

  def fourth!(*arg, **arg1, &arg2); end

  def from(*arg, **arg1, &arg2); end

  def group(*arg, **arg1, &arg2); end

  def having(*arg, **arg1, &arg2); end

  def ids(*arg, **arg1, &arg2); end

  def in_batches(*arg, **arg1, &arg2); end

  def in_order_of(*arg, **arg1, &arg2); end

  def includes(*arg, **arg1, &arg2); end

  def invert_where(*arg, **arg1, &arg2); end

  def joins(*arg, **arg1, &arg2); end

  def last(*arg, **arg1, &arg2); end

  def last!(*arg, **arg1, &arg2); end

  def left_joins(*arg, **arg1, &arg2); end

  def left_outer_joins(*arg, **arg1, &arg2); end

  def limit(*arg, **arg1, &arg2); end

  def lock(*arg, **arg1, &arg2); end

  def many?(*arg, **arg1, &arg2); end

  def maximum(*arg, **arg1, &arg2); end

  def merge(*arg, **arg1, &arg2); end

  def minimum(*arg, **arg1, &arg2); end

  def none(*arg, **arg1, &arg2); end

  def none?(*arg, **arg1, &arg2); end

  def offset(*arg, **arg1, &arg2); end

  def one?(*arg, **arg1, &arg2); end

  def only(*arg, **arg1, &arg2); end

  def optimizer_hints(*arg, **arg1, &arg2); end

  def or(*arg, **arg1, &arg2); end

  def order(*arg, **arg1, &arg2); end

  def pick(*arg, **arg1, &arg2); end

  def pluck(*arg, **arg1, &arg2); end

  def preload(*arg, **arg1, &arg2); end

  def readonly(*arg, **arg1, &arg2); end

  def references(*arg, **arg1, &arg2); end

  def reorder(*arg, **arg1, &arg2); end

  def reselect(*arg, **arg1, &arg2); end

  def rewhere(*arg, **arg1, &arg2); end

  def second(*arg, **arg1, &arg2); end

  def second!(*arg, **arg1, &arg2); end

  def second_to_last(*arg, **arg1, &arg2); end

  def second_to_last!(*arg, **arg1, &arg2); end

  def select(*arg, **arg1, &arg2); end

  def sole(*arg, **arg1, &arg2); end

  def strict_loading(*arg, **arg1, &arg2); end

  def sum(*arg, **arg1, &arg2); end

  def take(*arg, **arg1, &arg2); end

  def take!(*arg, **arg1, &arg2); end

  def third(*arg, **arg1, &arg2); end

  def third!(*arg, **arg1, &arg2); end

  def third_to_last(*arg, **arg1, &arg2); end

  def third_to_last!(*arg, **arg1, &arg2); end

  def touch_all(*arg, **arg1, &arg2); end

  def unscope(*arg, **arg1, &arg2); end

  def update_all(*arg, **arg1, &arg2); end

  def where(*arg, **arg1, &arg2); end

  def without(*arg, **arg1, &arg2); end
  QUERYING_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Railtie
  SQLITE3_PRODUCTION_WARN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Railtie
end

module ActiveRecord::Railties
end

module ActiveRecord::Railties::ControllerRuntime
  def db_runtime(); end

  def db_runtime=(db_runtime); end
end

module ActiveRecord::Railties::ControllerRuntime
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Railties
end

class ActiveRecord::ReadOnlyError
end

class ActiveRecord::ReadOnlyError
end

module ActiveRecord::ReadonlyAttributes
  extend ::ActiveSupport::Concern
end

class ActiveRecord::RecordInvalid
  def initialize(record=T.unsafe(nil)); end
end

class ActiveRecord::RecordNotDestroyed
  def initialize(message=T.unsafe(nil), record=T.unsafe(nil)); end

  def record(); end
end

class ActiveRecord::RecordNotFound
  def id(); end

  def initialize(message=T.unsafe(nil), model=T.unsafe(nil), primary_key=T.unsafe(nil), id=T.unsafe(nil)); end

  def model(); end

  def primary_key(); end
end

class ActiveRecord::RecordNotSaved
  def initialize(message=T.unsafe(nil), record=T.unsafe(nil)); end

  def record(); end
end

class ActiveRecord::Reflection::AbstractReflection
  def actual_source_reflection(); end

  def alias_candidate(name); end

  def build_association(attributes, &block); end

  def build_scope(table, predicate_builder=T.unsafe(nil), klass=T.unsafe(nil)); end

  def chain(); end

  def check_validity_of_inverse!(); end

  def class_name(); end

  def constraints(); end

  def counter_cache_column(); end

  def counter_must_be_updated_by_has_many?(); end

  def has_cached_counter?(); end

  def inverse_of(); end

  def inverse_updates_counter_cache?(); end

  def inverse_updates_counter_in_memory?(); end

  def inverse_which_updates_counter_cache(); end

  def join_scope(table, foreign_table, foreign_klass); end

  def join_scopes(table, predicate_builder, klass=T.unsafe(nil), record=T.unsafe(nil)); end

  def klass_join_scope(table, predicate_builder); end

  def scopes(); end

  def strict_loading?(); end

  def strict_loading_violation_message(owner); end

  def table_name(); end

  def through_reflection?(); end
end

class ActiveRecord::Reflection::AbstractReflection
end

class ActiveRecord::Reflection::MacroReflection
  def ==(other_aggregation); end

  def active_record(); end

  def autosave=(autosave); end

  def compute_class(name); end

  def initialize(name, scope, options, active_record); end

  def klass(); end

  def name(); end

  def options(); end

  def plural_name(); end

  def scope(); end

  def scope_for(relation, owner=T.unsafe(nil)); end
end

module ActiveRecord::Reflection
  extend ::ActiveSupport::Concern
  extend ::ActiveStorage::Reflection::ReflectionExtension
  def self.add_aggregate_reflection(ar, name, reflection); end

  def self.add_reflection(ar, name, reflection); end

  def self.create(macro, name, scope, options, ar); end
end

class ActiveRecord::Relation
  include ::Enumerable
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::ActiveRecord::FinderMethods
  include ::SecondLevelCache::ActiveRecord::FinderMethods
  include ::Lockbox::Calculations
  def ==(other); end

  def _exec_scope(*arg, **arg1, &arg2); end

  def alias_tracker(joins=T.unsafe(nil), aliases=T.unsafe(nil)); end

  def bind_attribute(name, value); end

  def build(attributes=T.unsafe(nil), &block); end

  def cache_key(timestamp_column=T.unsafe(nil)); end

  def cache_key_with_version(); end

  def cache_version(timestamp_column=T.unsafe(nil)); end

  def create(attributes=T.unsafe(nil), &block); end

  def create!(attributes=T.unsafe(nil), &block); end

  def create_or_find_by(attributes, &block); end

  def create_or_find_by!(attributes, &block); end

  def delete_by(*args); end

  def destroy_all(); end

  def destroy_by(*args); end

  def eager_loading?(); end

  def empty_scope?(); end

  def encode_with(coder); end

  def explain(); end

  def find_or_create_by(attributes, &block); end

  def find_or_create_by!(attributes, &block); end

  def find_or_initialize_by(attributes, &block); end

  def first_or_create(attributes=T.unsafe(nil), &block); end

  def first_or_create!(attributes=T.unsafe(nil), &block); end

  def first_or_initialize(attributes=T.unsafe(nil), &block); end

  def has_limit_or_offset?(); end

  def initialize(klass, table: T.unsafe(nil), predicate_builder: T.unsafe(nil), values: T.unsafe(nil)); end

  def joined_includes_values(); end

  def klass(); end

  def load(&block); end

  def load_async(); end

  def load_records(records); end

  def loaded(); end

  def loaded?(); end

  def locked?(); end

  def model(); end

  def new(attributes=T.unsafe(nil), &block); end

  def null_relation?(); end

  def predicate_builder(); end

  def preload_associations(records); end

  def records(); end

  def reload(); end

  def reset(); end

  def scheduled?(); end

  def scope_for_create(); end

  def scoping(all_queries: T.unsafe(nil), &block); end

  def skip_preloading_value(); end

  def skip_preloading_value=(skip_preloading_value); end

  def table(); end

  def to_a(); end

  def to_ary(); end

  def to_sql(); end

  def touch_all(*names, time: T.unsafe(nil)); end

  def update(id=T.unsafe(nil), attributes); end

  def update!(id=T.unsafe(nil), attributes); end

  def update_all(updates); end

  def update_counters(counters); end

  def values(); end

  def values_for_queries(); end

  def where_values_hash(relation_table_name=T.unsafe(nil)); end
  CLAUSE_METHODS = ::T.let(nil, ::T.untyped)
  INVALID_METHODS_FOR_DELETE_ALL = ::T.let(nil, ::T.untyped)
  MULTI_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  SINGLE_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALUE_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::FromClause
  def ==(other); end

  def empty?(); end

  def initialize(value, name); end

  def merge(other); end

  def name(); end

  def value(); end
end

class ActiveRecord::Relation::FromClause
  def self.empty(); end
end

class ActiveRecord::Relation::HashMerger
  def initialize(relation, hash, rewhere=T.unsafe(nil)); end

  def merge(); end

  def other(); end

  def relation(); end
end

class ActiveRecord::Relation::HashMerger
end

class ActiveRecord::Relation::Merger
  def initialize(relation, other, rewhere=T.unsafe(nil)); end

  def merge(); end

  def other(); end

  def relation(); end

  def values(); end
  NORMAL_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::Merger
end

class ActiveRecord::Relation::QueryAttribute
  def infinite?(); end

  def type_cast(value); end

  def unboundable?(); end
end

class ActiveRecord::Relation::QueryAttribute
end

class ActiveRecord::Relation::StrictLoadingScope
end

class ActiveRecord::Relation::StrictLoadingScope
  def self.empty_scope?(); end

  def self.strict_loading_value(); end
end

class ActiveRecord::Relation::WhereClause
  def +(other); end

  def -(other); end

  def ==(other); end

  def any?(*arg, **arg1, &arg2); end

  def ast(); end

  def contradiction?(); end

  def empty?(*arg, **arg1, &arg2); end

  def eql?(other); end

  def except(*columns); end

  def extract_attributes(); end

  def initialize(predicates); end

  def invert(); end

  def merge(other, rewhere=T.unsafe(nil)); end

  def or(other); end

  def predicates(); end

  def referenced_columns(); end

  def to_h(table_name=T.unsafe(nil), equality_only: T.unsafe(nil)); end

  def |(other); end
  ARRAY_WITH_EMPTY_STRING = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::WhereClause
  def self.empty(); end
end

class ActiveRecord::Relation
  extend ::ActiveRecord::Delegation::ClassMethods
end

class ActiveRecord::Result
  def [](idx); end

  def cancel(); end

  def cast_values(type_overrides=T.unsafe(nil)); end

  def column_types(); end

  def columns(); end

  def each(&block); end

  def empty?(); end

  def includes_column?(name); end

  def initialize(columns, rows, column_types=T.unsafe(nil)); end

  def last(n=T.unsafe(nil)); end

  def length(); end

  def result(); end

  def rows(); end

  def to_a(); end

  def to_ary(); end
end

class ActiveRecord::Result
  def self.empty(); end
end

module ActiveRecord::RuntimeRegistry
  def sql_runtime(); end

  def sql_runtime=(runtime); end
end

module ActiveRecord::RuntimeRegistry
  extend ::ActiveRecord::RuntimeRegistry
end

module ActiveRecord::Sanitization
  extend ::ActiveSupport::Concern
end

class ActiveRecord::Schema
  include ::ActiveRecord::Schema::Definition
end

module ActiveRecord::Schema::Definition
  def define(info, &block); end
end

module ActiveRecord::Schema::Definition::ClassMethods
  def define(info=T.unsafe(nil), &block); end
end

module ActiveRecord::Schema::Definition::ClassMethods
end

module ActiveRecord::Schema::Definition
  extend ::ActiveSupport::Concern
end

class ActiveRecord::Schema
  extend ::ActiveRecord::Schema::Definition::ClassMethods
end

class ActiveRecord::SchemaDumper
  def chk_ignore_pattern(); end

  def chk_ignore_pattern=(val); end

  def dump(stream); end

  def fk_ignore_pattern(); end

  def fk_ignore_pattern=(val); end

  def ignore_tables(); end

  def ignore_tables=(val); end

  def initialize(connection, options=T.unsafe(nil)); end
end

class ActiveRecord::SchemaDumper
  def self.chk_ignore_pattern(); end

  def self.chk_ignore_pattern=(val); end

  def self.dump(connection=T.unsafe(nil), stream=T.unsafe(nil), config=T.unsafe(nil)); end

  def self.fk_ignore_pattern(); end

  def self.fk_ignore_pattern=(val); end

  def self.ignore_tables(); end

  def self.ignore_tables=(val); end
end

class ActiveRecord::SchemaMigration
  include ::ActiveRecord::SchemaMigration::GeneratedAttributeMethods
  include ::ActiveRecord::SchemaMigration::GeneratedAssociationMethods
  def version(); end
end

module ActiveRecord::SchemaMigration::GeneratedAssociationMethods
end

module ActiveRecord::SchemaMigration::GeneratedAssociationMethods
end

module ActiveRecord::SchemaMigration::GeneratedAttributeMethods
end

module ActiveRecord::SchemaMigration::GeneratedAttributeMethods
  extend ::Mutex_m
end

class ActiveRecord::SchemaMigration
  def self.all_versions(); end

  def self.create_table(); end

  def self.drop_table(); end

  def self.normalize_migration_number(number); end

  def self.normalized_versions(); end
end

module ActiveRecord::Scoping
  def initialize_internals_callback(); end

  def populate_with_current_scope_attributes(); end
end

module ActiveRecord::Scoping::Default
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Scoping::Named
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Scoping
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
end

module ActiveRecord::SecureToken
  MINIMUM_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Serialization
  def serializable_hash(options=T.unsafe(nil)); end
end

module ActiveRecord::Serialization
  extend ::ActiveSupport::Concern
end

module ActiveRecord::SignedId
  def signed_id(expires_in: T.unsafe(nil), purpose: T.unsafe(nil)); end
end

module ActiveRecord::SignedId
  extend ::ActiveSupport::Concern
end

class ActiveRecord::SoleRecordExceeded
  def initialize(record=T.unsafe(nil)); end

  def record(); end
end

class ActiveRecord::SoleRecordExceeded
end

module ActiveRecord::SpawnMethods
  def except(*skips); end

  def merge(other, *rest); end

  def merge!(other, *rest); end

  def only(*onlies); end

  def spawn(); end
end

class ActiveRecord::StaleObjectError
  def attempted_action(); end

  def initialize(record=T.unsafe(nil), attempted_action=T.unsafe(nil)); end

  def record(); end
end

class ActiveRecord::StatementCache
  def execute(params, connection, &block); end

  def initialize(query_builder, bind_map, klass); end
end

class ActiveRecord::StatementCache::BindMap
  def bind(values); end

  def initialize(bound_attributes); end
end

class ActiveRecord::StatementCache::BindMap
end

class ActiveRecord::StatementCache::Params
  def bind(); end
end

class ActiveRecord::StatementCache::Params
end

class ActiveRecord::StatementCache::PartialQuery
  def initialize(values); end
end

class ActiveRecord::StatementCache::PartialQuery
end

class ActiveRecord::StatementCache::PartialQueryCollector
  def <<(str); end

  def add_bind(obj); end

  def add_binds(binds, proc_for_binds=T.unsafe(nil)); end

  def preparable(); end

  def preparable=(preparable); end

  def value(); end
end

class ActiveRecord::StatementCache::PartialQueryCollector
end

class ActiveRecord::StatementCache::Query
  def initialize(sql); end

  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Query
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache
  def self.create(connection, callable=T.unsafe(nil), &block); end

  def self.partial_query(values); end

  def self.partial_query_collector(); end

  def self.query(sql); end

  def self.unsupported_value?(value); end
end

class ActiveRecord::StatementInvalid
  def binds(); end

  def initialize(message=T.unsafe(nil), sql: T.unsafe(nil), binds: T.unsafe(nil)); end

  def sql(); end
end

module ActiveRecord::Store
  extend ::ActiveSupport::Concern
end

class ActiveRecord::StrictLoadingViolationError
end

class ActiveRecord::StrictLoadingViolationError
end

module ActiveRecord::Suppressor
  def self.registry(); end
end

class ActiveRecord::TableMetadata
  def aggregated_with?(aggregation_name); end

  def arel_table(); end

  def associated_table(table_name); end

  def associated_with?(table_name); end

  def has_column?(column_name); end

  def initialize(klass, arel_table, reflection=T.unsafe(nil)); end

  def join_foreign_key(*arg, **arg1, &arg2); end

  def join_foreign_type(*arg, **arg1, &arg2); end

  def join_primary_key(*arg, **arg1, &arg2); end

  def polymorphic_association?(); end

  def predicate_builder(); end

  def primary_key(); end

  def reflect_on_aggregation(aggregation_name); end

  def through_association?(); end

  def type(column_name); end
end

class ActiveRecord::TableMetadata
end

class ActiveRecord::TableNotSpecified
end

class ActiveRecord::TableNotSpecified
end

class ActiveRecord::Tasks::DatabaseNotSupported
end

class ActiveRecord::Tasks::DatabaseNotSupported
end

module ActiveRecord::Tasks::DatabaseTasks
  def cache_dump_filename(db_config_name, schema_cache_path: T.unsafe(nil)); end

  def charset(configuration, *arguments); end

  def charset_current(env_name=T.unsafe(nil), db_name=T.unsafe(nil)); end

  def check_protected_environments!(); end

  def check_schema_file(filename); end

  def check_target_version(); end

  def clear_schema_cache(filename); end

  def collation(configuration, *arguments); end

  def collation_current(env_name=T.unsafe(nil), db_name=T.unsafe(nil)); end

  def create(configuration, *arguments); end

  def create_all(); end

  def create_current(environment=T.unsafe(nil), name=T.unsafe(nil)); end

  def database_configuration(); end

  def database_configuration=(database_configuration); end

  def db_configs_with_versions(db_configs); end

  def db_dir(); end

  def db_dir=(db_dir); end

  def drop(configuration, *arguments); end

  def drop_all(); end

  def drop_current(environment=T.unsafe(nil)); end

  def dump_schema(db_config, format=T.unsafe(nil)); end

  def dump_schema_cache(conn, filename); end

  def env(); end

  def env=(env); end

  def fixtures_path(); end

  def fixtures_path=(fixtures_path); end

  def for_each(databases); end

  def load_schema(db_config, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def load_schema_current(format=T.unsafe(nil), file=T.unsafe(nil), environment=T.unsafe(nil)); end

  def load_seed(); end

  def migrate(version=T.unsafe(nil)); end

  def migrate_status(); end

  def migrations_paths(); end

  def migrations_paths=(migrations_paths); end

  def name(); end

  def prepare_all(); end

  def purge(configuration); end

  def purge_all(); end

  def purge_current(environment=T.unsafe(nil)); end

  def raise_for_multi_db(environment=T.unsafe(nil), command:); end

  def reconstruct_from_schema(db_config, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def register_task(pattern, task); end

  def root(); end

  def root=(root); end

  def schema_dump_path(db_config, format=T.unsafe(nil)); end

  def schema_file_type(*args, **arg, &block); end

  def schema_up_to_date?(configuration, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def seed_loader(); end

  def seed_loader=(seed_loader); end

  def setup_initial_database_yaml(); end

  def structure_dump(configuration, *arguments); end

  def structure_load(configuration, *arguments); end

  def target_version(); end

  def truncate_all(environment=T.unsafe(nil)); end
end

module ActiveRecord::Tasks::DatabaseTasks
  def self.structure_dump_flags(); end

  def self.structure_dump_flags=(val); end

  def self.structure_load_flags(); end

  def self.structure_load_flags=(val); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def charset(); end

  def collation(); end

  def connection(*arg, **arg1, &arg2); end

  def create(); end

  def drop(); end

  def establish_connection(*arg, **arg1, &arg2); end

  def initialize(db_config); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  ER_DB_CREATE_EXISTS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def self.using_database_configurations?(); end
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  include ::Patches::ActiveRecord::PostgresqlDropDatabase
  def charset(); end

  def clear_active_connections!(*arg, **arg1, &arg2); end

  def collation(); end

  def connection(*arg, **arg1, &arg2); end

  def create(master_established=T.unsafe(nil)); end

  def establish_connection(*arg, **arg1, &arg2); end

  def initialize(db_config); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
  ON_ERROR_STOP_1 = ::T.let(nil, ::T.untyped)
  SQL_COMMENT_BEGIN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def self.using_database_configurations?(); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def charset(); end

  def connection(*arg, **arg1, &arg2); end

  def create(); end

  def drop(); end

  def establish_connection(*arg, **arg1, &arg2); end

  def initialize(db_config, root=T.unsafe(nil)); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def self.using_database_configurations?(); end
end

module ActiveRecord::Tasks
  extend ::ActiveSupport::Autoload
end

module ActiveRecord::TestDatabases
end

module ActiveRecord::TestDatabases
  def self.create_and_load_schema(i, env_name:); end
end

module ActiveRecord::TestFixtures
  def after_teardown(); end

  def before_setup(); end

  def enlist_fixture_connections(); end

  def run_in_transaction?(); end

  def setup_fixtures(config=T.unsafe(nil)); end

  def teardown_fixtures(); end
end

module ActiveRecord::TestFixtures::ClassMethods
  def fixtures(*fixture_set_names); end

  def set_fixture_class(class_names=T.unsafe(nil)); end

  def setup_fixture_accessors(fixture_set_names=T.unsafe(nil)); end

  def uses_transaction(*methods); end

  def uses_transaction?(method); end
end

module ActiveRecord::TestFixtures::ClassMethods
end

module ActiveRecord::TestFixtures
  extend ::ActiveSupport::Concern
end

class ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection
  def initialize(owner=T.unsafe(nil), reflection=T.unsafe(nil)); end
end

class ActiveRecord::ThroughNestedAssociationsAreReadonly
  def initialize(owner=T.unsafe(nil), reflection=T.unsafe(nil)); end
end

module ActiveRecord::Timestamp
  extend ::ActiveSupport::Concern
end

module ActiveRecord::TouchLater
  def before_committed!(); end
end

module ActiveRecord::Transactions
  def before_committed!(); end

  def committed!(should_run_callbacks: T.unsafe(nil)); end

  def destroy(); end

  def rolledback!(force_restore_state: T.unsafe(nil), should_run_callbacks: T.unsafe(nil)); end

  def save(**arg); end

  def save!(**arg); end

  def touch(*arg, **arg1); end

  def transaction(**options, &block); end

  def trigger_transactional_callbacks?(); end

  def with_transaction_returning_status(); end
  ACTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Transactions
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Translation
  include ::ActiveModel::Translation
  include ::ActiveModel::Naming
  def i18n_scope(); end

  def lookup_ancestors(); end
end

class ActiveRecord::Type::AdapterSpecificRegistry
  def add_modifier(options, klass, **args); end

  def lookup(symbol, *args, **kwargs); end

  def register(type_name, klass=T.unsafe(nil), **options, &block); end
end

class ActiveRecord::Type::AdapterSpecificRegistry
end

class ActiveRecord::Type::Date
  include ::ActiveRecord::Type::Internal::Timezone
end

class ActiveRecord::Type::Date
end

class ActiveRecord::Type::DateTime
  include ::ActiveRecord::Type::Internal::Timezone
end

class ActiveRecord::Type::DateTime
end

class ActiveRecord::Type::DecimalWithoutScale
end

class ActiveRecord::Type::DecimalWithoutScale
end

class ActiveRecord::Type::DecorationRegistration
  def call(registry, *args, **kwargs); end

  def initialize(options, klass, adapter: T.unsafe(nil)); end

  def matches?(*args, **kwargs); end
end

class ActiveRecord::Type::DecorationRegistration
end

class ActiveRecord::Type::HashLookupTypeMap
  def alias_type(type, alias_type); end

  def clear(); end

  def fetch(lookup_key, *args, &block); end

  def initialize(parent=T.unsafe(nil)); end

  def key?(key); end

  def keys(); end

  def lookup(lookup_key, *args); end

  def register_type(key, value=T.unsafe(nil), &block); end
end

class ActiveRecord::Type::HashLookupTypeMap
end

ActiveRecord::Type::ImmutableString = ActiveModel::Type::ImmutableString

module ActiveRecord::Type::Internal
end

module ActiveRecord::Type::Internal::Timezone
  def default_timezone(); end

  def is_utc?(); end
end

module ActiveRecord::Type::Internal::Timezone
end

module ActiveRecord::Type::Internal
end

class ActiveRecord::Type::Json
  include ::ActiveModel::Type::Helpers::Mutable
  def accessor(); end
end

class ActiveRecord::Type::Json
end

class ActiveRecord::Type::Registration
  def adapter(); end

  def block(); end

  def call(_registry, *args, adapter: T.unsafe(nil), **kwargs); end

  def initialize(name, block, adapter: T.unsafe(nil), override: T.unsafe(nil)); end

  def matches?(type_name, *args, **kwargs); end

  def name(); end

  def override(); end

  def priority(); end

  def priority_except_adapter(); end
end

class ActiveRecord::Type::Registration
end

class ActiveRecord::Type::Serialized
  include ::ActiveModel::Type::Helpers::Mutable
  def accessor(); end

  def assert_valid_value(value); end

  def changed_in_place?(raw_old_value, value); end

  def coder(); end

  def deserialize(value); end

  def force_equality?(value); end

  def initialize(subtype, coder); end

  def serialize(value); end

  def subtype(); end

  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Type::Serialized
end

class ActiveRecord::Type::Text
end

class ActiveRecord::Type::Text
end

class ActiveRecord::Type::Time
  include ::ActiveRecord::Type::Internal::Timezone
end

class ActiveRecord::Type::Time::Value
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Type::Time::Value
end

class ActiveRecord::Type::Time
end

class ActiveRecord::Type::TypeMap
  def alias_type(key, target_key); end

  def fetch(lookup_key, &block); end

  def initialize(parent=T.unsafe(nil)); end

  def lookup(lookup_key); end

  def perform_fetch(lookup_key, &block); end

  def register_type(key, value=T.unsafe(nil), &block); end
end

class ActiveRecord::Type::TypeMap
end

class ActiveRecord::Type::UnsignedInteger
end

class ActiveRecord::Type::UnsignedInteger
end

module ActiveRecord::Type
  def self.adapter_name_from(model); end

  def self.add_modifier(*arg, **arg1, &arg2); end

  def self.default_value(); end

  def self.lookup(*args, adapter: T.unsafe(nil), **kwargs); end

  def self.register(type_name, klass=T.unsafe(nil), **options, &block); end

  def self.registry(); end

  def self.registry=(registry); end
end

module ActiveRecord::TypeCaster
end

class ActiveRecord::TypeCaster::Connection
  def initialize(klass, table_name); end

  def type_cast_for_database(attr_name, value); end

  def type_for_attribute(attr_name); end
end

class ActiveRecord::TypeCaster::Connection
end

class ActiveRecord::TypeCaster::Map
  def initialize(klass); end

  def type_cast_for_database(attr_name, value); end

  def type_for_attribute(name); end
end

class ActiveRecord::TypeCaster::Map
end

module ActiveRecord::TypeCaster
end

class ActiveRecord::UnknownMigrationVersionError
  def initialize(version=T.unsafe(nil)); end
end

class ActiveRecord::UnknownPrimaryKey
  def initialize(model=T.unsafe(nil), description=T.unsafe(nil)); end

  def model(); end
end

module ActiveRecord::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::VERSION
end

module ActiveRecord::Validations
  def save(**options); end

  def save!(**options); end

  def valid?(context=T.unsafe(nil)); end

  def validate(context=T.unsafe(nil)); end
end

module ActiveRecord::Validations
  extend ::ActiveSupport::Concern
end

module ActiveRecord
  extend ::ActiveSupport::Autoload
  def self.action_on_strict_loading_violation(); end

  def self.action_on_strict_loading_violation=(action_on_strict_loading_violation); end

  def self.application_record_class(); end

  def self.application_record_class=(application_record_class); end

  def self.async_query_executor(); end

  def self.async_query_executor=(async_query_executor); end

  def self.default_timezone(); end

  def self.default_timezone=(default_timezone); end

  def self.dump_schema_after_migration(); end

  def self.dump_schema_after_migration=(dump_schema_after_migration); end

  def self.dump_schemas(); end

  def self.dump_schemas=(dump_schemas); end

  def self.error_on_ignored_order(); end

  def self.error_on_ignored_order=(error_on_ignored_order); end

  def self.gem_version(); end

  def self.global_executor_concurrency(); end

  def self.global_executor_concurrency=(global_executor_concurrency); end

  def self.global_thread_pool_async_query_executor(); end

  def self.index_nested_attribute_errors(); end

  def self.index_nested_attribute_errors=(index_nested_attribute_errors); end

  def self.lazily_load_schema_cache(); end

  def self.lazily_load_schema_cache=(lazily_load_schema_cache); end

  def self.legacy_connection_handling(); end

  def self.legacy_connection_handling=(legacy_connection_handling); end

  def self.maintain_test_schema(); end

  def self.maintain_test_schema=(maintain_test_schema); end

  def self.query_transformers(); end

  def self.query_transformers=(query_transformers); end

  def self.queues(); end

  def self.queues=(queues); end

  def self.reading_role(); end

  def self.reading_role=(reading_role); end

  def self.schema_cache_ignored_tables(); end

  def self.schema_cache_ignored_tables=(schema_cache_ignored_tables); end

  def self.schema_format(); end

  def self.schema_format=(schema_format); end

  def self.suppress_multiple_database_warning(); end

  def self.suppress_multiple_database_warning=(suppress_multiple_database_warning); end

  def self.timestamped_migrations(); end

  def self.timestamped_migrations=(timestamped_migrations); end

  def self.verbose_query_logs(); end

  def self.verbose_query_logs=(verbose_query_logs); end

  def self.verify_foreign_keys_for_fixtures(); end

  def self.verify_foreign_keys_for_fixtures=(verify_foreign_keys_for_fixtures); end

  def self.version(); end

  def self.warn_on_records_fetched_greater_than(); end

  def self.warn_on_records_fetched_greater_than=(warn_on_records_fetched_greater_than); end

  def self.writing_role(); end

  def self.writing_role=(writing_role); end
end

module ActiveStorage
  def analyzers(); end

  def analyzers=(val); end

  def binary_content_type(); end

  def binary_content_type=(val); end

  def content_types_allowed_inline(); end

  def content_types_allowed_inline=(val); end

  def content_types_to_serve_as_binary(); end

  def content_types_to_serve_as_binary=(val); end

  def draw_routes(); end

  def draw_routes=(val); end

  def logger(); end

  def logger=(val); end

  def paths(); end

  def paths=(val); end

  def previewers(); end

  def previewers=(val); end

  def queues(); end

  def queues=(val); end

  def replace_on_assign_to_many(); end

  def replace_on_assign_to_many=(val); end

  def resolve_model_to_route(); end

  def resolve_model_to_route=(val); end

  def routes_prefix(); end

  def routes_prefix=(val); end

  def service_urls_expire_in(); end

  def service_urls_expire_in=(val); end

  def silence_invalid_content_types_warning(); end

  def silence_invalid_content_types_warning=(val); end

  def supported_image_processing_methods(); end

  def supported_image_processing_methods=(val); end

  def track_variants(); end

  def track_variants=(val); end

  def unsupported_image_processing_arguments(); end

  def unsupported_image_processing_arguments=(val); end

  def urls_expire_in(); end

  def urls_expire_in=(val); end

  def variable_content_types(); end

  def variable_content_types=(val); end

  def variant_processor(); end

  def variant_processor=(val); end

  def verifier(); end

  def verifier=(val); end

  def video_preview_arguments(); end

  def video_preview_arguments=(val); end

  def web_image_content_types(); end

  def web_image_content_types=(val); end
end

class ActiveStorage::AnalyzeJob
  def perform(blob); end
end

class ActiveStorage::AnalyzeJob
end

class ActiveStorage::Analyzer
  def blob(); end

  def initialize(blob); end

  def metadata(); end
end

class ActiveStorage::Analyzer::AudioAnalyzer
end

class ActiveStorage::Analyzer::AudioAnalyzer
end

class ActiveStorage::Analyzer::ImageAnalyzer
end

class ActiveStorage::Analyzer::ImageAnalyzer::ImageMagick
end

class ActiveStorage::Analyzer::ImageAnalyzer::ImageMagick
end

class ActiveStorage::Analyzer::ImageAnalyzer::Vips
  ROTATIONS = ::T.let(nil, ::T.untyped)
end

class ActiveStorage::Analyzer::ImageAnalyzer::Vips
end

class ActiveStorage::Analyzer::ImageAnalyzer
end

class ActiveStorage::Analyzer::NullAnalyzer
end

class ActiveStorage::Analyzer::NullAnalyzer
end

class ActiveStorage::Analyzer::VideoAnalyzer
end

class ActiveStorage::Analyzer::VideoAnalyzer
end

class ActiveStorage::Analyzer
  def self.accept?(blob); end

  def self.analyze_later?(); end
end

class ActiveStorage::Attached
  include ::Lockbox::ActiveStorageExtensions::Attached
  def initialize(name, record); end

  def name(); end

  def record(); end
end

module ActiveStorage::Attached::Changes
end

class ActiveStorage::Attached::Changes::CreateMany
  def attachables(); end

  def attachments(); end

  def blobs(); end

  def initialize(name, record, attachables); end

  def name(); end

  def record(); end

  def save(); end

  def upload(); end
end

class ActiveStorage::Attached::Changes::CreateMany
end

class ActiveStorage::Attached::Changes::CreateOne
  include ::Lockbox::ActiveStorageExtensions::CreateOne
  def attachable(); end

  def attachment(); end

  def blob(); end

  def name(); end

  def record(); end

  def save(); end

  def upload(); end
end

class ActiveStorage::Attached::Changes::CreateOne
end

class ActiveStorage::Attached::Changes::CreateOneOfMany
end

class ActiveStorage::Attached::Changes::CreateOneOfMany
end

class ActiveStorage::Attached::Changes::DeleteMany
  def attachables(); end

  def attachments(); end

  def blobs(); end

  def initialize(name, record); end

  def name(); end

  def record(); end

  def save(); end
end

class ActiveStorage::Attached::Changes::DeleteMany
end

class ActiveStorage::Attached::Changes::DeleteOne
  def attachment(); end

  def initialize(name, record); end

  def name(); end

  def record(); end

  def save(); end
end

class ActiveStorage::Attached::Changes::DeleteOne
end

class ActiveStorage::Attached::Changes::DetachMany
  def attachments(); end

  def detach(); end

  def initialize(name, record, attachments); end

  def name(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::DetachMany
end

class ActiveStorage::Attached::Changes::DetachOne
  def attachment(); end

  def detach(); end

  def initialize(name, record, attachment); end

  def name(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::DetachOne
end

class ActiveStorage::Attached::Changes::PurgeMany
  def attachments(); end

  def initialize(name, record, attachments); end

  def name(); end

  def purge(); end

  def purge_later(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::PurgeMany
end

class ActiveStorage::Attached::Changes::PurgeOne
  def attachment(); end

  def initialize(name, record, attachment); end

  def name(); end

  def purge(); end

  def purge_later(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::PurgeOne
end

module ActiveStorage::Attached::Changes
  extend ::ActiveSupport::Autoload
end

class ActiveStorage::Attached::Many
  include ::Lockbox::ActiveStorageExtensions::AttachedMany
  def method_missing(method, *args, **arg, &block); end
end

module ActiveStorage::Attached::Model
  def attachment_changes(); end

  def changed_for_autosave?(); end

  def reload(*arg); end
end

module ActiveStorage::Attached::Model
  extend ::ActiveSupport::Concern
end

class ActiveStorage::Attached::One
  include ::Lockbox::ActiveStorageExtensions::AttachedOne
  def method_missing(method, *args, **arg, &block); end
end

class ActiveStorage::Attachment
  include ::ActiveStorage::Attachment::GeneratedAttributeMethods
  include ::ActiveStorage::Attachment::GeneratedAssociationMethods
  include ::Lockbox::ActiveStorageExtensions::Attachment
  include ::SecondLevelCache::ActiveRecord::Core
  def autosave_associated_records_for_blob(*args); end

  def autosave_associated_records_for_record(*args); end

  def purge(); end

  def purge_later(); end

  def signed_id(*arg, **arg1, &arg2); end

  def validate_associated_records_for_blob(*args); end
end

module ActiveStorage::Attachment::GeneratedAssociationMethods
  def blob(); end

  def blob=(value); end

  def blob_changed?(); end

  def blob_previously_changed?(); end

  def build_blob(*args, &block); end

  def create_blob(*args, &block); end

  def create_blob!(*args, &block); end

  def record(); end

  def record=(value); end

  def record_changed?(); end

  def record_previously_changed?(); end

  def reload_blob(); end

  def reload_record(); end
end

module ActiveStorage::Attachment::GeneratedAssociationMethods
end

module ActiveStorage::Attachment::GeneratedAttributeMethods
end

module ActiveStorage::Attachment::GeneratedAttributeMethods
  extend ::Mutex_m
end

class ActiveStorage::Attachment
  def self.with_all_variant_records(*args, **arg); end
end

class ActiveStorage::BaseController
  include ::ActiveStorage::SetCurrent
end

class ActiveStorage::BaseController
end

class ActiveStorage::BaseJob
end

class ActiveStorage::BaseJob
end

class ActiveStorage::Blob
  include ::ActiveStorage::Blob::GeneratedAttributeMethods
  include ::ActiveStorage::Blob::GeneratedAssociationMethods
  include ::ActiveStorage::Blob::Analyzable
  include ::ActiveStorage::Blob::Identifiable
  include ::Lockbox::ActiveStorageExtensions::Blob
  include ::SecondLevelCache::ActiveRecord::Core
  def audio?(); end

  def autosave_associated_records_for_attachments(*args); end

  def autosave_associated_records_for_preview_image_attachment(*args); end

  def autosave_associated_records_for_preview_image_blob(*args); end

  def autosave_associated_records_for_variant_records(*args); end

  def compose(keys); end

  def content_type=(value); end

  def content_type_for_serving(); end

  def custom_metadata(); end

  def custom_metadata=(metadata); end

  def download(&block); end

  def download_chunk(range); end

  def filename(); end

  def forced_disposition_for_serving(); end

  def image?(); end

  def key(); end

  def mirror_later(); end

  def open(tmpdir: T.unsafe(nil), &block); end

  def purge(); end

  def purge_later(); end

  def real_url(params=T.unsafe(nil)); end

  def regenerate_key(); end

  def service(); end

  def service_headers_for_direct_upload(); end

  def service_url_for_direct_upload(expires_in: T.unsafe(nil)); end

  def services(); end

  def services=(services); end

  def services?(); end

  def signed_id(purpose: T.unsafe(nil), expires_in: T.unsafe(nil)); end

  def text?(); end

  def unfurl(io, identify: T.unsafe(nil)); end

  def upload(io, identify: T.unsafe(nil)); end

  def upload_without_unfurling(io); end

  def url(expires_in: T.unsafe(nil), disposition: T.unsafe(nil), filename: T.unsafe(nil), **options); end

  def validate_associated_records_for_attachments(*args); end

  def validate_associated_records_for_variant_records(*args); end

  def video?(); end
  INVALID_VARIABLE_CONTENT_TYPES_DEPRECATED_IN_RAILS_7 = ::T.let(nil, ::T.untyped)
  INVALID_VARIABLE_CONTENT_TYPES_TO_SERVE_AS_BINARY_DEPRECATED_IN_RAILS_7 = ::T.let(nil, ::T.untyped)
  MINIMUM_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
end

module ActiveStorage::Blob::Analyzable
  def analyze(); end

  def analyze_later(); end

  def analyzed?(); end
end

module ActiveStorage::Blob::Analyzable
end

module ActiveStorage::Blob::GeneratedAssociationMethods
  def attachment_ids(); end

  def attachment_ids=(ids); end

  def attachments(); end

  def attachments=(value); end

  def build_preview_image_attachment(*args, &block); end

  def build_preview_image_blob(*args, &block); end

  def create_preview_image_attachment(*args, &block); end

  def create_preview_image_attachment!(*args, &block); end

  def create_preview_image_blob(*args, &block); end

  def create_preview_image_blob!(*args, &block); end

  def preview_image(); end

  def preview_image=(attachable); end

  def preview_image_attachment(); end

  def preview_image_attachment=(value); end

  def preview_image_blob(); end

  def preview_image_blob=(value); end

  def reload_preview_image_attachment(); end

  def reload_preview_image_blob(); end

  def variant_record_ids(); end

  def variant_record_ids=(ids); end

  def variant_records(); end

  def variant_records=(value); end
end

module ActiveStorage::Blob::GeneratedAssociationMethods
end

module ActiveStorage::Blob::GeneratedAttributeMethods
end

module ActiveStorage::Blob::GeneratedAttributeMethods
  extend ::Mutex_m
end

module ActiveStorage::Blob::Identifiable
  def identified?(); end

  def identify(); end

  def identify_without_saving(); end
end

module ActiveStorage::Blob::Identifiable
end

module ActiveStorage::Blob::Representable
  def preview(transformations); end

  def previewable?(); end

  def representable?(); end

  def representation(transformations); end

  def variable?(); end
end

module ActiveStorage::Blob::Representable
  extend ::ActiveSupport::Concern
end

class ActiveStorage::Blob
  def self.build_after_unfurling(io:, filename:, key: T.unsafe(nil), content_type: T.unsafe(nil), metadata: T.unsafe(nil), service_name: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end

  def self.compose(blobs, filename:, content_type: T.unsafe(nil), metadata: T.unsafe(nil)); end

  def self.create_after_unfurling!(io:, filename:, key: T.unsafe(nil), content_type: T.unsafe(nil), metadata: T.unsafe(nil), service_name: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end

  def self.create_and_upload!(io:, filename:, key: T.unsafe(nil), content_type: T.unsafe(nil), metadata: T.unsafe(nil), service_name: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end

  def self.create_before_direct_upload!(filename:, byte_size:, checksum:, key: T.unsafe(nil), content_type: T.unsafe(nil), metadata: T.unsafe(nil), service_name: T.unsafe(nil), record: T.unsafe(nil)); end

  def self.find_signed(id, record: T.unsafe(nil), purpose: T.unsafe(nil)); end

  def self.find_signed!(id, record: T.unsafe(nil), purpose: T.unsafe(nil)); end

  def self.scope_for_strict_loading(); end

  def self.service(); end

  def self.service=(value); end

  def self.service?(); end

  def self.services(); end

  def self.services=(value); end

  def self.services?(); end

  def self.unattached(*args, **arg); end

  def self.with_attached_preview_image(*args, **arg); end
end

module ActiveStorage::Blobs
end

class ActiveStorage::Blobs::ProxyController
  include ::ActiveStorage::SetBlob
  include ::ActiveStorage::Streaming
  include ::ActionController::Live
  def show(); end
end

class ActiveStorage::Blobs::ProxyController
end

class ActiveStorage::Blobs::RedirectController
  include ::ActiveStorage::SetBlob
  def show(); end
end

class ActiveStorage::Blobs::RedirectController
end

module ActiveStorage::Blobs
end

class ActiveStorage::Current
  def host(); end

  def host=(host); end
end

class ActiveStorage::Current
  def self.url_options(); end

  def self.url_options=(value); end
end

class ActiveStorage::DirectUploadsController
  def create(); end
end

class ActiveStorage::DirectUploadsController
end

class ActiveStorage::DiskController
  include ::ActiveStorage::FileServer
  def show(); end

  def update(); end
end

class ActiveStorage::DiskController
end

class ActiveStorage::Downloader
  def initialize(service); end

  def open(key, checksum: T.unsafe(nil), verify: T.unsafe(nil), name: T.unsafe(nil), tmpdir: T.unsafe(nil)); end

  def service(); end
end

class ActiveStorage::Downloader
end

class ActiveStorage::Engine
end

class ActiveStorage::Engine
end

class ActiveStorage::Error
end

class ActiveStorage::Error
end

class ActiveStorage::FileNotFoundError
end

class ActiveStorage::FileNotFoundError
end

module ActiveStorage::FileServer
end

module ActiveStorage::FileServer
end

class ActiveStorage::Filename
  include ::Comparable
  def as_json(*arg); end

  def base(); end

  def extension(); end

  def extension_with_delimiter(); end

  def extension_without_delimiter(); end

  def initialize(filename); end

  def sanitized(); end

  def to_json(); end
end

class ActiveStorage::Filename
  def self.wrap(filename); end
end

class ActiveStorage::FixtureSet
  include ::ActiveSupport::Testing::FileFixtures
  include ::ActiveRecord::SecureToken
  def file_fixture_path(); end

  def file_fixture_path?(); end

  def prepare(instance, **attributes); end
end

class ActiveStorage::FixtureSet
  def self.blob(filename:, **attributes); end

  def self.file_fixture_path(); end

  def self.file_fixture_path=(value); end

  def self.file_fixture_path?(); end
end

class ActiveStorage::IntegrityError
end

class ActiveStorage::IntegrityError
end

class ActiveStorage::InvariableError
end

class ActiveStorage::InvariableError
end

class ActiveStorage::LogSubscriber
  def service_delete(event); end

  def service_delete_prefixed(event); end

  def service_download(event); end

  def service_exist(event); end

  def service_mirror(event); end

  def service_streaming_download(event); end

  def service_upload(event); end

  def service_url(event); end
end

class ActiveStorage::LogSubscriber
end

class ActiveStorage::MirrorJob
  def perform(key, checksum:); end
end

class ActiveStorage::MirrorJob
end

class ActiveStorage::Preview
  def blob(); end

  def download(&block); end

  def image(); end

  def initialize(blob, variation_or_variation_key); end

  def key(); end

  def processed(); end

  def url(**options); end

  def variation(); end
end

class ActiveStorage::Preview::UnprocessedError
end

class ActiveStorage::Preview::UnprocessedError
end

class ActiveStorage::Preview
end

class ActiveStorage::PreviewError
end

class ActiveStorage::PreviewError
end

class ActiveStorage::Previewer
  def blob(); end

  def initialize(blob); end

  def preview(**options); end
end

class ActiveStorage::Previewer::MuPDFPreviewer
end

class ActiveStorage::Previewer::MuPDFPreviewer
  def self.mutool_exists?(); end

  def self.mutool_path(); end
end

class ActiveStorage::Previewer::PopplerPDFPreviewer
end

class ActiveStorage::Previewer::PopplerPDFPreviewer
  def self.pdftoppm_exists?(); end

  def self.pdftoppm_path(); end
end

class ActiveStorage::Previewer::VideoPreviewer
end

class ActiveStorage::Previewer::VideoPreviewer
  def self.ffmpeg_exists?(); end

  def self.ffmpeg_path(); end
end

class ActiveStorage::Previewer
  def self.accept?(blob); end
end

class ActiveStorage::PurgeJob
  def perform(blob); end
end

class ActiveStorage::PurgeJob
end

class ActiveStorage::Record
  include ::ActiveStorage::Record::GeneratedAttributeMethods
  include ::ActiveStorage::Record::GeneratedAssociationMethods
end

module ActiveStorage::Record::GeneratedAssociationMethods
end

module ActiveStorage::Record::GeneratedAssociationMethods
end

module ActiveStorage::Record::GeneratedAttributeMethods
end

module ActiveStorage::Record::GeneratedAttributeMethods
  extend ::Mutex_m
end

class ActiveStorage::Record
end

module ActiveStorage::Reflection
end

module ActiveStorage::Reflection::ActiveRecordExtensions
end

module ActiveStorage::Reflection::ActiveRecordExtensions
  extend ::ActiveSupport::Concern
end

class ActiveStorage::Reflection::HasAttachedReflection
  def variant(name, transformations); end

  def variants(); end
end

class ActiveStorage::Reflection::HasAttachedReflection
end

class ActiveStorage::Reflection::HasManyAttachedReflection
  def macro(); end
end

class ActiveStorage::Reflection::HasManyAttachedReflection
end

class ActiveStorage::Reflection::HasOneAttachedReflection
  def macro(); end
end

class ActiveStorage::Reflection::HasOneAttachedReflection
end

module ActiveStorage::Reflection::ReflectionExtension
  def add_attachment_reflection(model, name, reflection); end
end

module ActiveStorage::Reflection::ReflectionExtension
end

module ActiveStorage::Reflection
end

module ActiveStorage::Representations
end

class ActiveStorage::Representations::BaseController
  include ::ActiveStorage::SetBlob
end

class ActiveStorage::Representations::BaseController
end

class ActiveStorage::Representations::ProxyController
  include ::ActiveStorage::Streaming
  include ::ActionController::Live
  def show(); end
end

class ActiveStorage::Representations::ProxyController
end

class ActiveStorage::Representations::RedirectController
  def show(); end
end

class ActiveStorage::Representations::RedirectController
end

module ActiveStorage::Representations
end

class ActiveStorage::Service
  def compose(source_keys, destination_key, filename: T.unsafe(nil), content_type: T.unsafe(nil), disposition: T.unsafe(nil), custom_metadata: T.unsafe(nil)); end

  def delete(key); end

  def delete_prefixed(prefix); end

  def download(key); end

  def download_chunk(key, range); end

  def exist?(key); end

  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:, custom_metadata: T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def open(*args, **options, &block); end

  def public?(); end

  def update_metadata(key, **metadata); end

  def upload(key, io, checksum: T.unsafe(nil), **options); end

  def url(key, **options); end

  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:, custom_metadata: T.unsafe(nil)); end
end

class ActiveStorage::Service::Configurator
  def build(service_name); end

  def configurations(); end

  def initialize(configurations); end
end

class ActiveStorage::Service::Configurator
  def self.build(service_name, configurations); end
end

class ActiveStorage::Service::Registry
  def fetch(name); end

  def initialize(configurations); end
end

class ActiveStorage::Service::Registry
end

class ActiveStorage::Service
  extend ::ActiveSupport::Autoload
  def self.build(configurator:, name:, service: T.unsafe(nil), **service_config); end

  def self.configure(service_name, configurations); end
end

module ActiveStorage::SetBlob
end

module ActiveStorage::SetBlob
  extend ::ActiveSupport::Concern
end

module ActiveStorage::SetCurrent
end

module ActiveStorage::SetCurrent
  extend ::ActiveSupport::Concern
end

module ActiveStorage::Streaming
  include ::ActionController::Rendering
  include ::ActionController::DataStreaming
  include ::ActionController::Live
  DEFAULT_BLOB_STREAMING_DISPOSITION = ::T.let(nil, ::T.untyped)
end

module ActiveStorage::Streaming
  extend ::ActionController::Live::ClassMethods
end

module ActiveStorage::Transformers
end

class ActiveStorage::Transformers::Transformer
  def initialize(transformations); end

  def transform(file, format:); end

  def transformations(); end
end

class ActiveStorage::Transformers::Transformer
end

module ActiveStorage::Transformers
  extend ::ActiveSupport::Autoload
end

class ActiveStorage::UnpreviewableError
end

class ActiveStorage::UnpreviewableError
end

class ActiveStorage::UnrepresentableError
end

class ActiveStorage::UnrepresentableError
end

module ActiveStorage::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveStorage::VERSION
end

class ActiveStorage::Variant
  def blob(); end

  def content_type(*arg, **arg1, &arg2); end

  def content_type_for_serving(*arg, **arg1, &arg2); end

  def download(&block); end

  def filename(); end

  def forced_disposition_for_serving(); end

  def image(); end

  def initialize(blob, variation_or_variation_key); end

  def key(); end

  def processed(); end

  def service(*arg, **arg1, &arg2); end

  def url(expires_in: T.unsafe(nil), disposition: T.unsafe(nil)); end

  def variation(); end
end

class ActiveStorage::Variant
end

class ActiveStorage::VariantRecord
  include ::ActiveStorage::VariantRecord::GeneratedAttributeMethods
  include ::ActiveStorage::VariantRecord::GeneratedAssociationMethods
  def autosave_associated_records_for_blob(*args); end

  def autosave_associated_records_for_image_attachment(*args); end

  def autosave_associated_records_for_image_blob(*args); end
end

module ActiveStorage::VariantRecord::GeneratedAssociationMethods
  def blob(); end

  def blob=(value); end

  def blob_changed?(); end

  def blob_previously_changed?(); end

  def build_blob(*args, &block); end

  def build_image_attachment(*args, &block); end

  def build_image_blob(*args, &block); end

  def create_blob(*args, &block); end

  def create_blob!(*args, &block); end

  def create_image_attachment(*args, &block); end

  def create_image_attachment!(*args, &block); end

  def create_image_blob(*args, &block); end

  def create_image_blob!(*args, &block); end

  def image(); end

  def image=(attachable); end

  def image_attachment(); end

  def image_attachment=(value); end

  def image_blob(); end

  def image_blob=(value); end

  def reload_blob(); end

  def reload_image_attachment(); end

  def reload_image_blob(); end
end

module ActiveStorage::VariantRecord::GeneratedAssociationMethods
end

module ActiveStorage::VariantRecord::GeneratedAttributeMethods
end

module ActiveStorage::VariantRecord::GeneratedAttributeMethods
  extend ::Mutex_m
end

class ActiveStorage::VariantRecord
  def self.with_attached_image(*args, **arg); end
end

class ActiveStorage::VariantWithRecord
  def blob(); end

  def download(*arg, **arg1, &arg2); end

  def image(); end

  def initialize(blob, variation); end

  def key(*arg, **arg1, &arg2); end

  def process(); end

  def processed(); end

  def processed?(); end

  def service(*arg, **arg1, &arg2); end

  def url(*arg, **arg1, &arg2); end

  def variation(); end
end

class ActiveStorage::VariantWithRecord
end

class ActiveStorage::Variation
  def content_type(); end

  def default_to(defaults); end

  def digest(); end

  def format(); end

  def initialize(transformations); end

  def key(); end

  def transform(file, &block); end

  def transformations(); end
end

class ActiveStorage::Variation
  def self.decode(key); end

  def self.encode(transformations); end

  def self.wrap(variator); end
end

module ActiveStorage
  extend ::ActiveSupport::Autoload
  def self.analyzers(); end

  def self.analyzers=(val); end

  def self.binary_content_type(); end

  def self.binary_content_type=(val); end

  def self.content_types_allowed_inline(); end

  def self.content_types_allowed_inline=(val); end

  def self.content_types_to_serve_as_binary(); end

  def self.content_types_to_serve_as_binary=(val); end

  def self.draw_routes(); end

  def self.draw_routes=(val); end

  def self.logger(); end

  def self.logger=(val); end

  def self.paths(); end

  def self.paths=(val); end

  def self.previewers(); end

  def self.previewers=(val); end

  def self.queues(); end

  def self.queues=(val); end

  def self.railtie_helpers_paths(); end

  def self.railtie_namespace(); end

  def self.railtie_routes_url_helpers(include_path_helpers=T.unsafe(nil)); end

  def self.replace_on_assign_to_many(); end

  def self.replace_on_assign_to_many=(val); end

  def self.resolve_model_to_route(); end

  def self.resolve_model_to_route=(val); end

  def self.routes_prefix(); end

  def self.routes_prefix=(val); end

  def self.service_urls_expire_in(); end

  def self.service_urls_expire_in=(val); end

  def self.silence_invalid_content_types_warning(); end

  def self.silence_invalid_content_types_warning=(val); end

  def self.supported_image_processing_methods(); end

  def self.supported_image_processing_methods=(val); end

  def self.table_name_prefix(); end

  def self.track_variants(); end

  def self.track_variants=(val); end

  def self.unsupported_image_processing_arguments(); end

  def self.unsupported_image_processing_arguments=(val); end

  def self.urls_expire_in(); end

  def self.urls_expire_in=(val); end

  def self.use_relative_model_naming?(); end

  def self.variable_content_types(); end

  def self.variable_content_types=(val); end

  def self.variant_processor(); end

  def self.variant_processor=(val); end

  def self.verifier(); end

  def self.verifier=(val); end

  def self.video_preview_arguments(); end

  def self.video_preview_arguments=(val); end

  def self.web_image_content_types(); end

  def self.web_image_content_types=(val); end
end

class ActiveSupport::BacktraceCleaner
  FORMATTED_GEMS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache
  DEFAULT_COMPRESS_LIMIT = ::T.let(nil, ::T.untyped)
  OPTION_ALIASES = ::T.let(nil, ::T.untyped)
  UNIVERSAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::Coders
  MARK_61 = ::T.let(nil, ::T.untyped)
  MARK_70_COMPRESSED = ::T.let(nil, ::T.untyped)
  MARK_70_UNCOMPRESSED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::Coders::Loader
  def load(payload); end
end

module ActiveSupport::Cache::Coders::Rails61Coder
  def dump(entry); end

  def dump_compressed(entry, threshold); end
end

module ActiveSupport::Cache::Coders::Rails70Coder
  def dump(entry); end

  def dump_compressed(entry, threshold); end
end

module ActiveSupport::Cache::Coders
  def self.[](version); end
end

module ActiveSupport::Cache::ConnectionPoolLike
  def with(); end
end

module ActiveSupport::Cache::ConnectionPoolLike
end

class ActiveSupport::Cache::Entry
  def bytesize(); end

  def compressed(compress_threshold); end

  def compressed?(); end

  def dup_value!(); end

  def expired?(); end

  def expires_at(); end

  def expires_at=(value); end

  def initialize(value, compressed: T.unsafe(nil), version: T.unsafe(nil), expires_in: T.unsafe(nil), expires_at: T.unsafe(nil), **arg); end

  def local?(); end

  def mismatched?(version); end

  def pack(); end

  def value(); end

  def version(); end
end

class ActiveSupport::Cache::Entry
  def self.unpack(members); end
end

class ActiveSupport::Cache::FileStore
  def cache_path(); end

  def initialize(cache_path, **options); end
end

class ActiveSupport::Cache::FileStore
  def self.supports_cache_versioning?(); end
end

class ActiveSupport::Cache::MemoryStore
  def prune(target_size, max_time=T.unsafe(nil)); end

  def pruning?(); end

  def synchronize(&block); end
end

module ActiveSupport::Cache::MemoryStore::DupCoder
  def dump(entry); end

  def dump_compressed(entry, threshold); end

  def load(entry); end
end

class ActiveSupport::Cache::MemoryStore
  def self.supports_cache_versioning?(); end
end

module ActiveSupport::Cache::NullCoder
  def dump(entry); end

  def dump_compressed(entry, threshold); end

  def load(payload); end
end

class ActiveSupport::Cache::NullStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
end

class ActiveSupport::Cache::NullStore
  def self.supports_cache_versioning?(); end
end

class ActiveSupport::Cache::RedisCacheStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  def initialize(namespace: T.unsafe(nil), compress: T.unsafe(nil), compress_threshold: T.unsafe(nil), coder: T.unsafe(nil), expires_in: T.unsafe(nil), race_condition_ttl: T.unsafe(nil), error_handler: T.unsafe(nil), **redis_options); end

  def max_key_bytesize(); end

  def mget_capable?(); end

  def mset_capable?(); end

  def redis(); end

  def redis_options(); end

  def stats(); end
  DEFAULT_ERROR_HANDLER = ::T.let(nil, ::T.untyped)
  DEFAULT_REDIS_OPTIONS = ::T.let(nil, ::T.untyped)
  MAX_KEY_BYTESIZE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::RedisCacheStore
  def self.build_redis(redis: T.unsafe(nil), url: T.unsafe(nil), **redis_options); end

  def self.supports_cache_versioning?(); end
end

class ActiveSupport::Cache::Store
  def cleanup(options=T.unsafe(nil)); end

  def clear(options=T.unsafe(nil)); end

  def decrement(name, amount=T.unsafe(nil), options=T.unsafe(nil)); end

  def delete(name, options=T.unsafe(nil)); end

  def delete_matched(matcher, options=T.unsafe(nil)); end

  def delete_multi(names, options=T.unsafe(nil)); end

  def exist?(name, options=T.unsafe(nil)); end

  def fetch(name, options=T.unsafe(nil), &block); end

  def fetch_multi(*names); end

  def increment(name, amount=T.unsafe(nil), options=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def logger(); end

  def logger=(val); end

  def mute(); end

  def new_entry(value, options=T.unsafe(nil)); end

  def options(); end

  def read(name, options=T.unsafe(nil)); end

  def read_multi(*names); end

  def silence(); end

  def silence!(); end

  def silence?(); end

  def write(name, value, options=T.unsafe(nil)); end

  def write_multi(hash, options=T.unsafe(nil)); end
end

class ActiveSupport::Cache::Store
  def self.logger(); end

  def self.logger=(val); end
end

module ActiveSupport::Cache::Strategy::LocalCache
  def cleanup(**options); end

  def clear(**options); end

  def decrement(name, amount=T.unsafe(nil), **options); end

  def delete_matched(matcher, options=T.unsafe(nil)); end

  def increment(name, amount=T.unsafe(nil), **options); end

  def middleware(); end

  def with_local_cache(&block); end
end

module ActiveSupport::Cache
  def self.expand_cache_key(key, namespace=T.unsafe(nil)); end

  def self.format_version(); end

  def self.format_version=(format_version); end

  def self.lookup_store(store=T.unsafe(nil), *parameters); end
end

module ActiveSupport::Callbacks
  CALLBACK_FILTER_TYPES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::CodeGenerator
  def define_cached_method(name, namespace:, as: T.unsafe(nil), &block); end

  def execute(); end

  def initialize(owner, path, line); end
end

class ActiveSupport::CodeGenerator::MethodSet
  def apply(owner, path, line); end

  def define_cached_method(name, as: T.unsafe(nil)); end

  def initialize(namespace); end
  METHOD_CACHES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::CodeGenerator
  def self.batch(owner, path, line); end
end

class ActiveSupport::Concurrency::LoadInterlockAwareMonitor
  def synchronize(&block); end
end

class ActiveSupport::CurrentAttributes
  def __callbacks(); end

  def __callbacks?(); end

  def _reset_callbacks(); end

  def _run_reset_callbacks(&block); end

  def attributes(); end

  def attributes=(attributes); end

  def reset(); end

  def set(set_attributes); end
end

class ActiveSupport::CurrentAttributes
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._reset_callbacks(); end

  def self._reset_callbacks=(value); end

  def self.after_reset(&block); end

  def self.attribute(*names); end

  def self.before_reset(&block); end

  def self.clear_all(); end

  def self.instance(); end

  def self.reset(*arg, **arg1, &arg2); end

  def self.reset_all(); end

  def self.resets(&block); end

  def self.set(*arg, **arg1, &arg2); end
end

module ActiveSupport::DeprecatedRangeWithFormat
  NOT_SET = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Deprecation
  def deprecation_horizon(); end

  def deprecation_horizon=(deprecation_horizon); end

  def initialize(deprecation_horizon=T.unsafe(nil), gem_name=T.unsafe(nil)); end
end

class ActiveSupport::Digest
  def self.hash_digest_class(); end

  def self.hash_digest_class=(klass); end

  def self.hexdigest(arg); end
end

class ActiveSupport::Duration
  PARTS = ::T.let(nil, ::T.untyped)
  PARTS_IN_SECONDS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
  SECONDS_PER_HOUR = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MINUTE = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MONTH = ::T.let(nil, ::T.untyped)
  SECONDS_PER_WEEK = ::T.let(nil, ::T.untyped)
  SECONDS_PER_YEAR = ::T.let(nil, ::T.untyped)
  VARIABLE_PARTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser
  def initialize(string); end

  def mode(); end

  def mode=(mode); end

  def parse!(); end

  def parts(); end

  def scanner(); end

  def sign(); end

  def sign=(sign); end
  COMMA = ::T.let(nil, ::T.untyped)
  DATE_COMPONENT = ::T.let(nil, ::T.untyped)
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
  DATE_MARKER = ::T.let(nil, ::T.untyped)
  DATE_TO_PART = ::T.let(nil, ::T.untyped)
  PERIOD = ::T.let(nil, ::T.untyped)
  PERIOD_OR_COMMA = ::T.let(nil, ::T.untyped)
  SIGN_MARKER = ::T.let(nil, ::T.untyped)
  TIME_COMPONENT = ::T.let(nil, ::T.untyped)
  TIME_COMPONENTS = ::T.let(nil, ::T.untyped)
  TIME_MARKER = ::T.let(nil, ::T.untyped)
  TIME_TO_PART = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser
end

class ActiveSupport::Duration::ISO8601Serializer
  def initialize(duration, precision: T.unsafe(nil)); end

  def serialize(); end
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Serializer
end

class ActiveSupport::EncryptedFile
  CIPHER = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::EnumerableCoreExt::SoleItemExpectedError
end

class ActiveSupport::EnumerableCoreExt::SoleItemExpectedError
end

class ActiveSupport::EnvironmentInquirer
  DEFAULT_ENVIRONMENTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ErrorReporter
  def handle(error_class=T.unsafe(nil), severity: T.unsafe(nil), context: T.unsafe(nil), fallback: T.unsafe(nil)); end

  def initialize(*subscribers, logger: T.unsafe(nil)); end

  def logger(); end

  def logger=(logger); end

  def record(error_class=T.unsafe(nil), severity: T.unsafe(nil), context: T.unsafe(nil)); end

  def report(error, handled:, severity: T.unsafe(nil), context: T.unsafe(nil)); end

  def set_context(*arg, **arg1, &arg2); end

  def subscribe(subscriber); end
  SEVERITIES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::ExecutionContext
  def self.[]=(key, value); end

  def self.after_change(&block); end

  def self.clear(); end

  def self.set(**options); end

  def self.to_h(); end
end

class ActiveSupport::ExecutionWrapper
  def __callbacks(); end

  def __callbacks?(); end

  def _complete_callbacks(); end

  def _run_callbacks(); end

  def _run_complete_callbacks(&block); end

  def _run_run_callbacks(&block); end

  def complete(); end

  def complete!(); end

  def run(); end

  def run!(); end
  Null = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ExecutionWrapper::CompleteHook
  def after(target); end

  def before(target); end

  def hook(); end

  def hook=(_); end
end

class ActiveSupport::ExecutionWrapper::CompleteHook
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveSupport::ExecutionWrapper::RunHook
  def before(target); end

  def hook(); end

  def hook=(_); end
end

class ActiveSupport::ExecutionWrapper::RunHook
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveSupport::ExecutionWrapper
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._complete_callbacks(); end

  def self._complete_callbacks=(value); end

  def self._run_callbacks(); end

  def self._run_callbacks=(value); end

  def self.active?(); end

  def self.active_key(); end

  def self.error_reporter(); end

  def self.perform(); end

  def self.register_hook(hook, outer: T.unsafe(nil)); end

  def self.run!(reset: T.unsafe(nil)); end

  def self.to_complete(*args, &block); end

  def self.to_run(*args, &block); end

  def self.wrap(); end
end

module ActiveSupport::Executor::TestHelper
  def run(*arg, **arg1, &arg2); end
end

class ActiveSupport::FileUpdateChecker
  def execute(); end

  def execute_if_updated(); end

  def initialize(files, dirs=T.unsafe(nil), &block); end

  def updated?(); end
end

module ActiveSupport::ForkTracker::CoreExt
  def fork(*arg, **arg1, &arg2); end
end

module ActiveSupport::ForkTracker::ModernCoreExt
  def _fork(); end
end

module ActiveSupport::ForkTracker
  def self.after_fork(&block); end

  def self.check!(); end

  def self.hook!(); end

  def self.unregister(callback); end
end

module ActiveSupport::Gzip
end

class ActiveSupport::Gzip::Stream
end

class ActiveSupport::Gzip::Stream
end

module ActiveSupport::Gzip
  def self.compress(source, level=T.unsafe(nil), strategy=T.unsafe(nil)); end

  def self.decompress(source); end
end

module ActiveSupport::HtmlSafeTranslation
  def translate(key, **options); end
end

module ActiveSupport::Inflector
  include ::FastUnderscore::ActiveSupportInflectorPatch
  ALLOWED_ENCODINGS_FOR_TRANSLITERATE = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Inflector
  extend ::FastUnderscore::ActiveSupportInflectorPatch
end

class ActiveSupport::LogSubscriber
  def colorize_logging(); end

  def colorize_logging=(val); end

  def debug(progname=T.unsafe(nil), &block); end

  def error(progname=T.unsafe(nil), &block); end

  def fatal(progname=T.unsafe(nil), &block); end

  def info(progname=T.unsafe(nil), &block); end

  def logger(); end

  def unknown(progname=T.unsafe(nil), &block); end

  def warn(progname=T.unsafe(nil), &block); end
end

class ActiveSupport::MessageEncryptor
  include ::ActiveSupport::Messages::Rotator::Encryptor
  include ::ActiveSupport::Messages::Rotator
end

ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

class ActiveSupport::MessageVerifier
  include ::ActiveSupport::Messages::Rotator::Verifier
  include ::ActiveSupport::Messages::Rotator
  SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_LENGTH = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Multibyte::Chars
  def =~(*arg, **arg1, &arg2); end

  def acts_like_string?(*arg, **arg1, &arg2); end

  def compose(); end

  def decompose(); end

  def grapheme_length(); end

  def initialize(string); end

  def limit(limit); end

  def match?(*arg, **arg1, &arg2); end

  def method_missing(method, *args, &block); end

  def reverse(); end

  def reverse!(*args); end

  def slice!(*args); end

  def split(*args); end

  def tidy_bytes(force=T.unsafe(nil)); end

  def tidy_bytes!(*args); end

  def titlecase(); end

  def titleize(); end

  def to_str(); end

  def wrapped_string(); end
end

class ActiveSupport::NumberHelper::NumberConverter
  def execute(); end

  def initialize(number, options); end

  def namespace(); end

  def namespace=(namespace); end

  def namespace?(); end

  def number(); end

  def opts(); end

  def validate_float(); end

  def validate_float=(validate_float); end

  def validate_float?(); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def self.convert(number, options); end

  def self.namespace(); end

  def self.namespace=(value); end

  def self.namespace?(); end

  def self.validate_float(); end

  def self.validate_float=(value); end

  def self.validate_float?(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
  def convert(); end
  DEFAULT_DELIMITER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
  def convert(); end
  DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
  INVERTED_DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
  def convert(); end
  STORAGE_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
end

class ActiveSupport::NumberHelper::RoundingHelper
  def digit_count(number); end

  def initialize(options); end

  def options(); end

  def round(number); end
end

class ActiveSupport::NumberHelper::RoundingHelper
end

class ActiveSupport::OrderedHash
  def encode_with(coder); end

  def reject(*args, &block); end

  def select(*args, &block); end

  def to_yaml_type(); end
end

module ActiveSupport::PerThreadRegistry
  def instance(); end
end

module ActiveSupport::PerThreadRegistry
  def self.extended(object); end
end

class ActiveSupport::ProxyObject
  def raise(*args); end
end

class ActiveSupport::ProxyObject
end

module ActiveSupport::RangeWithFormat
  RANGE_FORMATS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Reloader
  def _class_unload_callbacks(); end

  def _prepare_callbacks(); end

  def _run_class_unload_callbacks(&block); end

  def _run_prepare_callbacks(&block); end

  def check(); end

  def check=(check); end

  def check?(); end

  def class_unload!(&block); end

  def executor(); end

  def executor=(executor); end

  def executor?(); end

  def release_unload_lock!(); end

  def require_unload_lock!(); end
end

class ActiveSupport::Reloader
  def self._class_unload_callbacks(); end

  def self._class_unload_callbacks=(value); end

  def self._prepare_callbacks(); end

  def self._prepare_callbacks=(value); end

  def self.after_class_unload(*args, &block); end

  def self.before_class_unload(*args, &block); end

  def self.check(); end

  def self.check!(); end

  def self.check=(value); end

  def self.check?(); end

  def self.executor(); end

  def self.executor=(value); end

  def self.executor?(); end

  def self.prepare!(); end

  def self.reload!(); end

  def self.reloaded!(); end

  def self.to_prepare(*args, &block); end
end

module ActiveSupport::Rescuable
  def handler_for_rescue(exception); end

  def rescue_with_handler(exception); end
end

module ActiveSupport::RubyFeatures
  CLASS_SUBCLASSES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::SecureCompareRotator
  include ::ActiveSupport::SecurityUtils
  include ::ActiveSupport::Messages::Rotator
  def secure_compare!(other_value, on_rotation: T.unsafe(nil)); end
end

class ActiveSupport::SecureCompareRotator::InvalidMatch
end

class ActiveSupport::SecureCompareRotator::InvalidMatch
end

class ActiveSupport::SecureCompareRotator
end

class ActiveSupport::Subscriber
  def finish(name, id, payload); end

  def patterns(); end

  def publish_event(event); end

  def start(name, id, payload); end
end

module ActiveSupport::TaggedLogging
  def broadcast_to(other_logger); end

  def clear_tags!(*arg, **arg1, &arg2); end

  def flush(); end

  def pop_tags(*arg, **arg1, &arg2); end

  def push_tags(*arg, **arg1, &arg2); end

  def tagged(*tags); end
end

module ActiveSupport::TaggedLogging::Formatter
  def call(severity, timestamp, progname, msg); end

  def clear_tags!(); end

  def current_tags(); end

  def pop_tags(size=T.unsafe(nil)); end

  def push_tags(*tags); end

  def tagged(*tags); end

  def tags_text(); end
end

module ActiveSupport::TaggedLogging::LocalTagStorage
  def current_tags(); end

  def current_tags=(current_tags); end
end

module ActiveSupport::TaggedLogging::LocalTagStorage
  def self.extended(base); end
end

module ActiveSupport::TaggedLogging
  def self.new(logger); end
end

class ActiveSupport::TestCase
  include ::ActiveSupport::Testing::SetupAndTeardown
  def __callbacks(); end

  def __callbacks?(); end

  def _run_setup_callbacks(&block); end

  def _run_teardown_callbacks(&block); end

  def _setup_callbacks(); end

  def _teardown_callbacks(); end

  def assert_no_match(matcher, obj, msg=T.unsafe(nil)); end

  def assert_not_empty(obj, msg=T.unsafe(nil)); end

  def assert_not_equal(exp, act, msg=T.unsafe(nil)); end

  def assert_not_in_delta(exp, act, delta=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_in_epsilon(a, b, epsilon=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_includes(collection, obj, msg=T.unsafe(nil)); end

  def assert_not_instance_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_not_kind_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_not_nil(obj, msg=T.unsafe(nil)); end

  def assert_not_operator(o1, op, o2=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_not_predicate(o1, op, msg=T.unsafe(nil)); end

  def assert_not_respond_to(obj, meth, msg=T.unsafe(nil)); end

  def assert_not_same(exp, act, msg=T.unsafe(nil)); end

  def assert_raise(*exp); end

  def file_fixture_path(); end

  def file_fixture_path?(); end

  def method_name(); end
end

class ActiveSupport::TestCase
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._setup_callbacks(); end

  def self._setup_callbacks=(value); end

  def self._teardown_callbacks(); end

  def self._teardown_callbacks=(value); end

  def self.file_fixture_path(); end

  def self.file_fixture_path=(value); end

  def self.file_fixture_path?(); end

  def self.parallelize(workers: T.unsafe(nil), with: T.unsafe(nil), threshold: T.unsafe(nil)); end

  def self.parallelize_setup(&block); end

  def self.parallelize_teardown(&block); end

  def self.test_order=(new_order); end
end

module ActiveSupport::Testing::Assertions
  def assert_changes(expression, message=T.unsafe(nil), from: T.unsafe(nil), to: T.unsafe(nil), &block); end

  def assert_difference(expression, *args, &block); end

  def assert_no_changes(expression, message=T.unsafe(nil), from: T.unsafe(nil), &block); end

  def assert_no_difference(expression, message=T.unsafe(nil), &block); end

  def assert_not(object, message=T.unsafe(nil)); end

  def assert_nothing_raised(); end
  UNTRACKED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Declarative
  def test(name, &block); end
end

module ActiveSupport::Testing::Deprecation
  def assert_deprecated(match=T.unsafe(nil), deprecator=T.unsafe(nil), &block); end

  def assert_not_deprecated(deprecator=T.unsafe(nil), &block); end

  def collect_deprecations(deprecator=T.unsafe(nil)); end
end

module ActiveSupport::Testing::FileFixtures
  def file_fixture(fixture_name); end
end

module ActiveSupport::Testing::Isolation
  def run(); end
end

module ActiveSupport::Testing::Isolation::Forking
  def run_in_isolation(&blk); end
end

module ActiveSupport::Testing::Isolation::Subprocess
  def run_in_isolation(&blk); end
  ORIG_ARGV = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Isolation
  def self.forking_env?(); end

  def self.included(klass); end
end

class ActiveSupport::Testing::Parallelization
  def <<(work); end

  def after_fork_hooks(); end

  def initialize(worker_count); end

  def run_cleanup_hooks(); end

  def shutdown(); end

  def size(); end

  def start(); end
end

class ActiveSupport::Testing::Parallelization::Server
  def <<(o); end

  def active_workers?(); end

  def interrupt(); end

  def pop(); end

  def record(reporter, result); end

  def shutdown(); end

  def start_worker(worker_id); end

  def stop_worker(worker_id); end
end

class ActiveSupport::Testing::Parallelization::Worker
  def after_fork(); end

  def initialize(number, url); end

  def perform_job(job); end

  def run_cleanup(); end

  def safe_record(reporter, result); end

  def start(); end

  def work_from_queue(); end
end

class ActiveSupport::Testing::Parallelization
  def self.after_fork_hook(&blk); end

  def self.after_fork_hooks(); end

  def self.run_cleanup_hook(&blk); end

  def self.run_cleanup_hooks(); end
end

class ActiveSupport::Testing::ParallelizeExecutor
  def <<(work); end

  def initialize(size:, with:, threshold: T.unsafe(nil)); end

  def parallelize_with(); end

  def shutdown(); end

  def size(); end

  def start(); end

  def threshold(); end
end

module ActiveSupport::Testing::SetupAndTeardown
  def after_teardown(); end

  def before_setup(); end
end

module ActiveSupport::Testing::SetupAndTeardown
  def self.prepended(klass); end
end

class ActiveSupport::Testing::SimpleStubs
  def stub_object(object, method_name, &block); end

  def stubbed?(); end

  def stubbing(object, method_name); end

  def unstub_all!(); end
end

class ActiveSupport::Testing::SimpleStubs::Stub
  def method_name(); end

  def method_name=(_); end

  def object(); end

  def object=(_); end

  def original_method(); end

  def original_method=(_); end
end

class ActiveSupport::Testing::SimpleStubs::Stub
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module ActiveSupport::Testing::TaggedLogging
  def before_setup(); end

  def tagged_logger=(tagged_logger); end
end

module ActiveSupport::Testing::TimeHelpers
  def after_teardown(); end

  def freeze_time(&block); end

  def travel(duration, &block); end

  def travel_back(); end

  def travel_to(date_or_time); end

  def unfreeze_time(); end
end

class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  NOT_SET = ::T.let(nil, ::T.untyped)
  PRECISIONS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  MAPPING = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::XMLConverter
  DISALLOWED_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini
  def backend(); end

  def backend=(name); end

  def depth(); end

  def depth=(depth); end

  def parse(*arg, **arg1, &arg2); end

  def rename_key(key, options=T.unsafe(nil)); end

  def to_tag(key, value, options); end

  def with_backend(name); end
  DEFAULT_ENCODINGS = ::T.let(nil, ::T.untyped)
  FORMATTING = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini::FileLike
  def content_type(); end

  def content_type=(content_type); end

  def original_filename(); end

  def original_filename=(original_filename); end
end

module ActiveSupport::XmlMini_Nokogiri
  def parse(data); end
end

module ActiveSupport::XmlMini_Nokogiri::Conversions::Document
  def to_hash(); end
end

module ActiveSupport::XmlMini_Nokogiri::Conversions::Node
  def to_hash(hash=T.unsafe(nil)); end
  CONTENT_ROOT = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini_REXML
  def parse(data); end
  CONTENT_KEY = ::T.let(nil, ::T.untyped)
end

module Addressable::IDNA
  ACE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  ACE_PREFIX = ::T.let(nil, ::T.untyped)
  COMPOSITION_TABLE = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  PUNYCODE_BASE = ::T.let(nil, ::T.untyped)
  PUNYCODE_DAMP = ::T.let(nil, ::T.untyped)
  PUNYCODE_DELIMITER = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_BIAS = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_N = ::T.let(nil, ::T.untyped)
  PUNYCODE_MAXINT = ::T.let(nil, ::T.untyped)
  PUNYCODE_PRINT_ASCII = ::T.let(nil, ::T.untyped)
  PUNYCODE_SKEW = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMAX = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMIN = ::T.let(nil, ::T.untyped)
  UNICODE_DATA = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_CANONICAL = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMBINING_CLASS = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMPATIBILITY = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_EXCLUSION = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_LOWERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_TITLECASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_UPPERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  UNICODE_TABLE = ::T.let(nil, ::T.untyped)
  UTF8_REGEX = ::T.let(nil, ::T.untyped)
  UTF8_REGEX_MULTIBYTE = ::T.let(nil, ::T.untyped)
end

class Addressable::Template
  def ==(template); end

  def eql?(template); end

  def expand(mapping, processor=T.unsafe(nil), normalize_values=T.unsafe(nil)); end

  def extract(uri, processor=T.unsafe(nil)); end

  def initialize(pattern); end

  def keys(); end

  def match(uri, processor=T.unsafe(nil)); end

  def named_captures(); end

  def names(); end

  def partial_expand(mapping, processor=T.unsafe(nil), normalize_values=T.unsafe(nil)); end

  def pattern(); end

  def source(); end

  def to_regexp(); end

  def variable_defaults(); end

  def variables(); end
  EXPRESSION = ::T.let(nil, ::T.untyped)
  JOINERS = ::T.let(nil, ::T.untyped)
  LEADERS = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  VARIABLE_LIST = ::T.let(nil, ::T.untyped)
  VARNAME = ::T.let(nil, ::T.untyped)
  VARSPEC = ::T.let(nil, ::T.untyped)
end

class Addressable::Template::MatchData
  def [](key, len=T.unsafe(nil)); end

  def captures(); end

  def initialize(uri, template, mapping); end

  def keys(); end

  def mapping(); end

  def names(); end

  def post_match(); end

  def pre_match(); end

  def string(); end

  def template(); end

  def to_a(); end

  def uri(); end

  def values(); end

  def values_at(*indexes); end

  def variables(); end
end

class Addressable::URI
  EMPTY_STR = ::T.let(nil, ::T.untyped)
  NORMPATH = ::T.let(nil, ::T.untyped)
  PARENT = ::T.let(nil, ::T.untyped)
  PORT_MAPPING = ::T.let(nil, ::T.untyped)
  RULE_2A = ::T.let(nil, ::T.untyped)
  RULE_2B_2C = ::T.let(nil, ::T.untyped)
  RULE_2D = ::T.let(nil, ::T.untyped)
  RULE_PREFIXED_PARENT = ::T.let(nil, ::T.untyped)
  SELF_REF = ::T.let(nil, ::T.untyped)
  SEQUENCE_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SEQUENCE_UPCASED_PERCENT_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  URIREGEX = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClasses
  ALPHA = ::T.let(nil, ::T.untyped)
  AUTHORITY = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  GEN_DELIMS = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::NormalizeCharacterClasses
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class Addrinfo
  def connect_internal(local_addrinfo, timeout=T.unsafe(nil)); end
end

module AnnotateModels::FilePatterns
  ACTIVEADMIN_DIR = ::T.let(nil, ::T.untyped)
  BLUEPRINTS_SPEC_DIR = ::T.let(nil, ::T.untyped)
  BLUEPRINTS_TEST_DIR = ::T.let(nil, ::T.untyped)
  CONTROLLER_DIR = ::T.let(nil, ::T.untyped)
  CONTROLLER_SPEC_DIR = ::T.let(nil, ::T.untyped)
  CONTROLLER_TEST_DIR = ::T.let(nil, ::T.untyped)
  EXEMPLARS_SPEC_DIR = ::T.let(nil, ::T.untyped)
  EXEMPLARS_TEST_DIR = ::T.let(nil, ::T.untyped)
  FABRICATORS_SPEC_DIR = ::T.let(nil, ::T.untyped)
  FABRICATORS_TEST_DIR = ::T.let(nil, ::T.untyped)
  FACTORY_BOT_SPEC_DIR = ::T.let(nil, ::T.untyped)
  FACTORY_BOT_TEST_DIR = ::T.let(nil, ::T.untyped)
  FIXTURE_SPEC_DIR = ::T.let(nil, ::T.untyped)
  FIXTURE_TEST_DIR = ::T.let(nil, ::T.untyped)
  HELPER_DIR = ::T.let(nil, ::T.untyped)
  MODEL_TEST_DIR = ::T.let(nil, ::T.untyped)
  REQUEST_SPEC_DIR = ::T.let(nil, ::T.untyped)
  ROUTING_SPEC_DIR = ::T.let(nil, ::T.untyped)
  SERIALIZERS_DIR = ::T.let(nil, ::T.untyped)
  SERIALIZERS_SPEC_DIR = ::T.let(nil, ::T.untyped)
  SERIALIZERS_TEST_DIR = ::T.let(nil, ::T.untyped)
  SPEC_MODEL_DIR = ::T.let(nil, ::T.untyped)
  UNIT_TEST_DIR = ::T.let(nil, ::T.untyped)
end

module AnnotateModels::FilePatterns
  def self.generate(root_directory, pattern_type, options); end
end

module AnnotateModels
  def self.skip_subdirectory_model_load(); end

  def self.skip_subdirectory_model_load=(skip_subdirectory_model_load); end
end

class AnnotateRoutes::HeaderGenerator
  def generate(); end

  def initialize(options, routes_map); end
  HEADER_ROW = ::T.let(nil, ::T.untyped)
  PREFIX = ::T.let(nil, ::T.untyped)
  PREFIX_MD = ::T.let(nil, ::T.untyped)
end

class AnnotateRoutes::HeaderGenerator
  def self.generate(options=T.unsafe(nil)); end
end

module Apiable
  def api_error!(event, opts=T.unsafe(nil)); end

  def render_form_error(object); end
end

module Apiable
  extend ::ActiveSupport::Concern
end

class ApplicationCable::Connection
  def current_space(); end

  def current_space=(current_space); end

  def current_user(); end

  def current_user=(current_user); end
end

module ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::InertiaRails::Helper
  include ::ViteRails::TagHelpers
  include ::ApplicationHelper
  include ::DeviseHelper
end

module ApplicationController::HelperMethods
end

class ApplicationRecord
  include ::ApplicationRecord::GeneratedAttributeMethods
  include ::ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAttributeMethods
end

module ApplicationRecord::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Arel
  VERSION = ::T.let(nil, ::T.untyped)
end

module Arel::AliasPredication
  def as(other); end
end

module Arel::AliasPredication
end

class Arel::ArelError
end

class Arel::ArelError
end

Arel::Attribute = Arel::Attributes::Attribute

class Arel::Attributes::Attribute
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications
  include ::Arel::Math
  def able_to_type_cast?(); end

  def lower(); end

  def type_cast_for_database(value); end

  def type_caster(); end
end

module Arel::Collectors
end

class Arel::Collectors::Bind
  def <<(str); end

  def add_bind(bind); end

  def add_binds(binds, proc_for_binds=T.unsafe(nil)); end

  def value(); end
end

class Arel::Collectors::Bind
end

class Arel::Collectors::Composite
  def <<(str); end

  def add_bind(bind, &block); end

  def add_binds(binds, proc_for_binds=T.unsafe(nil), &block); end

  def initialize(left, right); end

  def preparable(); end

  def preparable=(preparable); end

  def value(); end
end

class Arel::Collectors::Composite
end

class Arel::Collectors::PlainString
  def <<(str); end

  def value(); end
end

class Arel::Collectors::PlainString
end

class Arel::Collectors::SQLString
  def add_bind(bind); end

  def add_binds(binds, proc_for_binds=T.unsafe(nil), &block); end

  def initialize(*arg); end

  def preparable(); end

  def preparable=(preparable); end
end

class Arel::Collectors::SQLString
end

class Arel::Collectors::SubstituteBinds
  def <<(str); end

  def add_bind(bind); end

  def add_binds(binds, proc_for_binds=T.unsafe(nil)); end

  def initialize(quoter, delegate_collector); end

  def preparable(); end

  def preparable=(preparable); end

  def value(); end
end

class Arel::Collectors::SubstituteBinds
end

module Arel::Collectors
end

module Arel::Crud
  def compile_delete(key=T.unsafe(nil), having_clause=T.unsafe(nil), group_values_columns=T.unsafe(nil)); end

  def compile_insert(values); end

  def compile_update(values, key=T.unsafe(nil), having_clause=T.unsafe(nil), group_values_columns=T.unsafe(nil)); end

  def create_insert(); end
end

module Arel::Crud
end

class Arel::DeleteManager
  include ::Arel::TreeManager::StatementMethods
  def from(relation); end

  def group(columns); end

  def having(expr); end

  def initialize(table=T.unsafe(nil)); end
end

class Arel::DeleteManager
end

class Arel::EmptyJoinError
end

class Arel::EmptyJoinError
end

module Arel::Expressions
  def average(); end

  def count(distinct=T.unsafe(nil)); end

  def extract(field); end

  def maximum(); end

  def minimum(); end

  def sum(); end
end

module Arel::Expressions
end

module Arel::FactoryMethods
  def coalesce(*exprs); end

  def create_and(clauses); end

  def create_false(); end

  def create_join(to, constraint=T.unsafe(nil), klass=T.unsafe(nil)); end

  def create_on(expr); end

  def create_string_join(to); end

  def create_table_alias(relation, name); end

  def create_true(); end

  def grouping(expr); end

  def lower(column); end
end

module Arel::FactoryMethods
end

module Arel::FilterPredications
  def filter(expr); end
end

module Arel::FilterPredications
end

class Arel::InsertManager
  def columns(); end

  def create_values(values); end

  def create_values_list(rows); end

  def initialize(table=T.unsafe(nil)); end

  def insert(fields); end

  def into(table); end

  def select(select); end

  def values=(val); end
end

class Arel::InsertManager
end

module Arel::Math
  def &(other); end

  def *(other); end

  def +(other); end

  def -(other); end

  def /(other); end

  def <<(other); end

  def >>(other); end

  def ^(other); end

  def |(other); end

  def ~(); end
end

module Arel::Math
end

class Arel::Nodes::Addition
  def initialize(left, right); end
end

class Arel::Nodes::Addition
end

class Arel::Nodes::And
  def ==(other); end

  def children(); end

  def eql?(other); end

  def initialize(children); end

  def left(); end

  def right(); end
end

class Arel::Nodes::And
end

class Arel::Nodes::Ascending
  def ascending?(); end

  def descending?(); end

  def direction(); end

  def reverse(); end
end

class Arel::Nodes::Ascending
end

class Arel::Nodes::Assignment
end

class Arel::Nodes::Assignment
end

class Arel::Nodes::Avg
end

class Arel::Nodes::Avg
end

class Arel::Nodes::Between
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::Between
end

class Arel::Nodes::Bin
end

class Arel::Nodes::Bin
end

class Arel::Nodes::Binary
  def ==(other); end

  def eql?(other); end

  def initialize(left, right); end

  def left(); end

  def left=(left); end

  def right(); end

  def right=(right); end
end

class Arel::Nodes::Binary
end

class Arel::Nodes::BindParam
  def ==(other); end

  def eql?(other); end

  def infinite?(); end

  def initialize(value); end

  def unboundable?(); end

  def value(); end

  def value_before_type_cast(); end
end

class Arel::Nodes::BindParam
end

class Arel::Nodes::BitwiseAnd
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseAnd
end

class Arel::Nodes::BitwiseNot
  def initialize(operand); end
end

class Arel::Nodes::BitwiseNot
end

class Arel::Nodes::BitwiseOr
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseOr
end

class Arel::Nodes::BitwiseShiftLeft
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseShiftLeft
end

class Arel::Nodes::BitwiseShiftRight
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseShiftRight
end

class Arel::Nodes::BitwiseXor
  def initialize(left, right); end
end

class Arel::Nodes::BitwiseXor
end

class Arel::Nodes::Case
  def ==(other); end

  def case(); end

  def case=(arg); end

  def conditions(); end

  def conditions=(conditions); end

  def default(); end

  def default=(default); end

  def else(expression); end

  def eql?(other); end

  def initialize(expression=T.unsafe(nil), default=T.unsafe(nil)); end

  def then(expression); end

  def when(condition, expression=T.unsafe(nil)); end
end

class Arel::Nodes::Case
end

class Arel::Nodes::Casted
  def ==(other); end

  def attribute(); end

  def eql?(other); end

  def initialize(value, attribute); end

  def value(); end

  def value_before_type_cast(); end

  def value_for_database(); end
end

class Arel::Nodes::Casted
end

class Arel::Nodes::Comment
  def ==(other); end

  def eql?(other); end

  def initialize(values); end

  def values(); end
end

class Arel::Nodes::Comment
end

class Arel::Nodes::Concat
  def initialize(left, right); end
end

class Arel::Nodes::Concat
end

class Arel::Nodes::Contains
  def initialize(left, right); end
end

class Arel::Nodes::Contains
end

class Arel::Nodes::Count
  def initialize(expr, distinct=T.unsafe(nil), aliaz=T.unsafe(nil)); end
end

class Arel::Nodes::Count
end

class Arel::Nodes::Cube
end

class Arel::Nodes::Cube
end

class Arel::Nodes::CurrentRow
  def ==(other); end

  def eql?(other); end
end

class Arel::Nodes::CurrentRow
end

class Arel::Nodes::DeleteStatement
  def ==(other); end

  def eql?(other); end

  def groups(); end

  def groups=(groups); end

  def havings(); end

  def havings=(havings); end

  def initialize(relation=T.unsafe(nil), wheres=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def limit(); end

  def limit=(limit); end

  def offset(); end

  def offset=(offset); end

  def orders(); end

  def orders=(orders); end

  def relation(); end

  def relation=(relation); end

  def wheres(); end

  def wheres=(wheres); end
end

class Arel::Nodes::DeleteStatement
end

class Arel::Nodes::Descending
  def ascending?(); end

  def descending?(); end

  def direction(); end

  def reverse(); end
end

class Arel::Nodes::Descending
end

class Arel::Nodes::Distinct
  def ==(other); end

  def eql?(other); end
end

class Arel::Nodes::Distinct
end

class Arel::Nodes::DistinctOn
end

class Arel::Nodes::DistinctOn
end

class Arel::Nodes::Division
  def initialize(left, right); end
end

class Arel::Nodes::Division
end

class Arel::Nodes::DoesNotMatch
end

class Arel::Nodes::DoesNotMatch
end

class Arel::Nodes::Else
end

class Arel::Nodes::Else
end

class Arel::Nodes::Equality
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::Equality
end

class Arel::Nodes::Except
end

class Arel::Nodes::Except
end

class Arel::Nodes::Exists
end

class Arel::Nodes::Exists
end

class Arel::Nodes::Extract
  def field(); end

  def field=(field); end

  def initialize(expr, field); end
end

class Arel::Nodes::Extract
end

class Arel::Nodes::False
  def ==(other); end

  def eql?(other); end
end

class Arel::Nodes::False
end

module Arel::Nodes::FetchAttribute
  def fetch_attribute(); end
end

module Arel::Nodes::FetchAttribute
end

class Arel::Nodes::Filter
  include ::Arel::WindowPredications
end

class Arel::Nodes::Filter
end

class Arel::Nodes::Following
  def initialize(expr=T.unsafe(nil)); end
end

class Arel::Nodes::Following
end

class Arel::Nodes::FullOuterJoin
end

class Arel::Nodes::FullOuterJoin
end

class Arel::Nodes::Function
  include ::Arel::WindowPredications
  include ::Arel::FilterPredications
  def ==(other); end

  def alias(); end

  def alias=(arg); end

  def as(aliaz); end

  def distinct(); end

  def distinct=(distinct); end

  def eql?(other); end

  def expressions(); end

  def expressions=(expressions); end

  def initialize(expr, aliaz=T.unsafe(nil)); end
end

class Arel::Nodes::Function
end

class Arel::Nodes::GreaterThan
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::GreaterThan
end

class Arel::Nodes::GreaterThanOrEqual
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::GreaterThanOrEqual
end

class Arel::Nodes::Group
end

class Arel::Nodes::Group
end

class Arel::Nodes::Grouping
  def fetch_attribute(&block); end
end

class Arel::Nodes::Grouping
end

class Arel::Nodes::GroupingElement
end

class Arel::Nodes::GroupingElement
end

class Arel::Nodes::GroupingSet
end

class Arel::Nodes::GroupingSet
end

class Arel::Nodes::HomogeneousIn
  def ==(other); end

  def attribute(); end

  def casted_values(); end

  def column_name(); end

  def eql?(other); end

  def fetch_attribute(&block); end

  def initialize(values, attribute, type); end

  def ivars(); end

  def left(); end

  def proc_for_binds(); end

  def right(); end

  def table_name(); end

  def type(); end

  def values(); end
end

class Arel::Nodes::HomogeneousIn
end

class Arel::Nodes::In
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::In
end

class Arel::Nodes::InfixOperation
  def initialize(operator, left, right); end

  def operator(); end
end

class Arel::Nodes::InfixOperation
end

class Arel::Nodes::InnerJoin
end

class Arel::Nodes::InnerJoin
end

class Arel::Nodes::InsertStatement
  def ==(other); end

  def columns(); end

  def columns=(columns); end

  def eql?(other); end

  def initialize(relation=T.unsafe(nil)); end

  def relation(); end

  def relation=(relation); end

  def select(); end

  def select=(select); end

  def values(); end

  def values=(values); end
end

class Arel::Nodes::InsertStatement
end

class Arel::Nodes::Intersect
end

class Arel::Nodes::Intersect
end

class Arel::Nodes::IsDistinctFrom
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::IsDistinctFrom
end

class Arel::Nodes::IsNotDistinctFrom
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::IsNotDistinctFrom
end

class Arel::Nodes::Join
end

class Arel::Nodes::Join
end

class Arel::Nodes::JoinSource
  def empty?(); end

  def initialize(single_source, joinop=T.unsafe(nil)); end
end

class Arel::Nodes::JoinSource
end

class Arel::Nodes::Lateral
end

class Arel::Nodes::Lateral
end

class Arel::Nodes::LeadingJoin
end

class Arel::Nodes::LeadingJoin
end

class Arel::Nodes::LessThan
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::LessThan
end

class Arel::Nodes::LessThanOrEqual
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::LessThanOrEqual
end

class Arel::Nodes::Limit
end

class Arel::Nodes::Limit
end

class Arel::Nodes::Lock
end

class Arel::Nodes::Lock
end

class Arel::Nodes::Matches
  def case_sensitive(); end

  def case_sensitive=(case_sensitive); end

  def escape(); end

  def initialize(left, right, escape=T.unsafe(nil), case_sensitive=T.unsafe(nil)); end
end

class Arel::Nodes::Matches
end

class Arel::Nodes::Max
end

class Arel::Nodes::Max
end

class Arel::Nodes::Min
end

class Arel::Nodes::Min
end

class Arel::Nodes::Multiplication
  def initialize(left, right); end
end

class Arel::Nodes::Multiplication
end

class Arel::Nodes::NamedFunction
  def initialize(name, expr, aliaz=T.unsafe(nil)); end

  def name(); end

  def name=(name); end
end

class Arel::Nodes::NamedFunction
end

class Arel::Nodes::NamedWindow
  def initialize(name); end

  def name(); end

  def name=(name); end
end

class Arel::Nodes::NamedWindow
end

class Arel::Nodes::Node
  include ::Arel::FactoryMethods
  def and(right); end

  def equality?(); end

  def fetch_attribute(); end

  def invert(); end

  def not(); end

  def or(right); end

  def to_sql(engine=T.unsafe(nil)); end
end

class Arel::Nodes::Node
end

class Arel::Nodes::NodeExpression
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications
  include ::Arel::Math
end

class Arel::Nodes::NodeExpression
end

class Arel::Nodes::Not
end

class Arel::Nodes::Not
end

class Arel::Nodes::NotEqual
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::NotEqual
end

class Arel::Nodes::NotIn
  include ::Arel::Nodes::FetchAttribute
end

class Arel::Nodes::NotIn
end

class Arel::Nodes::NotRegexp
end

class Arel::Nodes::NotRegexp
end

class Arel::Nodes::NullsFirst
  def reverse(); end
end

class Arel::Nodes::NullsFirst
end

class Arel::Nodes::NullsLast
  def reverse(); end
end

class Arel::Nodes::NullsLast
end

class Arel::Nodes::Offset
end

class Arel::Nodes::Offset
end

class Arel::Nodes::On
end

class Arel::Nodes::On
end

class Arel::Nodes::OptimizerHints
end

class Arel::Nodes::OptimizerHints
end

class Arel::Nodes::Or
  def fetch_attribute(&block); end
end

class Arel::Nodes::Or
end

class Arel::Nodes::Ordering
  def nulls_first(); end

  def nulls_last(); end
end

class Arel::Nodes::Ordering
end

class Arel::Nodes::OuterJoin
end

class Arel::Nodes::OuterJoin
end

class Arel::Nodes::Over
  def initialize(left, right=T.unsafe(nil)); end

  def operator(); end
end

class Arel::Nodes::Over
end

class Arel::Nodes::Overlaps
  def initialize(left, right); end
end

class Arel::Nodes::Overlaps
end

class Arel::Nodes::Preceding
  def initialize(expr=T.unsafe(nil)); end
end

class Arel::Nodes::Preceding
end

class Arel::Nodes::Quoted
  def infinite?(); end

  def value_before_type_cast(); end

  def value_for_database(); end
end

class Arel::Nodes::Quoted
end

class Arel::Nodes::Range
  def initialize(expr=T.unsafe(nil)); end
end

class Arel::Nodes::Range
end

class Arel::Nodes::Regexp
  def case_sensitive(); end

  def case_sensitive=(case_sensitive); end

  def initialize(left, right, case_sensitive=T.unsafe(nil)); end
end

class Arel::Nodes::Regexp
end

class Arel::Nodes::RightOuterJoin
end

class Arel::Nodes::RightOuterJoin
end

class Arel::Nodes::RollUp
end

class Arel::Nodes::RollUp
end

class Arel::Nodes::Rows
  def initialize(expr=T.unsafe(nil)); end
end

class Arel::Nodes::Rows
end

class Arel::Nodes::SelectCore
  def ==(other); end

  def comment(); end

  def comment=(comment); end

  def eql?(other); end

  def from(); end

  def from=(value); end

  def froms(); end

  def froms=(value); end

  def groups(); end

  def groups=(groups); end

  def havings(); end

  def havings=(havings); end

  def initialize(relation=T.unsafe(nil)); end

  def optimizer_hints(); end

  def optimizer_hints=(optimizer_hints); end

  def projections(); end

  def projections=(projections); end

  def set_quantifier(); end

  def set_quantifier=(set_quantifier); end

  def source(); end

  def source=(source); end

  def wheres(); end

  def wheres=(wheres); end

  def windows(); end

  def windows=(windows); end
end

class Arel::Nodes::SelectCore
end

class Arel::Nodes::SelectStatement
  def ==(other); end

  def cores(); end

  def eql?(other); end

  def initialize(relation=T.unsafe(nil)); end

  def limit(); end

  def limit=(limit); end

  def lock(); end

  def lock=(lock); end

  def offset(); end

  def offset=(offset); end

  def orders(); end

  def orders=(orders); end

  def with(); end

  def with=(with); end
end

class Arel::Nodes::SelectStatement
end

class Arel::Nodes::SqlLiteral
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications
  def encode_with(coder); end

  def fetch_attribute(); end
end

class Arel::Nodes::SqlLiteral
end

class Arel::Nodes::StringJoin
  def initialize(left, right=T.unsafe(nil)); end
end

class Arel::Nodes::StringJoin
end

class Arel::Nodes::Subtraction
  def initialize(left, right); end
end

class Arel::Nodes::Subtraction
end

class Arel::Nodes::Sum
end

class Arel::Nodes::Sum
end

class Arel::Nodes::TableAlias
  def [](name); end

  def able_to_type_cast?(); end

  def name(); end

  def relation(); end

  def table_alias(); end

  def table_name(); end

  def type_cast_for_database(attr_name, value); end

  def type_for_attribute(name); end
end

class Arel::Nodes::TableAlias
end

class Arel::Nodes::True
  def ==(other); end

  def eql?(other); end
end

class Arel::Nodes::True
end

class Arel::Nodes::Unary
  def ==(other); end

  def eql?(other); end

  def expr(); end

  def expr=(expr); end

  def initialize(expr); end

  def value(); end
end

class Arel::Nodes::Unary
end

class Arel::Nodes::UnaryOperation
  def initialize(operator, operand); end

  def operator(); end
end

class Arel::Nodes::UnaryOperation
end

class Arel::Nodes::Union
end

class Arel::Nodes::Union
end

class Arel::Nodes::UnionAll
end

class Arel::Nodes::UnionAll
end

class Arel::Nodes::UnqualifiedColumn
  def attribute(); end

  def attribute=(attribute); end

  def column(); end

  def name(); end

  def relation(); end
end

class Arel::Nodes::UnqualifiedColumn
end

class Arel::Nodes::UpdateStatement
  def ==(other); end

  def eql?(other); end

  def groups(); end

  def groups=(groups); end

  def havings(); end

  def havings=(havings); end

  def initialize(relation=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def limit(); end

  def limit=(limit); end

  def offset(); end

  def offset=(offset); end

  def orders(); end

  def orders=(orders); end

  def relation(); end

  def relation=(relation); end

  def values(); end

  def values=(values); end

  def wheres(); end

  def wheres=(wheres); end
end

class Arel::Nodes::UpdateStatement
end

class Arel::Nodes::ValuesList
  def rows(); end
end

class Arel::Nodes::ValuesList
end

class Arel::Nodes::When
end

class Arel::Nodes::When
end

class Arel::Nodes::Window
  def ==(other); end

  def eql?(other); end

  def frame(expr); end

  def framing(); end

  def framing=(framing); end

  def order(*expr); end

  def orders(); end

  def orders=(orders); end

  def partition(*expr); end

  def partitions(); end

  def partitions=(partitions); end

  def range(expr=T.unsafe(nil)); end

  def rows(expr=T.unsafe(nil)); end
end

class Arel::Nodes::Window
end

class Arel::Nodes::With
  def children(); end
end

class Arel::Nodes::With
end

class Arel::Nodes::WithRecursive
end

class Arel::Nodes::WithRecursive
end

module Arel::Nodes
  def self.build_quoted(other, attribute=T.unsafe(nil)); end
end

module Arel::OrderPredications
  def asc(); end

  def desc(); end
end

module Arel::OrderPredications
end

module Arel::Predications
  def between(other); end

  def concat(other); end

  def contains(other); end

  def does_not_match(other, escape=T.unsafe(nil), case_sensitive=T.unsafe(nil)); end

  def does_not_match_all(others, escape=T.unsafe(nil)); end

  def does_not_match_any(others, escape=T.unsafe(nil)); end

  def does_not_match_regexp(other, case_sensitive=T.unsafe(nil)); end

  def eq(other); end

  def eq_all(others); end

  def eq_any(others); end

  def gt(right); end

  def gt_all(others); end

  def gt_any(others); end

  def gteq(right); end

  def gteq_all(others); end

  def gteq_any(others); end

  def in(other); end

  def in_all(others); end

  def in_any(others); end

  def is_distinct_from(other); end

  def is_not_distinct_from(other); end

  def lt(right); end

  def lt_all(others); end

  def lt_any(others); end

  def lteq(right); end

  def lteq_all(others); end

  def lteq_any(others); end

  def matches(other, escape=T.unsafe(nil), case_sensitive=T.unsafe(nil)); end

  def matches_all(others, escape=T.unsafe(nil), case_sensitive=T.unsafe(nil)); end

  def matches_any(others, escape=T.unsafe(nil), case_sensitive=T.unsafe(nil)); end

  def matches_regexp(other, case_sensitive=T.unsafe(nil)); end

  def not_between(other); end

  def not_eq(other); end

  def not_eq_all(others); end

  def not_eq_any(others); end

  def not_in(other); end

  def not_in_all(others); end

  def not_in_any(others); end

  def overlaps(other); end

  def quoted_array(others); end

  def when(right); end
end

module Arel::Predications
end

class Arel::SelectManager
  include ::Arel::Crud
  def as(other); end

  def comment(*values); end

  def constraints(); end

  def distinct(value=T.unsafe(nil)); end

  def distinct_on(value); end

  def except(other); end

  def exists(); end

  def from(table); end

  def froms(); end

  def group(*columns); end

  def having(expr); end

  def initialize(table=T.unsafe(nil)); end

  def intersect(other); end

  def join(relation, klass=T.unsafe(nil)); end

  def join_sources(); end

  def lateral(table_name=T.unsafe(nil)); end

  def limit(); end

  def limit=(limit); end

  def lock(locking=T.unsafe(nil)); end

  def locked(); end

  def minus(other); end

  def offset(); end

  def offset=(amount); end

  def on(*exprs); end

  def optimizer_hints(*hints); end

  def order(*expr); end

  def orders(); end

  def outer_join(relation); end

  def project(*projections); end

  def projections(); end

  def projections=(projections); end

  def skip(amount); end

  def source(); end

  def take(limit); end

  def taken(); end

  def union(operation, other=T.unsafe(nil)); end

  def where(expr); end

  def where_sql(engine=T.unsafe(nil)); end

  def window(name); end

  def with(*subqueries); end
  STRING_OR_SYMBOL_CLASS = ::T.let(nil, ::T.untyped)
end

class Arel::SelectManager
end

class Arel::Table
  include ::Arel::FactoryMethods
  include ::Arel::AliasPredication
  def ==(other); end

  def [](name, table=T.unsafe(nil)); end

  def able_to_type_cast?(); end

  def alias(name=T.unsafe(nil)); end

  def eql?(other); end

  def from(); end

  def group(*columns); end

  def having(expr); end

  def initialize(name, as: T.unsafe(nil), klass: T.unsafe(nil), type_caster: T.unsafe(nil)); end

  def join(relation, klass=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def order(*expr); end

  def outer_join(relation); end

  def project(*things); end

  def skip(amount); end

  def table_alias(); end

  def table_alias=(table_alias); end

  def table_name(); end

  def take(amount); end

  def type_cast_for_database(attr_name, value); end

  def type_for_attribute(name); end

  def where(condition); end
end

class Arel::Table
  def self.engine(); end

  def self.engine=(engine); end
end

class Arel::TreeManager
  include ::Arel::FactoryMethods
  def ast(); end

  def to_dot(); end

  def to_sql(engine=T.unsafe(nil)); end
end

module Arel::TreeManager::StatementMethods
  def key(); end

  def key=(key); end

  def offset(offset); end

  def order(*expr); end

  def take(limit); end

  def where(expr); end

  def wheres=(exprs); end
end

module Arel::TreeManager::StatementMethods
end

class Arel::TreeManager
end

class Arel::UpdateManager
  include ::Arel::TreeManager::StatementMethods
  def group(columns); end

  def having(expr); end

  def initialize(table=T.unsafe(nil)); end

  def set(values); end

  def table(table); end
end

class Arel::UpdateManager
end

module Arel::Visitors
end

class Arel::Visitors::Dot
  def accept(object, collector); end
end

class Arel::Visitors::Dot::Edge
end

class Arel::Visitors::Dot::Edge
end

class Arel::Visitors::Dot::Node
  def fields(); end

  def fields=(fields); end

  def id(); end

  def id=(id); end

  def initialize(name, id, fields=T.unsafe(nil)); end

  def name(); end

  def name=(name); end
end

class Arel::Visitors::Dot::Node
end

class Arel::Visitors::Dot
end

class Arel::Visitors::MySQL
end

class Arel::Visitors::MySQL
end

class Arel::Visitors::PostgreSQL
end

class Arel::Visitors::PostgreSQL
end

class Arel::Visitors::SQLite
end

class Arel::Visitors::SQLite
end

class Arel::Visitors::ToSql
  def compile(node, collector=T.unsafe(nil)); end

  def initialize(connection); end
end

class Arel::Visitors::ToSql
end

class Arel::Visitors::UnsupportedVisitError
  def initialize(object); end
end

class Arel::Visitors::UnsupportedVisitError
end

class Arel::Visitors::Visitor
  def accept(object, collector=T.unsafe(nil)); end
end

class Arel::Visitors::Visitor
  def self.dispatch_cache(); end
end

module Arel::Visitors
end

module Arel::WindowPredications
  def over(expr=T.unsafe(nil)); end
end

module Arel::WindowPredications
end

module Arel
  def self.arel_node?(value); end

  def self.fetch_attribute(value, &block); end

  def self.sql(raw_sql); end

  def self.star(); end
end

class Array
  include ::JSON::Ext::Generator::GeneratorMethods::Array
  def abbrev(pattern=T.unsafe(nil)); end

  def deconstruct(); end

  def intersect?(arg); end

  def shelljoin(); end

  def to_csv(**options); end

  def to_h(); end
  NOT_SET = ::T.let(nil, ::T.untyped)
end

class BCrypt::Engine
  DEFAULT_COST = ::T.let(nil, ::T.untyped)
  MAX_COST = ::T.let(nil, ::T.untyped)
  MAX_SALT_LENGTH = ::T.let(nil, ::T.untyped)
  MAX_SECRET_BYTESIZE = ::T.let(nil, ::T.untyped)
  MIN_COST = ::T.let(nil, ::T.untyped)
end

class BCrypt::Engine
  def self.autodetect_cost(salt); end

  def self.calibrate(upper_time_limit_in_ms); end

  def self.cost(); end

  def self.cost=(cost); end

  def self.generate_salt(cost=T.unsafe(nil)); end

  def self.hash_secret(secret, salt, _=T.unsafe(nil)); end

  def self.valid_salt?(salt); end

  def self.valid_secret?(secret); end
end

class BCrypt::Password
  def ==(secret); end

  def checksum(); end

  def cost(); end

  def initialize(raw_hash); end

  def is_password?(secret); end

  def salt(); end

  def version(); end
end

class BCrypt::Password
  def self.create(secret, options=T.unsafe(nil)); end

  def self.valid_hash?(h); end
end

class BasicObject
  def as_null_object(); end

  def null_object?(); end

  def received_message?(message, *args, &block); end

  def should(matcher=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def should_not(matcher=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def should_not_receive(message, &block); end

  def should_receive(message, opts=T.unsafe(nil), &block); end

  def stub(message_or_hash, opts=T.unsafe(nil), &block); end

  def stub_chain(*chain, &blk); end

  def unstub(message); end
end

BasicObject::BasicObject = BasicObject

class Benchmark::Job
  def initialize(width); end
end

class Benchmark::Report
  def initialize(width=T.unsafe(nil), format=T.unsafe(nil)); end
end

class Benchmark::Tms
  def to_a(); end

  def to_h(); end
end

class BigDecimal
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::DeprecatedNumericWithFormat
  def clone(); end

  def n_significant_digits(); end

  def precision(); end

  def precision_scale(); end

  def scale(); end

  def to_digits(); end
  EXCEPTION_NaN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  def self.interpret_loosely(arg); end
end

Bindex = Skiptrace

class Binding
  def b(pre: T.unsafe(nil), do: T.unsafe(nil), up_level: T.unsafe(nil)); end

  def break(pre: T.unsafe(nil), do: T.unsafe(nil), up_level: T.unsafe(nil)); end

  def clone(); end

  def console(); end

  def irb(); end
end

module Bootsnap
  VERSION = ::T.let(nil, ::T.untyped)
end

module Bootsnap::CompileCache
  UNCOMPILABLE = ::T.let(nil, ::T.untyped)
end

module Bootsnap::CompileCache::YAML
  SUPPORTED_INTERNAL_ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Bootsnap::ExplicitRequire
  ARCHDIR = ::T.let(nil, ::T.untyped)
  DLEXT = ::T.let(nil, ::T.untyped)
  RUBYLIBDIR = ::T.let(nil, ::T.untyped)
end

module Bootsnap::LoadPathCache
  CACHED_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DLEXT = ::T.let(nil, ::T.untyped)
  DLEXT2 = ::T.let(nil, ::T.untyped)
  DL_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DOT_RB = ::T.let(nil, ::T.untyped)
  DOT_SO = ::T.let(nil, ::T.untyped)
  FALLBACK_SCAN = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Cache
  AGE_THRESHOLD = ::T.let(nil, ::T.untyped)
  BUILTIN_FEATURES = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Path
  RUBY_LIBDIR = ::T.let(nil, ::T.untyped)
  RUBY_SITEDIR = ::T.let(nil, ::T.untyped)
  STABLE = ::T.let(nil, ::T.untyped)
  VOLATILE = ::T.let(nil, ::T.untyped)
end

module Bootsnap::LoadPathCache::PathScanner
  ALTERNATIVE_NATIVE_EXTENSIONS_PATTERN = ::T.let(nil, ::T.untyped)
  BUNDLE_PATH = ::T.let(nil, ::T.untyped)
  NORMALIZE_NATIVE_EXTENSIONS = ::T.let(nil, ::T.untyped)
  REQUIRABLE_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Store
  CURRENT_VERSION = ::T.let(nil, ::T.untyped)
  VERSION_KEY = ::T.let(nil, ::T.untyped)
end

module Brakeman
  CONFIG_FILES = ::T.let(nil, ::T.untyped)
  Empty_Ignore_Note_Exit_Code = ::T.let(nil, ::T.untyped)
  Errors_Found_Exit_Code = ::T.let(nil, ::T.untyped)
  Missing_Checks_Exit_Code = ::T.let(nil, ::T.untyped)
  No_App_Found_Exit_Code = ::T.let(nil, ::T.untyped)
  Not_Latest_Version_Exit_Code = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
  Warnings_Found_Exit_Code = ::T.let(nil, ::T.untyped)
end

class BrickGraphQL::BaseField
  include ::GraphQL::FragmentCache::FieldExtension::Patch
  include ::ActionPolicy::GraphQL::AuthorizedField
end

module BrickGraphQL::BaseInterface::DefinitionMethods
end

module BrickGraphQL::BaseInterface::DefinitionMethods
end

class BrickGraphQL::BaseInterface::UnresolvedTypeError
end

class BrickGraphQL::BaseInterface::UnresolvedTypeError
end

module BrickGraphQL::BaseInterface
  extend ::GraphQL::Schema::Member::HasPath
  extend ::GraphQL::Schema::Member::HasAstNode
  extend ::GraphQL::Schema::Member::HasDirectives
  extend ::BrickGraphQL::BaseInterface::DefinitionMethods
end

class BrickGraphQL::BaseMutation
  include ::ActionPolicy::GraphQL::Behaviour
  include ::ActionPolicy::Behaviour
  include ::ActionPolicy::Behaviours::PolicyFor
  include ::ActionPolicy::Behaviours::Scoping
  include ::ActionPolicy::Behaviours::ThreadMemoized
  include ::ActionPolicy::Behaviours::Memoized
  include ::ActionPolicy::Behaviours::Namespaced
  include ::ActionPolicy::GraphQL::Fields
  include ::ActionPolicy::Behaviours::ThreadMemoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Memoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Namespaced::InstanceMethods
end

class BrickGraphQL::BaseMutation
  extend ::ActionPolicy::GraphQL::Behaviour
  extend ::ActionPolicy::Behaviour
  extend ::ActionPolicy::Behaviours::PolicyFor
  extend ::ActionPolicy::Behaviours::Scoping
  extend ::ActionPolicy::Behaviours::ThreadMemoized
  extend ::ActionPolicy::Behaviours::Memoized
  extend ::ActionPolicy::Behaviours::Namespaced
end

class BrickGraphQL::BaseObject
  include ::GraphQL::FragmentCache::ObjectHelpers
  include ::ActionPolicy::GraphQL::Behaviour
  include ::ActionPolicy::Behaviour
  include ::ActionPolicy::Behaviours::PolicyFor
  include ::ActionPolicy::Behaviours::Scoping
  include ::ActionPolicy::Behaviours::ThreadMemoized
  include ::ActionPolicy::Behaviours::Memoized
  include ::ActionPolicy::Behaviours::Namespaced
  include ::ActionPolicy::GraphQL::Fields
  include ::ActionPolicy::Behaviours::ThreadMemoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Memoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Namespaced::InstanceMethods
end

class BrickGraphQL::BaseObject
  extend ::ActionPolicy::GraphQL::Behaviour
  extend ::ActionPolicy::Behaviour
  extend ::ActionPolicy::Behaviours::PolicyFor
  extend ::ActionPolicy::Behaviours::Scoping
  extend ::ActionPolicy::Behaviours::ThreadMemoized
  extend ::ActionPolicy::Behaviours::Memoized
  extend ::ActionPolicy::Behaviours::Namespaced
end

class BrickGraphQL::BaseResolver
  include ::ActionPolicy::GraphQL::Behaviour
  include ::ActionPolicy::Behaviour
  include ::ActionPolicy::Behaviours::PolicyFor
  include ::ActionPolicy::Behaviours::Scoping
  include ::ActionPolicy::Behaviours::ThreadMemoized
  include ::ActionPolicy::Behaviours::Memoized
  include ::ActionPolicy::Behaviours::Namespaced
  include ::ActionPolicy::Behaviours::ThreadMemoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Memoized::InstanceMethods
  include ::ActionPolicy::Behaviours::Namespaced::InstanceMethods
end

class BrickGraphQL::BaseResolver
  extend ::ActionPolicy::GraphQL::Behaviour
  extend ::ActionPolicy::Behaviour
  extend ::ActionPolicy::Behaviours::PolicyFor
  extend ::ActionPolicy::Behaviours::Scoping
  extend ::ActionPolicy::Behaviours::ThreadMemoized
  extend ::ActionPolicy::Behaviours::Memoized
  extend ::ActionPolicy::Behaviours::Namespaced
end

class BrickGraphQL::BaseSchema
  extend ::GraphQL::FragmentCache::Schema::Patch
end

class BrickGraphQL::BaseUnion::UnresolvedTypeError
end

class BrickGraphQL::BaseUnion::UnresolvedTypeError
end

class Brickdoc::Logger
  include ::ActiveSupport::LoggerThreadSafeLevel
  def silencer(); end

  def silencer=(val); end
end

class Brickdoc::Logger
  def self.silencer(); end

  def self.silencer=(val); end
end

class BrickdocConfig
  include ::BrickdocConfig::GeneratedAttributeMethods
  include ::BrickdocConfig::GeneratedAssociationMethods
end

module BrickdocConfig::GeneratedAssociationMethods
end

module BrickdocConfig::GeneratedAssociationMethods
end

module BrickdocConfig::GeneratedAttributeMethods
end

module BrickdocConfig::GeneratedAttributeMethods
  extend ::Mutex_m
end

module BrickdocPlugin::GithubAuth
end

module BrickdocPlugin::GithubAuth
end

module BrickdocPlugin::GoogleAuth
end

module BrickdocPlugin::GoogleAuth
end

class BrickdocPlugin::Loader
  def method_missing(method, *args, **arg, &block); end
end

class BrickdocSettings::Accessor
  def field(key, *args, **options); end

  def get(key, *args, **options); end

  def get_field(key, *args, **options); end

  def set(key, *args, **options); end

  def touch(key, *args, **options); end
end

class Bundler::APIResponseInvalidDependenciesError
  def status_code(); end
end

class Bundler::APIResponseInvalidDependenciesError
end

class Bundler::CurrentRuby
  def jruby_30?(); end

  def jruby_31?(); end

  def jruby_3?(); end

  def maglev_30?(); end

  def maglev_31?(); end

  def maglev_3?(); end

  def mingw_30?(); end

  def mingw_31?(); end

  def mingw_3?(); end

  def mri_30?(); end

  def mri_31?(); end

  def mri_3?(); end

  def mswin64_30?(); end

  def mswin64_31?(); end

  def mswin64_3?(); end

  def mswin_30?(); end

  def mswin_31?(); end

  def mswin_3?(); end

  def on_30?(); end

  def on_31?(); end

  def on_3?(); end

  def rbx_30?(); end

  def rbx_31?(); end

  def rbx_3?(); end

  def ruby_30?(); end

  def ruby_31?(); end

  def ruby_3?(); end

  def truffleruby_30?(); end

  def truffleruby_31?(); end

  def truffleruby_3?(); end

  def x64_mingw_30?(); end

  def x64_mingw_31?(); end

  def x64_mingw_3?(); end
end

class Bundler::Definition
  def dependencies_for(groups); end

  def locked_dependencies(); end

  def most_specific_locked_platform(); end

  def requested_dependencies(); end

  def resolve_only_locally!(); end
end

class Bundler::Definition
  def self.no_lock(); end

  def self.no_lock=(no_lock); end
end

class Bundler::DepProxy
  def clone(); end
end

class Bundler::DepProxy
  def self.get_proxy(dep, platform); end
end

class Bundler::Dependency
  def branch(); end

  def expanded_platforms(); end

  def git(); end

  def github(); end

  def ref(); end
end

Bundler::Deprecate = Gem::Deprecate

module Bundler::Digest
  SHA1_MASK = ::T.let(nil, ::T.untyped)
  SHA1_WORDS = ::T.let(nil, ::T.untyped)
end

module Bundler::Digest
  def self.sha1(string); end
end

class Bundler::Dsl
  def check_primary_source_safety(); end
  GITHUB_PULL_REQUEST_URL = ::T.let(nil, ::T.untyped)
end

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::EnvironmentPreserver
  def replace_with_backup(); end
end

class Bundler::EnvironmentPreserver
  def self.env_to_hash(env); end

  def self.from_env(); end
end

class Bundler::Fetcher
  def fetch_spec(spec); end

  def fetchers(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def use_api(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  FETCHERS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def initialize(downloader, remote, display_uri); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::Index
  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

module Bundler::FileUtils
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::FileUtils::Entry_
  def link(dest); end
end

module Bundler::FileUtils
  def self.cp_lr(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

  def self.link_entry(src, dest, dereference_root=T.unsafe(nil), remove_destination=T.unsafe(nil)); end
end

class Bundler::GemHelper
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  def allowed_push_host(); end

  def already_tagged?(); end

  def base(); end

  def build_checksum(built_gem_path=T.unsafe(nil)); end

  def build_gem(); end

  def built_gem_path(); end

  def clean?(); end

  def committed?(); end

  def current_branch(); end

  def default_remote(); end

  def gem_command(); end

  def gem_key(); end

  def gem_push?(); end

  def gem_push_host(); end

  def gemspec(); end

  def git_push(remote=T.unsafe(nil)); end

  def guard_clean(); end

  def initialize(base=T.unsafe(nil), name=T.unsafe(nil)); end

  def install(); end

  def install_gem(built_gem_path=T.unsafe(nil), local=T.unsafe(nil)); end

  def name(); end

  def rubygem_push(path); end

  def sh(cmd, &block); end

  def sh_with_input(cmd); end

  def sh_with_status(cmd, &block); end

  def spec_path(); end

  def tag_prefix=(tag_prefix); end

  def tag_version(); end

  def version(); end

  def version_tag(); end
end

class Bundler::GemHelper
  def self.gemspec(&block); end

  def self.install_tasks(opts=T.unsafe(nil)); end

  def self.instance(); end

  def self.instance=(instance); end

  def self.tag_prefix=(prefix); end
end

class Bundler::GemHelpers::PlatformMatch
  def self.specificity_score(spec_platform, user_platform); end
end

module Bundler::GemHelpers
  def self.local_platform(); end

  def self.same_deps(spec, exemplary_spec); end

  def self.same_specificity(platform, spec, exemplary_spec); end
end

class Bundler::GemVersionPromoter
  def initialize(locked_specs=T.unsafe(nil), unlock_gems=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def locked_specs(); end

  def major?(); end

  def minor?(); end

  def prerelease_specified(); end

  def prerelease_specified=(prerelease_specified); end

  def sort_versions(dep, spec_groups); end

  def strict(); end

  def strict=(strict); end

  def unlock_gems(); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::Index
  include ::Enumerable
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::Installer
  def definition(); end
end

class Bundler::LazySpecification
  def eql?(other); end

  def platform_string(); end
end

class Bundler::LockfileParser
  def self.bundled_with(); end
end

module Bundler::Molinillo::SpecificationProvider
  def dependencies_equal?(dependencies, other_dependencies); end
end

class Bundler::PermissionError
  def parent_folder(); end

  def permission_type(); end
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def add_dependency_names(names); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*arg); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def identifier(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def local!(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def spec_names(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::Index
  def installed_plugins(); end

  def plugin_commands(plugin); end

  def unregister_plugin(name); end
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::PluginInstallError
end

class Bundler::Plugin::PluginInstallError
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

module Bundler::Plugin
  def self.list(); end

  def self.save_plugin(name, spec, optional_plugin=T.unsafe(nil)); end

  def self.uninstall(names, options); end
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil)); end
end

class Bundler::RemoteSpecification
  def required_rubygems_version(); end
end

class Bundler::Resolver
  include ::Bundler::GemHelpers
  def results_for(dependency, base); end

  def source_for(name); end
end

class Bundler::Resolver::SpecGroup
  def activated_platforms(); end

  def activated_platforms=(activated_platforms); end

  def sorted_activated_platforms(); end
end

class Bundler::Resolver::SpecGroup
  def self.create_for(specs, all_platforms, specific_platform); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

class Bundler::RubygemsIntegration
  def add_default_gems_to(specs); end

  def add_to_load_path(paths); end

  def all_specs(); end

  def backport_ext_builder_monitor(); end

  def correct_for_windows_path(path); end

  def default_stubs(); end

  def find_bundler(version); end

  def find_name(name); end

  def gem_remote_fetcher(); end

  def load_env_plugins(); end

  def plain_specs(); end

  def plain_specs=(specs); end

  def stub_rubygems(specs); end

  def supports_bundler_trampolining?(); end
end

class Bundler::SelfManager
  def install_locked_bundler_and_restart_with_it_if_needed(); end

  def restart_with_locked_bundler_if_needed(); end

  def update_bundler_and_restart_with_it_if_needed(target); end
end

class Bundler::SelfManager
end

class Bundler::Settings
  def processor_count(); end
  STRING_KEYS = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Path
  def self.keyword_init?(); end
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

class Bundler::Settings
  def self.key_for(key); end
end

class Bundler::Source
  def add_dependency_names(names); end

  def cached!(); end

  def identifier(); end

  def local!(); end

  def local_only!(); end

  def remote!(); end

  def spec_names(); end
end

class Bundler::Source::Git
  def glob(); end

  def local?(); end
end

class Bundler::Source::Rubygems
  def default_cache_path_for(dir); end

  def dependency_api_available?(); end

  def multiple_remotes?(); end

  def no_remotes?(); end

  def remote_names(); end
end

class Bundler::Source::RubygemsAggregate
  def identifier(); end

  def initialize(sources, source_map); end

  def source_map(); end

  def sources(); end

  def specs(); end
end

class Bundler::Source::RubygemsAggregate
end

class Bundler::SourceList
  def add_global_rubygems_remote(uri); end

  def aggregate_global_source?(); end

  def expired_sources?(replacement_sources); end

  def global_path_source(); end

  def implicit_global_source?(); end

  def local_only!(); end

  def lock_other_sources(); end

  def lock_rubygems_sources(); end

  def merged_gem_lockfile_sections!(replacement_source); end

  def merged_gem_lockfile_sections?(); end

  def non_default_explicit_sources(); end

  def non_global_rubygems_sources(); end
end

class Bundler::SourceMap
  def all_requirements(); end

  def dependencies(); end

  def direct_requirements(); end

  def initialize(sources, dependencies, locked_specs); end

  def locked_requirements(); end

  def locked_specs(); end

  def pinned_spec_names(skip=T.unsafe(nil)); end

  def sources(); end
end

class Bundler::SourceMap
end

class Bundler::SpecSet
  include ::Enumerable
  include ::Bundler::TSort
  def missing_specs(); end
end

class Bundler::StubSpecification
  def extensions(); end

  def gem_build_complete_path(); end

  def manually_installed?(); end
end

module Bundler::TSort
  def each_strongly_connected_component(&block); end

  def each_strongly_connected_component_from(node, id_map=T.unsafe(nil), stack=T.unsafe(nil), &block); end

  def strongly_connected_components(); end

  def tsort(); end

  def tsort_each(&block); end

  def tsort_each_child(node); end

  def tsort_each_node(); end
end

class Bundler::TSort::Cyclic
end

class Bundler::TSort::Cyclic
end

module Bundler::TSort
  def self.each_strongly_connected_component(each_node, each_child); end

  def self.each_strongly_connected_component_from(node, each_child, id_map=T.unsafe(nil), stack=T.unsafe(nil)); end

  def self.strongly_connected_components(each_node, each_child); end

  def self.tsort(each_node, each_child); end

  def self.tsort_each(each_node, each_child); end
end

class Bundler::Thor
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def help(command=T.unsafe(nil), subcommand=T.unsafe(nil)); end
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
  TEMPLATE_EXTNAME = ::T.let(nil, ::T.untyped)
  THOR_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module Bundler::Thor::Actions
  def _cleanup_options_and_set(options, key); end

  def _shared_configuration(); end

  def action(instance); end

  def add_file(destination, *args, &block); end

  def add_link(destination, *args); end

  def append_file(path, *args, &block); end

  def append_to_file(path, *args, &block); end

  def apply(path, config=T.unsafe(nil)); end

  def behavior(); end

  def behavior=(behavior); end

  def chmod(path, mode, config=T.unsafe(nil)); end

  def comment_lines(path, flag, *args); end

  def copy_file(source, *args, &block); end

  def create_file(destination, *args, &block); end

  def create_link(destination, *args); end

  def destination_root(); end

  def destination_root=(root); end

  def directory(source, *args, &block); end

  def empty_directory(destination, config=T.unsafe(nil)); end

  def find_in_source_paths(file); end

  def get(source, *args, &block); end

  def gsub_file(path, flag, *args, &block); end

  def in_root(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def inject_into_class(path, klass, *args, &block); end

  def inject_into_file(destination, *args, &block); end

  def inject_into_module(path, module_name, *args, &block); end

  def insert_into_file(destination, *args, &block); end

  def inside(dir=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def link_file(source, *args); end

  def prepend_file(path, *args, &block); end

  def prepend_to_file(path, *args, &block); end

  def relative_to_original_destination_root(path, remove_dot=T.unsafe(nil)); end

  def remove_dir(path, config=T.unsafe(nil)); end

  def remove_file(path, config=T.unsafe(nil)); end

  def run(command, config=T.unsafe(nil)); end

  def run_ruby_script(command, config=T.unsafe(nil)); end

  def source_paths(); end

  def template(source, *args, &block); end

  def thor(command, *args); end

  def uncomment_lines(path, flag, *args); end
  WARNINGS = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Actions::CapturableERB
end

class Bundler::Thor::Actions::CapturableERB
end

module Bundler::Thor::Actions::ClassMethods
  def add_runtime_options!(); end

  def source_paths(); end

  def source_paths_for_search(); end

  def source_root(path=T.unsafe(nil)); end
end

module Bundler::Thor::Actions::ClassMethods
end

class Bundler::Thor::Actions::CreateFile
  def data(); end

  def force_on_collision?(); end

  def force_or_skip_or_conflict(force, skip, &block); end

  def identical?(); end

  def initialize(base, destination, data, config=T.unsafe(nil)); end

  def on_conflict_behavior(&block); end

  def render(); end
end

class Bundler::Thor::Actions::CreateFile
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::Directory
  def execute!(); end

  def file_level_lookup(previous_lookup); end

  def files(lookup); end

  def initialize(base, source, destination=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def source(); end
end

class Bundler::Thor::Actions::Directory
end

class Bundler::Thor::Actions::EmptyDirectory
  def base(); end

  def config(); end

  def convert_encoded_instructions(filename); end

  def destination(); end

  def destination=(destination); end

  def exists?(); end

  def given_destination(); end

  def initialize(base, destination, config=T.unsafe(nil)); end

  def invoke!(); end

  def invoke_with_conflict_check(&block); end

  def on_conflict_behavior(); end

  def on_file_clash_behavior(); end

  def pretend?(); end

  def relative_destination(); end

  def revoke!(); end

  def say_status(status, color); end
end

class Bundler::Thor::Actions::EmptyDirectory
end

class Bundler::Thor::Actions::InjectIntoFile
  def behavior(); end

  def flag(); end

  def initialize(base, destination, data, config); end

  def replace!(regexp, string, force); end

  def replacement(); end

  def say_status(behavior, warning: T.unsafe(nil), color: T.unsafe(nil)); end
end

class Bundler::Thor::Actions::InjectIntoFile
end

module Bundler::Thor::Actions
  def self.included(base); end
end

class Bundler::Thor::AmbiguousCommandError
end

class Bundler::Thor::AmbiguousCommandError
end

Bundler::Thor::AmbiguousTaskError = Bundler::Thor::AmbiguousCommandError

class Bundler::Thor::Argument
  def banner(); end

  def default(); end

  def default_banner(); end

  def description(); end

  def enum(); end

  def human_name(); end

  def initialize(name, options=T.unsafe(nil)); end

  def name(); end

  def required(); end

  def required?(); end

  def show_default?(); end

  def type(); end

  def usage(); end

  def valid_type?(type); end

  def validate!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Argument
end

class Bundler::Thor::Arguments
  def initialize(arguments=T.unsafe(nil)); end

  def parse(args); end

  def remaining(); end
  NUMERIC = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Arguments
  def self.parse(*args); end

  def self.split(args); end
end

module Bundler::Thor::Base
  def args(); end

  def args=(args); end

  def initialize(args=T.unsafe(nil), local_options=T.unsafe(nil), config=T.unsafe(nil)); end

  def options(); end

  def options=(options); end

  def parent_options(); end

  def parent_options=(parent_options); end
end

module Bundler::Thor::Base::ClassMethods
  def all_commands(); end

  def all_tasks(); end

  def allow_incompatible_default_type!(); end

  def argument(name, options=T.unsafe(nil)); end

  def arguments(); end

  def attr_accessor(*arg); end

  def attr_reader(*arg); end

  def attr_writer(*arg); end

  def baseclass(); end

  def basename(); end

  def build_option(name, options, scope); end

  def build_options(options, scope); end

  def check_default_type(); end

  def check_default_type!(); end

  def check_unknown_options(); end

  def check_unknown_options!(); end

  def check_unknown_options?(config); end

  def class_option(name, options=T.unsafe(nil)); end

  def class_options(options=T.unsafe(nil)); end

  def class_options_help(shell, groups=T.unsafe(nil)); end

  def commands(); end

  def create_command(meth); end

  def create_task(meth); end

  def disable_required_check?(command_name); end

  def dispatch(command, given_args, given_opts, config); end

  def exit_on_failure?(); end

  def find_and_refresh_command(name); end

  def find_and_refresh_task(name); end

  def from_superclass(method, default=T.unsafe(nil)); end

  def group(name=T.unsafe(nil)); end

  def handle_argument_error(command, error, args, arity); end

  def handle_no_command_error(command, has_namespace=T.unsafe(nil)); end

  def handle_no_task_error(command, has_namespace=T.unsafe(nil)); end

  def inherited(klass); end

  def initialize_added(); end

  def is_thor_reserved_word?(word, type); end

  def method_added(meth); end

  def namespace(name=T.unsafe(nil)); end

  def no_commands(&block); end

  def no_commands?(); end

  def no_commands_context(); end

  def no_tasks(&block); end

  def print_options(shell, options, group_name=T.unsafe(nil)); end

  def public_command(*names); end

  def public_task(*names); end

  def remove_argument(*names); end

  def remove_class_option(*names); end

  def remove_command(*names); end

  def remove_task(*names); end

  def start(given_args=T.unsafe(nil), config=T.unsafe(nil)); end

  def stop_on_unknown_option?(command_name); end

  def strict_args_position(); end

  def strict_args_position!(); end

  def strict_args_position?(config); end

  def tasks(); end
end

module Bundler::Thor::Base::ClassMethods
end

module Bundler::Thor::Base
  def self.included(base); end

  def self.register_klass_file(klass); end

  def self.shell(); end

  def self.shell=(shell); end

  def self.subclass_files(); end

  def self.subclasses(); end
end

class Bundler::Thor::Command
  def formatted_usage(klass, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def handle_argument_error?(instance, error, caller); end

  def handle_no_method_error?(instance, error, caller); end

  def hidden?(); end

  def initialize(name, description, long_description, usage, options=T.unsafe(nil)); end

  def local_method?(instance, name); end

  def not_debugging?(instance); end

  def private_method?(instance); end

  def public_method?(instance); end

  def required_arguments_for(klass, usage); end

  def required_options(); end

  def run(instance, args=T.unsafe(nil)); end

  def sans_backtrace(backtrace, caller); end
  FILE_REGEXP = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Command
end

module Bundler::Thor::CoreExt
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
  def [](key); end

  def []=(key, value); end

  def convert_key(key); end

  def delete(key); end

  def except(*keys); end

  def fetch(key, *args); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(key); end

  def merge(other); end

  def merge!(other); end

  def method_missing(method, *args); end

  def replace(other_hash); end

  def reverse_merge(other); end

  def values_at(*indices); end
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
end

module Bundler::Thor::CoreExt
end

Bundler::Thor::Correctable = DidYouMean::Correctable

class Bundler::Thor::DynamicCommand
  def initialize(name, options=T.unsafe(nil)); end
end

class Bundler::Thor::DynamicCommand
end

Bundler::Thor::DynamicTask = Bundler::Thor::DynamicCommand

class Bundler::Thor::Error
end

class Bundler::Thor::Error
end

class Bundler::Thor::Group
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def _invoke_for_class_method(klass, command=T.unsafe(nil), *args, &block); end
end

class Bundler::Thor::Group
  extend ::Bundler::Thor::Base::ClassMethods
  extend ::Bundler::Thor::Invocation::ClassMethods
  def self.banner(); end

  def self.desc(description=T.unsafe(nil)); end

  def self.get_options_from_invocations(group_options, base_options); end

  def self.handle_argument_error(command, error, _args, arity); end

  def self.help(shell); end

  def self.invocation_blocks(); end

  def self.invocations(); end

  def self.invoke(*names, &block); end

  def self.invoke_from_option(*names, &block); end

  def self.printable_commands(*arg); end

  def self.printable_tasks(*arg); end

  def self.remove_invocation(*names); end

  def self.self_command(); end

  def self.self_task(); end
end

class Bundler::Thor::HiddenCommand
end

class Bundler::Thor::HiddenCommand
end

Bundler::Thor::HiddenTask = Bundler::Thor::HiddenCommand

module Bundler::Thor::Invocation
  def _parse_initialization_options(args, opts, config); end

  def _retrieve_class_and_command(name, sent_command=T.unsafe(nil)); end

  def _retrieve_class_and_task(name, sent_command=T.unsafe(nil)); end

  def _shared_configuration(); end

  def current_command_chain(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def invoke(name=T.unsafe(nil), *args); end

  def invoke_all(); end

  def invoke_command(command, *args); end

  def invoke_task(command, *args); end

  def invoke_with_padding(*args); end
end

module Bundler::Thor::Invocation::ClassMethods
  def prepare_for_invocation(key, name); end
end

module Bundler::Thor::Invocation::ClassMethods
end

module Bundler::Thor::Invocation
  def self.included(base); end
end

class Bundler::Thor::InvocationError
end

class Bundler::Thor::InvocationError
end

module Bundler::Thor::LineEditor
end

class Bundler::Thor::LineEditor::Basic
  def initialize(prompt, options); end

  def options(); end

  def prompt(); end

  def readline(); end
end

class Bundler::Thor::LineEditor::Basic
  def self.available?(); end
end

class Bundler::Thor::LineEditor::Readline
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
  def initialize(text); end

  def matches(); end
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
end

class Bundler::Thor::LineEditor::Readline
end

module Bundler::Thor::LineEditor
  def self.best_available(); end

  def self.readline(prompt, options=T.unsafe(nil)); end
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::NestedContext
  def enter(); end

  def entered?(); end
end

class Bundler::Thor::NestedContext
end

class Bundler::Thor::NoKwargSpellChecker
  def initialize(dictionary); end
end

class Bundler::Thor::NoKwargSpellChecker
end

class Bundler::Thor::Option
  def aliases(); end

  def array?(); end

  def boolean?(); end

  def dasherize(str); end

  def dasherized?(); end

  def group(); end

  def hash?(); end

  def hide(); end

  def lazy_default(); end

  def numeric?(); end

  def repeatable(); end

  def string?(); end

  def switch_name(); end

  def undasherize(str); end

  def usage(padding=T.unsafe(nil)); end

  def validate_default_type!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Option
  def self.parse(key, value); end
end

class Bundler::Thor::Options
  def assign_result!(option, result); end

  def check_unknown!(); end

  def current_is_switch?(); end

  def current_is_switch_formatted?(); end

  def initialize(hash_options=T.unsafe(nil), defaults=T.unsafe(nil), stop_on_unknown=T.unsafe(nil), disable_required_check=T.unsafe(nil)); end

  def normalize_switch(arg); end

  def parse_boolean(switch); end

  def parse_peek(switch, option); end

  def parsing_options?(); end

  def switch?(arg); end

  def switch_option(arg); end

  def unshift(arg, is_value: T.unsafe(nil)); end
  EQ_RE = ::T.let(nil, ::T.untyped)
  LONG_RE = ::T.let(nil, ::T.untyped)
  OPTS_END = ::T.let(nil, ::T.untyped)
  SHORT_NUM = ::T.let(nil, ::T.untyped)
  SHORT_RE = ::T.let(nil, ::T.untyped)
  SHORT_SQ_RE = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Options
  def self.to_switches(options); end
end

module Bundler::Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module Bundler::Thor::RakeCompat
  def self.included(base); end

  def self.rake_classes(); end
end

class Bundler::Thor::RequiredArgumentMissingError
end

class Bundler::Thor::RequiredArgumentMissingError
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Shell
  def _shared_configuration(); end

  def ask(*args, &block); end

  def error(*args, &block); end

  def file_collision(*args, &block); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def no?(*args, &block); end

  def print_in_columns(*args, &block); end

  def print_table(*args, &block); end

  def print_wrapped(*args, &block); end

  def say(*args, &block); end

  def say_error(*args, &block); end

  def say_status(*args, &block); end

  def set_color(*args, &block); end

  def shell(); end

  def shell=(shell); end

  def terminal_width(*args, &block); end

  def with_padding(); end

  def yes?(*args, &block); end
  SHELL_DELEGATED_METHODS = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Basic
  def answer_match(possibilities, answer, case_insensitive); end

  def as_unicode(); end

  def ask(statement, *args); end

  def ask_filtered(statement, color, options); end

  def ask_simply(statement, color, options); end

  def base(); end

  def base=(base); end

  def can_display_colors?(); end

  def dynamic_width(); end

  def dynamic_width_stty(); end

  def dynamic_width_tput(); end

  def error(statement); end

  def file_collision(destination); end

  def file_collision_help(); end

  def git_merge_tool(); end

  def indent(count=T.unsafe(nil)); end

  def is?(value); end

  def lookup_color(color); end

  def merge(destination, content); end

  def merge_tool(); end

  def mute(); end

  def mute?(); end

  def no?(statement, color=T.unsafe(nil)); end

  def padding(); end

  def padding=(value); end

  def prepare_message(message, *color); end

  def print_in_columns(array); end

  def print_table(array, options=T.unsafe(nil)); end

  def print_wrapped(message, options=T.unsafe(nil)); end

  def quiet?(); end

  def say(message=T.unsafe(nil), color=T.unsafe(nil), force_new_line=T.unsafe(nil)); end

  def say_error(message=T.unsafe(nil), color=T.unsafe(nil), force_new_line=T.unsafe(nil)); end

  def say_status(status, message, log_status=T.unsafe(nil)); end

  def set_color(string, *arg); end

  def show_diff(destination, content); end

  def stderr(); end

  def stdout(); end

  def terminal_width(); end

  def truncate(string, width); end

  def unix?(); end

  def yes?(statement, color=T.unsafe(nil)); end
  DEFAULT_TERMINAL_WIDTH = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Basic
end

class Bundler::Thor::Shell::Color
  def are_colors_disabled?(); end

  def are_colors_supported?(); end

  def diff_lcs_loaded?(); end

  def output_diff_line(diff); end

  def set_color(string, *colors); end
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Color
end

class Bundler::Thor::Shell::HTML
  def ask(statement, color=T.unsafe(nil)); end

  def diff_lcs_loaded?(); end

  def output_diff_line(diff); end

  def set_color(string, *colors); end
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::HTML
end

module Bundler::Thor::Shell
end

Bundler::Thor::Task = Bundler::Thor::Command

class Bundler::Thor::UndefinedCommandError
  include ::DidYouMean::Correctable
  def all_commands(); end

  def command(); end

  def initialize(command, all_commands, namespace); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
end

class Bundler::Thor::UndefinedCommandError
end

Bundler::Thor::UndefinedTaskError = Bundler::Thor::UndefinedCommandError

class Bundler::Thor::UnknownArgumentError
  include ::DidYouMean::Correctable
  def initialize(switches, unknown); end

  def switches(); end

  def unknown(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
end

class Bundler::Thor::UnknownArgumentError
end

module Bundler::Thor::Util
end

module Bundler::Thor::Util
  def self.camel_case(str); end

  def self.escape_globs(path); end

  def self.escape_html(string); end

  def self.find_by_namespace(namespace); end

  def self.find_class_and_command_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.find_class_and_task_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.globs_for(path); end

  def self.load_thorfile(path, content=T.unsafe(nil), debug=T.unsafe(nil)); end

  def self.namespace_from_thor_class(constant); end

  def self.namespaces_in_content(contents, file=T.unsafe(nil)); end

  def self.ruby_command(); end

  def self.snake_case(str); end

  def self.thor_classes_in(klass); end

  def self.thor_root(); end

  def self.thor_root_glob(); end

  def self.user_home(); end
end

class Bundler::Thor
  extend ::Bundler::Thor::Base::ClassMethods
  extend ::Bundler::Thor::Invocation::ClassMethods
  def self.banner(command, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.check_unknown_options!(options=T.unsafe(nil)); end

  def self.command_help(shell, command_name); end

  def self.default_command(meth=T.unsafe(nil)); end

  def self.default_task(meth=T.unsafe(nil)); end

  def self.deprecation_warning(message); end

  def self.desc(usage, description, options=T.unsafe(nil)); end

  def self.disable_required_check(); end

  def self.disable_required_check!(*command_names); end

  def self.disable_required_check?(command); end

  def self.dispatch(meth, given_args, given_opts, config); end

  def self.dynamic_command_class(); end

  def self.find_command_possibilities(meth); end

  def self.find_task_possibilities(meth); end

  def self.help(shell, subcommand=T.unsafe(nil)); end

  def self.long_desc(long_description, options=T.unsafe(nil)); end

  def self.map(mappings=T.unsafe(nil), **kw); end

  def self.method_option(name, options=T.unsafe(nil)); end

  def self.method_options(options=T.unsafe(nil)); end

  def self.normalize_command_name(meth); end

  def self.normalize_task_name(meth); end

  def self.option(name, options=T.unsafe(nil)); end

  def self.options(options=T.unsafe(nil)); end

  def self.package_name(name, _=T.unsafe(nil)); end

  def self.printable_commands(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.printable_tasks(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.register(klass, subcommand_name, usage, description, options=T.unsafe(nil)); end

  def self.retrieve_command_name(args); end

  def self.retrieve_task_name(args); end

  def self.stop_on_unknown_option(); end

  def self.stop_on_unknown_option!(*command_names); end

  def self.stop_on_unknown_option?(command); end

  def self.subcommand(subcommand, subcommand_class); end

  def self.subcommand_classes(); end

  def self.subcommand_help(cmd); end

  def self.subcommands(); end

  def self.subtask(subcommand, subcommand_class); end

  def self.subtask_help(cmd); end

  def self.subtasks(); end

  def self.task_help(shell, command_name); end
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg, newline=T.unsafe(nil)); end

  def debug(msg, newline=T.unsafe(nil)); end

  def debug?(); end

  def error(msg, newline=T.unsafe(nil), color=T.unsafe(nil)); end

  def info(msg, newline=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg, newline=T.unsafe(nil), color=T.unsafe(nil)); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

module Bundler::URI
  include ::Bundler::URI::RFC2396_REGEXP
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ABS_URI_REF = ::T.let(nil, ::T.untyped)
  DEFAULT_PARSER = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  OPAQUE = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REGISTRY = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  REL_URI_REF = ::T.let(nil, ::T.untyped)
  RFC3986_PARSER = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TBLDECWWWCOMP_ = ::T.let(nil, ::T.untyped)
  TBLENCWWWCOMP_ = ::T.let(nil, ::T.untyped)
  UNSAFE = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_CODE = ::T.let(nil, ::T.untyped)
  WEB_ENCODINGS_ = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::BadURIError
end

class Bundler::URI::BadURIError
end

class Bundler::URI::Error
end

class Bundler::URI::Error
end

class Bundler::URI::FTP
  def set_typecode(v); end

  def typecode(); end

  def typecode=(typecode); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  TYPECODE = ::T.let(nil, ::T.untyped)
  TYPECODE_PREFIX = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class Bundler::URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::File
end

class Bundler::URI::Generic
  include ::Bundler::URI
  include ::Bundler::URI::RFC2396_REGEXP
  def +(oth); end

  def -(oth); end

  def ==(oth); end

  def absolute(); end

  def absolute?(); end

  def coerce(oth); end

  def component(); end

  def component_ary(); end

  def default_port(); end

  def eql?(oth); end

  def find_proxy(env=T.unsafe(nil)); end

  def fragment(); end

  def fragment=(v); end

  def hierarchical?(); end

  def host(); end

  def host=(v); end

  def hostname(); end

  def hostname=(v); end

  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser=T.unsafe(nil), arg_check=T.unsafe(nil)); end

  def merge(oth); end

  def merge!(oth); end

  def normalize(); end

  def normalize!(); end

  def opaque(); end

  def opaque=(v); end

  def parser(); end

  def password(); end

  def password=(password); end

  def path(); end

  def path=(v); end

  def port(); end

  def port=(v); end

  def query(); end

  def query=(v); end

  def registry(); end

  def registry=(v); end

  def relative?(); end

  def route_from(oth); end

  def route_to(oth); end

  def scheme(); end

  def scheme=(v); end

  def select(*components); end

  def set_host(v); end

  def set_opaque(v); end

  def set_password(v); end

  def set_path(v); end

  def set_port(v); end

  def set_registry(v); end

  def set_scheme(v); end

  def set_user(v); end

  def set_userinfo(user, password=T.unsafe(nil)); end

  def user(); end

  def user=(user); end

  def userinfo(); end

  def userinfo=(userinfo); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  USE_REGISTRY = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::Generic
  def self.build(args); end

  def self.build2(args); end

  def self.component(); end

  def self.default_port(); end

  def self.use_proxy?(hostname, addr, port, no_proxy); end

  def self.use_registry(); end
end

class Bundler::URI::HTTP
  def request_uri(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::HTTP
end

class Bundler::URI::HTTPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::HTTPS
end

class Bundler::URI::InvalidComponentError
end

class Bundler::URI::InvalidComponentError
end

class Bundler::URI::InvalidURIError
end

class Bundler::URI::InvalidURIError
end

class Bundler::URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  SCOPE = ::T.let(nil, ::T.untyped)
  SCOPE_BASE = ::T.let(nil, ::T.untyped)
  SCOPE_ONE = ::T.let(nil, ::T.untyped)
  SCOPE_SUB = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::LDAP
end

class Bundler::URI::LDAPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::LDAPS
end

class Bundler::URI::MailTo
  def headers(); end

  def headers=(v); end

  def initialize(*arg); end

  def set_headers(v); end

  def set_to(v); end

  def to(); end

  def to=(v); end

  def to_mailtext(); end

  def to_rfc822text(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  EMAIL_REGEXP = ::T.let(nil, ::T.untyped)
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::MailTo
end

Bundler::URI::Parser = Bundler::URI::RFC2396_Parser

Bundler::URI::REGEXP = Bundler::URI::RFC2396_REGEXP

class Bundler::URI::RFC2396_Parser
  include ::Bundler::URI::RFC2396_REGEXP
  def escape(str, unsafe=T.unsafe(nil)); end

  def extract(str, schemes=T.unsafe(nil)); end

  def initialize(opts=T.unsafe(nil)); end

  def join(*uris); end

  def make_regexp(schemes=T.unsafe(nil)); end

  def parse(uri); end

  def pattern(); end

  def regexp(); end

  def split(uri); end

  def unescape(str, escaped=T.unsafe(nil)); end
end

class Bundler::URI::RFC2396_Parser
end

module Bundler::URI::RFC2396_REGEXP
end

module Bundler::URI::RFC2396_REGEXP::PATTERN
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ALNUM = ::T.let(nil, ::T.untyped)
  ALPHA = ::T.let(nil, ::T.untyped)
  DOMLABEL = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HEX = ::T.let(nil, ::T.untyped)
  HIER_PART = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  HOSTNAME = ::T.let(nil, ::T.untyped)
  HOSTPORT = ::T.let(nil, ::T.untyped)
  IPV4ADDR = ::T.let(nil, ::T.untyped)
  IPV6ADDR = ::T.let(nil, ::T.untyped)
  IPV6REF = ::T.let(nil, ::T.untyped)
  NET_PATH = ::T.let(nil, ::T.untyped)
  OPAQUE_PART = ::T.let(nil, ::T.untyped)
  PATH_SEGMENTS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REG_NAME = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_SEGMENT = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TOPLABEL = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  URIC = ::T.let(nil, ::T.untyped)
  URIC_NO_SLASH = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  X_ABS_URI = ::T.let(nil, ::T.untyped)
  X_REL_URI = ::T.let(nil, ::T.untyped)
end

module Bundler::URI::RFC2396_REGEXP::PATTERN
end

module Bundler::URI::RFC2396_REGEXP
end

class Bundler::URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_URI = ::T.let(nil, ::T.untyped)
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::RFC3986_Parser
end

module Bundler::URI::Util
end

module Bundler::URI::Util
  def self.make_components_hash(klass, array_hash); end
end

module Bundler::URI
  def self.decode_www_form(str, enc=T.unsafe(nil), separator: T.unsafe(nil), use__charset_: T.unsafe(nil), isindex: T.unsafe(nil)); end

  def self.decode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.encode_www_form(enum, enc=T.unsafe(nil)); end

  def self.encode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.extract(str, schemes=T.unsafe(nil), &block); end

  def self.for(scheme, *arguments, default: T.unsafe(nil)); end

  def self.get_encoding(label); end

  def self.join(*str); end

  def self.parse(uri); end

  def self.regexp(schemes=T.unsafe(nil)); end

  def self.scheme_list(); end

  def self.split(uri); end
end

module Bundler::VersionRanges
end

class Bundler::VersionRanges::NEq
  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::NEq
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def cover?(v); end

  def empty?(); end

  def left(); end

  def left=(_); end

  def right(); end

  def right=(_); end

  def single?(); end
  INFINITY = ::T.let(nil, ::T.untyped)
  UNIVERSAL = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class Bundler::VersionRanges::ReqR::Endpoint
  def inclusive(); end

  def inclusive=(_); end

  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::ReqR::Endpoint
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Bundler::VersionRanges
  def self.empty?(ranges, neqs); end

  def self.for(requirement); end

  def self.for_many(requirements); end
end

module Bundler
  def self.configure_gem_home_and_path(path=T.unsafe(nil)); end

  def self.most_specific_locked_platform?(platform); end

  def self.original_exec(*args); end

  def self.original_system(*args); end

  def self.preferred_gemfile_name(); end

  def self.reset_settings_and_root!(); end

  def self.self_manager(); end

  def self.unbundled_env(); end

  def self.unbundled_exec(*args); end

  def self.unbundled_system(*args); end
end

class CGI
  VERSION = ::T.let(nil, ::T.untyped)
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
end

class CSV
  def close(*args, **arg, &block); end

  def close_read(*args, **arg, &block); end

  def close_write(*args, **arg, &block); end

  def closed?(*args, **arg, &block); end

  def external_encoding(*args, **arg, &block); end

  def fcntl(*args, **arg, &block); end

  def fileno(*args, **arg, &block); end

  def flush(*args, **arg, &block); end

  def fsync(*args, **arg, &block); end

  def internal_encoding(*args, **arg, &block); end

  def isatty(*args, **arg, &block); end

  def pid(*args, **arg, &block); end

  def pos(*args, **arg, &block); end

  def pos=(*args, **arg, &block); end

  def reopen(*args, **arg, &block); end

  def seek(*args, **arg, &block); end

  def string(*args, **arg, &block); end

  def sync(*args, **arg, &block); end

  def sync=(*args, **arg, &block); end

  def tell(*args, **arg, &block); end

  def truncate(*args, **arg, &block); end

  def tty?(*args, **arg, &block); end
  ConverterEncoding = ::T.let(nil, ::T.untyped)
  Converters = ::T.let(nil, ::T.untyped)
  DateMatcher = ::T.let(nil, ::T.untyped)
  DateTimeMatcher = ::T.let(nil, ::T.untyped)
  HeaderConverters = ::T.let(nil, ::T.untyped)
end

class CSV::FieldInfo
  def header(); end

  def header=(_); end

  def index(); end

  def index=(_); end

  def line(); end

  def line=(_); end
end

class CSV::FieldInfo
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class CSV::FieldsConverter
  include ::Enumerable
  def add_converter(name=T.unsafe(nil), &converter); end

  def convert(fields, headers, lineno); end

  def each(&block); end

  def empty?(); end

  def initialize(options=T.unsafe(nil)); end
end

class CSV::FieldsConverter
end

module CSV::InputRecordSeparator
end

module CSV::InputRecordSeparator
  def self.value(); end
end

class CSV::MalformedCSVError
  def line_number(); end

  def lineno(); end
end

class CSV::Parser
  def column_separator(); end

  def field_size_limit(); end

  def header_row?(); end

  def headers(); end

  def initialize(input, options); end

  def liberal_parsing?(); end

  def line(); end

  def lineno(); end

  def parse(&block); end

  def quote_character(); end

  def return_headers?(); end

  def row_separator(); end

  def skip_blanks?(); end

  def skip_lines(); end

  def unconverted_fields?(); end

  def use_headers?(); end
  SCANNER_TEST = ::T.let(nil, ::T.untyped)
  STRING_SCANNER_SCAN_ACCEPT_STRING = ::T.let(nil, ::T.untyped)
end

class CSV::Parser::InputsScanner
  def each_line(row_separator); end

  def eos?(); end

  def initialize(inputs, encoding, row_separator, chunk_size: T.unsafe(nil)); end

  def keep_back(); end

  def keep_drop(); end

  def keep_end(); end

  def keep_start(); end

  def rest(); end

  def scan(pattern); end

  def scan_all(pattern); end
end

class CSV::Parser::InputsScanner
end

class CSV::Parser::InvalidEncoding
end

class CSV::Parser::InvalidEncoding
end

class CSV::Parser::Scanner
  def each_line(row_separator); end

  def initialize(*args); end

  def keep_back(); end

  def keep_drop(); end

  def keep_end(); end

  def keep_start(); end

  def scan_all(arg); end
end

class CSV::Parser::Scanner
end

class CSV::Parser
end

class CSV::Row
  def dig(index_or_header, *indexes); end

  def each_pair(&block); end

  def empty?(*args, **arg, &block); end

  def length(*args, **arg, &block); end

  def size(*args, **arg, &block); end

  def to_ary(*arg); end
end

class CSV::Row
  extend ::Forwardable
end

class CSV::Table
  def initialize(array_of_rows, headers: T.unsafe(nil)); end

  def table(); end
end

class CSV::Table
  extend ::Forwardable
end

class CSV::Writer
  def <<(row); end

  def headers(); end

  def initialize(output, options); end

  def lineno(); end

  def rewind(); end
end

class CSV::Writer
end

class CSV
  extend ::Forwardable
end

class Class
  def any_instance(); end

  def json_creatable?(); end
end

module Cloak
  VERSION = ::T.let(nil, ::T.untyped)
end

class Cloak::Redis
  include ::Cloak::Utils
  def auth(*args, **arg, &block); end

  def bgrewriteaof(*args, **arg, &block); end

  def bgsave(*args, **arg, &block); end

  def bitcount(key, start=T.unsafe(nil), stop=T.unsafe(nil)); end

  def bitpos(key, bit, start=T.unsafe(nil), stop=T.unsafe(nil)); end

  def blpop(*args); end

  def brpop(*args); end

  def brpoplpush(source, destination, deprecated_timeout=T.unsafe(nil), timeout: T.unsafe(nil)); end

  def bzpopmax(*args); end

  def bzpopmin(*args); end

  def client(*args, **arg, &block); end

  def config(*args, **arg, &block); end

  def dbsize(*args, **arg, &block); end

  def debug(*args); end

  def decr(key); end

  def decrby(key, decrement); end

  def del(*keys); end

  def discard(*args, **arg, &block); end

  def dump(key); end

  def echo(value); end

  def exec(*args, **arg, &block); end

  def exists(*keys); end

  def exists?(*keys); end

  def expire(key, seconds); end

  def expireat(key, unix_time); end

  def flushall(*args, **arg, &block); end

  def flushdb(*args, **arg, &block); end

  def get(key); end

  def getbit(key, offset); end

  def getrange(key, start, stop); end

  def getset(key, value); end

  def hdel(key, *fields); end

  def hexists(key, field); end

  def hget(key, field); end

  def hgetall(key); end

  def hincrby(key, field, increment); end

  def hincrbyfloat(key, field, increment); end

  def hkeys(key); end

  def hlen(key); end

  def hmget(key, *fields, &blk); end

  def hmset(key, *attrs); end

  def hscan(key, cursor, count: T.unsafe(nil)); end

  def hscan_each(key, **options, &block); end

  def hset(key, *attrs); end

  def hsetnx(key, field, value); end

  def hvals(key); end

  def incr(key); end

  def incrby(key, increment); end

  def incrbyfloat(key, increment); end

  def info(*args, **arg, &block); end

  def initialize(key: T.unsafe(nil), **options); end

  def keys(pattern=T.unsafe(nil)); end

  def lastsave(*args, **arg, &block); end

  def lindex(key, index); end

  def linsert(key, where, pivot, value); end

  def llen(key); end

  def lpop(key); end

  def lpush(key, value); end

  def lpushx(key, value); end

  def lrange(key, start, stop); end

  def lset(key, index, value); end

  def ltrim(key, start, stop); end

  def mapped_hmget(key, *fields); end

  def mapped_hmset(key, hash); end

  def mapped_mget(*keys); end

  def mapped_mset(hash); end

  def mapped_msetnx(hash); end

  def mget(*keys, &blk); end

  def monitor(*args, **arg, &block); end

  def move(key, db); end

  def mset(*args); end

  def msetnx(*args); end

  def multi(&block); end

  def object(*args); end

  def persist(key); end

  def pexpire(key, milliseconds); end

  def pexpireat(key, ms_unix_time); end

  def pfadd(key, member); end

  def pfcount(*keys); end

  def pfmerge(dest_key, *source_key); end

  def ping(message=T.unsafe(nil)); end

  def pipelined(&block); end

  def psetex(key, ttl, value); end

  def pttl(key); end

  def quit(*args, **arg, &block); end

  def randomkey(); end

  def rename(old_name, new_name); end

  def renamenx(old_name, new_name); end

  def restore(key, ttl, serialized_value, replace: T.unsafe(nil)); end

  def rpop(key); end

  def rpoplpush(source, destination); end

  def rpush(key, value); end

  def rpushx(key, value); end

  def sadd(key, member); end

  def save(*args, **arg, &block); end

  def scan(cursor, count: T.unsafe(nil)); end

  def scan_each(**options, &block); end

  def scard(key); end

  def sdiff(*keys); end

  def sdiffstore(destination, *keys); end

  def select(*args, **arg, &block); end

  def set(key, value, **options); end

  def setex(key, ttl, value); end

  def setnx(key, value); end

  def shutdown(*args, **arg, &block); end

  def sinter(*keys); end

  def sinterstore(destination, *keys); end

  def sismember(key, member); end

  def slaveof(*args, **arg, &block); end

  def slowlog(*args, **arg, &block); end

  def smembers(key); end

  def smove(source, destination, member); end

  def spop(key, count=T.unsafe(nil)); end

  def srandmember(key, count=T.unsafe(nil)); end

  def srem(key, member); end

  def sscan(key, cursor, count: T.unsafe(nil)); end

  def sscan_each(key, **options, &block); end

  def strlen(key); end

  def sunion(*keys); end

  def sunionstore(destination, *keys); end

  def sync(*args, **arg, &block); end

  def time(*args, **arg, &block); end

  def ttl(key); end

  def type(key); end

  def unlink(*keys); end

  def unwatch(*args, **arg, &block); end

  def zadd(key, *args, **options); end

  def zcard(key); end

  def zcount(key, min, max); end

  def zincrby(key, increment, member); end

  def zinterstore(destination, keys, weights: T.unsafe(nil), aggregate: T.unsafe(nil)); end

  def zpopmax(key, count=T.unsafe(nil)); end

  def zpopmin(key, count=T.unsafe(nil)); end

  def zrange(key, start, stop, withscores: T.unsafe(nil), with_scores: T.unsafe(nil)); end

  def zrangebyscore(key, min, max, withscores: T.unsafe(nil), with_scores: T.unsafe(nil), limit: T.unsafe(nil)); end

  def zrank(key, member); end

  def zrem(key, member); end

  def zremrangebyrank(key, start, stop); end

  def zremrangebyscore(key, min, max); end

  def zrevrange(key, start, stop, withscores: T.unsafe(nil), with_scores: T.unsafe(nil)); end

  def zrevrangebyscore(key, max, min, withscores: T.unsafe(nil), with_scores: T.unsafe(nil), limit: T.unsafe(nil)); end

  def zrevrank(key, member); end

  def zscan(key, cursor, count: T.unsafe(nil)); end

  def zscan_each(key, **options, &block); end

  def zscore(key, member); end

  def zunionstore(destination, keys, weights: T.unsafe(nil), aggregate: T.unsafe(nil)); end
end

class Cloak::Redis
  extend ::Forwardable
end

module Cloak::Utils
  HLL_ELEMENT_NONCE = ::T.let(nil, ::T.untyped)
  KEY_NONCE = ::T.let(nil, ::T.untyped)
  MEMBER_NONCE = ::T.let(nil, ::T.untyped)
end

module Colorize::ClassMethods
  def color_codes(); end

  def color_matrix(_=T.unsafe(nil)); end

  def color_methods(); end

  def color_samples(); end

  def colors(); end

  def disable_colorization(value=T.unsafe(nil)); end

  def disable_colorization=(value); end

  def mode_codes(); end

  def modes(); end

  def modes_methods(); end
end

module Colorize::InstanceMethods
  def colorize(params); end

  def colorized?(); end

  def uncolorize(); end
end

class Complex
  def to_d(*args); end
end

module Concurrent
  NULL = ::T.let(nil, ::T.untyped)
  NULL_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Concurrent::AbstractExecutorService
  FALLBACK_POLICIES = ::T.let(nil, ::T.untyped)
end

Concurrent::Collection::MapImplementation = Concurrent::Collection::MriMapBackend

class Concurrent::ConcurrentUpdateError
  CONC_UP_ERR_BACKTRACE = ::T.let(nil, ::T.untyped)
end

class Concurrent::LockFreeStack
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Concurrent::MVar
  EMPTY = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::Maybe
  NONE = ::T.let(nil, ::T.untyped)
end

module Concurrent::Promises::InternalStates
  PENDING = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReentrantReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  READER_BITS = ::T.let(nil, ::T.untyped)
  READ_LOCK_MASK = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
  WRITER_BITS = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_HELD = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_MASK = ::T.let(nil, ::T.untyped)
end

class Concurrent::RubyThreadPoolExecutor
  DEFAULT_MAX_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MIN_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_SYNCHRONOUS = ::T.let(nil, ::T.untyped)
  DEFAULT_THREAD_IDLETIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::SerializedExecutionDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

Concurrent::Synchronization::Volatile = Concurrent::Synchronization::MriAttrVolatile

class Concurrent::SynchronizedDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Concurrent::ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class Concurrent::TimerTask
  EXECUTION_INTERVAL = ::T.let(nil, ::T.untyped)
  TIMEOUT_INTERVAL = ::T.let(nil, ::T.untyped)
end

class Concurrent::Transaction
  ABORTED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::NativeInteger
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

class ConnectionPool
  DEFAULTS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class ConnectionPool::Wrapper
  METHODS = ::T.let(nil, ::T.untyped)
end

module Console1984
  include ::Console1984::Messages
  def class_loader(); end

  def class_loader=(val); end

  def config(); end

  def supervisor(); end

  def supervisor=(val); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Console1984::Base
  include ::Console1984::Base::GeneratedAttributeMethods
  include ::Console1984::Base::GeneratedAssociationMethods
end

module Console1984::Base::GeneratedAssociationMethods
end

module Console1984::Base::GeneratedAssociationMethods
end

module Console1984::Base::GeneratedAttributeMethods
end

module Console1984::Base::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Console1984::Base
end

class Console1984::Command
  include ::Console1984::Command::GeneratedAttributeMethods
  include ::Console1984::Command::GeneratedAssociationMethods
  def autosave_associated_records_for_sensitive_access(*args); end

  def autosave_associated_records_for_session(*args); end

  def sensitive?(); end
end

module Console1984::Command::GeneratedAssociationMethods
  def build_sensitive_access(*args, &block); end

  def build_session(*args, &block); end

  def create_sensitive_access(*args, &block); end

  def create_sensitive_access!(*args, &block); end

  def create_session(*args, &block); end

  def create_session!(*args, &block); end

  def reload_sensitive_access(); end

  def reload_session(); end

  def sensitive_access(); end

  def sensitive_access=(value); end

  def sensitive_access_changed?(); end

  def sensitive_access_previously_changed?(); end

  def session(); end

  def session=(value); end

  def session_changed?(); end

  def session_previously_changed?(); end
end

module Console1984::Command::GeneratedAssociationMethods
end

module Console1984::Command::GeneratedAttributeMethods
end

module Console1984::Command::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Console1984::Command
  def self.sorted_chronologically(*args, **arg); end
end

class Console1984::CommandExecutor
  include ::Console1984::Freezeable
  def execute(commands, &block); end

  def execute_in_protected_mode(&block); end

  def executing_user_command?(); end

  def from_irb?(backtrace); end

  def last_suspicious_command_error(); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def run_as_system(&block); end

  def run_as_user(&block); end

  def session_logger(*arg, **arg1, &arg2); end

  def shield(*arg, **arg1, &arg2); end

  def username_resolver(*arg, **arg1, &arg2); end

  def validate_command(command); end
end

class Console1984::CommandExecutor
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::CommandValidator
  include ::Console1984::Freezeable
  def add_validation(name, validation); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def validate(command); end
end

class Console1984::CommandValidator::ForbiddenConstantReferenceValidation
  include ::Console1984::Freezeable
  def initialize(shield=T.unsafe(nil), config); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def validate(parsed_command); end
end

class Console1984::CommandValidator::ForbiddenConstantReferenceValidation
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::CommandValidator::ForbiddenReopeningValidation
  include ::Console1984::Freezeable
  def banned_class_or_module_names(); end

  def initialize(banned_classes_or_modules); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def validate(parsed_command); end
end

class Console1984::CommandValidator::ForbiddenReopeningValidation
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::CommandValidator::ParsedCommand
  include ::Console1984::Freezeable
  def constant_assignments(*arg, **arg1, &arg2); end

  def constants(*arg, **arg1, &arg2); end

  def declared_classes_or_modules(*arg, **arg1, &arg2); end

  def initialize(raw_command); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def raw_command(); end
end

class Console1984::CommandValidator::ParsedCommand
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::CommandValidator::SuspiciousTermsValidation
  include ::Console1984::Freezeable
  def initialize(suspicious_terms); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def validate(parsed_command); end
end

class Console1984::CommandValidator::SuspiciousTermsValidation
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::CommandValidator
  extend ::Console1984::Freezeable::ClassMethods
  def self.from_config(config); end

  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::Config
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  def ask_for_username_if_empty(); end

  def ask_for_username_if_empty=(ask_for_username_if_empty); end

  def command_executor(); end

  def command_executor=(command_executor); end

  def debug(); end

  def debug=(debug); end

  def enter_protected_mode_warning(); end

  def enter_protected_mode_warning=(enter_protected_mode_warning); end

  def enter_unprotected_encryption_mode_warning(); end

  def enter_unprotected_encryption_mode_warning=(enter_unprotected_encryption_mode_warning); end

  def incinerate(); end

  def incinerate=(incinerate); end

  def incinerate_after(); end

  def incinerate_after=(incinerate_after); end

  def incineration_queue(); end

  def incineration_queue=(incineration_queue); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def production_data_warning(); end

  def production_data_warning=(production_data_warning); end

  def protected_environments(); end

  def protected_environments=(protected_environments); end

  def protected_urls(); end

  def protected_urls=(protected_urls); end

  def protections_config(); end

  def protections_config=(protections_config); end

  def session_logger(); end

  def session_logger=(session_logger); end

  def set_from(properties); end

  def shield(); end

  def shield=(shield); end

  def test_mode(); end

  def test_mode=(test_mode); end

  def username_resolver(); end

  def username_resolver=(username_resolver); end
  PROPERTIES = ::T.let(nil, ::T.untyped)
  PROTECTIONS_CONFIG_FILE_PATH = ::T.let(nil, ::T.untyped)
end

class Console1984::Config
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::Engine
end

class Console1984::Engine
end

module Console1984::Errors
end

class Console1984::Errors::ForbiddenCommandAttempted
end

class Console1984::Errors::ForbiddenCommandAttempted
end

class Console1984::Errors::ForbiddenCommandExecuted
end

class Console1984::Errors::ForbiddenCommandExecuted
end

class Console1984::Errors::ForbiddenIncineration
end

class Console1984::Errors::ForbiddenIncineration
end

class Console1984::Errors::MissingUsername
end

class Console1984::Errors::MissingUsername
end

class Console1984::Errors::ProtectedConnection
  def initialize(details); end
end

class Console1984::Errors::ProtectedConnection
end

class Console1984::Errors::SuspiciousCommandAttempted
end

class Console1984::Errors::SuspiciousCommandAttempted
end

module Console1984::Errors
end

module Console1984::Ext
end

module Console1984::Ext::ActiveRecord
end

module Console1984::Ext::ActiveRecord::ProtectedAuditableTables
  include ::Console1984::Freezeable
  def exec_delete(*args, **kwargs); end

  def exec_insert(*args, **kwargs); end

  def exec_insert_all(*args, **kwargs); end

  def exec_query(*args, **kwargs); end

  def exec_update(*args, **kwargs); end

  def execute(*args, **kwargs); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::ActiveRecord::ProtectedAuditableTables
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::ActiveRecord
end

module Console1984::Ext::Core
end

module Console1984::Ext::Core::Module
  def instance_eval(*arg); end

  def method_added(method); end
end

module Console1984::Ext::Core::Module
  extend ::ActiveSupport::Concern
end

module Console1984::Ext::Core::Object
  include ::Console1984::Freezeable
  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::Core::Object::ClassMethods
  def const_get(*arguments); end
end

module Console1984::Ext::Core::Object::ClassMethods
end

module Console1984::Ext::Core::Object
  extend ::ActiveSupport::Concern
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::Core::String
  include ::Console1984::Freezeable
  def constantize(); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::Core::String
  extend ::ActiveSupport::Concern
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::Core
end

module Console1984::Ext::Irb
end

module Console1984::Ext::Irb::Commands
  include ::Console1984::Freezeable
  def _console_last_suspicious_command_error(); end

  def decrypt!(); end

  def encrypt!(); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def shield(*arg, **arg1, &arg2); end
end

module Console1984::Ext::Irb::Commands
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::Irb::Context
  include ::Console1984::Freezeable
  def evaluate(line, line_no, exception: T.unsafe(nil)); end

  def inspect_last_value(); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::Irb::Context
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::Irb
end

module Console1984::Ext::Socket
end

module Console1984::Ext::Socket::TcpSocket
  include ::Console1984::Freezeable
  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def write(*arg, **arg1, &arg2); end

  def write_nonblock(*arg, **arg1, &arg2); end
end

class Console1984::Ext::Socket::TcpSocket::ComparableAddress
  def initialize(addrinfo); end

  def ip(); end

  def ip=(_); end

  def port(); end

  def port=(_); end
end

class Console1984::Ext::Socket::TcpSocket::ComparableAddress
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Console1984::Ext::Socket::TcpSocket
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Ext::Socket
end

module Console1984::Ext
end

module Console1984::Freezeable
  def to_freeze(); end
end

module Console1984::Freezeable::ClassMethods
  def prevent_instance_data_manipulation(); end
  SENSITIVE_INSTANCE_METHODS = ::T.let(nil, ::T.untyped)
end

module Console1984::Freezeable::ClassMethods
end

module Console1984::Freezeable
  def self.freeze_all(); end

  def self.included(base); end

  def self.to_freeze(); end
end

class Console1984::IncinerationJob
  def perform(session); end
end

class Console1984::IncinerationJob
  def self.schedule(session); end
end

module Console1984::InputOutput
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::InputOutput
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Messages
  COMMANDS = ::T.let(nil, ::T.untyped)
  DEFAULT_ENTER_PROTECTED_MODE_WARNING = ::T.let(nil, ::T.untyped)
  DEFAULT_ENTER_UNPROTECTED_ENCRYPTION_MODE_WARNING = ::T.let(nil, ::T.untyped)
  DEFAULT_PRODUCTION_DATA_WARNING = ::T.let(nil, ::T.untyped)
end

module Console1984::Messages
end

class Console1984::ProtectionsConfig
  include ::Console1984::Freezeable
  def config(); end

  def forbidden_methods(); end

  def initialize(config); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def validations(); end
end

class Console1984::ProtectionsConfig
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::Refrigerator
  include ::Console1984::Freezeable
  def freeze_all(); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::Refrigerator
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::SensitiveAccess
  include ::Console1984::SensitiveAccess::GeneratedAttributeMethods
  include ::Console1984::SensitiveAccess::GeneratedAssociationMethods
  def autosave_associated_records_for_commands(*args); end

  def autosave_associated_records_for_session(*args); end

  def validate_associated_records_for_commands(*args); end
end

module Console1984::SensitiveAccess::GeneratedAssociationMethods
  def build_session(*args, &block); end

  def command_ids(); end

  def command_ids=(ids); end

  def commands(); end

  def commands=(value); end

  def create_session(*args, &block); end

  def create_session!(*args, &block); end

  def reload_session(); end

  def session(); end

  def session=(value); end

  def session_changed?(); end

  def session_previously_changed?(); end
end

module Console1984::SensitiveAccess::GeneratedAssociationMethods
end

module Console1984::SensitiveAccess::GeneratedAttributeMethods
end

module Console1984::SensitiveAccess::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Console1984::SensitiveAccess
end

class Console1984::Session
  include ::Console1984::Session::GeneratedAttributeMethods
  include ::Console1984::Session::GeneratedAssociationMethods
  include ::Console1984::Session::Incineratable
  def autosave_associated_records_for_commands(*args); end

  def autosave_associated_records_for_sensitive_accesses(*args); end

  def autosave_associated_records_for_user(*args); end

  def sensitive?(); end

  def validate_associated_records_for_commands(*args); end

  def validate_associated_records_for_sensitive_accesses(*args); end
end

module Console1984::Session::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def command_ids(); end

  def command_ids=(ids); end

  def commands(); end

  def commands=(value); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_user(); end

  def sensitive_access_ids(); end

  def sensitive_access_ids=(ids); end

  def sensitive_accesses(); end

  def sensitive_accesses=(value); end

  def user(); end

  def user=(value); end

  def user_changed?(); end

  def user_previously_changed?(); end
end

module Console1984::Session::GeneratedAssociationMethods
end

module Console1984::Session::GeneratedAttributeMethods
end

module Console1984::Session::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Console1984::Session::Incineratable
  def incinerate(); end

  def incinerate_later(); end
end

module Console1984::Session::Incineratable
  extend ::ActiveSupport::Concern
end

class Console1984::Session
end

module Console1984::SessionsLogger
end

class Console1984::SessionsLogger::Database
  include ::Console1984::Freezeable
  def after_executing(statements); end

  def before_executing(statements); end

  def current_sensitive_access(); end

  def current_session(); end

  def end_sensitive_access(); end

  def finish_session(); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def start_sensitive_access(justification); end

  def start_session(username, reason); end

  def suspicious_commands_attempted(statements); end
end

class Console1984::SessionsLogger::Database
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::SessionsLogger
end

class Console1984::Shield
  include ::Console1984::Shield::Modes
  include ::Console1984::InputOutput
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  def command_executor(*arg, **arg1, &arg2); end

  def install(); end

  def session_logger(*arg, **arg1, &arg2); end

  def username_resolver(*arg, **arg1, &arg2); end
  ACTIVE_RECORD_CONNECTION_ADAPTERS = ::T.let(nil, ::T.untyped)
end

class Console1984::Shield::MethodInvocationShell
  include ::Console1984::Freezeable
  def build_protection_module(); end

  def class_name(); end

  def initialize(invocation); end

  def methods(); end

  def only_for_user_commands(); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def prevent_methods_invocation(); end

  def protected_method_invocation_source_for(method); end

  def protected_method_invocations_source(); end
end

class Console1984::Shield::MethodInvocationShell
  extend ::Console1984::Freezeable::ClassMethods
  def self.install_for(invocations); end

  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Shield::Modes
  include ::Console1984::InputOutput
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  def enable_protected_mode(silent: T.unsafe(nil)); end

  def enable_unprotected_mode(silent: T.unsafe(nil)); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def protected_mode?(); end

  def unprotected_mode?(); end

  def with_protected_mode(&block); end
  PROTECTED_MODE = ::T.let(nil, ::T.untyped)
  UNPROTECTED_MODE = ::T.let(nil, ::T.untyped)
end

class Console1984::Shield::Modes::Protected
  include ::Console1984::Freezeable
  def currently_protected_urls(); end

  def currently_protected_urls=(obj); end

  def execute(&block); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end

  def protected_urls(*arg, **arg1, &arg2); end
end

class Console1984::Shield::Modes::Protected
  extend ::Console1984::Freezeable::ClassMethods
  def self.currently_protected_urls(); end

  def self.currently_protected_urls=(obj); end

  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::Shield::Modes::Unprotected
  include ::Console1984::Freezeable
  def execute(&block); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::Shield::Modes::Unprotected
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Shield::Modes
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Shield::SSLSocketRemoteAddress
  def remote_address(); end
end

module Console1984::Shield::SSLSocketRemoteAddress
end

class Console1984::Shield
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::Supervisor
  include ::Console1984::InputOutput
  include ::Console1984::Messages
  include ::Console1984::Freezeable
  def current_username(); end

  def exit_irb(); end

  def install(); end

  def session_logger(*arg, **arg1, &arg2); end

  def shield(*arg, **arg1, &arg2); end

  def start(); end

  def stop(); end

  def username_resolver(*arg, **arg1, &arg2); end
end

class Console1984::Supervisor
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::User
  include ::Console1984::User::GeneratedAttributeMethods
  include ::Console1984::User::GeneratedAssociationMethods
  def autosave_associated_records_for_sessions(*args); end

  def validate_associated_records_for_sessions(*args); end
end

module Console1984::User::GeneratedAssociationMethods
  def session_ids(); end

  def session_ids=(ids); end

  def sessions(); end

  def sessions=(value); end
end

module Console1984::User::GeneratedAssociationMethods
end

module Console1984::User::GeneratedAttributeMethods
end

module Console1984::User::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Console1984::User
end

module Console1984::Username
end

class Console1984::Username::EnvResolver
  include ::Console1984::Freezeable
  def current(); end

  def initialize(key); end

  def prevent_instance_data_manipulation_after_freezing(); end

  def prevent_instance_data_manipulation_after_freezing=(obj); end
end

class Console1984::Username::EnvResolver
  extend ::Console1984::Freezeable::ClassMethods
  def self.prevent_instance_data_manipulation_after_freezing(); end

  def self.prevent_instance_data_manipulation_after_freezing=(obj); end
end

module Console1984::Username
end

module Console1984
  def self.ask_for_username_if_empty(*arg, **arg1, &arg2); end

  def self.class_loader(); end

  def self.class_loader=(val); end

  def self.command_executor(*arg, **arg1, &arg2); end

  def self.config(); end

  def self.debug(*arg, **arg1, &arg2); end

  def self.enter_protected_mode_warning(*arg, **arg1, &arg2); end

  def self.enter_unprotected_encryption_mode_warning(*arg, **arg1, &arg2); end

  def self.incinerate(*arg, **arg1, &arg2); end

  def self.incinerate_after(*arg, **arg1, &arg2); end

  def self.incineration_queue(*arg, **arg1, &arg2); end

  def self.production_data_warning(*arg, **arg1, &arg2); end

  def self.protected_environments(*arg, **arg1, &arg2); end

  def self.protected_urls(*arg, **arg1, &arg2); end

  def self.protections_config(*arg, **arg1, &arg2); end

  def self.railtie_helpers_paths(); end

  def self.railtie_namespace(); end

  def self.railtie_routes_url_helpers(include_path_helpers=T.unsafe(nil)); end

  def self.running_protected_environment?(); end

  def self.session_logger(*arg, **arg1, &arg2); end

  def self.shield(*arg, **arg1, &arg2); end

  def self.supervisor(); end

  def self.supervisor=(val); end

  def self.table_name_prefix(); end

  def self.test_mode(*arg, **arg1, &arg2); end

  def self.use_relative_model_naming?(); end

  def self.username_resolver(*arg, **arg1, &arg2); end
end

class Crack::JSON
  DATE_REGEX = ::T.let(nil, ::T.untyped)
end

class Crack::JSON
  def self.convert_json_to_yaml(json); end

  def self.format_dates(output, date_starts, date_ends); end

  def self.parse(json); end

  def self.parser_exceptions(); end

  def self.unescape(str); end
end

class Crack::REXMLParser
  def self.parse(xml); end
end

module Crack::Util
  def snake_case(str); end

  def to_xml_attributes(hash); end
end

class Crack::XML
  def self.parse(xml); end

  def self.parser(); end

  def self.parser=(parser); end
end

class Crass::Parser
  def consume_at_rule(input=T.unsafe(nil)); end

  def consume_component_value(input=T.unsafe(nil)); end

  def consume_declaration(input=T.unsafe(nil)); end

  def consume_declarations(input=T.unsafe(nil), options=T.unsafe(nil)); end

  def consume_function(input=T.unsafe(nil)); end

  def consume_qualified_rule(input=T.unsafe(nil)); end

  def consume_rules(flags=T.unsafe(nil)); end

  def consume_simple_block(input=T.unsafe(nil)); end

  def create_node(type, properties=T.unsafe(nil)); end

  def create_selector(input); end

  def create_style_rule(rule); end

  def initialize(input, options=T.unsafe(nil)); end

  def parse_component_value(input=T.unsafe(nil)); end

  def parse_component_values(input=T.unsafe(nil)); end

  def parse_declaration(input=T.unsafe(nil)); end

  def parse_declarations(input=T.unsafe(nil), options=T.unsafe(nil)); end

  def parse_properties(input=T.unsafe(nil)); end

  def parse_rule(input=T.unsafe(nil)); end

  def parse_value(nodes); end

  def tokens(); end
  BLOCK_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Crass::Parser
  def self.parse_properties(input, options=T.unsafe(nil)); end

  def self.parse_rules(input, options=T.unsafe(nil)); end

  def self.parse_stylesheet(input, options=T.unsafe(nil)); end

  def self.stringify(nodes, options=T.unsafe(nil)); end
end

class Crass::Scanner
  def consume(); end

  def consume_rest(); end

  def current(); end

  def eos?(); end

  def initialize(input); end

  def mark(); end

  def marked(); end

  def marker(); end

  def marker=(marker); end

  def peek(length=T.unsafe(nil)); end

  def pos(); end

  def pos=(pos); end

  def reconsume(); end

  def reset(); end

  def scan(pattern); end

  def scan_until(pattern); end

  def string(); end
end

class Crass::TokenScanner
  def collect(); end

  def consume(); end

  def current(); end

  def initialize(tokens); end

  def peek(); end

  def pos(); end

  def reconsume(); end

  def reset(); end

  def tokens(); end
end

class Crass::Tokenizer
  def consume(); end

  def consume_bad_url(); end

  def consume_comments(); end

  def consume_escaped(); end

  def consume_ident(); end

  def consume_name(); end

  def consume_number(); end

  def consume_numeric(); end

  def consume_string(ending=T.unsafe(nil)); end

  def consume_unicode_range(); end

  def consume_url(); end

  def convert_string_to_number(str); end

  def create_token(type, properties=T.unsafe(nil)); end

  def initialize(input, options=T.unsafe(nil)); end

  def preprocess(input); end

  def start_identifier?(text=T.unsafe(nil)); end

  def start_number?(text=T.unsafe(nil)); end

  def tokenize(); end

  def valid_escape?(text=T.unsafe(nil)); end
  RE_COMMENT_CLOSE = ::T.let(nil, ::T.untyped)
  RE_DIGIT = ::T.let(nil, ::T.untyped)
  RE_ESCAPE = ::T.let(nil, ::T.untyped)
  RE_HEX = ::T.let(nil, ::T.untyped)
  RE_NAME = ::T.let(nil, ::T.untyped)
  RE_NAME_START = ::T.let(nil, ::T.untyped)
  RE_NON_PRINTABLE = ::T.let(nil, ::T.untyped)
  RE_NUMBER_DECIMAL = ::T.let(nil, ::T.untyped)
  RE_NUMBER_EXPONENT = ::T.let(nil, ::T.untyped)
  RE_NUMBER_SIGN = ::T.let(nil, ::T.untyped)
  RE_NUMBER_STR = ::T.let(nil, ::T.untyped)
  RE_QUOTED_URL_START = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_END = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_START = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE_ANCHORED = ::T.let(nil, ::T.untyped)
end

class Crass::Tokenizer
  def self.tokenize(input, options=T.unsafe(nil)); end
end

module Crass
  def self.parse(input, options=T.unsafe(nil)); end

  def self.parse_properties(input, options=T.unsafe(nil)); end
end

class Current
  def self.locale(); end

  def self.locale=(value); end

  def self.paths(); end

  def self.paths=(value); end

  def self.redis_values(); end

  def self.redis_values=(value); end

  def self.space(); end

  def self.space=(value); end

  def self.timezone(); end

  def self.timezone=(value); end

  def self.user(); end

  def self.user=(value); end
end

module DEBUGGER__
  CONFIG = ::T.let(nil, ::T.untyped)
  CONFIG_MAP = ::T.let(nil, ::T.untyped)
  CONFIG_SET = ::T.let(nil, ::T.untyped)
  LOG_LEVELS = ::T.let(nil, ::T.untyped)
  METHOD_ADDED_TRACKER = ::T.let(nil, ::T.untyped)
  SESSION = ::T.let(nil, ::T.untyped)
  SHORT_INSPECT_LENGTH = ::T.let(nil, ::T.untyped)
  SO_VERSION = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::Color
  SUPPORT_COLORABLE_OPTION = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::Console
  def deactivate(); end

  def history(); end

  def history_file(); end

  def load_history(); end

  def load_history_if_not_loaded(); end

  def parse_input(buff, commands); end

  def read_history_file(); end

  def readline(prompt); end

  def readline_setup(prompt); end
  FH = ::T.let(nil, ::T.untyped)
  SIGWINCH_SUPPORTED = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::ForkInterceptor
  def _fork(); end
end

class DEBUGGER__::FrameInfo
  BLOCK_LABL_REGEXP = ::T.let(nil, ::T.untyped)
  HOME = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::Session
  BREAK_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::ThreadClient
  SKIP_GLOBAL_LIST = ::T.let(nil, ::T.untyped)
  SPECIAL_LOCAL_VARS = ::T.let(nil, ::T.untyped)
  SUPPORT_TARGET_THREAD = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::TrapInterceptor
  def trap(sig, *command, &command_proc); end
end

class DEBUGGER__::UI_LocalConsole
  def activate(session, on_fork: T.unsafe(nil)); end

  def after_fork_parent(); end

  def ask(prompt); end

  def deactivate(); end

  def puts(str=T.unsafe(nil)); end

  def quit(n); end

  def readline(prompt=T.unsafe(nil)); end

  def remote?(); end

  def setup_interrupt(); end

  def width(); end
end

module DEBUGGER__
  def self.compare_path(a, b); end

  def self.info(msg); end

  def self.log(level, msg); end

  def self.method_added(tp); end

  def self.safe_inspect(obj, max_length: T.unsafe(nil), short: T.unsafe(nil)); end

  def self.step_in(&b); end

  def self.warn(msg); end
end

class DRb::DRbArray
  def _dump(lv); end
end

class DRb::DRbArray
  def self._load(s); end
end

class DRb::DRbConn
  def alive?(); end

  def close(); end

  def initialize(remote_uri); end

  def send_message(ref, msg_id, arg, block); end

  def uri(); end
end

class DRb::DRbConn
  def self.make_pool(); end

  def self.open(remote_uri); end

  def self.stop_pool(); end
end

class DRb::DRbMessage
  def dump(obj, error=T.unsafe(nil)); end

  def initialize(config); end

  def load(soc); end

  def recv_reply(stream); end

  def recv_request(stream); end

  def send_reply(stream, succ, result); end

  def send_request(stream, ref, msg_id, arg, b); end
end

class DRb::DRbObject
  def ==(other); end

  def eql?(other); end

  def initialize(obj, uri=T.unsafe(nil)); end
end

class DRb::DRbObject
  def self.prepare_backtrace(uri, result); end

  def self.with_friend(uri); end
end

module DRb::DRbProtocol
  def self.auto_load(uri); end
end

class DRb::DRbRemoteError
  def initialize(error); end
end

class DRb::DRbServer
  def initialize(uri=T.unsafe(nil), front=T.unsafe(nil), config_or_acl=T.unsafe(nil)); end
end

class DRb::DRbServer::InvokeMethod
  include ::DRb::DRbServer::InvokeMethod18Mixin
  def initialize(drb_server, client); end

  def perform(); end
end

class DRb::DRbServer::InvokeMethod
end

module DRb::DRbServer::InvokeMethod18Mixin
  def block_yield(x); end

  def perform_with_block(); end
end

module DRb::DRbServer::InvokeMethod18Mixin
end

class DRb::DRbServer
  def self.make_config(hash=T.unsafe(nil)); end
end

class DRb::DRbTCPSocket
  def accept(); end

  def alive?(); end

  def close(); end

  def initialize(uri, soc, config=T.unsafe(nil)); end

  def peeraddr(); end

  def recv_reply(); end

  def recv_request(); end

  def send_reply(succ, result); end

  def send_request(ref, msg_id, arg, b); end

  def set_sockopt(soc); end

  def shutdown(); end

  def stream(); end

  def uri(); end
end

class DRb::DRbTCPSocket
  def self.getservername(); end

  def self.open(uri, config); end

  def self.open_server(uri, config); end

  def self.open_server_inaddr_any(host, port); end

  def self.parse_uri(uri); end

  def self.uri_option(uri, config); end
end

class DRb::DRbUNIXSocket
  def initialize(uri, soc, config=T.unsafe(nil), server_mode=T.unsafe(nil)); end
  Max_try = ::T.let(nil, ::T.untyped)
end

class DRb::DRbUNIXSocket
  def self.temp_server(); end
end

class DRb::DRbURIOption
  def ==(other); end

  def eql?(other); end

  def initialize(option); end

  def option(); end
end

class DRb::DRbURIOption
end

module DRb::DRbUndumped
  def _dump(dummy); end
end

class DRb::DRbUnknown
  def _dump(lv); end
end

class DRb::DRbUnknown
  def self._load(s); end
end

class DRb::DRbUnknownError
  def _dump(lv); end

  def initialize(unknown); end
end

class DRb::DRbUnknownError
  def self._load(s); end
end

class DRb::ThreadObject
  include ::MonitorMixin
  def _execute(); end

  def alive?(); end

  def initialize(&blk); end

  def kill(); end

  def method_missing(msg, *arg, &blk); end
end

class DRb::ThreadObject
end

module DRb
  def self.mutex(); end
end

DRbIdConv = DRb::DRbIdConv

DRbObject = DRb::DRbObject

DRbUndumped = DRb::DRbUndumped

class Date
  def infinite?(); end
  NOT_SET = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Date::Infinity
  def initialize(d=T.unsafe(nil)); end
end

class DateTime
  NOT_SET = ::T.let(nil, ::T.untyped)
end

class DateTime
  def self.new(*arg); end
end

module Declarative::DeepDup
  def self.call(args); end

  def self.dup_items(arr); end
end

class Declarative::Defaults
  def call(name, given_options); end

  def handle_array_and_deprecate(variables); end

  def merge!(hash=T.unsafe(nil), &block); end
end

class Declarative::Defaults
  def self.wrap_arrays(variables); end
end

class Declarative::Definitions
  def add(name, options=T.unsafe(nil), &block); end

  def each(&block); end

  def get(name); end

  def initialize(definition_class); end
end

class Declarative::Definitions::Definition
  def [](name); end

  def initialize(name, options=T.unsafe(nil)); end

  def merge(hash); end

  def merge!(hash); end
end

class Declarative::Heritage
  def call(inheritor, &block); end

  def record(method, *args, &block); end
end

module Declarative::Heritage::DSL
  def heritage(); end
end

module Declarative::Heritage::Included
  def included(mod); end
end

module Declarative::Heritage::Inherited
  def inherited(subclass); end
end

module Declarative::Schema::DSL
  def defaults(options=T.unsafe(nil), &block); end

  def definition_class(); end

  def definitions(); end

  def property(name, options=T.unsafe(nil), &block); end
  NestedBuilder = ::T.let(nil, ::T.untyped)
end

module Declarative::Schema::Feature
  def feature(*mods); end
end

module Declarative::Schema
  def self.extended(extender); end
end

class Declarative::Variables
  def self.Append(appended_array); end

  def self.Merge(merged_hash); end

  def self.merge(defaults, overrides); end
end

class Delegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Devise
  ALL = ::T.let(nil, ::T.untyped)
  CONTROLLERS = ::T.let(nil, ::T.untyped)
  NO_INPUT = ::T.let(nil, ::T.untyped)
  ROUTES = ::T.let(nil, ::T.untyped)
  STRATEGIES = ::T.let(nil, ::T.untyped)
  TRUE_VALUES = ::T.let(nil, ::T.untyped)
  URL_HELPERS = ::T.let(nil, ::T.untyped)
end

module Devise::Async
  VERSION = ::T.let(nil, ::T.untyped)
end

class Devise::ConfirmationsController
  def after_confirmation_path_for(resource_name, resource); end

  def after_resending_confirmation_instructions_path_for(resource_name); end

  def create(); end

  def new(); end

  def show(); end
end

module Devise::Controllers::Helpers
  def authenticate_user!(opts=T.unsafe(nil)); end

  def current_user(); end

  def user_session(); end

  def user_signed_in?(); end
end

module Devise::Controllers::Rememberable
  def forget_cookie_values(resource); end

  def forget_me(resource); end

  def remember_cookie_values(resource); end

  def remember_key(resource, scope); end

  def remember_me(resource); end

  def remember_me_is_active?(resource); end
end

module Devise::Controllers::Rememberable
  def self.cookie_values(); end
end

module Devise::Controllers::UrlHelpers
  def cancel_registration_path(resource_or_scope, *args); end

  def cancel_registration_url(resource_or_scope, *args); end

  def confirmation_path(resource_or_scope, *args); end

  def confirmation_url(resource_or_scope, *args); end

  def destroy_session_path(resource_or_scope, *args); end

  def destroy_session_url(resource_or_scope, *args); end

  def edit_password_path(resource_or_scope, *args); end

  def edit_password_url(resource_or_scope, *args); end

  def edit_registration_path(resource_or_scope, *args); end

  def edit_registration_url(resource_or_scope, *args); end

  def new_confirmation_path(resource_or_scope, *args); end

  def new_confirmation_url(resource_or_scope, *args); end

  def new_password_path(resource_or_scope, *args); end

  def new_password_url(resource_or_scope, *args); end

  def new_registration_path(resource_or_scope, *args); end

  def new_registration_url(resource_or_scope, *args); end

  def new_session_path(resource_or_scope, *args); end

  def new_session_url(resource_or_scope, *args); end

  def new_unlock_path(resource_or_scope, *args); end

  def new_unlock_url(resource_or_scope, *args); end

  def password_path(resource_or_scope, *args); end

  def password_url(resource_or_scope, *args); end

  def registration_path(resource_or_scope, *args); end

  def registration_url(resource_or_scope, *args); end

  def session_path(resource_or_scope, *args); end

  def session_url(resource_or_scope, *args); end

  def unlock_path(resource_or_scope, *args); end

  def unlock_url(resource_or_scope, *args); end
end

module Devise::Controllers::UrlHelpers
  def self.generate_helpers!(routes=T.unsafe(nil)); end

  def self.remove_helpers!(); end
end

class Devise::Delegator
  def call(env); end

  def failure_app(env); end
end

Devise::DeprecatedConstantAccessor = ActiveSupport::Deprecation::DeprecatedConstantAccessor

module Devise::Encryptor
  def self.compare(klass, hashed_password, password); end

  def self.digest(klass, password); end
end

class Devise::FailureApp
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::ActionController::Redirecting
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  def attempted_path(); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def flash(*arg, **arg1, &arg2); end

  def http_auth(); end

  def http_auth?(); end

  def http_auth_body(); end

  def http_auth_header?(); end

  def i18n_message(default=T.unsafe(nil)); end

  def i18n_options(options); end

  def is_flashing_format?(); end

  def is_navigational_format?(); end

  def logger(); end

  def logger=(value); end

  def raise_on_open_redirects(); end

  def raise_on_open_redirects=(val); end

  def recall(); end

  def recall_app(app); end

  def redirect(); end

  def redirect_url(); end

  def relative_url_root(); end

  def relative_url_root?(); end

  def request_format(); end

  def respond(); end

  def route(scope); end

  def scope(); end

  def scope_class(); end

  def scope_url(); end

  def skip_format?(); end

  def store_location!(); end

  def warden(); end

  def warden_message(); end

  def warden_options(); end
end

class Devise::FailureApp
  extend ::AbstractController::UrlFor::ClassMethods
  def self.call(env); end

  def self.default_url_options(*args); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end

  def self.logger(); end

  def self.logger=(value); end

  def self.raise_on_open_redirects(); end

  def self.raise_on_open_redirects=(val); end
end

class Devise::Hooks::Proxy
  include ::Devise::Controllers::Rememberable
  include ::Devise::Controllers::SignInOut
  def cookies(*arg, **arg1, &arg2); end

  def initialize(warden); end

  def request(*arg, **arg1, &arg2); end

  def session(); end

  def warden(); end
end

class Devise::Hooks::Proxy
end

class Devise::Mailer
  def confirmation_instructions(record, token, opts=T.unsafe(nil)); end

  def email_changed(record, opts=T.unsafe(nil)); end

  def password_change(record, opts=T.unsafe(nil)); end

  def reset_password_instructions(record, token, opts=T.unsafe(nil)); end

  def unlock_instructions(record, token, opts=T.unsafe(nil)); end
end

module Devise::Mailers::Helpers
  def devise_mail(record, action, opts=T.unsafe(nil), &block); end

  def devise_mapping(); end

  def headers_for(action, opts); end

  def initialize_from_record(record); end

  def mailer_from(mapping); end

  def mailer_reply_to(mapping); end

  def mailer_sender(mapping, sender=T.unsafe(nil)); end

  def resource(); end

  def scope_name(); end

  def subject_for(key); end

  def template_paths(); end
end

module Devise::Models::Authenticatable
  UNSAFE_ATTRIBUTES_FOR_SERIALIZATION = ::T.let(nil, ::T.untyped)
end

module Devise::Models::Confirmable
  def active_for_authentication?(); end

  def after_confirmation(); end

  def confirm(args=T.unsafe(nil)); end

  def confirmation_period_expired?(); end

  def confirmation_period_valid?(); end

  def confirmation_required?(); end

  def confirmed?(); end

  def generate_confirmation_token(); end

  def generate_confirmation_token!(); end

  def inactive_message(); end

  def initialize(*args, &block); end

  def pending_any_confirmation(); end

  def pending_reconfirmation?(); end

  def postpone_email_change?(); end

  def postpone_email_change_until_confirmation_and_regenerate_confirmation_token(); end

  def reconfirmation_required?(); end

  def resend_confirmation_instructions(); end

  def send_confirmation_instructions(); end

  def send_confirmation_notification?(); end

  def send_email_changed_notification?(); end

  def send_on_create_confirmation_instructions(); end

  def send_reconfirmation_instructions(); end

  def skip_confirmation!(); end

  def skip_confirmation_notification!(); end

  def skip_reconfirmation!(); end

  def skip_reconfirmation_in_callback!(); end
end

module Devise::Models::Confirmable
  def self.required_fields(klass); end
end

module Devise::Models::DatabaseAuthenticatable
  def after_database_authentication(); end

  def authenticatable_salt(); end

  def clean_up_passwords(); end

  def destroy_with_password(current_password); end

  def initialize(*args, &block); end

  def password=(new_password); end

  def password_digest(password); end

  def send_email_changed_notification(); end

  def send_email_changed_notification?(); end

  def send_password_change_notification(); end

  def send_password_change_notification?(); end

  def skip_email_changed_notification!(); end

  def skip_password_change_notification!(); end

  def update_with_password(params, *options); end

  def update_without_password(params, *options); end

  def valid_password?(password); end
end

module Devise::Models::DatabaseAuthenticatable
  def self.required_fields(klass); end
end

module Devise::Models::Lockable
  def access_locked?(); end

  def active_for_authentication?(); end

  def attempts_exceeded?(); end

  def if_access_locked(); end

  def inactive_message(); end

  def increment_failed_attempts(); end

  def last_attempt?(); end

  def lock_access!(opts=T.unsafe(nil)); end

  def lock_expired?(); end

  def lock_strategy_enabled?(*arg, **arg1, &arg2); end

  def resend_unlock_instructions(); end

  def reset_failed_attempts!(); end

  def send_unlock_instructions(); end

  def unauthenticated_message(); end

  def unlock_access!(); end

  def unlock_strategy_enabled?(*arg, **arg1, &arg2); end

  def valid_for_authentication?(); end
end

module Devise::Models::Lockable
  def self.required_fields(klass); end
end

module Devise::Models::Omniauthable
  def self.required_fields(klass); end
end

module Devise::Models::Recoverable
  def clear_reset_password_token(); end

  def clear_reset_password_token?(); end

  def reset_password(new_password, new_password_confirmation); end

  def reset_password_period_valid?(); end

  def send_reset_password_instructions(); end

  def send_reset_password_instructions_notification(token); end

  def set_reset_password_token(); end
end

module Devise::Models::Recoverable
  def self.required_fields(klass); end
end

module Devise::Models::Registerable
  def self.required_fields(klass); end
end

module Devise::Models::Rememberable
  def after_remembered(); end

  def extend_remember_period(); end

  def forget_me!(); end

  def remember_expires_at(); end

  def remember_me(); end

  def remember_me!(); end

  def remember_me=(remember_me); end

  def remember_me?(token, generated_at); end

  def rememberable_options(); end

  def rememberable_value(); end
end

module Devise::Models::Rememberable
  def self.required_fields(klass); end
end

module Devise::Models::Timeoutable
  def timedout?(last_access); end

  def timeout_in(); end
end

module Devise::Models::Timeoutable::ClassMethods
  def timeout_in(); end

  def timeout_in=(value); end
end

module Devise::Models::Timeoutable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Timeoutable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Trackable
  def extract_ip_from(request); end

  def update_tracked_fields(request); end

  def update_tracked_fields!(request); end
end

module Devise::Models::Trackable
  def self.required_fields(klass); end
end

module Devise::Models::Validatable
  def email_required?(); end

  def password_required?(); end
  VALIDATIONS = ::T.let(nil, ::T.untyped)
end

module Devise::Models::Validatable
  def self.assert_validations_api!(base); end

  def self.included(base); end

  def self.required_fields(klass); end
end

class Devise::OmniAuth::Config
  def args(); end

  def autoload_strategy(); end

  def find_strategy(); end

  def initialize(provider, args); end

  def options(); end

  def provider(); end

  def strategy(); end

  def strategy=(strategy); end

  def strategy_class(); end

  def strategy_name(); end
end

class Devise::OmniAuth::StrategyNotFound
  def initialize(strategy); end
end

module Devise::OmniAuth::UrlHelpers
  def omniauth_authorize_path(resource_or_scope, provider, *args); end

  def omniauth_authorize_url(resource_or_scope, provider, *args); end

  def omniauth_callback_path(resource_or_scope, provider, *args); end

  def omniauth_callback_url(resource_or_scope, provider, *args); end
end

class Devise::OmniauthCallbacksController
  def after_omniauth_failure_path_for(scope); end

  def failed_strategy(); end

  def failure(); end

  def failure_message(); end

  def passthru(); end
end

class Devise::ParameterFilter
  def filter(conditions); end

  def filtered_hash_by_method_for_given_keys(conditions, method, condition_keys); end

  def initialize(case_insensitive_keys, strip_whitespace_keys); end

  def stringify_params(conditions); end
end

class Devise::ParameterFilter
end

class Devise::ParameterSanitizer
  def initialize(resource_class, resource_name, params); end

  def permit(action, keys: T.unsafe(nil), except: T.unsafe(nil), &block); end

  def sanitize(action); end
  DEFAULT_PERMITTED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Devise::ParameterSanitizer
end

class Devise::PasswordsController
  def after_resetting_password_path_for(resource); end

  def after_sending_reset_password_instructions_path_for(resource_name); end

  def assert_reset_token_passed(); end

  def create(); end

  def edit(); end

  def new(); end

  def unlockable?(resource); end

  def update(); end
end

class Devise::RegistrationsController
  def account_update_params(); end

  def after_inactive_sign_up_path_for(resource); end

  def after_sign_up_path_for(resource); end

  def after_update_path_for(resource); end

  def authenticate_scope!(); end

  def build_resource(hash=T.unsafe(nil)); end

  def cancel(); end

  def create(); end

  def destroy(); end

  def edit(); end

  def new(); end

  def sign_up(resource_name, resource); end

  def sign_up_params(); end

  def update(); end

  def update_needs_confirmation?(resource, previous); end

  def update_resource(resource, params); end
end

class Devise::SecretKeyFinder
  def find(); end

  def initialize(application); end
end

class Devise::SessionsController
  def auth_options(); end

  def create(); end

  def destroy(); end

  def new(); end

  def serialize_options(resource); end

  def sign_in_params(); end
end

class Devise::Strategies::Authenticatable
  def authentication_hash(); end

  def authentication_hash=(authentication_hash); end

  def authentication_type(); end

  def authentication_type=(authentication_type); end

  def clean_up_csrf?(); end

  def password(); end

  def password=(password); end
end

class Devise::Strategies::Base
  def mapping(); end
end

class Devise::Strategies::DatabaseAuthenticatable
  def authenticate!(); end
end

class Devise::Strategies::Rememberable
  def authenticate!(); end
end

module Devise::Test::ControllerHelpers
  def _catch_warden(&block); end

  def _process_unauthenticated(env, options=T.unsafe(nil)); end

  def process(*arg, **arg1); end

  def setup_controller_for_warden(); end

  def sign_in(resource, deprecated=T.unsafe(nil), scope: T.unsafe(nil)); end

  def sign_out(resource_or_scope); end

  def warden(); end
end

module Devise::Test::ControllerHelpers
  extend ::ActiveSupport::Concern
end

module Devise::Test::IntegrationHelpers
  def setup_integration_for_devise(); end

  def sign_in(resource, scope: T.unsafe(nil)); end

  def sign_out(resource_or_scope); end

  def teardown_integration_for_devise(); end
end

module Devise::Test::IntegrationHelpers
  def self.included(base); end
end

module Devise::TestHelpers
end

module Devise::TestHelpers
  def self.included(base); end
end

class Devise::TimeInflector
  include ::ActionView::Helpers::DateHelper
end

class Devise::TimeInflector
  def self.instance(); end

  def self.time_ago_in_words(*arg, **arg1, &arg2); end
end

class Devise::TokenGenerator
  def digest(klass, column, value); end

  def generate(klass, column); end

  def initialize(key_generator, digest=T.unsafe(nil)); end
end

class Devise::UnlocksController
  def after_sending_unlock_instructions_path_for(resource); end

  def after_unlock_path_for(resource); end

  def create(); end

  def new(); end

  def show(); end
end

class DeviseController
  def assert_is_devise_resource!(); end

  def clean_up_passwords(object); end

  def devise_i18n_options(options); end

  def devise_mapping(); end

  def find_message(kind, options=T.unsafe(nil)); end

  def navigational_formats(); end

  def require_no_authentication(); end

  def resource(); end

  def resource=(new_resource); end

  def resource_class(); end

  def resource_name(); end

  def resource_params(); end

  def respond_with_navigational(*args, &block); end

  def scope_name(); end

  def set_flash_message(key, kind, options=T.unsafe(nil)); end

  def set_flash_message!(key, kind, options=T.unsafe(nil)); end

  def set_minimum_password_length(); end

  def signed_in_resource(); end

  def successfully_sent?(resource); end

  def translation_scope(); end

  def unknown_action!(msg); end
end

module DeviseController::HelperMethods
  include ::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::InertiaRails::Helper
  include ::ViteRails::TagHelpers
  include ::ApplicationHelper
  include ::DeviseHelper
  def devise_mapping(*args, **arg, &block); end

  def resource(*args, **arg, &block); end

  def resource_class(*args, **arg, &block); end

  def resource_name(*args, **arg, &block); end

  def resource_params(*args, **arg, &block); end

  def scope_name(*args, **arg, &block); end

  def signed_in_resource(*args, **arg, &block); end
end

module DeviseHelper
  def devise_error_messages!(); end
end

class DeviseMailerPreview
end

class DidYouMean::ClassNameChecker
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

module DidYouMean::Correctable
  def corrections(); end

  def original_message(); end

  def spell_checker(); end

  def to_s(); end
end

class DidYouMean::Formatter
  def message_for(corrections); end
end

class DidYouMean::Formatter
  def self.message_for(corrections); end
end

module DidYouMean::Jaro
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def names_to_exclude(); end

  def receiver(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

class DidYouMean::NullChecker
  def corrections(); end

  def initialize(*arg); end
end

class DidYouMean::PatternKeyNameChecker
  def corrections(); end

  def initialize(no_matching_pattern_key_error); end
end

class DidYouMean::PatternKeyNameChecker
end

DidYouMean::PlainFormatter = DidYouMean::Formatter

class DidYouMean::RequirePathChecker
  def corrections(); end

  def initialize(exception); end

  def path(); end
end

class DidYouMean::RequirePathChecker
  def self.requireables(); end
end

class DidYouMean::TreeSpellChecker
  def augment(); end

  def correct(input); end

  def dictionary(); end

  def dictionary_without_leaves(); end

  def dimensions(); end

  def find_leaves(path); end

  def initialize(dictionary:, separator: T.unsafe(nil), augment: T.unsafe(nil)); end

  def plausible_dimensions(input); end

  def possible_paths(states); end

  def separator(); end

  def tree_depth(); end
end

class DidYouMean::TreeSpellChecker
end

class DidYouMean::VariableNameChecker
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module DidYouMean
  def self.correct_error(error_class, spell_checker); end

  def self.formatter(); end

  def self.formatter=(formatter); end

  def self.spell_checkers(); end
end

module Diff::LCS
  VERSION = ::T.let(nil, ::T.untyped)
end

Diff::LCS::BalancedCallbacks = Diff::LCS::DefaultCallbacks

class Diff::LCS::Change
  VALID_ACTIONS = ::T.let(nil, ::T.untyped)
end

Diff::LCS::Change::IntClass = Integer

Diff::LCS::SequenceCallbacks = Diff::LCS::DefaultCallbacks

module Digest
  VERSION = ::T.let(nil, ::T.untyped)
end

module Digest::UUID
  DNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  OID_NAMESPACE = ::T.let(nil, ::T.untyped)
  URL_NAMESPACE = ::T.let(nil, ::T.untyped)
  X500_NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Dir
  def children(); end

  def each_child(); end
end

module Dir::Tmpname
  UNUSABLE_CHARS = ::T.let(nil, ::T.untyped)
end

class Dir
  def self.exists?(arg); end
end

class Docs::Alias
  include ::Docs::Alias::GeneratedAttributeMethods
  include ::Docs::Alias::GeneratedAssociationMethods
  def autosave_associated_records_for_block(*args); end

  def autosave_associated_records_for_space(*args); end
end

module Docs::Alias::GeneratedAssociationMethods
  def block(); end

  def block=(value); end

  def block_changed?(); end

  def block_previously_changed?(); end

  def build_block(*args, &block); end

  def build_space(*args, &block); end

  def create_block(*args, &block); end

  def create_block!(*args, &block); end

  def create_space(*args, &block); end

  def create_space!(*args, &block); end

  def reload_block(); end

  def reload_space(); end

  def space(); end

  def space=(value); end

  def space_changed?(); end

  def space_previously_changed?(); end
end

module Docs::Alias::GeneratedAssociationMethods
end

module Docs::Alias::GeneratedAttributeMethods
end

module Docs::Alias::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Docs::Alias
  def self.disabled(*args, **arg); end

  def self.enabled(*args, **arg); end

  def self.not_disabled(*args, **arg); end

  def self.not_enabled(*args, **arg); end

  def self.states(); end
end

class Docs::Block
  include ::Docs::Block::GeneratedAttributeMethods
  include ::Docs::Block::GeneratedAssociationMethods
  include ::Redis::Objects::InstanceMethods
  include ::Redis::Objects::Counters
  include ::Redis::Objects::Counters::InstanceMethods
  include ::Redis::Objects::Lists
  include ::Redis::Objects::Lists::InstanceMethods
  include ::Redis::Objects::Locks
  include ::Redis::Objects::Sets
  include ::Redis::Objects::Sets::InstanceMethods
  include ::Redis::Objects::SortedSets
  include ::Redis::Objects::SortedSets::InstanceMethods
  include ::Redis::Objects::Values
  include ::Redis::Objects::Values::InstanceMethods
  include ::Redis::Objects::Hashes
  include ::Redis::Objects::Hashes::InstanceMethods
  def autosave_associated_records_for_aliases(*args); end

  def autosave_associated_records_for_attachments_attachments(*args); end

  def autosave_associated_records_for_attachments_blobs(*args); end

  def autosave_associated_records_for_children(*args); end

  def autosave_associated_records_for_enabled_alias(*args); end

  def autosave_associated_records_for_enabled_share_links(*args); end

  def autosave_associated_records_for_histories(*args); end

  def autosave_associated_records_for_parent(*args); end

  def autosave_associated_records_for_share_links(*args); end

  def autosave_associated_records_for_snapshots(*args); end

  def autosave_associated_records_for_space(*args); end

  def validate_associated_records_for_aliases(*args); end

  def validate_associated_records_for_attachments_attachments(*args); end

  def validate_associated_records_for_attachments_blobs(*args); end

  def validate_associated_records_for_children(*args); end

  def validate_associated_records_for_enabled_share_links(*args); end

  def validate_associated_records_for_histories(*args); end

  def validate_associated_records_for_share_links(*args); end

  def validate_associated_records_for_snapshots(*args); end
end

module Docs::Block::AttachmentsAttachmentsAssociationExtension
  def purge(); end

  def purge_later(); end
end

module Docs::Block::AttachmentsAttachmentsAssociationExtension
end

module Docs::Block::GeneratedAssociationMethods
  def alias_ids(); end

  def alias_ids=(ids); end

  def aliases(); end

  def aliases=(value); end

  def attachments(); end

  def attachments=(attachables); end

  def attachments_attachment_ids(); end

  def attachments_attachment_ids=(ids); end

  def attachments_attachments(); end

  def attachments_attachments=(value); end

  def attachments_blob_ids(); end

  def attachments_blob_ids=(ids); end

  def attachments_blobs(); end

  def attachments_blobs=(value); end

  def build_enabled_alias(*args, &block); end

  def build_parent(*args, &block); end

  def build_space(*args, &block); end

  def child_ids(); end

  def child_ids=(ids); end

  def children(); end

  def children=(value); end

  def create_enabled_alias(*args, &block); end

  def create_enabled_alias!(*args, &block); end

  def create_parent(*args, &block); end

  def create_parent!(*args, &block); end

  def create_space(*args, &block); end

  def create_space!(*args, &block); end

  def enabled_alias(); end

  def enabled_alias=(value); end

  def enabled_share_link_ids(); end

  def enabled_share_link_ids=(ids); end

  def enabled_share_links(); end

  def enabled_share_links=(value); end

  def histories(); end

  def histories=(value); end

  def history_ids(); end

  def history_ids=(ids); end

  def parent(); end

  def parent=(value); end

  def parent_changed?(); end

  def parent_previously_changed?(); end

  def reload_enabled_alias(); end

  def reload_parent(); end

  def reload_space(); end

  def share_link_ids(); end

  def share_link_ids=(ids); end

  def share_links(); end

  def share_links=(value); end

  def snapshot_ids(); end

  def snapshot_ids=(ids); end

  def snapshots(); end

  def snapshots=(value); end

  def space(); end

  def space=(value); end

  def space_changed?(); end

  def space_previously_changed?(); end
end

module Docs::Block::GeneratedAssociationMethods
end

module Docs::Block::GeneratedAttributeMethods
end

module Docs::Block::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Docs::Block
  def self.non_deleted(*args, **arg); end

  def self.pageable(*args, **arg); end

  def self.soft_deleted(*args, **arg); end

  def self.with_attached_attachments(*args, **arg); end
end

class Docs::BlockPolicy
  def __scoping__array__collaborating(array); end
end

class Docs::Document
  include ::Docs::Document::GeneratedAttributeMethods
  include ::Docs::Document::GeneratedAssociationMethods
end

module Docs::Document::GeneratedAssociationMethods
end

module Docs::Document::GeneratedAssociationMethods
end

module Docs::Document::GeneratedAttributeMethods
end

module Docs::Document::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Docs::Enums::Blocktype::UnresolvedValueError
end

class Docs::Enums::Blocktype::UnresolvedValueError
end

class Docs::Enums::Embedtype::UnresolvedValueError
end

class Docs::Enums::Embedtype::UnresolvedValueError
end

class Docs::Enums::Filesourcetype::UnresolvedValueError
end

class Docs::Enums::Filesourcetype::UnresolvedValueError
end

class Docs::Enums::Patchstate::UnresolvedValueError
end

class Docs::Enums::Patchstate::UnresolvedValueError
end

class Docs::Enums::Patchtype::UnresolvedValueError
end

class Docs::Enums::Patchtype::UnresolvedValueError
end

class Docs::Enums::Policytype::UnresolvedValueError
end

class Docs::Enums::Policytype::UnresolvedValueError
end

class Docs::Enums::ShareLinkStateType::UnresolvedValueError
end

class Docs::Enums::ShareLinkStateType::UnresolvedValueError
end

class Docs::Enums::Sharetype::UnresolvedValueError
end

class Docs::Enums::Sharetype::UnresolvedValueError
end

class Docs::Formula
  include ::Docs::Formula::GeneratedAttributeMethods
  include ::Docs::Formula::GeneratedAssociationMethods
  def autosave_associated_records_for_block(*args); end

  def autosave_associated_records_for_space(*args); end
end

module Docs::Formula::GeneratedAssociationMethods
  def block(); end

  def block=(value); end

  def block_changed?(); end

  def block_previously_changed?(); end

  def build_block(*args, &block); end

  def build_space(*args, &block); end

  def create_block(*args, &block); end

  def create_block!(*args, &block); end

  def create_space(*args, &block); end

  def create_space!(*args, &block); end

  def reload_block(); end

  def reload_space(); end

  def space(); end

  def space=(value); end

  def space_changed?(); end

  def space_previously_changed?(); end
end

module Docs::Formula::GeneratedAssociationMethods
end

module Docs::Formula::GeneratedAttributeMethods
end

module Docs::Formula::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Docs::Formula
  def self.normal(*args, **arg); end

  def self.not_normal(*args, **arg); end

  def self.not_spreadsheet(*args, **arg); end

  def self.spreadsheet(*args, **arg); end

  def self.types(); end
end

class Docs::History
  include ::Docs::History::GeneratedAttributeMethods
  include ::Docs::History::GeneratedAssociationMethods
  def autosave_associated_records_for_block(*args); end

  def autosave_associated_records_for_space(*args); end
end

module Docs::History::GeneratedAssociationMethods
  def block(); end

  def block=(value); end

  def block_changed?(); end

  def block_previously_changed?(); end

  def build_block(*args, &block); end

  def build_space(*args, &block); end

  def create_block(*args, &block); end

  def create_block!(*args, &block); end

  def create_space(*args, &block); end

  def create_space!(*args, &block); end

  def reload_block(); end

  def reload_space(); end

  def space(); end

  def space=(value); end

  def space_changed?(); end

  def space_previously_changed?(); end
end

module Docs::History::GeneratedAssociationMethods
end

module Docs::History::GeneratedAttributeMethods
end

module Docs::History::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Docs::Inputs::BlockInput
  def attachments(); end

  def content(); end

  def data(); end

  def id(); end

  def meta(); end

  def parent_id(); end

  def sort(); end

  def text(); end

  def type(); end
end

class Docs::Inputs::BlockInput
  def self.load_attachments(value, _context=T.unsafe(nil)); end

  def self.load_content(value, _context=T.unsafe(nil)); end

  def self.load_data(value, _context=T.unsafe(nil)); end

  def self.load_id(value, _context=T.unsafe(nil)); end

  def self.load_meta(value, _context=T.unsafe(nil)); end

  def self.load_parent_id(value, _context=T.unsafe(nil)); end

  def self.load_sort(value, _context=T.unsafe(nil)); end

  def self.load_text(value, _context=T.unsafe(nil)); end

  def self.load_type(value, _context=T.unsafe(nil)); end
end

class Docs::Inputs::FormulaDeleteInput
  def block_id(); end

  def id(); end
end

class Docs::Inputs::FormulaDeleteInput
  def self.load_block_id(value, _context=T.unsafe(nil)); end

  def self.load_id(value, _context=T.unsafe(nil)); end
end

class Docs::Inputs::FormulaModifyInput
  def block_id(); end

  def cache_value(); end

  def definition(); end

  def id(); end

  def meta(); end

  def name(); end

  def type(); end

  def version(); end
end

class Docs::Inputs::FormulaModifyInput
  def self.load_block_id(value, _context=T.unsafe(nil)); end

  def self.load_cache_value(value, _context=T.unsafe(nil)); end

  def self.load_definition(value, _context=T.unsafe(nil)); end

  def self.load_id(value, _context=T.unsafe(nil)); end

  def self.load_meta(value, _context=T.unsafe(nil)); end

  def self.load_name(value, _context=T.unsafe(nil)); end

  def self.load_type(value, _context=T.unsafe(nil)); end

  def self.load_version(value, _context=T.unsafe(nil)); end
end

class Docs::Inputs::ShareLinkInput
  def domain(); end

  def policy(); end

  def state(); end
end

class Docs::Inputs::ShareLinkInput
  def self.load_domain(value, _context=T.unsafe(nil)); end

  def self.load_policy(value, _context=T.unsafe(nil)); end

  def self.load_state(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockCreate
  def load_parent_id(value, _context=T.unsafe(nil)); end

  def load_title(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockCreateShareLink
  def load_id(value, _context=T.unsafe(nil)); end

  def load_target(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockCreateSnapshot
  def load_id(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockDuplicate
  def load_id(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockHardDelete
  def load_ids(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockMove
  def load_id(value, _context=T.unsafe(nil)); end

  def load_sort(value, _context=T.unsafe(nil)); end

  def load_target_parent_id(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockPinOrUnpin
  def load_block_id(value, _context=T.unsafe(nil)); end

  def load_pin(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockRename
  def load_id(value, _context=T.unsafe(nil)); end

  def load_title(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockRestore
  def load_ids(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockSoftDelete
  def load_hard_delete(value, _context=T.unsafe(nil)); end

  def load_id(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::BlockSyncBatch
  def load_blocks(value, _context=T.unsafe(nil)); end

  def load_deleted_ids(value, _context=T.unsafe(nil)); end

  def load_operator_id(value, _context=T.unsafe(nil)); end

  def load_root_id(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::FormulaCommit
  def load_commit_formulas(value, _context=T.unsafe(nil)); end

  def load_delete_formulas(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::SnapshotRestore
  def load_block_id(value, _context=T.unsafe(nil)); end

  def load_snapshot_version(value, _context=T.unsafe(nil)); end
end

class Docs::Mutations::SyncDocument
  def load_doc_id(value, _context=T.unsafe(nil)); end

  def load_operator_id(value, _context=T.unsafe(nil)); end

  def load_previous_state_id(value, _context=T.unsafe(nil)); end

  def load_state(value, _context=T.unsafe(nil)); end

  def load_state_id(value, _context=T.unsafe(nil)); end

  def load_updates(value, _context=T.unsafe(nil)); end
end

class Docs::Objects::BlockBaseObject
  def permissions(); end
end

class Docs::Objects::BlockBaseObject
  def self.permissions_type(); end
end

class Docs::Objects::BlockCover::UnresolvedTypeError
end

class Docs::Objects::BlockCover::UnresolvedTypeError
end

class Docs::Objects::BlockIcon::UnresolvedTypeError
end

class Docs::Objects::BlockIcon::UnresolvedTypeError
end

class Docs::Pin
  include ::Docs::Pin::GeneratedAttributeMethods
  include ::Docs::Pin::GeneratedAssociationMethods
  def autosave_associated_records_for_block(*args); end

  def autosave_associated_records_for_space(*args); end

  def autosave_associated_records_for_user(*args); end
end

module Docs::Pin::GeneratedAssociationMethods
  def block(); end

  def block=(value); end

  def block_changed?(); end

  def block_previously_changed?(); end

  def build_block(*args, &block); end

  def build_space(*args, &block); end

  def build_user(*args, &block); end

  def create_block(*args, &block); end

  def create_block!(*args, &block); end

  def create_space(*args, &block); end

  def create_space!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_block(); end

  def reload_space(); end

  def reload_user(); end

  def space(); end

  def space=(value); end

  def space_changed?(); end

  def space_previously_changed?(); end

  def user(); end

  def user=(value); end

  def user_changed?(); end

  def user_previously_changed?(); end
end

module Docs::Pin::GeneratedAssociationMethods
end

module Docs::Pin::GeneratedAttributeMethods
end

module Docs::Pin::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Docs::Queries::Block
  def load_id(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::BlockInfo
  def load_domain(value, _context=T.unsafe(nil)); end

  def load_id(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::BlockSearch
  def load_domain(value, _context=T.unsafe(nil)); end

  def load_input(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::BlockShareLinks
  def load_id(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::BlockSnapshots
  def load_id(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::ChildrenBlocks
  def load_root_id(value, _context=T.unsafe(nil)); end

  def load_snapshot_version(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::Document
  def load_doc_id(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::Formulas
  def load_domain(value, _context=T.unsafe(nil)); end

  def load_ids(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::PageBlocks
  def load_domain(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::SpreadsheetChildren
  def load_parent_id(value, _context=T.unsafe(nil)); end
end

class Docs::Queries::TrashBlocks
  def load_block_id(value, _context=T.unsafe(nil)); end

  def load_domain(value, _context=T.unsafe(nil)); end

  def load_search(value, _context=T.unsafe(nil)); end
end

class Docs::ShareLink
  include ::Docs::ShareLink::GeneratedAttributeMethods
  include ::Docs::ShareLink::GeneratedAssociationMethods
  def autosave_associated_records_for_block(*args); end

  def autosave_associated_records_for_share_space(*args); end

  def autosave_associated_records_for_space(*args); end
end

module Docs::ShareLink::GeneratedAssociationMethods
  def block(); end

  def block=(value); end

  def block_changed?(); end

  def block_previously_changed?(); end

  def build_block(*args, &block); end

  def build_share_space(*args, &block); end

  def build_space(*args, &block); end

  def create_block(*args, &block); end

  def create_block!(*args, &block); end

  def create_share_space(*args, &block); end

  def create_share_space!(*args, &block); end

  def create_space(*args, &block); end

  def create_space!(*args, &block); end

  def reload_block(); end

  def reload_share_space(); end

  def reload_space(); end

  def share_space(); end

  def share_space=(value); end

  def share_space_changed?(); end

  def share_space_previously_changed?(); end

  def space(); end

  def space=(value); end

  def space_changed?(); end

  def space_previously_changed?(); end
end

module Docs::ShareLink::GeneratedAssociationMethods
end

module Docs::ShareLink::GeneratedAttributeMethods
end

module Docs::ShareLink::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Docs::ShareLink
  def self.disabled(*args, **arg); end

  def self.edit(*args, **arg); end

  def self.enabled(*args, **arg); end

  def self.not_disabled(*args, **arg); end

  def self.not_edit(*args, **arg); end

  def self.not_enabled(*args, **arg); end

  def self.not_view(*args, **arg); end

  def self.policies(); end

  def self.states(); end

  def self.view(*args, **arg); end
end

class Docs::Snapshot
  include ::Docs::Snapshot::GeneratedAttributeMethods
  include ::Docs::Snapshot::GeneratedAssociationMethods
  def autosave_associated_records_for_block(*args); end

  def autosave_associated_records_for_space(*args); end
end

module Docs::Snapshot::GeneratedAssociationMethods
  def block(); end

  def block=(value); end

  def block_changed?(); end

  def block_previously_changed?(); end

  def build_block(*args, &block); end

  def build_space(*args, &block); end

  def create_block(*args, &block); end

  def create_block!(*args, &block); end

  def create_space(*args, &block); end

  def create_space!(*args, &block); end

  def reload_block(); end

  def reload_space(); end

  def space(); end

  def space=(value); end

  def space_changed?(); end

  def space_previously_changed?(); end
end

module Docs::Snapshot::GeneratedAssociationMethods
end

module Docs::Snapshot::GeneratedAttributeMethods
end

module Docs::Snapshot::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Docs::Subscriptions::NewPatch
  def load_doc_id(value, _context=T.unsafe(nil)); end
end

class Docs::Subscriptions::Ydoc
  def load_doc_id(value, _context=T.unsafe(nil)); end
end

class Dotenv::Parser
  LINE = ::T.let(nil, ::T.untyped)
end

class Dry::CLI::Command
  def arguments(*args, **arg, &block); end

  def default_params(*args, **arg, &block); end

  def description(*args, **arg, &block); end

  def examples(*args, **arg, &block); end

  def optional_arguments(*args, **arg, &block); end

  def options(*args, **arg, &block); end

  def params(*args, **arg, &block); end

  def required_arguments(*args, **arg, &block); end

  def subcommands(*args, **arg, &block); end
end

class Dry::CLI::Command
  extend ::Forwardable
  def self.argument(name, options=T.unsafe(nil)); end

  def self.default_params(); end

  def self.desc(description); end

  def self.example(*examples); end

  def self.inherited(base); end

  def self.option(name, options=T.unsafe(nil)); end

  def self.optional_arguments(); end

  def self.params(); end

  def self.required_arguments(); end

  def self.subcommands(); end

  def self.superclass_arguments(); end

  def self.superclass_options(); end

  def self.superclass_variable_dup(var); end
end

class ERB
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end
end

class ERB::Compiler::Scanner
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEXP = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE_REGEXP = ::T.let(nil, ::T.untyped)
  TAG_NAME_FOLLOWING_REGEXP = ::T.let(nil, ::T.untyped)
  TAG_NAME_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
  TAG_NAME_START_REGEXP = ::T.let(nil, ::T.untyped)
  TAG_NAME_START_REGEXP_SET = ::T.let(nil, ::T.untyped)
end

class Easymon::ChecksController
  def index(); end

  def show(); end
end

class Encoding
  def _dump(*arg); end
  CESU_8 = ::T.let(nil, ::T.untyped)
  CP720 = ::T.let(nil, ::T.untyped)
  IBM720 = ::T.let(nil, ::T.untyped)
end

class Encoding::Converter
  def initialize(*arg); end
end

class Encoding
  def self._load(arg); end
end

module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def compact(); end

  def sum(identity=T.unsafe(nil), &block); end
end

module Enumerable
  extend ::ActiveSupport::EnumerableCoreExt::Constants
end

class Enumerator
  def +(arg); end

  def each_with_index(); end
end

class Enumerator::ArithmeticSequence
  def begin(); end

  def each(&blk); end

  def end(); end

  def exclude_end?(); end

  def last(*arg); end

  def step(); end
end

class Enumerator::ArithmeticSequence
end

class Enumerator::Chain
end

class Enumerator::Chain
end

class Enumerator::Generator
  def each(*arg, &blk); end

  def initialize(*arg); end
end

class Enumerator::Lazy
  def eager(); end
end

class Enumerator::Producer
  def each(&blk); end
end

class Enumerator::Producer
end

class Enumerator::Yielder
  def to_proc(); end
end

class Enumerator
  def self.produce(*arg); end
end

class Errno::EAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EAUTH
end

class Errno::EBADARCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADARCH
end

class Errno::EBADEXEC
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADEXEC
end

class Errno::EBADMACHO
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADMACHO
end

class Errno::EBADRPC
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADRPC
end

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::NOERROR

class Errno::EDEVERR
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EDEVERR
end

Errno::EDOOFUS = Errno::NOERROR

class Errno::EFTYPE
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EFTYPE
end

Errno::EIPSEC = Errno::NOERROR

class Errno::ELAST
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ELAST
end

class Errno::ENEEDAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENEEDAUTH
end

class Errno::ENOATTR
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOATTR
end

class Errno::ENOPOLICY
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOPOLICY
end

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

class Errno::EPROCLIM
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCLIM
end

class Errno::EPROCUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCUNAVAIL
end

class Errno::EPROGMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGMISMATCH
end

class Errno::EPROGUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGUNAVAIL
end

class Errno::EPWROFF
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPWROFF
end

Errno::EQFULL = Errno::ELAST

class Errno::ERPCMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ERPCMISMATCH
end

class Errno::ESHLIBVERS
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ESHLIBVERS
end

module Erubi
  MATCH_METHOD = ::T.let(nil, ::T.untyped)
  RANGE_ALL = ::T.let(nil, ::T.untyped)
  RANGE_FIRST = ::T.let(nil, ::T.untyped)
  RANGE_LAST = ::T.let(nil, ::T.untyped)
  TEXT_END = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Erubi::Engine
  def bufvar(); end

  def filename(); end

  def initialize(input, properties=T.unsafe(nil)); end

  def src(); end
end

module Erubi
  def self.h(value); end
end

module Etc
  VERSION = ::T.let(nil, ::T.untyped)
end

class Etc::Group
  def gid(); end

  def gid=(_); end

  def mem(); end

  def mem=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*arg); end

  def self.each(&blk); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Etc::Passwd
  def change(); end

  def change=(_); end

  def dir=(_); end

  def expire(); end

  def expire=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid=(_); end

  def name=(_); end

  def passwd=(_); end

  def shell=(_); end

  def uclass(); end

  def uclass=(_); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*arg); end

  def self.each(&blk); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Exception
  def binding_locations(); end

  def bindings(); end
end

class ExitCalledError
end

class ExitCalledError
end

module FFI
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  SizeTypes = ::T.let(nil, ::T.untyped)
  TYPE_BOOL = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_IN = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_OUT = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT32 = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT16 = ::T.let(nil, ::T.untyped)
  TYPE_INT32 = ::T.let(nil, ::T.untyped)
  TYPE_INT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT8 = ::T.let(nil, ::T.untyped)
  TYPE_LONG = ::T.let(nil, ::T.untyped)
  TYPE_LONGDOUBLE = ::T.let(nil, ::T.untyped)
  TYPE_POINTER = ::T.let(nil, ::T.untyped)
  TYPE_STRING = ::T.let(nil, ::T.untyped)
  TYPE_UINT16 = ::T.let(nil, ::T.untyped)
  TYPE_UINT32 = ::T.let(nil, ::T.untyped)
  TYPE_UINT64 = ::T.let(nil, ::T.untyped)
  TYPE_UINT8 = ::T.let(nil, ::T.untyped)
  TYPE_ULONG = ::T.let(nil, ::T.untyped)
  TYPE_VARARGS = ::T.let(nil, ::T.untyped)
  TYPE_VOID = ::T.let(nil, ::T.untyped)
  TypeDefs = ::T.let(nil, ::T.untyped)
  USE_THIS_PROCESS_AS_LIBRARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

FFI::CallbackInfo = FFI::FunctionType

class FFI::DynamicLibrary
  RTLD_ALL_MASK = ::T.let(nil, ::T.untyped)
  RTLD_BINDING_MASK = ::T.let(nil, ::T.untyped)
  RTLD_DEEPBIND = ::T.let(nil, ::T.untyped)
  RTLD_FIRST = ::T.let(nil, ::T.untyped)
  RTLD_GLOBAL = ::T.let(nil, ::T.untyped)
  RTLD_LAZY = ::T.let(nil, ::T.untyped)
  RTLD_LOCAL = ::T.let(nil, ::T.untyped)
  RTLD_LOCATION_MASK = ::T.let(nil, ::T.untyped)
  RTLD_MEMBER = ::T.let(nil, ::T.untyped)
  RTLD_NODELETE = ::T.let(nil, ::T.untyped)
  RTLD_NOLOAD = ::T.let(nil, ::T.untyped)
  RTLD_NOW = ::T.let(nil, ::T.untyped)
end

FFI::FunctionInfo = FFI::FunctionType

module FFI::Library
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  FlagsMap = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
end

FFI::NativeLibrary = FFI::DynamicLibrary

module FFI::NativeType
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

module FFI::NativeType
end

class FFI::NullPointerError
end

class FFI::NullPointerError
end

module FFI::Platform
  ADDRESS_ALIGN = ::T.let(nil, ::T.untyped)
  ADDRESS_SIZE = ::T.let(nil, ::T.untyped)
  ARCH = ::T.let(nil, ::T.untyped)
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  BYTE_ORDER = ::T.let(nil, ::T.untyped)
  CONF_DIR = ::T.let(nil, ::T.untyped)
  CPU = ::T.let(nil, ::T.untyped)
  DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  FLOAT_ALIGN = ::T.let(nil, ::T.untyped)
  FLOAT_SIZE = ::T.let(nil, ::T.untyped)
  INT16_ALIGN = ::T.let(nil, ::T.untyped)
  INT16_SIZE = ::T.let(nil, ::T.untyped)
  INT32_ALIGN = ::T.let(nil, ::T.untyped)
  INT32_SIZE = ::T.let(nil, ::T.untyped)
  INT64_ALIGN = ::T.let(nil, ::T.untyped)
  INT64_SIZE = ::T.let(nil, ::T.untyped)
  INT8_ALIGN = ::T.let(nil, ::T.untyped)
  INT8_SIZE = ::T.let(nil, ::T.untyped)
  IS_BSD = ::T.let(nil, ::T.untyped)
  IS_DRAGONFLYBSD = ::T.let(nil, ::T.untyped)
  IS_FREEBSD = ::T.let(nil, ::T.untyped)
  IS_GNU = ::T.let(nil, ::T.untyped)
  IS_LINUX = ::T.let(nil, ::T.untyped)
  IS_MAC = ::T.let(nil, ::T.untyped)
  IS_NETBSD = ::T.let(nil, ::T.untyped)
  IS_OPENBSD = ::T.let(nil, ::T.untyped)
  IS_SOLARIS = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
  LIBPREFIX = ::T.let(nil, ::T.untyped)
  LIBSUFFIX = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LONG_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  LONG_SIZE = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  OS = ::T.let(nil, ::T.untyped)
  OSVERSION = ::T.let(nil, ::T.untyped)
end

class FFI::Pointer
  NULL = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
end

class FFI::Struct::InlineArray
  include ::Enumerable
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::String
end

class FFI::StructLayout::String
end

class FFI::StructLayoutBuilder
  NUMBER_TYPES = ::T.let(nil, ::T.untyped)
end

class FFI::Type
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  LONG_LONG = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SCHAR = ::T.let(nil, ::T.untyped)
  SHORT = ::T.let(nil, ::T.untyped)
  SINT = ::T.let(nil, ::T.untyped)
  SLONG = ::T.let(nil, ::T.untyped)
  SLONG_LONG = ::T.let(nil, ::T.untyped)
  SSHORT = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UCHAR = ::T.let(nil, ::T.untyped)
  UINT = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  ULONG_LONG = ::T.let(nil, ::T.untyped)
  USHORT = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

FFI::Type::Array = FFI::ArrayType

FFI::Type::Function = FFI::FunctionType

FFI::Type::Struct = FFI::StructByValue

module FFaker
  BASE_LIB_PATH = ::T.let(nil, ::T.untyped)
  HEX = ::T.let(nil, ::T.untyped)
  LETTERS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module FFaker::AWS
  def instance_tenancy(); end

  def instance_type(); end

  def offering_type(); end

  def product_description(); end
end

module FFaker::AWS
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AWS
end

module FFaker::Address
  def building_number(); end

  def city(); end

  def city_prefix(); end

  def city_suffix(); end

  def country(given_code=T.unsafe(nil)); end

  def country_code(given_country=T.unsafe(nil)); end

  def neighborhood(); end

  def secondary_address(); end

  def street_address(include_secondary=T.unsafe(nil)); end

  def street_name(); end

  def street_suffix(); end

  def time_zone(); end

  def uk_country(); end

  def uk_county(); end

  def uk_postcode(); end

  def us_state(); end

  def us_state_abbr(); end

  def zip_code(); end
  CITY_PREFIXES = ::T.let(nil, ::T.untyped)
  COMPASS_DIRECTIONS = ::T.let(nil, ::T.untyped)
  SEC_ADDR = ::T.let(nil, ::T.untyped)
end

module FFaker::Address
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Address
end

module FFaker::AddressAU
  include ::FFaker::Address
  def full_address(st_abbr=T.unsafe(nil)); end

  def postcode(st_abbr=T.unsafe(nil)); end

  def state(); end

  def state_abbr(); end

  def suburb(st_abbr=T.unsafe(nil), p_code=T.unsafe(nil)); end

  def time_zone(st_abbr=T.unsafe(nil)); end
  POSTCODE = ::T.let(nil, ::T.untyped)
  STATE = ::T.let(nil, ::T.untyped)
  STATE_ABBR = ::T.let(nil, ::T.untyped)
  SUBURB = ::T.let(nil, ::T.untyped)
  TIME_ZONE = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressAU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressAU
  extend ::FFaker::Address
end

module FFaker::AddressBR
  include ::FFaker::Address
  def city(); end

  def complement(); end

  def full_address(with_complement: T.unsafe(nil)); end

  def neighborhood(); end

  def state(); end

  def state_abbr(); end

  def street(); end

  def street_prefix(); end

  def zip_code(); end
  STREET_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressBR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressBR
  extend ::FFaker::Address
end

module FFaker::AddressCA
  include ::FFaker::Address
  def city(); end

  def postal_code(); end

  def province(); end

  def province_abbr(); end
  POSTAL_CODE_CHARS = ::T.let(nil, ::T.untyped)
  POSTAL_CODE_FORMAT = ::T.let(nil, ::T.untyped)
  PROVINCE_ABBRS = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressCA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressCA
  extend ::FFaker::Address
end

module FFaker::AddressCH
  include ::FFaker::Address
  def canton_abbr(); end

  def postal_code(); end
end

module FFaker::AddressCH
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressCH
  extend ::FFaker::Address
end

module FFaker::AddressCHDE
  include ::FFaker::AddressCH
  include ::FFaker::Address
  def canton(); end
end

module FFaker::AddressCHDE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressCHDE
  extend ::FFaker::AddressCH
  extend ::FFaker::Address
end

module FFaker::AddressCHFR
  include ::FFaker::AddressCH
  include ::FFaker::Address
  def canton(); end
end

module FFaker::AddressCHFR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressCHFR
  extend ::FFaker::AddressCH
  extend ::FFaker::Address
end

module FFaker::AddressCHIT
  include ::FFaker::AddressCH
  include ::FFaker::Address
  def canton(); end
end

module FFaker::AddressCHIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressCHIT
  extend ::FFaker::AddressCH
  extend ::FFaker::Address
end

module FFaker::AddressDA
  include ::FFaker::Address
  def city(); end

  def full_address(); end

  def kommune(); end

  def post_nr(); end

  def region(); end

  def state(); end

  def street_address(); end

  def street_name(); end

  def zip_code(); end
  REGION = ::T.let(nil, ::T.untyped)
  STATE = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressDA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressDA
  extend ::FFaker::Address
end

module FFaker::AddressDE
  include ::FFaker::Address
  def city(); end

  def state(); end

  def street_address(); end

  def street_name(); end

  def zip_code(); end
end

module FFaker::AddressDE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressDE
  extend ::FFaker::Address
end

module FFaker::AddressFI
  include ::FFaker::Address
  def city(); end

  def full_address(); end

  def random_country(); end

  def street_address(); end

  def street_name(); end

  def street_nbr(); end

  def zip_code(); end
  STREET_NBR_FORMATS = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressFI
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressFI
  extend ::FFaker::Address
end

module FFaker::AddressFR
  include ::FFaker::Address
  def city(); end

  def full_address(); end

  def postal_code(); end

  def region(); end

  def street_address(); end
  MOD = ::T.let(nil, ::T.untyped)
  NUM = ::T.let(nil, ::T.untyped)
  POSTAL_CODE_FORMATS = ::T.let(nil, ::T.untyped)
  SEP = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressFR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressFR
  extend ::FFaker::Address
end

module FFaker::AddressGR
  include ::FFaker::Address
  def city(); end

  def region(); end

  def street_address(); end

  def street_name(); end

  def street_nbr(); end

  def zip_code(); end
  REGION = ::T.let(nil, ::T.untyped)
  STATE = ::T.let(nil, ::T.untyped)
  STREET_NUMBER = ::T.let(nil, ::T.untyped)
  STREET_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressGR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressGR
  extend ::FFaker::Address
end

module FFaker::AddressID
  include ::FFaker::Address
  def city(); end

  def state(); end

  def state_abbr(); end

  def street(); end

  def street_prefix(); end

  def zip_code(); end
  STREET_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressID
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressID
  extend ::FFaker::Address
end

module FFaker::AddressIN
  include ::FFaker::Address
  def city(); end

  def country(); end

  def country_code(); end

  def pincode(); end

  def state(); end

  def state_abbr(); end

  def state_and_union_territory(); end

  def state_and_union_territory_abbr(); end

  def time_zone(); end

  def union_territory(); end

  def union_territory_abbr(); end

  def zip_code(); end
end

module FFaker::AddressIN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressIN
  extend ::FFaker::Address
end

module FFaker::AddressIT
  def city(); end

  def full_address(); end

  def postal_code(); end

  def region(); end

  def street_address(); end
  NUM = ::T.let(nil, ::T.untyped)
  POSTAL_CODE_FORMATS = ::T.let(nil, ::T.untyped)
  SEP = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressIT
end

module FFaker::AddressJA
  include ::FFaker::Address
  def address(); end

  def city(); end

  def county(); end

  def designated_city(); end

  def designated_city_address(); end

  def land_number(); end

  def other_address(); end

  def postal_code(); end

  def prefecture(); end

  def street(); end

  def tokyo_ward(); end

  def tokyo_ward_address(); end

  def village(); end

  def ward(); end
  LAND_NUMBER_FORMATS = ::T.let(nil, ::T.untyped)
  ZIP_FORMATS = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressJA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressJA
  extend ::FFaker::Address
end

module FFaker::AddressKR
  def address_detail(); end

  def borough(); end

  def building_name(); end

  def city(); end

  def land_address(); end

  def land_number(); end

  def metropolitan_city(); end

  def old_postal_code(); end

  def postal_code(); end

  def province(); end

  def road_addess(); end

  def street(); end

  def town(); end
  BUILDING_DONGS = ::T.let(nil, ::T.untyped)
  BUILDING_SUFFIXES = ::T.let(nil, ::T.untyped)
  METROPOLITAN_CITIES = ::T.let(nil, ::T.untyped)
  PROVINCES = ::T.let(nil, ::T.untyped)
  STREET_SUFFIXES = ::T.let(nil, ::T.untyped)
  TOWN_SUFFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressKR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressKR
end

module FFaker::AddressMX
  def municipality(st_abbr=T.unsafe(nil)); end

  def postal_code(); end

  def state(); end

  def state_abbr(st_name=T.unsafe(nil)); end

  def zip_code(); end
end

module FFaker::AddressMX
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressMX
end

module FFaker::AddressNL
  include ::FFaker::Address
  def city(); end

  def postal_code(); end

  def province(); end

  def street_name(); end

  def zip_code(); end
end

module FFaker::AddressNL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressNL
  extend ::FFaker::Address
end

module FFaker::AddressPL
  def building_number(); end

  def city(); end

  def full_address(include_country=T.unsafe(nil), include_secondary=T.unsafe(nil)); end

  def postal_code(); end

  def province(); end

  def secondary_number(); end

  def square(); end

  def square_prefix(); end

  def state(); end

  def street(); end

  def street_address(include_secondary=T.unsafe(nil)); end

  def street_name(); end

  def street_prefix(); end

  def voivodeship(); end

  def voivodeship_abbr(); end

  def voivodeship_capital_city(); end

  def zip_code(); end
  SQUARE_PREFIXES = ::T.let(nil, ::T.untyped)
  STREET_PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressPL
end

module FFaker::AddressRU
  include ::FFaker::Address
  def city(); end

  def province(); end

  def street_address(); end

  def street_name(); end

  def street_number(); end

  def zip_code(); end
  POSTAL_CODE_FORMAT = ::T.let(nil, ::T.untyped)
  STREET_NBR_FORMATS = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressRU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressRU
  extend ::FFaker::Address
end

module FFaker::AddressSE
  include ::FFaker::Address
  def city(); end

  def full_address(); end

  def random_country(); end

  def street_address(); end

  def street_name(); end

  def street_nbr(); end

  def zip_code(); end
  STREET_NBR_FORMATS = ::T.let(nil, ::T.untyped)
  ZIP_FORMATS = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressSE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressSE
  extend ::FFaker::Address
end

module FFaker::AddressSN
  include ::FFaker::Address
  def arrondissement(); end

  def departement(); end

  def region(); end
end

module FFaker::AddressSN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressSN
  extend ::FFaker::Address
end

module FFaker::AddressUA
  def appartment_number(); end

  def building_number(); end

  def city(); end

  def country(); end

  def province(); end

  def street_address(include_secondary=T.unsafe(nil)); end

  def street_name(); end

  def zip_code(); end
  APPARTMENT_NUMBER_FORMATS = ::T.let(nil, ::T.untyped)
  BUILDING_NUMBER_FORMATS = ::T.let(nil, ::T.untyped)
  POSTAL_CODE_FORMAT = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressUA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressUA
end

module FFaker::AddressUK
  include ::FFaker::Address
  def country(); end

  def county(); end

  def postcode(); end
  COUNTRY = ::T.let(nil, ::T.untyped)
  POSTCODE = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressUK
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressUK
  extend ::FFaker::Address
end

module FFaker::AddressUS
  include ::FFaker::Address
  def continental_state(); end

  def continental_state_abbr(); end

  def state(); end

  def state_abbr(st_name=T.unsafe(nil)); end

  def state_and_territories_abbr(); end

  def zip_code(); end
  CONTINENTAL_STATE = ::T.let(nil, ::T.untyped)
  CONTINENTAL_STATE_ABBR = ::T.let(nil, ::T.untyped)
  STATE = ::T.let(nil, ::T.untyped)
  STATE_ABBR = ::T.let(nil, ::T.untyped)
  ZIP_FORMATS = ::T.let(nil, ::T.untyped)
end

module FFaker::AddressUS
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AddressUS
  extend ::FFaker::Address
end

module FFaker::Airline
  def flight_number(); end

  def name(); end
end

module FFaker::Airline
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Airline
end

module FFaker::Animal
  def common_name(); end
end

module FFaker::Animal
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Animal
end

module FFaker::AnimalBR
  def common_name(); end
end

module FFaker::AnimalBR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AnimalBR
end

module FFaker::AnimalCN
  def common_name(); end
end

module FFaker::AnimalCN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AnimalCN
end

module FFaker::AnimalES
  def common_name(); end
end

module FFaker::AnimalES
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AnimalES
end

module FFaker::AnimalPL
end

module FFaker::AnimalPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  def self.common_name(); end
end

module FFaker::AnimalUS
  def common_name(); end
end

module FFaker::AnimalUS
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::AnimalUS
end

module FFaker::Avatar
  def image(slug=T.unsafe(nil), size=T.unsafe(nil), format=T.unsafe(nil), bgset=T.unsafe(nil)); end
  SUPPORTED_FORMATS = ::T.let(nil, ::T.untyped)
end

module FFaker::Avatar
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Avatar
end

module FFaker::BaconIpsum
  include ::FFaker::Lorem
  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::BaconIpsum
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::BaconIpsum
  extend ::FFaker::Lorem
end

module FFaker::Bank
  def card_expiry_date(year_range: T.unsafe(nil), year_latest: T.unsafe(nil), format: T.unsafe(nil)); end

  def card_number(); end

  def card_type(); end

  def iban(country_code: T.unsafe(nil)); end
  COUNTRIES = ::T.let(nil, ::T.untyped)
end

module FFaker::Bank
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Bank
end

module FFaker::Book
  def author(); end

  def cover(slug=T.unsafe(nil), size=T.unsafe(nil), format=T.unsafe(nil), bgset=T.unsafe(nil)); end

  def description(sentence_count=T.unsafe(nil)); end

  def genre(); end

  def isbn(); end

  def orly_cover(name=T.unsafe(nil), book_author=T.unsafe(nil), top_text=T.unsafe(nil)); end

  def title(); end
end

module FFaker::Book
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Book
end

module FFaker::Boolean
  def maybe(); end

  def random(); end

  def sample(); end
end

module FFaker::Boolean
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Boolean
end

module FFaker::CheesyLingo
  def paragraph(number_of_phrases=T.unsafe(nil)); end

  def sentence(); end

  def title(); end

  def word(); end

  def words(count=T.unsafe(nil)); end
  TITLE_1 = ::T.let(nil, ::T.untyped)
  TITLE_2 = ::T.let(nil, ::T.untyped)
end

module FFaker::CheesyLingo
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::CheesyLingo
end

module FFaker::Code
  def ean(); end

  def npi(legacy: T.unsafe(nil)); end
end

module FFaker::Code
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Code
end

module FFaker::Color
  def hex_code(); end

  def hsl_array(); end

  def hsl_list(); end

  def hsla_array(); end

  def hsla_list(); end

  def name(); end

  def rgb_array(); end

  def rgb_list(); end

  def rgba_array(); end

  def rgba_list(); end
end

module FFaker::Color
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Color
end

module FFaker::ColorPL
  def name(); end
end

module FFaker::ColorPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::ColorPL
end

module FFaker::ColorUA
  def name(); end
end

module FFaker::ColorUA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::ColorUA
end

module FFaker::Company
  def bs(); end

  def catch_phrase(); end

  def name(); end

  def position(); end

  def suffix(); end
  POSITIONS = ::T.let(nil, ::T.untyped)
  POSITION_PREFIXES = ::T.let(nil, ::T.untyped)
  SUFFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::Company
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Company
end

module FFaker::CompanyCN
  def name(); end

  def suffix(); end

  def type(); end
  SUFFIXES = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

module FFaker::CompanyCN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::CompanyCN
end

module FFaker::CompanyFR
  def name(); end

  def siren(); end

  def siret(); end

  def suffix(); end
  SUFFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::CompanyFR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::CompanyFR
end

module FFaker::CompanyIT
  def name(); end

  def partita_iva(); end

  def prefix(); end

  def suffix(); end
  PREFIXES = ::T.let(nil, ::T.untyped)
  SUFFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::CompanyIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::CompanyIT
end

module FFaker::CompanyJA
  def name(); end

  def position(); end
  DETAILED_TYPES = ::T.let(nil, ::T.untyped)
  POSITIONS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

module FFaker::CompanyJA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::CompanyJA
end

module FFaker::CompanySE
  def name(); end

  def suffix(); end
  SUFFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::CompanySE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::CompanySE
end

module FFaker::Conference
  def name(); end
end

module FFaker::Conference
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Conference
end

module FFaker::CoursesFR
end

module FFaker::CoursesFR::Mathematiques
  def lesson(); end
end

module FFaker::CoursesFR::Mathematiques
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::CoursesFR::Mathematiques
end

module FFaker::CoursesFR::Philosophie
  def lesson(); end
end

module FFaker::CoursesFR::Philosophie
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::CoursesFR::Philosophie
end

module FFaker::CoursesFR
end

module FFaker::Currency
  def code(); end

  def name(); end

  def symbol(); end
end

module FFaker::Currency
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Currency
end

module FFaker::DizzleIpsum
  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::DizzleIpsum
  extend ::FFaker::Lorem
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::DizzleIpsum
end

module FFaker::Education
  def degree(); end

  def degree_short(); end

  def major(); end

  def school(); end

  def school_generic_name(); end

  def school_name(); end
  MAJOR_ADJ = ::T.let(nil, ::T.untyped)
  SCHOOL_ADJ = ::T.let(nil, ::T.untyped)
  SCHOOL_PREFIX = ::T.let(nil, ::T.untyped)
  SCHOOL_TYPE = ::T.let(nil, ::T.untyped)
  SCHOOL_UNI = ::T.let(nil, ::T.untyped)
end

module FFaker::Education
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Education
end

module FFaker::EducationCN
  def degree(); end

  def location(); end

  def major(); end

  def school(); end
  DEGREE_PREFIX = ::T.let(nil, ::T.untyped)
  DEGREE_SUFFIX = ::T.let(nil, ::T.untyped)
  POSITION = ::T.let(nil, ::T.untyped)
  SCHOOL_UNI = ::T.let(nil, ::T.untyped)
end

module FFaker::EducationCN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::EducationCN
end

module FFaker::Filesystem
  def directory(directory_separator=T.unsafe(nil)); end

  def extension(); end

  def file_name(dir=T.unsafe(nil), name=T.unsafe(nil), ext=T.unsafe(nil), directory_separator=T.unsafe(nil)); end

  def mime_type(); end
end

module FFaker::Filesystem
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Filesystem
end

module FFaker::Food
  def fruit(); end

  def herb_or_spice(); end

  def ingredient(); end

  def meat(); end

  def vegetable(); end
end

module FFaker::Food
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Food
end

module FFaker::FoodPL
  def diary(); end

  def fermented(); end

  def food(); end

  def fruit(); end

  def herb(); end

  def meat(); end

  def preserves(); end

  def processed(); end

  def spice(); end

  def unprocessed(); end

  def vegetable(); end
end

module FFaker::FoodPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::FoodPL
end

module FFaker::FreedomIpsum
  include ::FFaker::Lorem
  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::FreedomIpsum
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::FreedomIpsum
  extend ::FFaker::Lorem
end

module FFaker::Game
  def category(); end

  def mechanic(); end

  def title(); end
end

module FFaker::Game
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Game
end

module FFaker::Gender
  def binary(); end

  def maybe(); end

  def random(); end

  def sample(); end
  BINARY_GENDERS = ::T.let(nil, ::T.untyped)
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::Gender
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Gender
end

module FFaker::GenderBR
  def maybe(); end

  def random(); end

  def sample(); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::GenderBR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderBR
end

module FFaker::GenderCN
  def maybe(); end

  def random(); end

  def sample(); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::GenderCN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderCN
end

module FFaker::GenderID
  def maybe(); end

  def random(); end

  def sample(); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::GenderID
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderID
end

module FFaker::GenderIT
  def maybe(); end

  def random(); end

  def sample(); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::GenderIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderIT
end

module FFaker::GenderJA
  def maybe(); end

  def random(); end

  def sample(); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::GenderJA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderJA
end

module FFaker::GenderJP
  include ::FFaker::GenderJA
end

module FFaker::GenderJP
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderJA
end

module FFaker::GenderKR
  def maybe(); end

  def random(); end

  def sample(); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::GenderKR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderKR
end

module FFaker::GenderPL
  def maybe(); end

  def random(); end

  def sample(); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::GenderPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderPL
end

module FFaker::GenderRU
  def binary(); end

  def maybe(); end

  def random(); end

  def sample(); end
  BINARY_GENDERS = ::T.let(nil, ::T.untyped)
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::GenderRU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::GenderRU
end

module FFaker::Geolocation
  def boxed_coords(upper_left, lower_right); end

  def lat(); end

  def lng(); end
  LATLNG = ::T.let(nil, ::T.untyped)
end

module FFaker::Geolocation
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Geolocation
end

module FFaker::Guid
  def guid(); end
end

module FFaker::Guid
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Guid
end

module FFaker::HTMLIpsum
  def a(word_count=T.unsafe(nil)); end

  def body(); end

  def dl(definitions=T.unsafe(nil)); end

  def fancy_string(count=T.unsafe(nil), include_breaks=T.unsafe(nil)); end

  def ol_long(items=T.unsafe(nil)); end

  def ol_short(items=T.unsafe(nil)); end

  def p(count=T.unsafe(nil), options=T.unsafe(nil)); end

  def table(rows=T.unsafe(nil)); end

  def ul_links(items=T.unsafe(nil)); end

  def ul_long(items=T.unsafe(nil)); end

  def ul_short(items=T.unsafe(nil)); end
end

module FFaker::HTMLIpsum
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::HTMLIpsum
end

module FFaker::HealthcareIpsum
  include ::FFaker::Lorem
  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::HealthcareIpsum
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::HealthcareIpsum
  extend ::FFaker::Lorem
end

module FFaker::HealthcareRU
  def doctor_specialization(); end
end

module FFaker::HealthcareRU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::HealthcareRU
end

module FFaker::HipsterIpsum
  include ::FFaker::Lorem
  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::HipsterIpsum
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::HipsterIpsum
  extend ::FFaker::Lorem
end

module FFaker::Identification
  def drivers_license(); end

  def ethnicity(); end

  def gender(); end

  def ssn(); end
  ETHNICITIES = ::T.let(nil, ::T.untyped)
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::Identification
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Identification
end

module FFaker::IdentificationBR
  def cnpj(); end

  def cnpj_verification_digits(cnpj); end

  def cpf(); end

  def cpf_verification_digits(cpf); end

  def gender(); end

  def pretty_cnpj(); end

  def pretty_cpf(); end

  def pretty_rg(); end

  def rg(); end
  CNPJ_VERIFICATION_MULTIPLIERS = ::T.let(nil, ::T.untyped)
  CPF_VERIFICATION_MULTIPLIERS = ::T.let(nil, ::T.untyped)
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::IdentificationBR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationBR
end

module FFaker::IdentificationES
  def gender(); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::IdentificationES
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationES
end

module FFaker::IdentificationESCL
  def rut(); end
end

module FFaker::IdentificationESCL
  extend ::FFaker::IdentificationES
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationESCL
end

module FFaker::IdentificationESCO
  include ::FFaker::IdentificationES
  def blood_type(); end

  def driver_license_category(); end

  def drivers_license(); end

  def expedition_date(); end

  def id(); end
  BLOOD_TYPE = ::T.let(nil, ::T.untyped)
  LICENSE_CATEGORY = ::T.let(nil, ::T.untyped)
end

module FFaker::IdentificationESCO
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationESCO
  extend ::FFaker::IdentificationES
end

module FFaker::IdentificationIN
  def aadhaar(); end
  AADHAAR_FORMAT = ::T.let(nil, ::T.untyped)
end

module FFaker::IdentificationIN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationIN
end

module FFaker::IdentificationIT
  def drivers_license(); end

  def ethnicity(); end

  def gender(); end

  def ssn(); end
  ETHNICITIES = ::T.let(nil, ::T.untyped)
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::IdentificationIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationIT
end

module FFaker::IdentificationKr
  def rrn(); end
end

module FFaker::IdentificationKr
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationKr
end

module FFaker::IdentificationMX
  def curp(); end

  def rfc(); end

  def rfc_persona_fisica(); end

  def rfc_persona_moral(); end
  CONSONANTS = ::T.let(nil, ::T.untyped)
  HOMOCLAVE = ::T.let(nil, ::T.untyped)
  VOWELS = ::T.let(nil, ::T.untyped)
end

module FFaker::IdentificationMX
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationMX
end

module FFaker::IdentificationPL
  def drivers_license(); end

  def id(); end

  def identity_card(); end

  def pesel(); end
end

module FFaker::IdentificationPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationPL
end

module FFaker::IdentificationTW
  def id(); end
  AREA_CODE = ::T.let(nil, ::T.untyped)
end

module FFaker::IdentificationTW
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::IdentificationTW
end

module FFaker::Image
  def file(size=T.unsafe(nil), format=T.unsafe(nil), bg_color=T.unsafe(nil), text_color=T.unsafe(nil), text=T.unsafe(nil)); end

  def url(size=T.unsafe(nil), format=T.unsafe(nil), bg_color=T.unsafe(nil), text_color=T.unsafe(nil), text=T.unsafe(nil)); end
  SUPPORTED_FORMATS = ::T.let(nil, ::T.untyped)
end

module FFaker::Image
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Image
end

module FFaker::Internet
  def disposable_email(name=T.unsafe(nil)); end

  def domain_name(); end

  def domain_suffix(); end

  def domain_word(); end

  def email(name=T.unsafe(nil)); end

  def free_email(name=T.unsafe(nil)); end

  def http_url(); end

  def ip_v4_address(); end

  def mac(delimiter=T.unsafe(nil)); end

  def password(min_length=T.unsafe(nil), max_length=T.unsafe(nil)); end

  def safe_email(name=T.unsafe(nil)); end

  def slug(words=T.unsafe(nil), glue=T.unsafe(nil)); end

  def uri(protocol); end

  def user_name(name=T.unsafe(nil)); end
  BYTE = ::T.let(nil, ::T.untyped)
  DISPOSABLE_HOSTS = ::T.let(nil, ::T.untyped)
  DOMAIN_SUFFIXES = ::T.let(nil, ::T.untyped)
  HOSTS = ::T.let(nil, ::T.untyped)
  MAC_LIMIT = ::T.let(nil, ::T.untyped)
  SAFE_DOMAIN_SUFFIXES = ::T.let(nil, ::T.untyped)
  SLUG_DELIMITERS = ::T.let(nil, ::T.untyped)
end

module FFaker::Internet
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Internet
end

module FFaker::InternetSE
  include ::FFaker::Internet
  def company_name_single_word(); end

  def disposable_email(name=T.unsafe(nil)); end

  def domain_name(); end

  def domain_suffix(); end

  def domain_word(); end

  def email(name=T.unsafe(nil)); end

  def free_email(name=T.unsafe(nil)); end

  def http_url(); end

  def ip_v4_address(); end

  def join_to_user_name(array_parts); end

  def login_user_name(); end

  def slug(words=T.unsafe(nil), glue=T.unsafe(nil)); end

  def uri(protocol); end

  def user_name(name=T.unsafe(nil)); end

  def user_name_from_name(name); end

  def user_name_random(); end

  def user_name_variant_long(); end

  def user_name_variant_short(); end
  BYTE = ::T.let(nil, ::T.untyped)
  DISPOSABLE_HOSTS = ::T.let(nil, ::T.untyped)
  DOMAIN_SUFFIXES = ::T.let(nil, ::T.untyped)
  HOSTS = ::T.let(nil, ::T.untyped)
  SLUG_DELIMITERS = ::T.let(nil, ::T.untyped)
end

module FFaker::InternetSE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::InternetSE
  extend ::FFaker::Internet
end

module FFaker::Job
  def title(); end
end

module FFaker::Job
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Job
end

module FFaker::JobBR
  def title(); end
end

module FFaker::JobBR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::JobBR
end

module FFaker::JobCN
  def title(); end
end

module FFaker::JobCN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::JobCN
end

module FFaker::JobFR
  def title(); end
  JOB_ADJECTIVES = ::T.let(nil, ::T.untyped)
end

module FFaker::JobFR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::JobFR
end

module FFaker::JobIT
  def title(); end
end

module FFaker::JobIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::JobIT
end

module FFaker::JobJA
  def title(); end
end

module FFaker::JobJA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::JobJA
end

module FFaker::JobKR
  def title(); end
end

module FFaker::JobKR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::JobKR
end

module FFaker::JobVN
  def title(); end
end

module FFaker::JobVN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::JobVN
end

module FFaker::Locale
  def code(given_language=T.unsafe(nil)); end

  def language(given_code=T.unsafe(nil)); end
end

module FFaker::Locale
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Locale
end

module FFaker::Lorem
  def characters(character_count=T.unsafe(nil)); end

  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(word_count=T.unsafe(nil)); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::Lorem
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Lorem
end

module FFaker::LoremAR
  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(word_count=T.unsafe(nil)); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremAR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremAR
end

module FFaker::LoremBR
  def characters(character_count=T.unsafe(nil)); end

  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(word_count=T.unsafe(nil)); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremBR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremBR
end

module FFaker::LoremCN
  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremCN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremCN
end

module FFaker::LoremFR
  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(word_count=T.unsafe(nil)); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremFR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremFR
end

module FFaker::LoremIE
  def paragraph(); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def question(); end

  def sentence(); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremIE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremIE
end

module FFaker::LoremIT
  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(word_count=T.unsafe(nil)); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremIT
end

module FFaker::LoremJA
  def character(); end

  def characters(count=T.unsafe(nil)); end

  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(count=T.unsafe(nil)); end

  def sentence(); end

  def sentences(count=T.unsafe(nil)); end

  def word(); end

  def words(count=T.unsafe(nil)); end
end

module FFaker::LoremJA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremJA
end

module FFaker::LoremKR
  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(word_count=T.unsafe(nil)); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremKR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremKR
end

module FFaker::LoremPL
  def character(); end

  def characters(count=T.unsafe(nil)); end

  def paragraph(count=T.unsafe(nil)); end

  def paragraphs(count=T.unsafe(nil)); end

  def phrase(count=T.unsafe(nil)); end

  def phrases(count=T.unsafe(nil)); end

  def sentence(count=T.unsafe(nil)); end

  def sentences(count=T.unsafe(nil)); end

  def word(); end

  def words(count=T.unsafe(nil)); end
end

module FFaker::LoremPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremPL
end

module FFaker::LoremRU
  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(word_count=T.unsafe(nil)); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremRU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremRU
end

module FFaker::LoremUA
  def paragraph(sentence_count=T.unsafe(nil)); end

  def paragraphs(paragraph_count=T.unsafe(nil)); end

  def phrase(word_count=T.unsafe(nil)); end

  def phrases(sentence_count=T.unsafe(nil)); end

  def sentence(word_count=T.unsafe(nil)); end

  def sentences(sentence_count=T.unsafe(nil)); end

  def word(); end

  def words(num=T.unsafe(nil)); end
end

module FFaker::LoremUA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::LoremUA
end

module FFaker::Movie
  def rating(); end

  def title(); end
  COLORS = ::T.let(nil, ::T.untyped)
  RATINGS = ::T.let(nil, ::T.untyped)
  SUFFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::Movie
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Movie
end

module FFaker::Music
  def album(); end

  def artist(); end

  def genre(); end

  def song(); end
end

module FFaker::Music
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Music
end

module FFaker::Name
  def female_name_with_prefix(); end

  def female_name_with_prefix_suffix(); end

  def female_name_with_suffix(); end

  def female_prefix(); end

  def first_name(); end

  def first_name_female(); end

  def first_name_male(); end

  def html_safe_last_name(); end

  def html_safe_name(); end

  def last_name(); end

  def male_name_with_prefix(); end

  def male_name_with_prefix_suffix(); end

  def male_name_with_suffix(); end

  def male_prefix(); end

  def name(); end

  def name_with_prefix(); end

  def name_with_prefix_suffix(); end

  def name_with_suffix(); end

  def other_prefix(); end

  def prefix(); end

  def pronouns(); end

  def suffix(); end
  FEMALE_PREFIXES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  MALE_PREFIXES = ::T.let(nil, ::T.untyped)
  OTHER_PREFIXES = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
  SUFFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::Name
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Name
end

module FFaker::NameAR
  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def name_female(); end

  def name_male(); end
end

module FFaker::NameAR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameAR
end

module FFaker::NameBR
  def female_name_with_prefix(); end

  def female_prefix(); end

  def first_name(); end

  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def male_name_with_prefix(); end

  def male_prefix(); end

  def name(); end

  def name_with_prefix(); end

  def prefix(); end
  FEMALE_PREFIXES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  MALE_PREFIXES = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameBR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameBR
end

module FFaker::NameCN
  def first_name(); end

  def last_first(); end

  def last_name(); end

  def name(); end
end

module FFaker::NameCN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameCN
end

module FFaker::NameCS
  include ::FFaker::Name
  def first_name(for_sex=T.unsafe(nil)); end

  def last_name(for_sex=T.unsafe(nil)); end

  def name(for_sex=T.unsafe(nil)); end

  def prefix(); end

  def suffix(); end

  def with_same_sex(sex=T.unsafe(nil)); end
  FEMALE_FIRST_NAMES = ::T.let(nil, ::T.untyped)
  FEMALE_LAST_NAMES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES = ::T.let(nil, ::T.untyped)
  GENDERS = ::T.let(nil, ::T.untyped)
  LAST_NAMES = ::T.let(nil, ::T.untyped)
  MALE_FIRST_NAMES = ::T.let(nil, ::T.untyped)
  MALE_LAST_NAMES = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
  SUFFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameCS
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameCS
  extend ::FFaker::Name
end

module FFaker::NameDA
  include ::FFaker::Name
  def any_name(); end

  def female_name(); end

  def first_name(gender=T.unsafe(nil)); end

  def last_name(); end

  def male_name(); end

  def name(gender=T.unsafe(nil)); end

  def prefix(); end
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameDA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameDA
  extend ::FFaker::Name
end

module FFaker::NameDE
  include ::FFaker::Name
  def first_name(); end

  def last_name(); end

  def name(); end

  def prefix(); end
  FIRST_NAMES = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameDE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameDE
  extend ::FFaker::Name
end

module FFaker::NameES
  FEMALE_PREFIXES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  MALE_PREFIXES = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameES
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  def self.female_name_with_prefix(); end

  def self.female_prefix(); end

  def self.first_name(); end

  def self.first_name_female(); end

  def self.first_name_male(); end

  def self.last_name(); end

  def self.male_name_with_prefix(); end

  def self.male_prefix(); end

  def self.name_with_prefix(); end

  def self.prefix(); end
end

module FFaker::NameFR
  def first_name(); end

  def last_name(); end

  def name(); end

  def prefix(); end
  PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::NameFR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameFR
end

module FFaker::NameGA
  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def name(); end

  def name_female(); end

  def name_male(); end
  LAST_NAMES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameGA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameGA
end

module FFaker::NameGR
  def female_first_name(); end

  def female_full_name(); end

  def female_last_name(); end

  def first_name(); end

  def full_name(gender=T.unsafe(nil)); end

  def last_name(); end

  def male_first_name(); end

  def male_full_name(); end

  def male_last_name(); end

  def name(gender=T.unsafe(nil)); end
end

module FFaker::NameGR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameGR
end

module FFaker::NameID
  def female_name_with_prefix(); end

  def female_prefix(); end

  def first_name(); end

  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def male_name_with_prefix(); end

  def male_prefix(); end

  def name(); end

  def name_with_prefix(); end

  def prefix(); end
  FEMALE_PREFIXES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  MALE_PREFIXES = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameID
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameID
end

module FFaker::NameIN
  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def name(); end

  def name_female(); end

  def name_male(); end
end

module FFaker::NameIN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameIN
end

module FFaker::NameIT
  def first_name(); end

  def last_name(); end

  def name(); end

  def prefix(); end
  PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::NameIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameIT
end

module FFaker::NameJA
  def first_name(); end

  def last_first(); end

  def last_name(); end

  def name(); end
end

module FFaker::NameJA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameJA
end

module FFaker::NameKH
  def first_name(); end

  def last_name(); end

  def name(); end

  def nick_name(); end
end

module FFaker::NameKH
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameKH
end

module FFaker::NameKR
  def first_name(); end

  def last_first(); end

  def last_name(); end

  def name(); end

  def name_with_space(); end
end

module FFaker::NameKR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameKR
end

module FFaker::NameMX
  include ::FFaker::Name
  def female_name(); end

  def female_prefix(); end

  def first_name(gender=T.unsafe(nil)); end

  def full_name(gender=T.unsafe(nil), prefix=T.unsafe(nil)); end

  def full_name_no_prefix(gender=T.unsafe(nil)); end

  def full_name_prefix(gender=T.unsafe(nil)); end

  def last_name(); end

  def male_name(); end

  def male_prefix(); end

  def middle_name(gender=T.unsafe(nil)); end

  def name(gender=T.unsafe(nil)); end

  def paternal_last_names(); end

  def prefix(); end
  FEMALE_PREFIXES = ::T.let(nil, ::T.untyped)
  MALE_PREFIXES = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameMX
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameMX
  extend ::FFaker::Name
end

module FFaker::NameNB
  include ::FFaker::Name
  def first_name(); end

  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def name(); end

  def prefix(); end
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameNB
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameNB
  extend ::FFaker::Name
end

module FFaker::NameNL
  include ::FFaker::Name
  def first_name(); end

  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def name(); end

  def prefix(); end
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameNL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameNL
  extend ::FFaker::Name
end

module FFaker::NamePH
  include ::FFaker::Name
  def last_name(); end

  def name(); end
end

module FFaker::NamePH
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NamePH
  extend ::FFaker::Name
end

module FFaker::NamePL
  def academic_degree_prefix(); end

  def female_first_name(); end

  def female_full_name(); end

  def female_last_name(); end

  def female_name_with_prefix(); end

  def female_prefix(); end

  def first_name(gender=T.unsafe(nil)); end

  def full_name(gender=T.unsafe(nil)); end

  def last_name(gender=T.unsafe(nil)); end

  def male_first_name(); end

  def male_full_name(); end

  def male_last_name(); end

  def male_name_with_prefix(); end

  def male_prefix(); end

  def name(gender=T.unsafe(nil)); end

  def name_with_prefix(gender=T.unsafe(nil)); end

  def prefix(); end
  ACADEMIC_DEGREE_PREFIXES = ::T.let(nil, ::T.untyped)
  FEMALE_PREFIXES = ::T.let(nil, ::T.untyped)
  GENDERS = ::T.let(nil, ::T.untyped)
  MALE_PREFIXES = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NamePL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NamePL
end

module FFaker::NameRU
  def female_name(); end

  def first_name(); end

  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def last_name_female(); end

  def last_name_male(); end

  def male_name(); end

  def middle_name_female(); end

  def middle_name_male(); end

  def name(); end
  FIRST_NAMES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  LAST_NAMES = ::T.let(nil, ::T.untyped)
  LAST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  LAST_NAMES_MALE = ::T.let(nil, ::T.untyped)
end

module FFaker::NameRU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameRU
end

module FFaker::NameSE
  include ::FFaker::Name
  def first_name(); end

  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def name(); end

  def prefix(); end
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::NameSE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameSE
  extend ::FFaker::Name
end

module FFaker::NameSN
  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def name_female(); end

  def name_male(); end

  def name_sn(); end

  def prefix_female(); end

  def prefix_male(); end
  PREFIX_FEMALE = ::T.let(nil, ::T.untyped)
  PREFIX_MALE = ::T.let(nil, ::T.untyped)
end

module FFaker::NameSN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameSN
end

module FFaker::NameTH
  def first_name(); end

  def last_name(); end

  def name(); end

  def nick_name(); end
end

module FFaker::NameTH
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameTH
end

module FFaker::NameTHEN
  def first_name(); end

  def last_name(); end

  def name(); end

  def nick_name(); end
end

module FFaker::NameTHEN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameTHEN
end

module FFaker::NameTW
  def first_name(); end

  def last_name(); end

  def name(); end
end

module FFaker::NameTW
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameTW
end

module FFaker::NameUA
  def first_name(); end

  def first_name_female(); end

  def first_name_male(); end

  def last_name(); end

  def last_name_female(); end

  def last_name_male(); end

  def middle_name_female(); end

  def middle_name_male(); end

  def name(); end
  FIRST_NAMES = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  FIRST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  LAST_NAMES = ::T.let(nil, ::T.untyped)
  LAST_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  LAST_NAMES_MALE = ::T.let(nil, ::T.untyped)
  MIDDLE_NAMES = ::T.let(nil, ::T.untyped)
  MIDDLE_NAMES_FEMALE = ::T.let(nil, ::T.untyped)
  MIDDLE_NAMES_MALE = ::T.let(nil, ::T.untyped)
end

module FFaker::NameUA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameUA
end

module FFaker::NameVN
  def first_name(); end

  def last_first(); end

  def last_name(); end

  def middle_name(); end

  def name(); end
end

module FFaker::NameVN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NameVN
end

module FFaker::NatoAlphabet
  def alphabetic_code(); end

  def callsign(); end

  def code(); end

  def codify(masks); end

  def numeric_code(); end
  ALPHABET_CODES = ::T.let(nil, ::T.untyped)
  CODES = ::T.let(nil, ::T.untyped)
  NUMERIC_CODES = ::T.let(nil, ::T.untyped)
  STOP_CODE = ::T.let(nil, ::T.untyped)
end

module FFaker::NatoAlphabet
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::NatoAlphabet
end

module FFaker::Number
  def decimal(whole_digits: T.unsafe(nil), fractional_digits: T.unsafe(nil)); end

  def number(digits: T.unsafe(nil)); end
end

module FFaker::Number
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Number
end

module FFaker::PhoneNumber
  def area_code(); end

  def exchange_code(); end

  def imei(serial_number=T.unsafe(nil)); end

  def phone_calling_code(); end

  def phone_number(); end

  def short_phone_number(); end
end

module FFaker::PhoneNumber
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumber
end

module FFaker::PhoneNumberAU
  def country_code(); end

  def home_work_phone_number(); end

  def home_work_phone_prefix(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def mobile_phone_prefix(); end

  def phone_number(); end

  def phone_prefix(); end
  HOME_WORK_OPERATORS_PREFIX = ::T.let(nil, ::T.untyped)
  MOBILE_OPERATORS_PREFIX = ::T.let(nil, ::T.untyped)
  OPERATORS_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberAU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberAU
end

module FFaker::PhoneNumberBR
  def country_code(); end

  def home_work_phone_number(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
  AREA_CODE = ::T.let(nil, ::T.untyped)
  COUNTRY_PREFIX = ::T.let(nil, ::T.untyped)
  HOME_WORK_PHONE_PREFIX = ::T.let(nil, ::T.untyped)
  MOBILE_PHONE_PREFIX = ::T.let(nil, ::T.untyped)
  PHONE_NUMBER = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberBR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberBR
end

module FFaker::PhoneNumberCH
  def free_phone_number(); end

  def home_work_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end

  def premium_rate_phone_number(); end

  def shared_cost_phone_number(); end
  AREA_PREFIX = ::T.let(nil, ::T.untyped)
  COUNTRY_PREFIX = ::T.let(nil, ::T.untyped)
  FREE_PHONE_PREFIX = ::T.let(nil, ::T.untyped)
  MOBILE_PREFIX = ::T.let(nil, ::T.untyped)
  PHONE_NUMBER = ::T.let(nil, ::T.untyped)
  PREMIUM_RATE_PREFIX = ::T.let(nil, ::T.untyped)
  SHARED_COST_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberCH
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberCH
end

module FFaker::PhoneNumberCU
  def country_code(); end

  def e164_country_code(); end

  def e164_home_work_phone_number(); end

  def e164_mobile_phone_number(); end

  def e164_phone_number(); end

  def general_phone_number(); end

  def home_work_phone_number(); end

  def home_work_phone_prefix(); end

  def international_country_code(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def mobile_phone_prefix(); end

  def phone_number(); end

  def phone_prefix(); end
  HOME_WORK_OPERATORS_PREFIX = ::T.let(nil, ::T.untyped)
  MOBILE_OPERATORS_PREFIX = ::T.let(nil, ::T.untyped)
  OPERATORS_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberCU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberCU
end

module FFaker::PhoneNumberDA
  def country_code(); end

  def home_work_phone_number(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
end

module FFaker::PhoneNumberDA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberDA
end

module FFaker::PhoneNumberDE
  def country_code(); end

  def home_work_phone_number(leading_zero=T.unsafe(nil)); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(leading_zero=T.unsafe(nil)); end

  def mobile_prefix(leading_zero=T.unsafe(nil)); end

  def phone_number(); end

  def region_prefix(leading_zero=T.unsafe(nil)); end
end

module FFaker::PhoneNumberDE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberDE
end

module FFaker::PhoneNumberFR
  def country_code(); end

  def home_work_phone_number(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
  AREA_PREFIX = ::T.let(nil, ::T.untyped)
  COUNTRY_CODE = ::T.let(nil, ::T.untyped)
  HOME_WORK_PHONE_PREFIX = ::T.let(nil, ::T.untyped)
  MOBILE_PHONE_PREFIX = ::T.let(nil, ::T.untyped)
  NON_AREA_PREFIX = ::T.let(nil, ::T.untyped)
  PHONE_NUMBER = ::T.let(nil, ::T.untyped)
  PHONE_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberFR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberFR
end

module FFaker::PhoneNumberID
  def home_phone_number(); end

  def international_home_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
  COUNTRY_CODE = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberID
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberID
end

module FFaker::PhoneNumberIT
  def home_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
  COUNTRY_PREFIX = ::T.let(nil, ::T.untyped)
  PHONE_NUMBER = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberIT
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberIT
end

module FFaker::PhoneNumberJA
  def home_phone_number(); end

  def home_phone_number_format(disit); end

  def home_phone_prefix(disit=T.unsafe(nil)); end

  def international_home_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def mobile_phone_number_format(); end

  def mobile_prefix(); end

  def phone_number(); end
  FOUR_DISIT_FORMAT = ::T.let(nil, ::T.untyped)
  IP_PHONE_PREFIX = ::T.let(nil, ::T.untyped)
  JAPAN_COUNTRY_CODE = ::T.let(nil, ::T.untyped)
  JAPAN_PREFIX = ::T.let(nil, ::T.untyped)
  MOBILE_NUMBER_FORMAT = ::T.let(nil, ::T.untyped)
  MOBILE_PHONE_PREFIXES = ::T.let(nil, ::T.untyped)
  ONE_DISIT_FORMAT = ::T.let(nil, ::T.untyped)
  THREE_DISIT_FORMAT = ::T.let(nil, ::T.untyped)
  TWO_DISIT_FORMAT = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberJA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberJA
end

module FFaker::PhoneNumberKR
  def contry_code(); end

  def home_work_phone_number(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
  HOME_PHONE_PREFIXES = ::T.let(nil, ::T.untyped)
  MOBILE_PHONE_PREFIXES = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberKR
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberKR
end

module FFaker::PhoneNumberMX
  def country_code(); end

  def home_work_phone_number(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end

  def toll_free_number(); end
end

module FFaker::PhoneNumberMX
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberMX
end

module FFaker::PhoneNumberNL
  def home_work_phone_number(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
  AREA_CODE_PREFIX = ::T.let(nil, ::T.untyped)
  COUNTRY_CODE = ::T.let(nil, ::T.untyped)
  MOBILE_PHONE_NUMBER = ::T.let(nil, ::T.untyped)
  PHONE_NUMBER = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberNL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberNL
end

module FFaker::PhoneNumberPL
  AREA_CODES = ::T.let(nil, ::T.untyped)
  COUNTRY_CODE = ::T.let(nil, ::T.untyped)
  MOBILE_PREFIXES = ::T.let(nil, ::T.untyped)
  PHONE_NUMBER_FORMAT = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  def self.area_code(); end

  def self.home_work_phone_number(); end

  def self.international_home_work_phone_number(); end

  def self.international_mobile_phone_number(); end

  def self.international_phone_number(); end

  def self.mobile_phone_number(); end

  def self.mobile_phone_number_format(); end

  def self.mobile_prefix(); end

  def self.phone_number(); end

  def self.phone_number_format(); end
end

module FFaker::PhoneNumberRU
  def country_code(); end

  def home_work_phone_number(); end

  def home_work_phone_prefix(); end

  def international_country_code(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def international_toll_free_number(); end

  def mobile_phone_number(); end

  def mobile_phone_prefix(); end

  def phone_number(); end

  def toll_free_number(); end
  COUNTRY_PREFIX = ::T.let(nil, ::T.untyped)
  INTERNATIONAL_COUNTRY_PREFIX = ::T.let(nil, ::T.untyped)
  TOLL_FREE_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberRU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberRU
end

module FFaker::PhoneNumberSE
  def area_prefix(); end

  def country_prefix(); end

  def home_work_phone_number(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def mobile_phone_number_format(); end

  def mobile_prefix(); end

  def phone_number(); end

  def phone_number_format(); end
  COUNTRY_PREFIX = ::T.let(nil, ::T.untyped)
  MOBILE_PHONE_FORMAT = ::T.let(nil, ::T.untyped)
  MOBILE_PHONE_PREFIX = ::T.let(nil, ::T.untyped)
  PHONE_FORMAT_PREFIX_2 = ::T.let(nil, ::T.untyped)
  PHONE_FORMAT_PREFIX_3 = ::T.let(nil, ::T.untyped)
  PHONE_FORMAT_PREFIX_4 = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberSE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberSE
end

module FFaker::PhoneNumberSG
  def country_code(); end

  def fixed_line_number(); end

  def international_toll_free_number(); end

  def mobile_number(); end

  def mobile_or_pager_number(); end

  def phone_number(); end

  def premium_service_number(); end

  def toll_free_number(); end

  def voip_number(); end
end

module FFaker::PhoneNumberSG
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberSG
end

module FFaker::PhoneNumberSN
  def homework_number(); end

  def homework_phone_prefix(); end

  def mobile_number(); end

  def mobile_phone_prefix(); end

  def phone_number(); end

  def short_phone_number(); end
  HOME_WORK_OPERATORS_PREFIX = ::T.let(nil, ::T.untyped)
  MOBILE_OPERATORS_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberSN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberSN
end

module FFaker::PhoneNumberTW
  def contry_code(); end

  def home_work_phone_number(); end

  def international_home_work_phone_number(); end

  def international_mobile_phone_number(); end

  def international_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
  HOME_PHONE_PREFIXES = ::T.let(nil, ::T.untyped)
  MOBILE_PHONE_PREFIX = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberTW
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberTW
end

module FFaker::PhoneNumberUA
  def home_phone_number(); end

  def international_home_phone_number(); end

  def international_mobile_phone_number(); end

  def mobile_phone_number(); end

  def phone_number(); end
  COUNTRY_PREFIX = ::T.let(nil, ::T.untyped)
  LOCAL_PREFIX = ::T.let(nil, ::T.untyped)
  PHONE_NUMBER = ::T.let(nil, ::T.untyped)
end

module FFaker::PhoneNumberUA
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::PhoneNumberUA
end

module FFaker::Product
  def brand(); end

  def letters(count); end

  def model(); end

  def product(); end

  def product_name(); end
  ADDON = ::T.let(nil, ::T.untyped)
  B2 = ::T.let(nil, ::T.untyped)
  START = ::T.let(nil, ::T.untyped)
  SUFFIX = ::T.let(nil, ::T.untyped)
  VOWELS = ::T.let(nil, ::T.untyped)
end

module FFaker::Product
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Product
end

module FFaker::SSN
  def ssn(); end
end

module FFaker::SSN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::SSN
end

module FFaker::SSNMX
  def imss(); end

  def imss_undashed(); end

  def issste(); end

  def issste_undashed(); end

  def ssn(); end

  def ssn_undashed(); end
end

module FFaker::SSNMX
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::SSNMX
end

module FFaker::SSNSE
  def ssn(opts=T.unsafe(nil)); end
  GENDERS = ::T.let(nil, ::T.untyped)
end

module FFaker::SSNSE
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::SSNSE
end

module FFaker::SemVer
  def next(previous_version=T.unsafe(nil)); end
  UPDATE = ::T.let(nil, ::T.untyped)
end

module FFaker::SemVer
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::SemVer
end

module FFaker::Skill
  def specialties(num=T.unsafe(nil)); end

  def specialty(); end

  def tech_skill(); end

  def tech_skills(num=T.unsafe(nil)); end
end

module FFaker::Skill
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Skill
end

module FFaker::Sport
  def name(); end
end

module FFaker::Sport
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Sport
end

module FFaker::SportPL
  def name(); end

  def summer(); end

  def winter(); end
  ALL = ::T.let(nil, ::T.untyped)
  SUMMER = ::T.let(nil, ::T.untyped)
  WINTER = ::T.let(nil, ::T.untyped)
end

module FFaker::SportPL
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::SportPL
end

module FFaker::SportRU
  def name(); end

  def summer(); end

  def winter(); end
  ALL = ::T.let(nil, ::T.untyped)
  SUMMER = ::T.let(nil, ::T.untyped)
  WINTER = ::T.let(nil, ::T.untyped)
end

module FFaker::SportRU
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::SportRU
end

module FFaker::SportUS
  def name(); end
end

module FFaker::SportUS
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::SportUS
end

module FFaker::String
  def from_regexp(exp); end
  BACKSLASH = ::T.let(nil, ::T.untyped)
  DASH = ::T.let(nil, ::T.untyped)
  ESCAPEABLE_CHARS = ::T.let(nil, ::T.untyped)
  LETTERS = ::T.let(nil, ::T.untyped)
  LOWERS = ::T.let(nil, ::T.untyped)
  NUMBERS = ::T.let(nil, ::T.untyped)
  SPACES = ::T.let(nil, ::T.untyped)
  UPPERS = ::T.let(nil, ::T.untyped)
  WORD_CHARS = ::T.let(nil, ::T.untyped)
end

module FFaker::String
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::String
end

module FFaker::Time
  def between(from, to); end

  def date(params=T.unsafe(nil)); end

  def datetime(params=T.unsafe(nil)); end

  def day_of_week(options=T.unsafe(nil)); end

  def month(); end
  DAYS_OF_WEEK = ::T.let(nil, ::T.untyped)
  MONTHS = ::T.let(nil, ::T.untyped)
end

module FFaker::Time
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Time
end

module FFaker::Tweet
  def body(required_length=T.unsafe(nil)); end

  def mention(); end

  def mentions(num=T.unsafe(nil)); end

  def tags(num_tags=T.unsafe(nil)); end

  def tweet(args=T.unsafe(nil)); end
end

module FFaker::Tweet
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Tweet
end

module FFaker::Unit
  def temperature_abbr(); end

  def temperature_name(); end

  def time_abbr(); end

  def time_name(); end
  TEMPERATURE_UNITS = ::T.let(nil, ::T.untyped)
  TIME_UNITS = ::T.let(nil, ::T.untyped)
end

module FFaker::Unit
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Unit
end

module FFaker::UnitEnglish
  include ::FFaker::Unit
  def area_abbr(); end

  def area_name(); end

  def length_abbr(); end

  def length_name(); end

  def liquid_abbr(); end

  def liquid_name(); end

  def mass_abbr(); end

  def mass_name(); end

  def volume_abbr(); end

  def volume_name(); end
  AREA_UNITS = ::T.let(nil, ::T.untyped)
  LENGTH_UNITS = ::T.let(nil, ::T.untyped)
  LIQUID_UNITS = ::T.let(nil, ::T.untyped)
  MASS_UNITS = ::T.let(nil, ::T.untyped)
  VOLUME_UNITS = ::T.let(nil, ::T.untyped)
end

module FFaker::UnitEnglish
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::UnitEnglish
  extend ::FFaker::Unit
end

module FFaker::UnitMetric
  include ::FFaker::Unit
  def area_abbr(); end

  def area_name(); end

  def length_abbr(); end

  def length_name(); end

  def liquid_abbr(); end

  def liquid_name(); end

  def mass_abbr(); end

  def mass_name(); end

  def volume_abbr(); end

  def volume_name(); end
  AREA_UNITS = ::T.let(nil, ::T.untyped)
  LENGTH_UNITS = ::T.let(nil, ::T.untyped)
  LIQUID_UNITS = ::T.let(nil, ::T.untyped)
  MASS_UNITS = ::T.let(nil, ::T.untyped)
  VOLUME_UNITS = ::T.let(nil, ::T.untyped)
end

module FFaker::UnitMetric
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::UnitMetric
  extend ::FFaker::Unit
end

module FFaker::Vehicle
  def base_color(); end

  def drivetrain(); end

  def engine_cylinders(); end

  def engine_displacement(); end

  def fuel_type(); end

  def interior_upholstery(); end

  def make(); end

  def manufacturer_color(count=T.unsafe(nil)); end

  def mfg_color(count=T.unsafe(nil)); end

  def model(); end

  def transmission(); end

  def transmission_abbr(); end

  def trim(); end

  def vin(); end

  def year(); end
  CYLINDERS = ::T.let(nil, ::T.untyped)
  DRIVETRAINS = ::T.let(nil, ::T.untyped)
  TRANSMISSIONS_ABBR = ::T.let(nil, ::T.untyped)
  YEARS = ::T.let(nil, ::T.untyped)
end

module FFaker::Vehicle::VIN
  def vin(); end
  POSITION_WEIGHTS = ::T.let(nil, ::T.untyped)
  TRANSLITERATION_VALUES = ::T.let(nil, ::T.untyped)
  VALID_ALPHA = ::T.let(nil, ::T.untyped)
  VALID_ALPHANUMERIC = ::T.let(nil, ::T.untyped)
  VALID_WMI_REGIONS = ::T.let(nil, ::T.untyped)
  VALID_YEAR_CHARS = ::T.let(nil, ::T.untyped)
end

module FFaker::Vehicle::VIN
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Vehicle::VIN
end

module FFaker::Vehicle
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Vehicle
end

module FFaker::Venue
  def name(); end
end

module FFaker::Venue
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Venue
end

module FFaker::Youtube
  def embed_url(); end

  def share_url(); end

  def url(); end

  def video_id(); end
end

module FFaker::Youtube
  extend ::FFaker::ModuleUtils
  extend ::FFaker::RandomUtils
  extend ::FFaker::Youtube
end

module FactoryBot
  Deprecation = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class FactoryBot::DefinitionProxy
  UNPROXIED_METHODS = ::T.let(nil, ::T.untyped)
end

class FactoryBot::Strategy::Stub
  DISABLED_PERSISTENCE_METHODS = ::T.let(nil, ::T.untyped)
end

class FalseClass
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
end

module Faraday
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  METHODS_WITH_BODY = ::T.let(nil, ::T.untyped)
  METHODS_WITH_QUERY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  TIMEOUT_KEYS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Excon
  OPTS_KEYS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::NetHttp
  NET_HTTP_EXCEPTIONS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::NetHttpPersistent
  SSL_CONFIGURATIONS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Patron
  CURL_TIMEOUT_MESSAGES = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Rack
  SPECIAL_HEADERS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Test
  def configure(); end

  def initialize(app, stubs=T.unsafe(nil), &block); end

  def stubs(); end

  def stubs=(stubs); end
end

class Faraday::Adapter::Test::Stub
  def headers_match?(request_headers); end

  def matches?(env); end

  def params_match?(env); end

  def path_match?(request_path, meta); end
end

class Faraday::Adapter::Test::Stub
end

class Faraday::Adapter::Test::Stubs
  def delete(path, headers=T.unsafe(nil), &block); end

  def empty?(); end

  def get(path, headers=T.unsafe(nil), &block); end

  def head(path, headers=T.unsafe(nil), &block); end

  def initialize(strict_mode: T.unsafe(nil)); end

  def match(env); end

  def matches?(stack, env); end

  def new_stub(request_method, path, headers=T.unsafe(nil), body=T.unsafe(nil), &block); end

  def options(path, headers=T.unsafe(nil), &block); end

  def patch(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def post(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def put(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def strict_mode=(value); end

  def verify_stubbed_calls(); end
end

class Faraday::Adapter::Test::Stubs::NotFound
end

class Faraday::Adapter::Test::Stubs::NotFound
end

class Faraday::Adapter::Test::Stubs
end

class Faraday::Adapter::Test
end

class Faraday::Adapter::Typhoeus
  def call(); end
end

class Faraday::Adapter::Typhoeus
end

Faraday::CompositeReadIO = Faraday::Multipart::CompositeReadIO

class Faraday::Connection
  METHODS = ::T.let(nil, ::T.untyped)
  USER_AGENT = ::T.let(nil, ::T.untyped)
end

module Faraday::DecodeMethods
  SUBKEYS_REGEX = ::T.let(nil, ::T.untyped)
end

module Faraday::EmHttp
  VERSION = ::T.let(nil, ::T.untyped)
end

module Faraday::EmSynchrony
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faraday::Env
  ContentLength = ::T.let(nil, ::T.untyped)
  MethodsWithBodies = ::T.let(nil, ::T.untyped)
  StatusesWithoutBody = ::T.let(nil, ::T.untyped)
  SuccessfulStatuses = ::T.let(nil, ::T.untyped)
end

module Faraday::Excon
  VERSION = ::T.let(nil, ::T.untyped)
end

Faraday::FilePart = UploadIO

module Faraday::HTTPClient
  VERSION = ::T.let(nil, ::T.untyped)
end

module Faraday::Multipart
  VERSION = ::T.let(nil, ::T.untyped)
end

Faraday::Multipart::FilePart = UploadIO

class Faraday::Multipart::Middleware
  DEFAULT_BOUNDARY_PREFIX = ::T.let(nil, ::T.untyped)
end

Faraday::Multipart::Parts = Parts

module Faraday::NetHttp
  VERSION = ::T.let(nil, ::T.untyped)
end

module Faraday::NetHttpPersistent
  VERSION = ::T.let(nil, ::T.untyped)
end

Faraday::ParamPart = Faraday::Multipart::ParamPart

Faraday::Parts = Parts

module Faraday::Patron
  VERSION = ::T.let(nil, ::T.untyped)
end

module Faraday::Rack
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faraday::RackBuilder
  LOCK_ERR = ::T.let(nil, ::T.untyped)
  NO_ARGUMENT = ::T.let(nil, ::T.untyped)
end

class Faraday::RackBuilder::Handler
  REGISTRY = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Authorization
  def initialize(app, type, param); end

  def on_request(env); end
  KEY = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Authorization
  def self.build_hash(type, hash); end

  def self.header(type, token); end
end

class Faraday::Request::BasicAuthentication
end

class Faraday::Request::BasicAuthentication
  def self.header(login, pass); end
end

class Faraday::Request::Instrumentation
  def initialize(app, options=T.unsafe(nil)); end
end

class Faraday::Request::Instrumentation::Options
end

class Faraday::Request::Instrumentation::Options
end

class Faraday::Request::Instrumentation
end

Faraday::Request::Multipart = Faraday::Multipart::Middleware

Faraday::Request::OAuth = FaradayMiddleware::OAuth

Faraday::Request::OAuth2 = FaradayMiddleware::OAuth2

Faraday::Request::Retry = Faraday::Retry::Middleware

class Faraday::Request::TokenAuthentication
  def initialize(app, token, options=T.unsafe(nil)); end
end

class Faraday::Request::TokenAuthentication
  def self.header(token, options=T.unsafe(nil)); end
end

class Faraday::Request::UrlEncoded
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
end

class Faraday::RequestOptions
  include ::FaradayMiddleware::OptionsExtension
end

class Faraday::Response::Logger
  def initialize(app, logger=T.unsafe(nil), options=T.unsafe(nil)); end
end

class Faraday::Response::Logger
end

Faraday::Response::Mashify = FaradayMiddleware::Mashify

Faraday::Response::ParseJson = FaradayMiddleware::ParseJson

Faraday::Response::ParseMarshal = FaradayMiddleware::ParseMarshal

Faraday::Response::ParseXml = FaradayMiddleware::ParseXml

Faraday::Response::ParseYaml = FaradayMiddleware::ParseYaml

class Faraday::Response::RaiseError
  def response_values(env); end
  ClientErrorStatuses = ::T.let(nil, ::T.untyped)
  ServerErrorStatuses = ::T.let(nil, ::T.untyped)
end

Faraday::Response::Rashify = FaradayMiddleware::Rashify

module Faraday::Retry
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faraday::Retry::Middleware
  DEFAULT_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  IDEMPOTENT_METHODS = ::T.let(nil, ::T.untyped)
end

class Faraday::Retry::Middleware::Options
  DEFAULT_CHECK = ::T.let(nil, ::T.untyped)
end

Faraday::Timer = Timeout

Faraday::UploadIO = UploadIO

module Faraday::Utils
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_RE = ::T.let(nil, ::T.untyped)
end

class Faraday::Utils::Headers
  KeyMap = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::Caching
  def build_query(*args, **arg, &block); end

  def cache(); end

  def cache_key(env); end

  def cache_on_complete(env); end

  def custom_status_codes(); end

  def finalize_response(response, env); end

  def full_key?(); end

  def initialize(app, cache=T.unsafe(nil), options=T.unsafe(nil)); end

  def params_to_ignore(); end

  def parse_query(*args, **arg, &block); end

  def store_response_in_cache(key, response); end
  CACHEABLE_STATUS_CODES = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::Caching
  extend ::Forwardable
end

class FaradayMiddleware::Chunked
  def chunked_encoding?(headers); end
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::Chunked
end

class FaradayMiddleware::EncodeJson
  def encode(data); end

  def has_body?(env); end

  def match_content_type(env); end

  def process_request?(env); end

  def request_type(env); end
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  MIME_TYPE = ::T.let(nil, ::T.untyped)
  MIME_TYPE_REGEX = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::EncodeJson
end

class FaradayMiddleware::FollowRedirects
  def initialize(app, options=T.unsafe(nil)); end
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  AUTH_HEADER = ::T.let(nil, ::T.untyped)
  ENV_TO_CLEAR = ::T.let(nil, ::T.untyped)
  FOLLOW_LIMIT = ::T.let(nil, ::T.untyped)
  REDIRECT_CODES = ::T.let(nil, ::T.untyped)
  URI_UNSAFE = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::FollowRedirects
end

class FaradayMiddleware::Gzip
  def brotli_inflate(body); end

  def inflate(body); end

  def raw_body(body); end

  def reset_body(env); end

  def uncompress_gzip(body); end
  ACCEPT_ENCODING = ::T.let(nil, ::T.untyped)
  BROTLI_SUPPORTED = ::T.let(nil, ::T.untyped)
  CONTENT_ENCODING = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  SUPPORTED_ENCODINGS = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::Gzip
  def self.optional_dependency(lib=T.unsafe(nil)); end

  def self.supported_encodings(); end
end

class FaradayMiddleware::Instrumentation
  def initialize(app, options=T.unsafe(nil)); end
end

class FaradayMiddleware::Instrumentation
end

class FaradayMiddleware::Mashify
  def mash_class(); end

  def mash_class=(mash_class); end

  def parse(body); end
end

class FaradayMiddleware::Mashify
  def self.mash_class(); end

  def self.mash_class=(mash_class); end
end

class FaradayMiddleware::MethodOverride
  def initialize(app, options=T.unsafe(nil)); end

  def rewrite_request(env, original_method); end

  def rewrite_request?(method); end
  HEADER = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::MethodOverride
end

class FaradayMiddleware::OAuth
  def body_params(env); end

  def include_body_params?(env); end

  def initialize(app, options); end

  def oauth_header(env); end

  def oauth_options(env); end

  def parse_nested_query(*args, **arg, &block); end

  def sign_request?(env); end

  def signature_params(params); end
  AUTH_HEADER = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  TYPE_URLENCODED = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::OAuth
  extend ::Forwardable
end

class FaradayMiddleware::OAuth2
  def build_query(*args, **arg, &block); end

  def initialize(app, token=T.unsafe(nil), options=T.unsafe(nil)); end

  def param_name(); end

  def parse_query(*args, **arg, &block); end

  def query_params(url); end

  def token_type(); end
  AUTH_HEADER = ::T.let(nil, ::T.untyped)
  PARAM_NAME = ::T.let(nil, ::T.untyped)
  TOKEN_TYPE = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::OAuth2
  extend ::Forwardable
end

module FaradayMiddleware::OptionsExtension
  def each(&blk); end

  def fetch(key, *args); end

  def preserve_raw(); end

  def preserve_raw=(preserve_raw); end

  def to_hash(); end
end

module FaradayMiddleware::OptionsExtension
end

class FaradayMiddleware::ParseDates
  def initialize(app, options=T.unsafe(nil)); end
  ISO_DATE_FORMAT = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::ParseDates
end

class FaradayMiddleware::ParseJson
end

class FaradayMiddleware::ParseJson::MimeTypeFix
  def first_char(body); end
  BRACKETS = ::T.let(nil, ::T.untyped)
  MIME_TYPE = ::T.let(nil, ::T.untyped)
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::ParseJson::MimeTypeFix
end

class FaradayMiddleware::ParseJson
end

class FaradayMiddleware::ParseMarshal
end

class FaradayMiddleware::ParseMarshal
end

class FaradayMiddleware::ParseXml
end

class FaradayMiddleware::ParseXml
end

class FaradayMiddleware::ParseYaml
end

class FaradayMiddleware::ParseYaml
end

class FaradayMiddleware::RackCompatible
  def call(env); end

  def finalize_response(env, rack_response); end

  def headers_to_rack(env); end

  def initialize(app, rack_handler, *args); end

  def prepare_env(faraday_env); end

  def restore_env(rack_env); end
  NON_PREFIXED_HEADERS = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::RackCompatible
end

class FaradayMiddleware::Rashify
end

class FaradayMiddleware::Rashify
end

class FaradayMiddleware::RedirectLimitReached
  def initialize(response); end
end

class FaradayMiddleware::RedirectLimitReached
end

class FaradayMiddleware::ResponseMiddleware
  def call(environment); end

  def parse(body); end

  def parse_response?(env); end

  def preserve_raw?(env); end

  def process_response(env); end

  def process_response_type?(type); end

  def response_type(env); end
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
end

class FaradayMiddleware::ResponseMiddleware
  def self.define_parser(parser=T.unsafe(nil), &block); end

  def self.parser(); end

  def self.parser=(parser); end
end

module FastUnderscore
  VERSION = ::T.let(nil, ::T.untyped)
end

class Fiber
  def backtrace(*arg); end

  def backtrace_locations(*arg); end

  def blocking?(); end

  def initialize(*arg); end

  def transfer(*arg); end
end

class Fiber
  def self.blocking?(); end

  def self.current(); end

  def self.current_scheduler(); end

  def self.schedule(*arg); end

  def self.scheduler(); end

  def self.set_scheduler(arg); end
end

module Fiddle
  ALIGN_INT16_T = ::T.let(nil, ::T.untyped)
  ALIGN_INT32_T = ::T.let(nil, ::T.untyped)
  ALIGN_INT64_T = ::T.let(nil, ::T.untyped)
  ALIGN_INT8_T = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  RTLD_GLOBAL = ::T.let(nil, ::T.untyped)
  RTLD_LAZY = ::T.let(nil, ::T.untyped)
  RTLD_NOW = ::T.let(nil, ::T.untyped)
  SIZEOF_CONST_STRING = ::T.let(nil, ::T.untyped)
  SIZEOF_INT16_T = ::T.let(nil, ::T.untyped)
  SIZEOF_INT32_T = ::T.let(nil, ::T.untyped)
  SIZEOF_INT64_T = ::T.let(nil, ::T.untyped)
  SIZEOF_INT8_T = ::T.let(nil, ::T.untyped)
  TYPE_CONST_STRING = ::T.let(nil, ::T.untyped)
  TYPE_INT16_T = ::T.let(nil, ::T.untyped)
  TYPE_INT32_T = ::T.let(nil, ::T.untyped)
  TYPE_INT64_T = ::T.let(nil, ::T.untyped)
  TYPE_INT8_T = ::T.let(nil, ::T.untyped)
  TYPE_VARIADIC = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WINDOWS = ::T.let(nil, ::T.untyped)
end

module Fiddle::CParser
  def parse_ctype(ty, tymap=T.unsafe(nil)); end

  def parse_signature(signature, tymap=T.unsafe(nil)); end

  def parse_struct_signature(signature, tymap=T.unsafe(nil)); end
end

module Fiddle::CParser
end

class Fiddle::CStruct
  include ::Enumerable
  def each(&blk); end

  def each_pair(); end

  def replace(another); end

  def to_h(); end
end

class Fiddle::CStruct
  def self.entity_class(); end

  def self.offsetof(name, members, types); end
end

module Fiddle::CStructBuilder
end

module Fiddle::CStructBuilder
  def self.create(klass, types, members); end
end

class Fiddle::CStructEntity
  include ::Fiddle::PackInfo
  include ::Fiddle::ValueUtil
  def [](*args); end

  def []=(*args); end

  def assign_names(members); end

  def initialize(addr, types, func=T.unsafe(nil)); end

  def set_ctypes(types); end

  def to_s(); end
end

class Fiddle::CStructEntity
  def self.alignment(types); end

  def self.malloc(types, func=T.unsafe(nil), size=T.unsafe(nil), &block); end

  def self.size(types); end
end

class Fiddle::CUnion
end

class Fiddle::CUnion
  def self.entity_class(); end

  def self.offsetof(name, members, types); end
end

class Fiddle::CUnionEntity
end

class Fiddle::CUnionEntity
end

class Fiddle::ClearedReferenceError
end

class Fiddle::ClearedReferenceError
end

class Fiddle::CompositeHandler
  def [](symbol); end

  def handlers(); end

  def initialize(handlers); end

  def sym(symbol); end
end

class Fiddle::CompositeHandler
end

class Fiddle::Error
end

class Fiddle::Error
end

class Fiddle::Function
  def need_gvl?(); end

  def to_proc(); end
end

class Fiddle::Handle
  def file_name(); end

  def to_ptr(); end
end

module Fiddle::Importer
  include ::Fiddle
  include ::Fiddle::CParser
  def [](name); end

  def bind(signature, *opts, &blk); end

  def bind_function(name, ctype, argtype, call_type=T.unsafe(nil), &block); end

  def create_value(ty, val=T.unsafe(nil)); end

  def dlload(*libs); end

  def extern(signature, *opts); end

  def handler(); end

  def import_function(name, ctype, argtype, call_type=T.unsafe(nil)); end

  def import_symbol(name); end

  def import_value(ty, addr); end

  def sizeof(ty); end

  def struct(signature); end

  def typealias(alias_type, orig_type); end

  def union(signature); end

  def value(ty, val=T.unsafe(nil)); end
end

module Fiddle::Importer
  extend ::Fiddle::Importer
  extend ::Fiddle
  extend ::Fiddle::CParser
end

class Fiddle::MemoryView
  def [](*arg); end

  def byte_size(); end

  def format(); end

  def initialize(arg); end

  def item_size(); end

  def ndim(); end

  def obj(); end

  def readonly?(); end

  def release(); end

  def shape(); end

  def strides(); end

  def sub_offsets(); end
end

class Fiddle::MemoryView
  def self.export(arg); end
end

module Fiddle::PackInfo
  ALIGN_MAP = ::T.let(nil, ::T.untyped)
  PACK_MAP = ::T.let(nil, ::T.untyped)
  SIZE_MAP = ::T.let(nil, ::T.untyped)
end

module Fiddle::PackInfo
  def self.align(addr, align); end
end

class Fiddle::Packer
  include ::Fiddle::PackInfo
  def initialize(types); end

  def pack(ary); end

  def size(); end

  def unpack(ary); end
end

class Fiddle::Packer
  def self.[](*types); end
end

class Fiddle::Pinned
  def clear(); end

  def cleared?(); end

  def initialize(arg); end

  def ref(); end
end

class Fiddle::Pinned
end

class Fiddle::Pointer
  def call_free(); end

  def freed?(); end
end

class Fiddle::StructArray
  include ::Fiddle::ValueUtil
  def []=(index, value); end

  def initialize(ptr, type, initial_values); end

  def to_ptr(); end
end

class Fiddle::StructArray
end

module Fiddle::ValueUtil
  def signed_value(val, ty); end

  def unsigned_value(val, ty); end

  def wrap_arg(arg, ty, funcs=T.unsafe(nil), &block); end

  def wrap_args(args, tys, funcs, &block); end
end

module Fiddle::ValueUtil
end

class File
  def self.absolute_path?(arg); end

  def self.atomic_write(file_name, temp_dir=T.unsafe(nil)); end

  def self.exists?(arg); end

  def self.probe_stat_in(dir); end
end

FileList = Rake::FileList

module FileUtils
  include ::FileUtils::StreamUtils_
  LN_SUPPORTED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

module FileUtils::DryRun
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::FileUtils::StreamUtils_
end

module Flipper
  InstrumentationNamespace = ::T.let(nil, ::T.untyped)
end

class Flipper::Adapters::ActiveRecord
  include ::Flipper::Adapter
  def add(feature); end

  def clear(feature); end

  def disable(feature, gate, thing); end

  def enable(feature, gate, thing); end

  def features(); end

  def get(feature); end

  def initialize(options=T.unsafe(nil)); end

  def name(); end

  def remove(feature); end

  def unsupported_data_type(data_type); end
end

class Flipper::Adapters::ActiveRecord::Feature
  include ::Flipper::Adapters::ActiveRecord::Feature::GeneratedAttributeMethods
  include ::Flipper::Adapters::ActiveRecord::Feature::GeneratedAssociationMethods
end

module Flipper::Adapters::ActiveRecord::Feature::GeneratedAssociationMethods
end

module Flipper::Adapters::ActiveRecord::Feature::GeneratedAssociationMethods
end

module Flipper::Adapters::ActiveRecord::Feature::GeneratedAttributeMethods
end

module Flipper::Adapters::ActiveRecord::Feature::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Flipper::Adapters::ActiveRecord::Feature
end

class Flipper::Adapters::ActiveRecord::Gate
  include ::Flipper::Adapters::ActiveRecord::Gate::GeneratedAttributeMethods
  include ::Flipper::Adapters::ActiveRecord::Gate::GeneratedAssociationMethods
end

module Flipper::Adapters::ActiveRecord::Gate::GeneratedAssociationMethods
end

module Flipper::Adapters::ActiveRecord::Gate::GeneratedAssociationMethods
end

module Flipper::Adapters::ActiveRecord::Gate::GeneratedAttributeMethods
end

module Flipper::Adapters::ActiveRecord::Gate::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Flipper::Adapters::ActiveRecord::Gate
end

class Flipper::Adapters::ActiveRecord
  extend ::Flipper::Adapter::ClassMethods
end

class Flipper::Adapters::ActiveSupportCacheStore
  FeaturesKey = ::T.let(nil, ::T.untyped)
  GetAllKey = ::T.let(nil, ::T.untyped)
  Namespace = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Flipper::Adapters::Instrumented
  InstrumentationName = ::T.let(nil, ::T.untyped)
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Flipper::Adapters::Memoizable
  FeaturesKey = ::T.let(nil, ::T.untyped)
  GetAllKey = ::T.let(nil, ::T.untyped)
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Flipper::Adapters::Memory
  FeaturesKey = ::T.let(nil, ::T.untyped)
end

class Flipper::Feature
  InstrumentationName = ::T.let(nil, ::T.untyped)
end

class Flipper::GateValues
  LegitIvars = ::T.let(nil, ::T.untyped)
end

class Flipper::Instrumentation::LogSubscriber
  def adapter_operation(event); end

  def feature_operation(event); end
end

module Flipper::Typecast
  TruthMap = ::T.let(nil, ::T.untyped)
end

class Flipper::Types::Group
  NO_PARAMS_IN_RUBY_3 = ::T.let(nil, ::T.untyped)
end

class Float
  include ::JSON::Ext::Generator::GeneratorMethods::Float
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::DeprecatedNumericWithFormat
end

module Forwardable
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

class FrozenError
  def receiver(); end
end

module GC
  def garbage_collect(full_mark: T.unsafe(nil), immediate_mark: T.unsafe(nil), immediate_sweep: T.unsafe(nil)); end
end

module GC
  def self.latest_compact_info(); end

  def self.measure_total_time(); end

  def self.measure_total_time=(flag); end

  def self.total_time(); end

  def self.using_rvargc?(); end

  def self.verify_transient_heap_internal_consistency(); end
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  HAVE_OPENSSL = ::T.let(nil, ::T.untyped)
  KERNEL_WARN_IGNORES_INTERNAL_ENTRIES = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  UNTAINT = ::T.let(nil, ::T.untyped)
end

class Gem::BasicSpecification
  def plugins(); end
end

module Gem::BundlerVersionFinder
  def self.prioritize!(specs); end
end

class Gem::ConfigFile
  def ipv4_fallback_enabled(); end

  def ipv4_fallback_enabled=(ipv4_fallback_enabled); end
  DEFAULT_IPV4_FALLBACK_ENABLED = ::T.let(nil, ::T.untyped)
end

class Gem::Dependency
  def prioritizes_bundler?(); end
end

class Gem::DependencyList
  include ::Gem::TSort
end

module Gem::Deprecate
  def deprecate(name, repl, year, month); end
end

module Gem::Deprecate
  def self.next_rubygems_major_version(); end

  def self.rubygems_deprecate(name, replacement=T.unsafe(nil)); end

  def self.rubygems_deprecate_command(); end
end

class Gem::Ext::BuildError
end

class Gem::Ext::BuildError
end

class Gem::Ext::ExtConfBuilder
end

class Gem::Ext::ExtConfBuilder
  def self.build(extension, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil), extension_dir=T.unsafe(nil)); end

  def self.get_relative_path(path, base); end
end

class Gem::Installer
  include ::Gem::InstallerUninstallerUtils
  def ensure_writable_dir(dir); end

  def explicit_version_requirement(name); end

  def gemdeps_load(name); end

  def generate_plugins(); end
end

Gem::Installer::ExtensionBuildError = Gem::Ext::BuildError

class Gem::Installer::FakePackage
  def copy_to(path); end

  def data_mode(); end

  def data_mode=(data_mode); end

  def dir_mode(); end

  def dir_mode=(dir_mode); end

  def extract_files(destination_dir, pattern=T.unsafe(nil)); end

  def initialize(spec); end

  def prog_mode(); end

  def prog_mode=(prog_mode); end

  def spec(); end

  def spec=(spec); end
end

class Gem::Installer::FakePackage
end

class Gem::Installer
  def self.inherited(klass); end
end

module Gem::InstallerUninstallerUtils
  def regenerate_plugins_for(spec, plugins_dir); end

  def remove_plugins_for(spec, plugins_dir); end
end

module Gem::InstallerUninstallerUtils
end

class Gem::Licenses
  LICENSE_REF = ::T.let(nil, ::T.untyped)
end

class Gem::PathSupport
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::Platform
  def self.match_gem?(platform, gem_name); end

  def self.match_spec?(spec); end

  def self.sort_priority(platform); end
end

class Gem::Request
  extend ::Gem::UserInteraction
  extend ::Gem::DefaultUserInteraction
  extend ::Gem::Text
end

class Gem::RequestSet
  include ::Gem::TSort
end

class Gem::RequestSet::Lockfile::Tokenizer::Token
  def self.keyword_init?(); end
end

class Gem::Requirement
  def _sorted_requirements(); end
end

class Gem::Resolver::APISet::GemParser
  def parse(line); end
end

class Gem::Resolver::APISet::GemParser
end

class Gem::Resolver::APISpecification
  def self.new(set, api_data); end
end

class Gem::Resolver::ActivationRequest
  def eql?(other); end
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::IndexSpecification
  def ==(other); end
end

class Gem::Resolver::InstallerSet
  def force(); end

  def force=(force); end
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

module Gem::Resolver::Molinillo::Delegates::ResolutionState
  def unused_unwind_options(); end
end

module Gem::Resolver::Molinillo::Delegates::SpecificationProvider
  def dependencies_equal?(dependencies, other_dependencies); end
end

class Gem::Resolver::Molinillo::DependencyGraph
  include ::Gem::TSort
end

class Gem::Resolver::Molinillo::DependencyGraph::Edge
  def self.keyword_init?(); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::Resolver::Molinillo::DependencyGraph::Vertex
  def _path_to?(other, visited=T.unsafe(nil)); end

  def _recursive_predecessors(vertices=T.unsafe(nil)); end

  def _recursive_successors(vertices=T.unsafe(nil)); end
end

class Gem::Resolver::Molinillo::ResolutionState
  def unused_unwind_options(); end

  def unused_unwind_options=(_); end
end

class Gem::Resolver::Molinillo::ResolutionState
  def self.keyword_init?(); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution::Conflict
  def possibility_set(); end

  def possibility_set=(_); end

  def underlying_error(); end

  def underlying_error=(_); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution::Conflict
  def self.keyword_init?(); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution::PossibilitySet
  def dependencies(); end

  def dependencies=(_); end

  def latest_version(); end

  def possibilities(); end

  def possibilities=(_); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution::PossibilitySet
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails
  include ::Comparable
  def all_requirements(); end

  def conflicting_requirements(); end

  def conflicting_requirements=(_); end

  def requirement_tree(); end

  def requirement_tree=(_); end

  def requirement_trees(); end

  def requirement_trees=(_); end

  def requirements_unwound_to_instead(); end

  def requirements_unwound_to_instead=(_); end

  def reversed_requirement_tree_index(); end

  def state_index(); end

  def state_index=(_); end

  def state_requirement(); end

  def state_requirement=(_); end

  def sub_dependencies_to_avoid(); end

  def unwinding_to_primary_requirement?(); end
end

class Gem::Resolver::Molinillo::Resolver::Resolution::UnwindDetails
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Gem::Resolver::Molinillo::SpecificationProvider
  def dependencies_equal?(dependencies, other_dependencies); end
end

class Gem::Resolver::Molinillo::VersionConflict
  include ::Gem::Resolver::Molinillo::Delegates::SpecificationProvider
  def message_with_trees(opts=T.unsafe(nil)); end

  def specification_provider(); end
end

class Gem::Resolver::Specification
  def required_ruby_version(); end

  def required_rubygems_version(); end
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil), num_results=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::Specification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  include ::Gem::Specification::YamlBackfiller
  def _deprecated_validate_dependencies(); end

  def _deprecated_validate_metadata(); end

  def _deprecated_validate_permissions(); end

  def deleted_gem?(); end

  def removed_method_calls(); end

  def rg_required_ruby_version=(req); end

  def to_ruby(); end
  LATEST_RUBY_WITHOUT_PATCH_VERSIONS = ::T.let(nil, ::T.untyped)
  REMOVED_METHODS = ::T.let(nil, ::T.untyped)
end

module Gem::Specification::YamlBackfiller
  def to_yaml(opts=T.unsafe(nil)); end
end

module Gem::Specification::YamlBackfiller
end

class Gem::Specification
  extend ::Gem::Deprecate
  extend ::Enumerable
  def self.latest_spec_for(name); end

  def self.stubs_for_pattern(pattern, match_platform=T.unsafe(nil)); end
end

class Gem::SpecificationPolicy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def initialize(specification); end

  def packaging(); end

  def packaging=(packaging); end

  def validate(strict=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_duplicate_dependencies(); end

  def validate_metadata(); end

  def validate_optional(strict); end

  def validate_permissions(); end

  def validate_required!(); end
  HOMEPAGE_URI_PATTERN = ::T.let(nil, ::T.untyped)
  LAZY = ::T.let(nil, ::T.untyped)
  LAZY_PATTERN = ::T.let(nil, ::T.untyped)
  METADATA_LINK_KEYS = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  VALID_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  VALID_URI_PATTERN = ::T.let(nil, ::T.untyped)
end

class Gem::SpecificationPolicy
end

class Gem::StubSpecification
  def build_extensions(); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

module Gem::TSort
  def each_strongly_connected_component(&block); end

  def each_strongly_connected_component_from(node, id_map=T.unsafe(nil), stack=T.unsafe(nil), &block); end

  def strongly_connected_components(); end

  def tsort(); end

  def tsort_each(&block); end

  def tsort_each_child(node); end

  def tsort_each_node(); end
end

module Gem::TSort
  def self.each_strongly_connected_component(each_node, each_child); end

  def self.each_strongly_connected_component_from(node, each_child, id_map=T.unsafe(nil), stack=T.unsafe(nil)); end

  def self.strongly_connected_components(each_node, each_child); end

  def self.tsort(each_node, each_child); end

  def self.tsort_each(each_node, each_child); end
end

class Gem::UninstallError
  def spec(); end

  def spec=(spec); end
end

class Gem::UninstallError
end

class Gem::UnknownCommandError
  def initialize(unknown_command); end

  def unknown_command(); end
end

class Gem::UnknownCommandError
  def self.attach_correctable(); end
end

class Gem::UnknownCommandSpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end
end

class Gem::UnknownCommandSpellChecker
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

module Gem::Util
  def self._deprecated_silent_system(*command); end
end

Gem::Version::Requirement = Gem::Requirement

module Gem
  def self.activated_gem_paths(); end

  def self.cache_home(); end

  def self.config_home(); end

  def self.data_home(); end

  def self.disable_system_update_message(); end

  def self.disable_system_update_message=(disable_system_update_message); end

  def self.find_config_file(); end

  def self.open_file(path, flags, &block); end

  def self.plugin_suffix_pattern(); end

  def self.plugin_suffix_regexp(); end

  def self.plugindir(install_dir=T.unsafe(nil)); end

  def self.solaris_platform?(); end
end

class GetProcessMem
  CONVERSION = ::T.let(nil, ::T.untyped)
  GB_TO_BYTE = ::T.let(nil, ::T.untyped)
  KB_TO_BYTE = ::T.let(nil, ::T.untyped)
  MB_TO_BYTE = ::T.let(nil, ::T.untyped)
  ROUND_UP = ::T.let(nil, ::T.untyped)
  RUNS_ON_DARWIN = ::T.let(nil, ::T.untyped)
  RUNS_ON_WINDOWS = ::T.let(nil, ::T.untyped)
end

class GetProcessMem::Darwin
  PROC_PIDTASKINFO = ::T.let(nil, ::T.untyped)
end

module GlobalID::FixtureSet
  def signed_global_id(fixture_set_name, label, column_type: T.unsafe(nil), **options); end
end

module GlobalID::FixtureSet
end

module GlobalID::Identification
  def to_gid(options=T.unsafe(nil)); end

  def to_gid_param(options=T.unsafe(nil)); end

  def to_global_id(options=T.unsafe(nil)); end

  def to_sgid(options=T.unsafe(nil)); end

  def to_sgid_param(options=T.unsafe(nil)); end

  def to_signed_global_id(options=T.unsafe(nil)); end
end

module GlobalID::Locator
  DEFAULT_LOCATOR = ::T.let(nil, ::T.untyped)
end

class GlobalID::Locator::BaseLocator
  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BaseLocator
end

class GlobalID::Locator::BlockLocator
  def initialize(block); end

  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BlockLocator
end

class GlobalID::Locator::UnscopedLocator
end

class GlobalID::Locator::UnscopedLocator
end

module GlobalID::Locator
  def self.locate(gid, options=T.unsafe(nil)); end

  def self.locate_many(gids, options=T.unsafe(nil)); end

  def self.locate_many_signed(sgids, options=T.unsafe(nil)); end

  def self.locate_signed(sgid, options=T.unsafe(nil)); end

  def self.use(app, locator=T.unsafe(nil), &locator_block); end
end

module Google::Apis
  OS_VERSION = ::T.let(nil, ::T.untyped)
  ROOT = ::T.let(nil, ::T.untyped)
end

class Google::Apis::ClientOptions
  def application_name(); end

  def application_name=(_); end

  def application_version(); end

  def application_version=(_); end

  def log_http_requests(); end

  def log_http_requests=(_); end

  def open_timeout_sec(); end

  def open_timeout_sec=(_); end

  def proxy_url(); end

  def proxy_url=(_); end

  def read_timeout_sec(); end

  def read_timeout_sec=(_); end

  def send_timeout_sec(); end

  def send_timeout_sec=(_); end

  def transparent_gzip_decompression(); end

  def transparent_gzip_decompression=(_); end
end

class Google::Apis::ClientOptions
  def self.[](*arg); end

  def self.default(); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Google::Apis::Core
  VERSION = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Core::ApiCommand
  def client_version(); end

  def client_version=(client_version); end

  def decode_response_body(content_type, body); end

  def initialize(method, url, body: T.unsafe(nil), client_version: T.unsafe(nil)); end

  def request_object(); end

  def request_object=(request_object); end

  def request_representation(); end

  def request_representation=(request_representation); end

  def response_class(); end

  def response_class=(response_class); end

  def response_representation(); end

  def response_representation=(response_representation); end
  ERROR_REASON_MAPPING = ::T.let(nil, ::T.untyped)
  FIELDS_PARAM = ::T.let(nil, ::T.untyped)
  JSON_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Core::BaseService
  def apply_command_defaults(_command); end

  def authorization(); end

  def authorization=(authorization); end

  def base_path(); end

  def base_path=(base_path); end

  def batch(options=T.unsafe(nil)); end

  def batch_path(); end

  def batch_path=(batch_path); end

  def batch_upload(options=T.unsafe(nil)); end

  def client(); end

  def client=(client); end

  def client_name(); end

  def client_name=(client_name); end

  def client_options(); end

  def client_options=(client_options); end

  def client_version(); end

  def client_version=(client_version); end

  def execute_or_queue_command(command, &callback); end

  def fetch_all(max: T.unsafe(nil), items: T.unsafe(nil), cache: T.unsafe(nil), response_page_token: T.unsafe(nil), &block); end

  def http(method, url, params: T.unsafe(nil), body: T.unsafe(nil), download_dest: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def initialize(root_url, base_path, client_name: T.unsafe(nil), client_version: T.unsafe(nil)); end

  def make_download_command(method, path, options); end

  def make_simple_command(method, path, options); end

  def make_upload_command(method, path, options); end

  def request_options(); end

  def request_options=(request_options); end

  def root_url(); end

  def root_url=(root_url); end

  def upload_path(); end

  def upload_path=(upload_path); end
end

class Google::Apis::Core::BaseUploadCommand
  def upload_content_type(); end

  def upload_content_type=(upload_content_type); end

  def upload_io(); end

  def upload_io=(upload_io); end

  def upload_source(); end

  def upload_source=(upload_source); end
  CONTENT_TYPE_HEADER = ::T.let(nil, ::T.untyped)
  UPLOAD_CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  UPLOAD_CONTENT_TYPE_HEADER = ::T.let(nil, ::T.untyped)
  UPLOAD_PROTOCOL_HEADER = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Core::BatchCommand
  def add(call, &block); end

  def decode_response_body(content_type, body); end

  def ensure_valid_command(command); end

  def header_to_id(content_id); end

  def id_to_header(call_id); end

  def initialize(method, url); end

  def split_parts(body, boundary); end
  MULTIPART_MIXED = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Core::CallDeserializer
  def split_header_and_body(response); end

  def to_http_response(call_response); end
end

class Google::Apis::Core::CallSerializer
  def build_body(call); end

  def build_head(call); end

  def to_part(call); end
end

class Google::Apis::Core::CompositeIO
  def initialize(*ios); end

  def length(); end

  def pos(); end

  def pos=(pos); end

  def read(length=T.unsafe(nil), buf=T.unsafe(nil)); end

  def rewind(); end

  def size(); end
end

class Google::Apis::Core::DownloadCommand
  def download_dest(); end

  def download_dest=(download_dest); end

  def execute_once(client, &block); end
  OK_STATUS = ::T.let(nil, ::T.untyped)
  RANGE_HEADER = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Core::FilePart
  def initialize(io, header=T.unsafe(nil)); end

  def to_io(boundary); end
end

module Google::Apis::Core::Hashable
  def to_h(); end
end

module Google::Apis::Core::Hashable
  def self.process_value(val); end
end

class Google::Apis::Core::HttpCommand
  def allow_form_encoding?(); end

  def apply_request_options(req_header); end

  def authorization_refreshable?(); end

  def body(); end

  def body=(body); end

  def check_status(status, header=T.unsafe(nil), body=T.unsafe(nil), message=T.unsafe(nil)); end

  def connection(); end

  def connection=(connection); end

  def decode_response_body(_content_type, body); end

  def error(err, rethrow: T.unsafe(nil), &block); end

  def execute(client); end

  def execute_once(client); end

  def header(); end

  def header=(header); end

  def initialize(method, url, body: T.unsafe(nil)); end

  def method(); end

  def method=(method); end

  def options(); end

  def options=(options); end

  def params(); end

  def params=(params); end

  def prepare!(); end

  def process_response(status, header, body); end

  def query(); end

  def query=(query); end

  def refresh_authorization(); end

  def release!(); end

  def success(result, &block); end

  def url(); end

  def url=(url); end
  OPENCENSUS_AVAILABLE = ::T.let(nil, ::T.untyped)
  RETRIABLE_ERRORS = ::T.let(nil, ::T.untyped)
  UNSAFE_CLASS_NAMES = ::T.let(nil, ::T.untyped)
end

module Google::Apis::Core::JsonObjectSupport
  def to_json(*a); end
end

module Google::Apis::Core::JsonObjectSupport::ClassMethods
  def from_json(json); end
end

module Google::Apis::Core::JsonObjectSupport
  def self.included(base); end
end

class Google::Apis::Core::JsonPart
  def initialize(value, header=T.unsafe(nil)); end

  def to_io(boundary); end
end

module Google::Apis::Core::JsonRepresentationSupport::JsonSupport
  def collection(name, options=T.unsafe(nil)); end

  def getter_fn(name); end

  def hash(name=T.unsafe(nil), options=T.unsafe(nil)); end

  def if_fn(name); end

  def property(name, options=T.unsafe(nil)); end

  def set_default_options(name, options); end
end

module Google::Apis::Core::JsonRepresentationSupport
  def self.included(base); end
end

module Google::Apis::Core::Logging
  def logger(); end
end

class Google::Apis::Core::Multipart
  def add_json(body, content_id: T.unsafe(nil)); end

  def add_upload(upload_io, content_type: T.unsafe(nil), content_id: T.unsafe(nil)); end

  def assemble(); end

  def content_type(); end

  def initialize(content_type: T.unsafe(nil), boundary: T.unsafe(nil)); end
  MULTIPART_RELATED = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Core::MultipartUploadCommand
  MULTIPART_PROTOCOL = ::T.let(nil, ::T.untyped)
  MULTIPART_RELATED = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Core::PagedResults
  def each(&blk); end

  def initialize(service, max: T.unsafe(nil), items: T.unsafe(nil), cache: T.unsafe(nil), response_page_token: T.unsafe(nil), &block); end

  def last_result(); end
end

class Google::Apis::Core::RawUploadCommand
  RAW_PROTOCOL = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Core::ResumableUploadCommand
  def execute_once(client, &block); end

  def send_query_command(client); end

  def send_start_command(client); end

  def send_upload_command(client); end
  BYTES_RECEIVED_HEADER = ::T.let(nil, ::T.untyped)
  QUERY_COMMAND = ::T.let(nil, ::T.untyped)
  RESUMABLE = ::T.let(nil, ::T.untyped)
  START_COMMAND = ::T.let(nil, ::T.untyped)
  STATUS_ACTIVE = ::T.let(nil, ::T.untyped)
  STATUS_CANCELLED = ::T.let(nil, ::T.untyped)
  STATUS_FINAL = ::T.let(nil, ::T.untyped)
  UPLOAD_COMMAND = ::T.let(nil, ::T.untyped)
  UPLOAD_COMMAND_HEADER = ::T.let(nil, ::T.untyped)
  UPLOAD_OFFSET_HEADER = ::T.let(nil, ::T.untyped)
  UPLOAD_STATUS_HEADER = ::T.let(nil, ::T.untyped)
  UPLOAD_URL_HEADER = ::T.let(nil, ::T.untyped)
end

class Google::Apis::Error
  def body(); end

  def header(); end

  def initialize(err, status_code: T.unsafe(nil), header: T.unsafe(nil), body: T.unsafe(nil)); end

  def status_code(); end
end

module Google::Apis::IamcredentialsV1
  AUTH_CLOUD_PLATFORM = ::T.let(nil, ::T.untyped)
  GEM_VERSION = ::T.let(nil, ::T.untyped)
  GENERATOR_VERSION = ::T.let(nil, ::T.untyped)
  REVISION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Google::Apis::IamcredentialsV1::GenerateAccessTokenRequest
  def delegates(); end

  def delegates=(delegates); end

  def initialize(**args); end

  def lifetime(); end

  def lifetime=(lifetime); end

  def scope(); end

  def scope=(scope); end

  def update!(**args); end
end

class Google::Apis::IamcredentialsV1::GenerateAccessTokenResponse
  def access_token(); end

  def access_token=(access_token); end

  def expire_time(); end

  def expire_time=(expire_time); end

  def initialize(**args); end

  def update!(**args); end
end

class Google::Apis::IamcredentialsV1::GenerateIdTokenRequest
  def audience(); end

  def audience=(audience); end

  def delegates(); end

  def delegates=(delegates); end

  def include_email(); end

  def include_email=(include_email); end

  def include_email?(); end

  def initialize(**args); end

  def update!(**args); end
end

class Google::Apis::IamcredentialsV1::GenerateIdTokenResponse
  def initialize(**args); end

  def token(); end

  def token=(token); end

  def update!(**args); end
end

class Google::Apis::IamcredentialsV1::IAMCredentialsService
  def apply_command_defaults(command); end

  def generate_service_account_access_token(name, generate_access_token_request_object=T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def generate_service_account_id_token(name, generate_id_token_request_object=T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def initialize(); end

  def key(); end

  def key=(key); end

  def quota_user(); end

  def quota_user=(quota_user); end

  def sign_service_account_blob(name, sign_blob_request_object=T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def sign_service_account_jwt(name, sign_jwt_request_object=T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), options: T.unsafe(nil), &block); end
end

class Google::Apis::IamcredentialsV1::SignBlobRequest
  def delegates(); end

  def delegates=(delegates); end

  def initialize(**args); end

  def payload(); end

  def payload=(payload); end

  def update!(**args); end
end

class Google::Apis::IamcredentialsV1::SignBlobResponse
  def initialize(**args); end

  def key_id(); end

  def key_id=(key_id); end

  def signed_blob(); end

  def signed_blob=(signed_blob); end

  def update!(**args); end
end

class Google::Apis::IamcredentialsV1::SignJwtRequest
  def delegates(); end

  def delegates=(delegates); end

  def initialize(**args); end

  def payload(); end

  def payload=(payload); end

  def update!(**args); end
end

class Google::Apis::IamcredentialsV1::SignJwtResponse
  def initialize(**args); end

  def key_id(); end

  def key_id=(key_id); end

  def signed_jwt(); end

  def signed_jwt=(signed_jwt); end

  def update!(**args); end
end

class Google::Apis::RequestOptions
  def api_format_version(); end

  def api_format_version=(_); end

  def authorization(); end

  def authorization=(_); end

  def base_interval(); end

  def base_interval=(_); end

  def header(); end

  def header=(_); end

  def max_elapsed_time(); end

  def max_elapsed_time=(_); end

  def max_interval(); end

  def max_interval=(_); end

  def merge(options); end

  def multiplier(); end

  def multiplier=(_); end

  def normalize_unicode(); end

  def normalize_unicode=(_); end

  def query(); end

  def query=(_); end

  def quota_project(); end

  def quota_project=(_); end

  def retries(); end

  def retries=(_); end

  def skip_deserialization(); end

  def skip_deserialization=(_); end

  def skip_serialization(); end

  def skip_serialization=(_); end

  def use_opencensus(); end

  def use_opencensus=(_); end
end

class Google::Apis::RequestOptions
  def self.[](*arg); end

  def self.default(); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Google::Apis::StorageV1
  AUTH_CLOUD_PLATFORM = ::T.let(nil, ::T.untyped)
  AUTH_CLOUD_PLATFORM_READ_ONLY = ::T.let(nil, ::T.untyped)
  AUTH_DEVSTORAGE_FULL_CONTROL = ::T.let(nil, ::T.untyped)
  AUTH_DEVSTORAGE_READ_ONLY = ::T.let(nil, ::T.untyped)
  AUTH_DEVSTORAGE_READ_WRITE = ::T.let(nil, ::T.untyped)
  GEM_VERSION = ::T.let(nil, ::T.untyped)
  GENERATOR_VERSION = ::T.let(nil, ::T.untyped)
  REVISION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Google::Apis::StorageV1::Bucket
  def acl(); end

  def acl=(acl); end

  def autoclass(); end

  def autoclass=(autoclass); end

  def billing(); end

  def billing=(billing); end

  def cors_configurations(); end

  def cors_configurations=(cors_configurations); end

  def default_event_based_hold(); end

  def default_event_based_hold=(default_event_based_hold); end

  def default_event_based_hold?(); end

  def default_object_acl(); end

  def default_object_acl=(default_object_acl); end

  def encryption(); end

  def encryption=(encryption); end

  def etag(); end

  def etag=(etag); end

  def iam_configuration(); end

  def iam_configuration=(iam_configuration); end

  def id(); end

  def id=(id); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def labels(); end

  def labels=(labels); end

  def lifecycle(); end

  def lifecycle=(lifecycle); end

  def location(); end

  def location=(location); end

  def location_type(); end

  def location_type=(location_type); end

  def logging(); end

  def logging=(logging); end

  def metageneration(); end

  def metageneration=(metageneration); end

  def name(); end

  def name=(name); end

  def owner(); end

  def owner=(owner); end

  def project_number(); end

  def project_number=(project_number); end

  def retention_policy(); end

  def retention_policy=(retention_policy); end

  def rpo(); end

  def rpo=(rpo); end

  def satisfies_pzs(); end

  def satisfies_pzs=(satisfies_pzs); end

  def satisfies_pzs?(); end

  def self_link(); end

  def self_link=(self_link); end

  def storage_class(); end

  def storage_class=(storage_class); end

  def time_created(); end

  def time_created=(time_created); end

  def update!(**args); end

  def updated(); end

  def updated=(updated); end

  def versioning(); end

  def versioning=(versioning); end

  def website(); end

  def website=(website); end
end

class Google::Apis::StorageV1::Bucket::Autoclass
  def enabled(); end

  def enabled=(enabled); end

  def enabled?(); end

  def initialize(**args); end

  def toggle_time(); end

  def toggle_time=(toggle_time); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Billing
  def initialize(**args); end

  def requester_pays(); end

  def requester_pays=(requester_pays); end

  def requester_pays?(); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::CorsConfiguration
  def http_method(); end

  def http_method=(http_method); end

  def initialize(**args); end

  def max_age_seconds(); end

  def max_age_seconds=(max_age_seconds); end

  def origin(); end

  def origin=(origin); end

  def response_header(); end

  def response_header=(response_header); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Encryption
  def default_kms_key_name(); end

  def default_kms_key_name=(default_kms_key_name); end

  def initialize(**args); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::IamConfiguration
  def bucket_policy_only(); end

  def bucket_policy_only=(bucket_policy_only); end

  def initialize(**args); end

  def public_access_prevention(); end

  def public_access_prevention=(public_access_prevention); end

  def uniform_bucket_level_access(); end

  def uniform_bucket_level_access=(uniform_bucket_level_access); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::IamConfiguration::BucketPolicyOnly
  def enabled(); end

  def enabled=(enabled); end

  def enabled?(); end

  def initialize(**args); end

  def locked_time(); end

  def locked_time=(locked_time); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::IamConfiguration::UniformBucketLevelAccess
  def enabled(); end

  def enabled=(enabled); end

  def enabled?(); end

  def initialize(**args); end

  def locked_time(); end

  def locked_time=(locked_time); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Lifecycle
  def initialize(**args); end

  def rule(); end

  def rule=(rule); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Lifecycle::Rule
  def action(); end

  def action=(action); end

  def condition(); end

  def condition=(condition); end

  def initialize(**args); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Lifecycle::Rule::Action
  def initialize(**args); end

  def storage_class(); end

  def storage_class=(storage_class); end

  def type(); end

  def type=(type); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Lifecycle::Rule::Condition
  def age(); end

  def age=(age); end

  def created_before(); end

  def created_before=(created_before); end

  def custom_time_before(); end

  def custom_time_before=(custom_time_before); end

  def days_since_custom_time(); end

  def days_since_custom_time=(days_since_custom_time); end

  def days_since_noncurrent_time(); end

  def days_since_noncurrent_time=(days_since_noncurrent_time); end

  def initialize(**args); end

  def is_live(); end

  def is_live=(is_live); end

  def is_live?(); end

  def matches_pattern(); end

  def matches_pattern=(matches_pattern); end

  def matches_prefix(); end

  def matches_prefix=(matches_prefix); end

  def matches_storage_class(); end

  def matches_storage_class=(matches_storage_class); end

  def matches_suffix(); end

  def matches_suffix=(matches_suffix); end

  def noncurrent_time_before(); end

  def noncurrent_time_before=(noncurrent_time_before); end

  def num_newer_versions(); end

  def num_newer_versions=(num_newer_versions); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Logging
  def initialize(**args); end

  def log_bucket(); end

  def log_bucket=(log_bucket); end

  def log_object_prefix(); end

  def log_object_prefix=(log_object_prefix); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Owner
  def entity(); end

  def entity=(entity); end

  def entity_id(); end

  def entity_id=(entity_id); end

  def initialize(**args); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::RetentionPolicy
  def effective_time(); end

  def effective_time=(effective_time); end

  def initialize(**args); end

  def is_locked(); end

  def is_locked=(is_locked); end

  def is_locked?(); end

  def retention_period(); end

  def retention_period=(retention_period); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Versioning
  def enabled(); end

  def enabled=(enabled); end

  def enabled?(); end

  def initialize(**args); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Bucket::Website
  def initialize(**args); end

  def main_page_suffix(); end

  def main_page_suffix=(main_page_suffix); end

  def not_found_page(); end

  def not_found_page=(not_found_page); end

  def update!(**args); end
end

class Google::Apis::StorageV1::BucketAccessControl
  def bucket(); end

  def bucket=(bucket); end

  def domain(); end

  def domain=(domain); end

  def email(); end

  def email=(email); end

  def entity(); end

  def entity=(entity); end

  def entity_id(); end

  def entity_id=(entity_id); end

  def etag(); end

  def etag=(etag); end

  def id(); end

  def id=(id); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def project_team(); end

  def project_team=(project_team); end

  def role(); end

  def role=(role); end

  def self_link(); end

  def self_link=(self_link); end

  def update!(**args); end
end

class Google::Apis::StorageV1::BucketAccessControl::ProjectTeam
  def initialize(**args); end

  def project_number(); end

  def project_number=(project_number); end

  def team(); end

  def team=(team); end

  def update!(**args); end
end

class Google::Apis::StorageV1::BucketAccessControls
  def initialize(**args); end

  def items(); end

  def items=(items); end

  def kind(); end

  def kind=(kind); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Buckets
  def initialize(**args); end

  def items(); end

  def items=(items); end

  def kind(); end

  def kind=(kind); end

  def next_page_token(); end

  def next_page_token=(next_page_token); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Channel
  def address(); end

  def address=(address); end

  def expiration(); end

  def expiration=(expiration); end

  def id(); end

  def id=(id); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def params(); end

  def params=(params); end

  def payload(); end

  def payload=(payload); end

  def payload?(); end

  def resource_id(); end

  def resource_id=(resource_id); end

  def resource_uri(); end

  def resource_uri=(resource_uri); end

  def token(); end

  def token=(token); end

  def type(); end

  def type=(type); end

  def update!(**args); end
end

class Google::Apis::StorageV1::ComposeRequest
  def destination(); end

  def destination=(destination); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def source_objects(); end

  def source_objects=(source_objects); end

  def update!(**args); end
end

class Google::Apis::StorageV1::ComposeRequest::SourceObject
  def generation(); end

  def generation=(generation); end

  def initialize(**args); end

  def name(); end

  def name=(name); end

  def object_preconditions(); end

  def object_preconditions=(object_preconditions); end

  def update!(**args); end
end

class Google::Apis::StorageV1::ComposeRequest::SourceObject::ObjectPreconditions
  def if_generation_match(); end

  def if_generation_match=(if_generation_match); end

  def initialize(**args); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Expr
  def description(); end

  def description=(description); end

  def expression(); end

  def expression=(expression); end

  def initialize(**args); end

  def location(); end

  def location=(location); end

  def title(); end

  def title=(title); end

  def update!(**args); end
end

class Google::Apis::StorageV1::HmacKey
  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def metadata(); end

  def metadata=(metadata); end

  def secret(); end

  def secret=(secret); end

  def update!(**args); end
end

class Google::Apis::StorageV1::HmacKeyMetadata
  def access_id(); end

  def access_id=(access_id); end

  def etag(); end

  def etag=(etag); end

  def id(); end

  def id=(id); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def project_id(); end

  def project_id=(project_id); end

  def self_link(); end

  def self_link=(self_link); end

  def service_account_email(); end

  def service_account_email=(service_account_email); end

  def state(); end

  def state=(state); end

  def time_created(); end

  def time_created=(time_created); end

  def update!(**args); end

  def updated(); end

  def updated=(updated); end
end

class Google::Apis::StorageV1::HmacKeysMetadata
  def initialize(**args); end

  def items(); end

  def items=(items); end

  def kind(); end

  def kind=(kind); end

  def next_page_token(); end

  def next_page_token=(next_page_token); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Notification
  def custom_attributes(); end

  def custom_attributes=(custom_attributes); end

  def etag(); end

  def etag=(etag); end

  def event_types(); end

  def event_types=(event_types); end

  def id(); end

  def id=(id); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def object_name_prefix(); end

  def object_name_prefix=(object_name_prefix); end

  def payload_format(); end

  def payload_format=(payload_format); end

  def self_link(); end

  def self_link=(self_link); end

  def topic(); end

  def topic=(topic); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Notifications
  def initialize(**args); end

  def items(); end

  def items=(items); end

  def kind(); end

  def kind=(kind); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Object
  def acl(); end

  def acl=(acl); end

  def bucket(); end

  def bucket=(bucket); end

  def cache_control(); end

  def cache_control=(cache_control); end

  def component_count(); end

  def component_count=(component_count); end

  def content_disposition(); end

  def content_disposition=(content_disposition); end

  def content_encoding(); end

  def content_encoding=(content_encoding); end

  def content_language(); end

  def content_language=(content_language); end

  def content_type(); end

  def content_type=(content_type); end

  def crc32c(); end

  def crc32c=(crc32c); end

  def custom_time(); end

  def custom_time=(custom_time); end

  def customer_encryption(); end

  def customer_encryption=(customer_encryption); end

  def etag(); end

  def etag=(etag); end

  def event_based_hold(); end

  def event_based_hold=(event_based_hold); end

  def event_based_hold?(); end

  def generation(); end

  def generation=(generation); end

  def id(); end

  def id=(id); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def kms_key_name(); end

  def kms_key_name=(kms_key_name); end

  def md5_hash(); end

  def md5_hash=(md5_hash); end

  def media_link(); end

  def media_link=(media_link); end

  def metadata(); end

  def metadata=(metadata); end

  def metageneration(); end

  def metageneration=(metageneration); end

  def name(); end

  def name=(name); end

  def owner(); end

  def owner=(owner); end

  def retention_expiration_time(); end

  def retention_expiration_time=(retention_expiration_time); end

  def self_link(); end

  def self_link=(self_link); end

  def size(); end

  def size=(size); end

  def storage_class(); end

  def storage_class=(storage_class); end

  def temporary_hold(); end

  def temporary_hold=(temporary_hold); end

  def temporary_hold?(); end

  def time_created(); end

  def time_created=(time_created); end

  def time_deleted(); end

  def time_deleted=(time_deleted); end

  def time_storage_class_updated(); end

  def time_storage_class_updated=(time_storage_class_updated); end

  def update!(**args); end

  def updated(); end

  def updated=(updated); end
end

class Google::Apis::StorageV1::Object::CustomerEncryption
  def encryption_algorithm(); end

  def encryption_algorithm=(encryption_algorithm); end

  def initialize(**args); end

  def key_sha256(); end

  def key_sha256=(key_sha256); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Object::Owner
  def entity(); end

  def entity=(entity); end

  def entity_id(); end

  def entity_id=(entity_id); end

  def initialize(**args); end

  def update!(**args); end
end

class Google::Apis::StorageV1::ObjectAccessControl
  def bucket(); end

  def bucket=(bucket); end

  def domain(); end

  def domain=(domain); end

  def email(); end

  def email=(email); end

  def entity(); end

  def entity=(entity); end

  def entity_id(); end

  def entity_id=(entity_id); end

  def etag(); end

  def etag=(etag); end

  def generation(); end

  def generation=(generation); end

  def id(); end

  def id=(id); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def object(); end

  def object=(object); end

  def project_team(); end

  def project_team=(project_team); end

  def role(); end

  def role=(role); end

  def self_link(); end

  def self_link=(self_link); end

  def update!(**args); end
end

class Google::Apis::StorageV1::ObjectAccessControl::ProjectTeam
  def initialize(**args); end

  def project_number(); end

  def project_number=(project_number); end

  def team(); end

  def team=(team); end

  def update!(**args); end
end

class Google::Apis::StorageV1::ObjectAccessControls
  def initialize(**args); end

  def items(); end

  def items=(items); end

  def kind(); end

  def kind=(kind); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Objects
  def initialize(**args); end

  def items(); end

  def items=(items); end

  def kind(); end

  def kind=(kind); end

  def next_page_token(); end

  def next_page_token=(next_page_token); end

  def prefixes(); end

  def prefixes=(prefixes); end

  def update!(**args); end
end

class Google::Apis::StorageV1::Policy
  def bindings(); end

  def bindings=(bindings); end

  def etag(); end

  def etag=(etag); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def resource_id(); end

  def resource_id=(resource_id); end

  def update!(**args); end

  def version(); end

  def version=(version); end
end

class Google::Apis::StorageV1::Policy::Binding
  def condition(); end

  def condition=(condition); end

  def initialize(**args); end

  def members(); end

  def members=(members); end

  def role(); end

  def role=(role); end

  def update!(**args); end
end

class Google::Apis::StorageV1::RewriteResponse
  def done(); end

  def done=(done); end

  def done?(); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def object_size(); end

  def object_size=(object_size); end

  def resource(); end

  def resource=(resource); end

  def rewrite_token(); end

  def rewrite_token=(rewrite_token); end

  def total_bytes_rewritten(); end

  def total_bytes_rewritten=(total_bytes_rewritten); end

  def update!(**args); end
end

class Google::Apis::StorageV1::ServiceAccount
  def email_address(); end

  def email_address=(email_address); end

  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def update!(**args); end
end

class Google::Apis::StorageV1::StorageService
  def apply_command_defaults(command); end

  def compose_object(destination_bucket, destination_object, compose_request_object=T.unsafe(nil), destination_predefined_acl: T.unsafe(nil), if_generation_match: T.unsafe(nil), if_metageneration_match: T.unsafe(nil), kms_key_name: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def copy_object(source_bucket, source_object, destination_bucket, destination_object, object_object=T.unsafe(nil), destination_kms_key_name: T.unsafe(nil), destination_predefined_acl: T.unsafe(nil), if_generation_match: T.unsafe(nil), if_generation_not_match: T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), if_source_generation_match: T.unsafe(nil), if_source_generation_not_match: T.unsafe(nil), if_source_metageneration_match: T.unsafe(nil), if_source_metageneration_not_match: T.unsafe(nil), projection: T.unsafe(nil), source_generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def create_project_hmac_key(project_id, service_account_email, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def delete_bucket(bucket, if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def delete_bucket_access_control(bucket, entity, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def delete_default_object_access_control(bucket, entity, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def delete_notification(bucket, notification, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def delete_object(bucket, object, generation: T.unsafe(nil), if_generation_match: T.unsafe(nil), if_generation_not_match: T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def delete_object_access_control(bucket, object, entity, generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def delete_project_hmac_key(project_id, access_id, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_bucket(bucket, if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_bucket_access_control(bucket, entity, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_bucket_iam_policy(bucket, options_requested_policy_version: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_default_object_access_control(bucket, entity, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_notification(bucket, notification, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_object(bucket, object, generation: T.unsafe(nil), if_generation_match: T.unsafe(nil), if_generation_not_match: T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), download_dest: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_object_access_control(bucket, object, entity, generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_object_iam_policy(bucket, object, generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_project_hmac_key(project_id, access_id, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def get_project_service_account(project_id, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def initialize(); end

  def insert_bucket(project, bucket_object=T.unsafe(nil), predefined_acl: T.unsafe(nil), predefined_default_object_acl: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def insert_bucket_access_control(bucket, bucket_access_control_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def insert_default_object_access_control(bucket, object_access_control_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def insert_notification(bucket, notification_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def insert_object(bucket, object_object=T.unsafe(nil), content_encoding: T.unsafe(nil), if_generation_match: T.unsafe(nil), if_generation_not_match: T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), kms_key_name: T.unsafe(nil), name: T.unsafe(nil), predefined_acl: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), upload_source: T.unsafe(nil), content_type: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def insert_object_access_control(bucket, object, object_access_control_object=T.unsafe(nil), generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def key(); end

  def key=(key); end

  def list_bucket_access_controls(bucket, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def list_buckets(project, max_results: T.unsafe(nil), page_token: T.unsafe(nil), prefix: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def list_default_object_access_controls(bucket, if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def list_notifications(bucket, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def list_object_access_controls(bucket, object, generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def list_objects(bucket, delimiter: T.unsafe(nil), end_offset: T.unsafe(nil), include_trailing_delimiter: T.unsafe(nil), max_results: T.unsafe(nil), page_token: T.unsafe(nil), prefix: T.unsafe(nil), projection: T.unsafe(nil), start_offset: T.unsafe(nil), user_project: T.unsafe(nil), versions: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def list_project_hmac_keys(project_id, max_results: T.unsafe(nil), page_token: T.unsafe(nil), service_account_email: T.unsafe(nil), show_deleted_keys: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def lock_bucket_retention_policy(bucket, if_metageneration_match, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def patch_bucket(bucket, bucket_object=T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), predefined_acl: T.unsafe(nil), predefined_default_object_acl: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def patch_bucket_access_control(bucket, entity, bucket_access_control_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def patch_default_object_access_control(bucket, entity, object_access_control_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def patch_object(bucket, object, object_object=T.unsafe(nil), generation: T.unsafe(nil), if_generation_match: T.unsafe(nil), if_generation_not_match: T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), predefined_acl: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def patch_object_access_control(bucket, object, entity, object_access_control_object=T.unsafe(nil), generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def quota_user(); end

  def quota_user=(quota_user); end

  def rewrite_object(source_bucket, source_object, destination_bucket, destination_object, object_object=T.unsafe(nil), destination_kms_key_name: T.unsafe(nil), destination_predefined_acl: T.unsafe(nil), if_generation_match: T.unsafe(nil), if_generation_not_match: T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), if_source_generation_match: T.unsafe(nil), if_source_generation_not_match: T.unsafe(nil), if_source_metageneration_match: T.unsafe(nil), if_source_metageneration_not_match: T.unsafe(nil), max_bytes_rewritten_per_call: T.unsafe(nil), projection: T.unsafe(nil), rewrite_token: T.unsafe(nil), source_generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def set_bucket_iam_policy(bucket, policy_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def set_object_iam_policy(bucket, object, policy_object=T.unsafe(nil), generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def stop_channel(channel_object=T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def test_bucket_iam_permissions(bucket, permissions, user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def test_object_iam_permissions(bucket, object, permissions, generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def update_bucket(bucket, bucket_object=T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), predefined_acl: T.unsafe(nil), predefined_default_object_acl: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def update_bucket_access_control(bucket, entity, bucket_access_control_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def update_default_object_access_control(bucket, entity, object_access_control_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def update_object(bucket, object, object_object=T.unsafe(nil), generation: T.unsafe(nil), if_generation_match: T.unsafe(nil), if_generation_not_match: T.unsafe(nil), if_metageneration_match: T.unsafe(nil), if_metageneration_not_match: T.unsafe(nil), predefined_acl: T.unsafe(nil), projection: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def update_object_access_control(bucket, object, entity, object_access_control_object=T.unsafe(nil), generation: T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def update_project_hmac_key(project_id, access_id, hmac_key_metadata_object=T.unsafe(nil), user_project: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end

  def user_ip(); end

  def user_ip=(user_ip); end

  def watch_all_objects(bucket, channel_object=T.unsafe(nil), delimiter: T.unsafe(nil), end_offset: T.unsafe(nil), include_trailing_delimiter: T.unsafe(nil), max_results: T.unsafe(nil), page_token: T.unsafe(nil), prefix: T.unsafe(nil), projection: T.unsafe(nil), start_offset: T.unsafe(nil), user_project: T.unsafe(nil), versions: T.unsafe(nil), fields: T.unsafe(nil), quota_user: T.unsafe(nil), user_ip: T.unsafe(nil), options: T.unsafe(nil), &block); end
end

class Google::Apis::StorageV1::TestIamPermissionsResponse
  def initialize(**args); end

  def kind(); end

  def kind=(kind); end

  def permissions(); end

  def permissions=(permissions); end

  def update!(**args); end
end

module Google::Apis
  def self.default_logger(); end

  def self.logger(); end

  def self.logger=(logger); end

  def self.rails_logger(); end
end

module Google::Auth
  NOT_FOUND_ERROR = ::T.let(nil, ::T.untyped)
  NO_METADATA_SERVER_ERROR = ::T.let(nil, ::T.untyped)
  UNEXPECTED_ERROR_SUFFIX = ::T.let(nil, ::T.untyped)
end

class Google::Auth::ClientId
  CLIENT_ID = ::T.let(nil, ::T.untyped)
  CLIENT_SECRET = ::T.let(nil, ::T.untyped)
  INSTALLED_APP = ::T.let(nil, ::T.untyped)
  MISSING_TOP_LEVEL_ELEMENT_ERROR = ::T.let(nil, ::T.untyped)
  WEB_APP = ::T.let(nil, ::T.untyped)
end

class Google::Auth::Credentials
  AUDIENCE = ::T.let(nil, ::T.untyped)
  TOKEN_CREDENTIAL_URI = ::T.let(nil, ::T.untyped)
end

module Google::Auth::CredentialsLoader
  ACCOUNT_TYPE_VAR = ::T.let(nil, ::T.untyped)
  CLIENT_EMAIL_VAR = ::T.let(nil, ::T.untyped)
  CLIENT_ID_VAR = ::T.let(nil, ::T.untyped)
  CLIENT_SECRET_VAR = ::T.let(nil, ::T.untyped)
  CLOUD_SDK_CLIENT_ID = ::T.let(nil, ::T.untyped)
  CLOUD_SDK_CREDENTIALS_WARNING = ::T.let(nil, ::T.untyped)
  CREDENTIALS_FILE_NAME = ::T.let(nil, ::T.untyped)
  ENV_VAR = ::T.let(nil, ::T.untyped)
  GCLOUD_CONFIG_COMMAND = ::T.let(nil, ::T.untyped)
  GCLOUD_POSIX_COMMAND = ::T.let(nil, ::T.untyped)
  GCLOUD_WINDOWS_COMMAND = ::T.let(nil, ::T.untyped)
  NOT_FOUND_ERROR = ::T.let(nil, ::T.untyped)
  PRIVATE_KEY_VAR = ::T.let(nil, ::T.untyped)
  PROJECT_ID_VAR = ::T.let(nil, ::T.untyped)
  REFRESH_TOKEN_VAR = ::T.let(nil, ::T.untyped)
  SYSTEM_DEFAULT_ERROR = ::T.let(nil, ::T.untyped)
  WELL_KNOWN_ERROR = ::T.let(nil, ::T.untyped)
  WELL_KNOWN_PATH = ::T.let(nil, ::T.untyped)
end

class Google::Auth::GCECredentials
  COMPUTE_AUTH_TOKEN_URI = ::T.let(nil, ::T.untyped)
  COMPUTE_CHECK_URI = ::T.let(nil, ::T.untyped)
  COMPUTE_ID_TOKEN_URI = ::T.let(nil, ::T.untyped)
  DEFAULT_METADATA_HOST = ::T.let(nil, ::T.untyped)
end

class Google::Auth::GCECredentials
  extend ::Memoist::InstanceMethods
end

module Google::Auth::IDTokens
  IAP_ISSUERS = ::T.let(nil, ::T.untyped)
  IAP_JWK_URL = ::T.let(nil, ::T.untyped)
  OAUTH2_V3_CERTS_URL = ::T.let(nil, ::T.untyped)
  OIDC_ISSUERS = ::T.let(nil, ::T.untyped)
end

class Google::Auth::IDTokens::HttpKeySource
  DEFAULT_RETRY_INTERVAL = ::T.let(nil, ::T.untyped)
end

module Google::Auth::ScopeUtil
  ALIASES = ::T.let(nil, ::T.untyped)
end

class Google::Auth::ServiceAccountCredentials
  TOKEN_CRED_URI = ::T.let(nil, ::T.untyped)
end

class Google::Auth::ServiceAccountJwtHeaderCredentials
  AUTH_METADATA_KEY = ::T.let(nil, ::T.untyped)
  EXPIRY = ::T.let(nil, ::T.untyped)
  JWT_AUD_URI_KEY = ::T.let(nil, ::T.untyped)
  SIGNING_ALGORITHM = ::T.let(nil, ::T.untyped)
  TOKEN_CRED_URI = ::T.let(nil, ::T.untyped)
end

class Google::Auth::UserAuthorizer
  MISMATCHED_CLIENT_ID_ERROR = ::T.let(nil, ::T.untyped)
  MISSING_ABSOLUTE_URL_ERROR = ::T.let(nil, ::T.untyped)
  NIL_CLIENT_ID_ERROR = ::T.let(nil, ::T.untyped)
  NIL_SCOPE_ERROR = ::T.let(nil, ::T.untyped)
  NIL_TOKEN_STORE_ERROR = ::T.let(nil, ::T.untyped)
  NIL_USER_ID_ERROR = ::T.let(nil, ::T.untyped)
end

class Google::Auth::UserRefreshCredentials
  AUTHORIZATION_URI = ::T.let(nil, ::T.untyped)
  REVOKE_TOKEN_URI = ::T.let(nil, ::T.untyped)
  TOKEN_CRED_URI = ::T.let(nil, ::T.untyped)
end

class Google::Auth::WebUserAuthorizer
  AUTHORIZATION_ERROR = ::T.let(nil, ::T.untyped)
  AUTH_CODE_KEY = ::T.let(nil, ::T.untyped)
  CALLBACK_STATE_KEY = ::T.let(nil, ::T.untyped)
  CURRENT_URI_KEY = ::T.let(nil, ::T.untyped)
  ERROR_CODE_KEY = ::T.let(nil, ::T.untyped)
  INVALID_STATE_TOKEN_ERROR = ::T.let(nil, ::T.untyped)
  MISSING_AUTH_CODE_ERROR = ::T.let(nil, ::T.untyped)
  NIL_REQUEST_ERROR = ::T.let(nil, ::T.untyped)
  NIL_SESSION_ERROR = ::T.let(nil, ::T.untyped)
  SCOPE_KEY = ::T.let(nil, ::T.untyped)
  SESSION_ID_KEY = ::T.let(nil, ::T.untyped)
  STATE_PARAM = ::T.let(nil, ::T.untyped)
  XSRF_KEY = ::T.let(nil, ::T.untyped)
end

class Google::Auth::WebUserAuthorizer::CallbackApp
  ERROR_STATUS = ::T.let(nil, ::T.untyped)
  LOCATION_HEADER = ::T.let(nil, ::T.untyped)
  REDIR_STATUS = ::T.let(nil, ::T.untyped)
end

class Google::Cloud::Config
  ILLEGAL_KEYS = ::T.let(nil, ::T.untyped)
  OPEN_VALIDATOR = ::T.let(nil, ::T.untyped)
  SUBCONFIG = ::T.let(nil, ::T.untyped)
end

module Google::Cloud::Core
  VERSION = ::T.let(nil, ::T.untyped)
end

class Google::Cloud::Env
  METADATA_FAILURE_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  METADATA_HOST = ::T.let(nil, ::T.untyped)
  METADATA_PATH_BASE = ::T.let(nil, ::T.untyped)
  METADATA_ROOT_PATH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Google::Cloud::Errors
  VERSION = ::T.let(nil, ::T.untyped)
end

module Google::Cloud::Kms
  VERSION = ::T.let(nil, ::T.untyped)
end

module GraphQL
  VERSION = ::T.let(nil, ::T.untyped)
end

class GraphQL::Backtrace::Table
  HEADERS = ::T.let(nil, ::T.untyped)
  MAX_COL_WIDTH = ::T.let(nil, ::T.untyped)
  MIN_COL_WIDTH = ::T.let(nil, ::T.untyped)
end

class GraphQL::Backtrace::TracedError
  CAUSE_BACKTRACE_PREVIEW_LENGTH = ::T.let(nil, ::T.untyped)
  MESSAGE_TEMPLATE = ::T.let(nil, ::T.untyped)
end

module GraphQL::Batch
  VERSION = ::T.let(nil, ::T.untyped)
end

GraphQL::Batch::BrokenPromiseError = Promise::BrokenError

module GraphQL::Execution
  SKIP = ::T.let(nil, ::T.untyped)
end

module GraphQL::Execution::DirectiveChecks
  INCLUDE = ::T.let(nil, ::T.untyped)
  SKIP = ::T.let(nil, ::T.untyped)
end

class GraphQL::Execution::Interpreter::Arguments
  EMPTY = ::T.let(nil, ::T.untyped)
  NO_ARGS = ::T.let(nil, ::T.untyped)
end

class GraphQL::Execution::Interpreter::ArgumentsCache
  NO_ARGUMENTS = ::T.let(nil, ::T.untyped)
  NO_VALUE_GIVEN = ::T.let(nil, ::T.untyped)
end

class GraphQL::Execution::Interpreter::Runtime
  HALT = ::T.let(nil, ::T.untyped)
  NO_ARGS = ::T.let(nil, ::T.untyped)
end

class GraphQL::Execution::Lazy
  NullResult = ::T.let(nil, ::T.untyped)
end

class GraphQL::Execution::Lookahead
  NULL_LOOKAHEAD = ::T.let(nil, ::T.untyped)
end

class GraphQL::Execution::Multiplex
  NO_OPERATION = ::T.let(nil, ::T.untyped)
end

module GraphQL::FragmentCache
  VERSION = ::T.let(nil, ::T.untyped)
end

class GraphQL::FragmentCache::FieldExtension
  NOT_RESOLVED = ::T.let(nil, ::T.untyped)
end

class GraphQL::FragmentCache::Fragment
  NIL_IN_CACHE = ::T.let(nil, ::T.untyped)
end

module GraphQL::FragmentCache::ObjectHelpers
  NO_OBJECT = ::T.let(nil, ::T.untyped)
end

module GraphQL::Introspection
  INTROSPECTION_QUERY = ::T.let(nil, ::T.untyped)
end

class GraphQL::Language::Cache
  DIGEST = ::T.let(nil, ::T.untyped)
end

module GraphQL::Language::Lexer
  ESCAPES = ::T.let(nil, ::T.untyped)
  ESCAPES_REPLACE = ::T.let(nil, ::T.untyped)
  PACK_DIRECTIVE = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
  UTF_8_ENCODING = ::T.let(nil, ::T.untyped)
  UTF_8_REPLACE = ::T.let(nil, ::T.untyped)
  VALID_STRING = ::T.let(nil, ::T.untyped)
end

class GraphQL::Language::Nodes::AbstractNode
  NO_CHILDREN = ::T.let(nil, ::T.untyped)
end

class GraphQL::Language::Nodes::Field
  NONE = ::T.let(nil, ::T.untyped)
end

class GraphQL::Language::Parser
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class GraphQL::Language::SanitizedPrinter
  REDACTED = ::T.let(nil, ::T.untyped)
end

class GraphQL::Language::Visitor
  DELETE_NODE = ::T.let(nil, ::T.untyped)
  SKIP = ::T.let(nil, ::T.untyped)
end

class GraphQL::NameValidator
  VALID_NAME_REGEX = ::T.let(nil, ::T.untyped)
end

class GraphQL::Pagination::Connections
  include ::GraphQL::FragmentCache::Connections::Patch
end

class GraphQL::Query::Context
  UNSPECIFIED_FETCH_DEFAULT = ::T.let(nil, ::T.untyped)
end

class GraphQL::Query::InputValidationResult
  VALID = ::T.let(nil, ::T.untyped)
end

class GraphQL::Schema
  BUILT_IN_TYPES = ::T.let(nil, ::T.untyped)
end

class GraphQL::Schema::Argument
  NO_DEFAULT = ::T.let(nil, ::T.untyped)
end

class GraphQL::Schema::Field
  extend ::GraphQL::Schema::FindInheritedValue::EmptyObjects
end

module GraphQL::Schema::FindInheritedValue::EmptyObjects
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
end

module GraphQL::Schema::Member::GraphQLTypeNames
  Boolean = ::T.let(nil, ::T.untyped)
  ID = ::T.let(nil, ::T.untyped)
  Int = ::T.let(nil, ::T.untyped)
end

module GraphQL::Schema::Member::HasArguments
  NO_ARGUMENTS = ::T.let(nil, ::T.untyped)
end

module GraphQL::Schema::Member::HasDirectives
  NO_DIRECTIVES = ::T.let(nil, ::T.untyped)
end

class GraphQL::Schema::Subscription
  NO_UPDATE = ::T.let(nil, ::T.untyped)
  READING_SCOPE = ::T.let(nil, ::T.untyped)
end

class GraphQL::Schema::Warden
  NO_REFERENCES = ::T.let(nil, ::T.untyped)
end

class GraphQL::Schema
  extend ::GraphQL::Schema::FindInheritedValue::EmptyObjects
end

module GraphQL::StaticValidation
  ALL_RULES = ::T.let(nil, ::T.untyped)
end

module GraphQL::StaticValidation::DirectivesAreInValidLocations
  LOCATION_MESSAGE_NAMES = ::T.let(nil, ::T.untyped)
  SIMPLE_LOCATIONS = ::T.let(nil, ::T.untyped)
  SIMPLE_LOCATION_NODES = ::T.let(nil, ::T.untyped)
end

module GraphQL::StaticValidation::FieldsWillMerge
  NO_ARGS = ::T.let(nil, ::T.untyped)
  NO_SELECTIONS = ::T.let(nil, ::T.untyped)
end

class GraphQL::StaticValidation::TypeStack
  PUSH_STRATEGIES = ::T.let(nil, ::T.untyped)
  TYPE_INFERRENCE_ROOTS = ::T.let(nil, ::T.untyped)
end

module GraphQL::StaticValidation::UniqueDirectivesPerLocation
  DIRECTIVE_NODE_HOOKS = ::T.let(nil, ::T.untyped)
end

class GraphQL::StaticValidation::VariableDefaultValuesAreCorrectlyTypedError
  VIOLATIONS = ::T.let(nil, ::T.untyped)
end

class GraphQL::StaticValidation::VariablesAreUsedAndDefinedError
  VIOLATIONS = ::T.let(nil, ::T.untyped)
end

class GraphQL::Subscriptions::ActionCableSubscriptions
  EVENT_PREFIX = ::T.let(nil, ::T.untyped)
  SUBSCRIPTION_PREFIX = ::T.let(nil, ::T.untyped)
end

module GraphQL::Subscriptions::Serialize
  GLOBALID_KEY = ::T.let(nil, ::T.untyped)
  OPEN_STRUCT_KEY = ::T.let(nil, ::T.untyped)
  SYMBOL_KEY = ::T.let(nil, ::T.untyped)
  SYMBOL_KEYS_KEY = ::T.let(nil, ::T.untyped)
  TIMESTAMP_FORMAT = ::T.let(nil, ::T.untyped)
  TIMESTAMP_KEY = ::T.let(nil, ::T.untyped)
end

module GraphQL::Tracing::ActiveSupportNotificationsTracing
  KEYS = ::T.let(nil, ::T.untyped)
  NOTIFICATIONS_ENGINE = ::T.let(nil, ::T.untyped)
end

class GraphQL::Tracing::AppOpticsTracing
  EXEC_KEYS = ::T.let(nil, ::T.untyped)
  PREP_KEYS = ::T.let(nil, ::T.untyped)
end

class GraphQL::Tracing::NotificationsTracing
  KEYS = ::T.let(nil, ::T.untyped)
  MAX_KEYS_SIZE = ::T.let(nil, ::T.untyped)
end

class GraphQL::Tracing::PrometheusTracing
  DEFAULT_COLLECTOR_TYPE = ::T.let(nil, ::T.untyped)
  DEFAULT_WHITELIST = ::T.let(nil, ::T.untyped)
end

class GraphQL::Tracing::ScoutTracing
  INSTRUMENT_OPTS = ::T.let(nil, ::T.untyped)
end

module GraphQL::TypeKinds
  ENUM = ::T.let(nil, ::T.untyped)
  INPUT_OBJECT = ::T.let(nil, ::T.untyped)
  INTERFACE = ::T.let(nil, ::T.untyped)
  LIST = ::T.let(nil, ::T.untyped)
  NON_NULL = ::T.let(nil, ::T.untyped)
  OBJECT = ::T.let(nil, ::T.untyped)
  SCALAR = ::T.let(nil, ::T.untyped)
  TYPE_KINDS = ::T.let(nil, ::T.untyped)
  UNION = ::T.let(nil, ::T.untyped)
end

class GraphQL::Types::ISO8601DateTime
  DEFAULT_TIME_PRECISION = ::T.let(nil, ::T.untyped)
end

class GraphQL::Types::Int
  MAX = ::T.let(nil, ::T.untyped)
  MIN = ::T.let(nil, ::T.untyped)
end

class HTMLSelector
  def context(); end

  def css_selector(); end

  def initialize(values, previous_selection=T.unsafe(nil), &root_fallback); end

  def message(); end

  def select(); end

  def selecting_no_body?(); end

  def tests(); end
  NO_STRIP = ::T.let(nil, ::T.untyped)
end

class HTMLSelector
  def self.context(); end
end

class HTTP::Message
  CRLF = ::T.let(nil, ::T.untyped)
  VERSION_WARNING = ::T.let(nil, ::T.untyped)
end

class HTTP::Message::Body
  DEFAULT_CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class HTTP::Message::Headers
  CHARSET_MAP = ::T.let(nil, ::T.untyped)
  NIL_URI = ::T.let(nil, ::T.untyped)
  STATUS_CODE_MAP = ::T.let(nil, ::T.untyped)
end

module HTTP::Status
  ACCEPTED = ::T.let(nil, ::T.untyped)
  BAD_REQUEST = ::T.let(nil, ::T.untyped)
  CREATED = ::T.let(nil, ::T.untyped)
  FOUND = ::T.let(nil, ::T.untyped)
  INTERNAL = ::T.let(nil, ::T.untyped)
  MOVED_PERMANENTLY = ::T.let(nil, ::T.untyped)
  MOVED_TEMPORARILY = ::T.let(nil, ::T.untyped)
  NON_AUTHORITATIVE_INFORMATION = ::T.let(nil, ::T.untyped)
  NO_CONTENT = ::T.let(nil, ::T.untyped)
  OK = ::T.let(nil, ::T.untyped)
  PARTIAL_CONTENT = ::T.let(nil, ::T.untyped)
  PROXY_AUTHENTICATE_REQUIRED = ::T.let(nil, ::T.untyped)
  REDIRECT_STATUS = ::T.let(nil, ::T.untyped)
  RESET_CONTENT = ::T.let(nil, ::T.untyped)
  SEE_OTHER = ::T.let(nil, ::T.untyped)
  SUCCESSFUL_STATUS = ::T.let(nil, ::T.untyped)
  TEMPORARY_REDIRECT = ::T.let(nil, ::T.untyped)
  UNAUTHORIZED = ::T.let(nil, ::T.untyped)
end

class HTTPClient
  DEFAULT_AGENT_NAME = ::T.let(nil, ::T.untyped)
  GSSAPIEnabled = ::T.let(nil, ::T.untyped)
  LIB_NAME = ::T.let(nil, ::T.untyped)
  NO_PROXY_HOSTS = ::T.let(nil, ::T.untyped)
  NTLMEnabled = ::T.let(nil, ::T.untyped)
  PROPFIND_DEFAULT_EXTHEADER = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_STRING = ::T.let(nil, ::T.untyped)
  SSLEnabled = ::T.let(nil, ::T.untyped)
  SSPIEnabled = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

HTTPClient::CookieManager = WebAgent::CookieManager

class HTTPClient::SSLConfig
  CIPHERS_DEFAULT = ::T.let(nil, ::T.untyped)
end

class HTTPClient::Session
  RS = ::T.let(nil, ::T.untyped)
  StatusParseRegexp = ::T.let(nil, ::T.untyped)
end

HTTPClient::Session::BadResponse = HTTPClient::BadResponseError

class HTTPClient::Site
  EMPTY = ::T.let(nil, ::T.untyped)
end

module HTTPClient::Util
  AddressableEnabled = ::T.let(nil, ::T.untyped)
end

class HTTParty::Decompressor
  SupportedEncodings = ::T.let(nil, ::T.untyped)
end

class HTTParty::Response::Headers
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class HTTParty::ResponseFragment
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Hash
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
  include ::Patches::Hash
  def deconstruct_keys(arg); end
end

class Hash
  def self.from_trusted_xml(xml); end

  def self.from_xml(xml, disallowed_types=T.unsafe(nil)); end

  def self.ruby2_keywords_hash(arg); end

  def self.ruby2_keywords_hash?(arg); end
end

module Hashdiff
  VERSION = ::T.let(nil, ::T.untyped)
end

class Hashdiff::CompareHashes
  def self.call(obj1, obj2, opts=T.unsafe(nil)); end
end

class Hashdiff::LcsCompareArrays
  def self.call(obj1, obj2, opts=T.unsafe(nil)); end
end

class Hashdiff::LinearCompareArray
  def call(); end

  def initialize(old_array, new_array, options); end
end

class Hashdiff::LinearCompareArray
  def self.call(old_array, new_array, options=T.unsafe(nil)); end
end

module Hashdiff
  def self.best_diff(obj1, obj2, options=T.unsafe(nil), &block); end

  def self.comparable?(obj1, obj2, strict=T.unsafe(nil)); end

  def self.compare_values(obj1, obj2, options=T.unsafe(nil)); end

  def self.count_diff(diffs); end

  def self.count_nodes(obj); end

  def self.custom_compare(method, key, obj1, obj2); end

  def self.decode_property_path(path, delimiter=T.unsafe(nil)); end

  def self.diff(obj1, obj2, options=T.unsafe(nil), &block); end

  def self.diff_array_lcs(arraya, arrayb, options=T.unsafe(nil)); end

  def self.lcs(arraya, arrayb, options=T.unsafe(nil)); end

  def self.node(hash, parts); end

  def self.patch!(obj, changes, options=T.unsafe(nil)); end

  def self.prefix_append_array_index(prefix, array_index, opts); end

  def self.prefix_append_key(prefix, key, opts); end

  def self.similar?(obja, objb, options=T.unsafe(nil)); end

  def self.unpatch!(obj, changes, options=T.unsafe(nil)); end
end

module Hashie
  VERSION = ::T.let(nil, ::T.untyped)
end

class Hashie::Array
  def array_inspect(); end

  def dig(*indexes); end
end

class Hashie::Clash
  def _end!(); end

  def _parent(); end

  def id(*args); end

  def initialize(other_hash=T.unsafe(nil), parent=T.unsafe(nil)); end

  def merge_store(key, *args); end

  def method_missing(name, *args); end
end

class Hashie::Clash::ChainError
end

class Hashie::Clash::ChainError
end

class Hashie::Clash
end

class Hashie::Dash
  def [](property); end

  def []=(property, value); end

  def initialize(attributes=T.unsafe(nil), &block); end

  def merge(other_hash); end

  def merge!(other_hash); end

  def replace(other_hash); end

  def to_hash(); end

  def update_attributes!(attributes); end
end

class Hashie::Dash
  def self.defaults(); end

  def self.getters(); end

  def self.inherited(klass); end

  def self.properties(); end

  def self.property(property_name, options=T.unsafe(nil)); end

  def self.property?(name); end

  def self.required?(name); end

  def self.required_properties(); end
end

module Hashie::Extensions::Array::PrettyInspect
  def hashie_inspect(); end
end

module Hashie::Extensions::Array::PrettyInspect
  def self.included(base); end
end

module Hashie::Extensions::Coercion
  ABSTRACT_CORE_TYPES = ::T.let(nil, ::T.untyped)
  CORE_TYPES = ::T.let(nil, ::T.untyped)
end

module Hashie::Extensions::Coercion::ClassMethods
  def build_coercion(type); end

  def build_container_coercion(type, value_type); end

  def build_core_type_coercion(type); end

  def build_hash_coercion(type, key_type, value_type); end

  def coerce_key(*attrs); end

  def coerce_keys(*attrs); end

  def coerce_value(from, into, options=T.unsafe(nil)); end

  def coercion_cache(); end

  def fetch_coercion(type); end

  def inherited(klass); end

  def key_coercion(key); end

  def key_coercions(); end

  def key_coercions=(key_coercions); end

  def lenient_value_coercions(); end

  def strict_value_coercions(); end

  def value_coercion(value); end
end

module Hashie::Extensions::Coercion::ClassMethods
end

module Hashie::Extensions::Coercion::InstanceMethods
  def custom_writer(key, value, _convert=T.unsafe(nil)); end

  def replace(other_hash); end

  def set_value_with_coercion(key, value); end
end

module Hashie::Extensions::Coercion::InstanceMethods
end

module Hashie::Extensions::Coercion
  def self.included(base); end
end

module Hashie::Extensions::Dash::Coercion
end

module Hashie::Extensions::Dash::Coercion::ClassMethods
  def property(property_name, options=T.unsafe(nil)); end
end

module Hashie::Extensions::Dash::Coercion::ClassMethods
end

module Hashie::Extensions::Dash::Coercion
  def self.included(base); end
end

module Hashie::Extensions::Dash::IndifferentAccess
  def to_h(); end

  def to_hash(); end
end

module Hashie::Extensions::Dash::IndifferentAccess::ClassMethods
  def property?(name); end

  def transformation_exists?(name); end

  def transformed_property(property_name, value); end

  def translation_exists?(name); end
end

module Hashie::Extensions::Dash::IndifferentAccess::ClassMethods
end

module Hashie::Extensions::Dash::IndifferentAccess
  def self.included(base); end

  def self.maybe_extend(base); end
end

module Hashie::Extensions::Dash::PredefinedValues
end

module Hashie::Extensions::Dash::PredefinedValues::ClassMethods
  def inherited(klass); end

  def property(property_name, options=T.unsafe(nil)); end

  def values_for_properties(); end
end

module Hashie::Extensions::Dash::PredefinedValues::ClassMethods
end

module Hashie::Extensions::Dash::PredefinedValues::InstanceMethods
  def initialize(*arg); end
end

module Hashie::Extensions::Dash::PredefinedValues::InstanceMethods
end

module Hashie::Extensions::Dash::PredefinedValues
  def self.included(base); end
end

module Hashie::Extensions::Dash::PropertyTranslation
end

module Hashie::Extensions::Dash::PropertyTranslation::ClassMethods
  def inherited(klass); end

  def inverse_translations(); end

  def permitted_input_keys(); end

  def property(property_name, options=T.unsafe(nil)); end

  def transformation_exists?(name); end

  def transformed_property(property_name, value); end

  def transforms(); end

  def translation_exists?(name); end

  def translations(); end

  def translations_hash(); end
end

module Hashie::Extensions::Dash::PropertyTranslation::ClassMethods
end

module Hashie::Extensions::Dash::PropertyTranslation::InstanceMethods
  def []=(property, value); end

  def initialize_attributes(attributes); end

  def property_exists?(property); end
end

module Hashie::Extensions::Dash::PropertyTranslation::InstanceMethods
end

module Hashie::Extensions::Dash::PropertyTranslation
  def self.included(base); end
end

module Hashie::Extensions::DeepFetch
  def deep_fetch(*args, &block); end
end

class Hashie::Extensions::DeepFetch::UndefinedPathError
end

class Hashie::Extensions::DeepFetch::UndefinedPathError
end

module Hashie::Extensions::DeepFetch
end

module Hashie::Extensions::DeepFind
  def deep_detect(key); end

  def deep_find(key); end

  def deep_find_all(key); end

  def deep_select(key); end
end

module Hashie::Extensions::DeepFind
end

module Hashie::Extensions::DeepLocate
  def deep_locate(comparator); end
end

module Hashie::Extensions::DeepLocate
  def self.deep_locate(comparator, object); end
end

module Hashie::Extensions::DeepMerge
  def deep_merge(other_hash, &block); end

  def deep_merge!(other_hash, &block); end
end

module Hashie::Extensions::DeepMerge
end

module Hashie::Extensions::IgnoreUndeclared
  def initialize_attributes(attributes); end

  def property_exists?(property); end
end

module Hashie::Extensions::IgnoreUndeclared
end

module Hashie::Extensions::IndifferentAccess
  include ::Hashie::Extensions::RubyVersionCheck
  def convert!(); end

  def convert_key(key); end

  def except(*keys); end

  def hash_lacking_indifference?(other); end

  def hash_with_indifference?(other); end

  def indifferent_access?(); end

  def indifferent_default(key=T.unsafe(nil)); end

  def indifferent_delete(key); end

  def indifferent_fetch(key, *args, &block); end

  def indifferent_key?(key); end

  def indifferent_replace(other_hash); end

  def indifferent_update(other_hash); end

  def indifferent_value(value); end

  def indifferent_values_at(*indices); end

  def indifferent_writer(key, value); end

  def merge(*args); end

  def merge!(*arg); end

  def slice(*keys); end

  def to_hash(); end
end

module Hashie::Extensions::IndifferentAccess
  def self.convert_key(key); end

  def self.included(base); end

  def self.inject(hash); end

  def self.inject!(hash); end
end

module Hashie::Extensions::KeyConflictWarning
  def disable_warnings(*method_keys); end

  def disable_warnings?(method_key=T.unsafe(nil)); end

  def disabled_warnings(); end

  def inherited(subclass); end
end

class Hashie::Extensions::KeyConflictWarning::CannotDisableMashWarnings
  def initialize(); end
end

module Hashie::Extensions::KeyConversion
end

module Hashie::Extensions::KeyConversion
  def self.included(base); end
end

module Hashie::Extensions::Mash::DefineAccessors
end

class Hashie::Extensions::Mash::DefineAccessors::Ext
  def define_initializing_reader(key, method_name); end

  def define_predicate(key, method_name); end

  def define_reader(key, method_name); end

  def define_underbang_reader(key, method_name); end

  def define_writer(key, method_name); end
end

class Hashie::Extensions::Mash::DefineAccessors::Ext
end

module Hashie::Extensions::Mash::DefineAccessors
  def self.extended(obj); end

  def self.included(klass); end
end

module Hashie::Extensions::Mash::KeepOriginalKeys
end

module Hashie::Extensions::Mash::KeepOriginalKeys
  def self.included(descendant); end
end

module Hashie::Extensions::Mash::PermissiveRespondTo
end

module Hashie::Extensions::Mash::PermissiveRespondTo
  def self.included(base); end
end

module Hashie::Extensions::Mash::SafeAssignment
  def []=(*args); end

  def custom_writer(key, *args); end
end

module Hashie::Extensions::Mash::SafeAssignment
end

module Hashie::Extensions::Mash::SymbolizeKeys
end

module Hashie::Extensions::Mash::SymbolizeKeys
  def self.included(base); end
end

module Hashie::Extensions::MergeInitializer
  def initialize(hash=T.unsafe(nil), default=T.unsafe(nil), &block); end
end

module Hashie::Extensions::MergeInitializer
end

module Hashie::Extensions::MethodAccess
end

module Hashie::Extensions::MethodAccess
  def self.included(base); end
end

module Hashie::Extensions::MethodAccessWithOverride
end

module Hashie::Extensions::MethodAccessWithOverride
  def self.included(base); end
end

module Hashie::Extensions::MethodQuery
  def method_missing(name, *args); end
end

module Hashie::Extensions::MethodQuery
end

module Hashie::Extensions::MethodReader
  def method_missing(name, *args); end
end

module Hashie::Extensions::MethodReader
end

module Hashie::Extensions::MethodWriter
  def convert_key(key); end

  def method_missing(name, *args); end
end

module Hashie::Extensions::MethodWriter
end

class Hashie::Extensions::Parsers::YamlErbParser
  def initialize(file_path, options=T.unsafe(nil)); end

  def perform(); end
end

class Hashie::Extensions::Parsers::YamlErbParser
  def self.perform(file_path, options=T.unsafe(nil)); end
end

module Hashie::Extensions::PrettyInspect
  def hashie_inspect(); end
end

module Hashie::Extensions::PrettyInspect
  def self.included(base); end
end

class Hashie::Extensions::RubyVersion
  def initialize(version); end

  def segments(); end

  def segments=(segments); end
end

module Hashie::Extensions::RubyVersionCheck
  def self.included(base); end
end

module Hashie::Extensions::StrictKeyAccess
  def [](key); end

  def default(_=T.unsafe(nil)); end

  def default=(_); end

  def default_proc(); end

  def default_proc=(_); end

  def key(value); end
end

class Hashie::Extensions::StrictKeyAccess::DefaultError
  def initialize(); end
end

class Hashie::Extensions::StrictKeyAccess::DefaultError
end

module Hashie::Extensions::StrictKeyAccess
end

module Hashie::Extensions::StringifyKeys
  def stringify_keys(); end

  def stringify_keys!(); end
end

module Hashie::Extensions::SymbolizeKeys
  def symbolize_keys(); end

  def symbolize_keys!(); end
end

module Hashie::Extensions::SymbolizeKeys::ClassMethods
  def symbolize_keys(hash); end

  def symbolize_keys!(hash); end

  def symbolize_keys_recursively!(object); end
end

module Hashie::Extensions::SymbolizeKeys
  extend ::Hashie::Extensions::SymbolizeKeys::ClassMethods
end

class Hashie::Hash
  def hash_inspect(); end

  def to_hash(options=T.unsafe(nil)); end

  def to_json(*args); end

  def to_mash(); end
end

class Hashie::Mash
  def [](key); end

  def []=(key, value, convert=T.unsafe(nil)); end

  def assign_property(name, value); end

  def convert_key(key); end

  def convert_value(val, duping=T.unsafe(nil)); end

  def custom_reader(key); end

  def custom_writer(key, value, convert=T.unsafe(nil)); end

  def deep_merge(*other_hashes, &blk); end

  def deep_merge!(*other_hashes, &blk); end

  def deep_update(*other_hashes, &blk); end

  def delete(key); end

  def dig(*keys); end

  def except(*keys); end

  def fetch(key, *args); end

  def has_key?(key); end

  def include?(key); end

  def initialize(source_hash=T.unsafe(nil), default=T.unsafe(nil), &blk); end

  def initializing_reader(key); end

  def key?(key); end

  def member?(key); end

  def merge(*other_hashes, &blk); end

  def merge!(*other_hashes, &blk); end

  def method_missing(method_name, *args, &blk); end

  def method_name_and_suffix(method_name); end

  def method_suffix(method_name); end

  def prefix_method?(method_name); end

  def regular_dup(); end

  def regular_key?(arg); end

  def regular_reader(arg); end

  def regular_writer(arg, arg1); end

  def reject(&blk); end

  def replace(other_hash); end

  def select(&blk); end

  def shallow_merge(other_hash); end

  def shallow_update(other_hash); end

  def slice(*keys); end

  def to_module(mash_method_name=T.unsafe(nil)); end

  def transform_keys(&blk); end

  def transform_values(&blk); end

  def underbang_reader(key); end

  def update(*other_hashes, &blk); end

  def values_at(*keys); end

  def with_accessors!(); end
  ALLOWED_SUFFIXES = ::T.let(nil, ::T.untyped)
end

class Hashie::Mash
  def self.[](*arg, **arg1); end

  def self.load(path, options=T.unsafe(nil)); end

  def self.quiet(*method_keys); end
end

class Hashie::Rash
  def [](key); end

  def []=(key, value); end

  def all(query); end

  def fetch(*args); end

  def initialize(initial=T.unsafe(nil)); end

  def method_missing(*args, &block); end

  def optimize_every(); end

  def optimize_every=(optimize_every); end

  def update(other); end
end

class Hashie::Rash
end

class Hashie::Trash
  include ::Hashie::Extensions::Dash::PropertyTranslation
  include ::Hashie::Extensions::Dash::PropertyTranslation::InstanceMethods
end

class Hashie::Trash
  extend ::Hashie::Extensions::Dash::PropertyTranslation::ClassMethods
end

module Hashie::Utils
  def self.integer_classes(); end

  def self.method_information(bound_method); end

  def self.safe_dup(value); end
end

module Hashie
  extend ::Hashie::Extensions::SymbolizeKeys::ClassMethods
  def self.logger(); end

  def self.logger=(logger); end
end

module I18n
  DEFAULT_INTERPOLATION_PATTERNS = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  INTERPOLATION_PATTERN = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Base
  def available_locales(); end

  def deep_interpolate(locale, data, values=T.unsafe(nil)); end

  def default(locale, object, subject, options=T.unsafe(nil)); end

  def eager_load!(); end

  def eager_loaded?(); end

  def exists?(locale, key, options=T.unsafe(nil)); end

  def interpolate(locale, subject, values=T.unsafe(nil)); end

  def load_file(filename); end

  def load_json(filename); end

  def load_rb(filename); end

  def load_translations(*filenames); end

  def load_yaml(filename); end

  def load_yml(filename); end

  def localize(locale, object, format=T.unsafe(nil), options=T.unsafe(nil)); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def pluralization_key(entry, count); end

  def pluralize(locale, entry, count); end

  def reload!(); end

  def resolve(locale, object, subject, options=T.unsafe(nil)); end

  def resolve_entry(locale, object, subject, options=T.unsafe(nil)); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def subtrees?(); end

  def translate(locale, key, options=T.unsafe(nil)); end

  def translate_localization_format(locale, object, format, options); end
end

module I18n::Backend::Cache
  def _fetch(cache_key, &block); end

  def cache_key(locale, key, options); end

  def fetch(cache_key, &block); end

  def translate(locale, key, options=T.unsafe(nil)); end
end

module I18n::Backend::Cache
end

module I18n::Backend::CacheFile
  def load_file(filename); end

  def normalized_path(file); end

  def path_roots(); end

  def path_roots=(path_roots); end
end

module I18n::Backend::CacheFile
end

module I18n::Backend::Cascade
  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end
end

module I18n::Backend::Cascade
end

class I18n::Backend::Chain
  include ::I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def backends(); end

  def backends=(backends); end

  def eager_load!(); end

  def exists?(locale, key, options=T.unsafe(nil)); end

  def init_translations(); end

  def initialize(*backends); end

  def initialized?(); end

  def localize(locale, object, format=T.unsafe(nil), options=T.unsafe(nil)); end

  def namespace_lookup?(result, options); end

  def reload!(); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def translate(locale, key, default_options=T.unsafe(nil)); end

  def translations(); end
end

module I18n::Backend::Chain::Implementation
end

class I18n::Backend::Chain
end

module I18n::Backend::Flatten
  def escape_default_separator(key); end

  def find_link(locale, key); end

  def flatten_keys(hash, escape, prev_key=T.unsafe(nil), &block); end

  def flatten_translations(locale, data, escape, subtree); end

  def links(); end

  def normalize_flat_keys(locale, key, scope, separator); end

  def resolve_link(locale, key); end

  def store_link(locale, key, link); end
  FLATTEN_SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Flatten
  def self.escape_default_separator(key); end

  def self.normalize_flat_keys(locale, key, scope, separator); end
end

module I18n::Backend::Gettext
  def load_po(filename); end

  def normalize(locale, data); end

  def normalize_pluralization(locale, key, value); end

  def parse(filename); end
end

class I18n::Backend::Gettext::PoData
  def set_comment(msgid_or_sym, comment); end
end

class I18n::Backend::Gettext::PoData
end

module I18n::Backend::Gettext
end

module I18n::Backend::InterpolationCompiler
  def compile_all_strings_in(data); end

  def interpolate(locale, string, values); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::InterpolationCompiler::Compiler
  def compile_if_an_interpolation(string); end

  def compile_interpolation_token(key); end

  def compiled_interpolation_body(str); end

  def direct_key(key); end

  def escape_key_sym(key); end

  def escape_plain_str(str); end

  def handle_interpolation_token(interpolation, matchdata); end

  def interpolate_key(key); end

  def interpolate_or_raise_missing(key); end

  def interpolated_str?(str); end

  def missing_key(key); end

  def nil_key(key); end

  def reserved_key(key); end

  def tokenize(str); end
  INTERPOLATION_SYNTAX_PATTERN = ::T.let(nil, ::T.untyped)
  TOKENIZER = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::InterpolationCompiler::Compiler
  extend ::I18n::Backend::InterpolationCompiler::Compiler
end

module I18n::Backend::InterpolationCompiler
end

class I18n::Backend::KeyValue
  include ::I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def init_translations(); end

  def initialize(store, subtrees=T.unsafe(nil)); end

  def initialized?(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def store(); end

  def store=(store); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def subtrees?(); end

  def translations(); end
end

module I18n::Backend::KeyValue::Implementation
end

class I18n::Backend::KeyValue::SubtreeProxy
  def [](key); end

  def has_key?(key); end

  def initialize(master_key, store); end

  def instance_of?(klass); end

  def is_a?(klass); end

  def kind_of?(klass); end
end

class I18n::Backend::KeyValue::SubtreeProxy
end

class I18n::Backend::KeyValue
end

class I18n::Backend::LazyLoadable
  def initialize(lazy_load: T.unsafe(nil)); end

  def initialized_locales(); end
end

class I18n::Backend::LazyLoadable::FilenameIncorrect
  def initialize(file, expected_locale, unexpected_locales); end
end

class I18n::Backend::LazyLoadable::FilenameIncorrect
end

class I18n::Backend::LazyLoadable
end

module I18n::Backend::Memoize
  def available_locales(); end

  def eager_load!(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def memoized_lookup(); end

  def reload!(); end

  def reset_memoizations!(locale=T.unsafe(nil)); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::Memoize
end

module I18n::Backend::Metadata
  def interpolate(locale, entry, values=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def translate(locale, key, options=T.unsafe(nil)); end

  def with_metadata(metadata, &block); end
end

module I18n::Backend::Metadata
  def self.included(base); end
end

module I18n::Backend::Pluralization
  def pluralize(locale, entry, count); end

  def pluralizer(locale); end

  def pluralizers(); end
end

module I18n::Backend::Pluralization
end

class I18n::Backend::Simple
  include ::I18n::Backend::Fallbacks
end

module I18n::Backend::Simple::Implementation
  def available_locales(); end

  def eager_load!(); end

  def init_translations(); end

  def initialized?(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def reload!(); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def translations(do_init: T.unsafe(nil)); end
end

module I18n::Backend::Transliterator
  def transliterate(locale, string, replacement=T.unsafe(nil)); end
  DEFAULT_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::HashTransliterator
  def initialize(rule=T.unsafe(nil)); end

  def transliterate(string, replacement=T.unsafe(nil)); end
  DEFAULT_APPROXIMATIONS = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::ProcTransliterator
  def initialize(rule); end

  def transliterate(string, replacement=T.unsafe(nil)); end
end

module I18n::Backend::Transliterator
  def self.get(rule=T.unsafe(nil)); end
end

module I18n::Gettext
  CONTEXT_SEPARATOR = ::T.let(nil, ::T.untyped)
  PLURAL_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext::Helpers
  def N_(msgsid); end

  def _(msgid, options=T.unsafe(nil)); end

  def gettext(msgid, options=T.unsafe(nil)); end

  def n_(msgid, msgid_plural, n=T.unsafe(nil)); end

  def ngettext(msgid, msgid_plural, n=T.unsafe(nil)); end

  def np_(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def npgettext(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def ns_(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def nsgettext(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def p_(msgctxt, msgid); end

  def pgettext(msgctxt, msgid); end

  def s_(msgid, separator=T.unsafe(nil)); end

  def sgettext(msgid, separator=T.unsafe(nil)); end
end

module I18n::Gettext::Helpers
end

module I18n::Gettext
  def self.extract_scope(msgid, separator); end

  def self.plural_keys(*args); end
end

class I18n::InvalidFilenames
  NUMBER_OF_ERRORS_SHOWN = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag
  RFC4646_FORMATS = ::T.let(nil, ::T.untyped)
  RFC4646_SUBTAGS = ::T.let(nil, ::T.untyped)
end

class I18n::Locale::Tag::Rfc4646
  include ::I18n::Locale::Tag::Parents
  def to_sym(); end
end

module I18n::Locale::Tag::Rfc4646::Parser
  PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Rfc4646::Parser
  def self.match(tag); end
end

class I18n::Locale::Tag::Rfc4646
  def self.parser(); end

  def self.parser=(parser); end

  def self.tag(tag); end
end

class I18n::Middleware
  def call(env); end

  def initialize(app); end
end

class I18n::Middleware
end

module I18n::MissingTranslation::Base
  PERMITTED_KEYS = ::T.let(nil, ::T.untyped)
end

module I18n::Tests
end

module I18n::Tests::Localization
end

module I18n::Tests::Localization
  def self.included(base); end
end

module I18n::Tests
end

module I18n
  def self.cache_key_digest(); end

  def self.cache_key_digest=(key_digest); end

  def self.cache_namespace(); end

  def self.cache_namespace=(namespace); end

  def self.cache_store(); end

  def self.cache_store=(store); end

  def self.perform_caching?(); end
end

class IO
  def beep(); end

  def check_winsize_changed(); end

  def clear_screen(); end

  def console_mode(); end

  def console_mode=(console_mode); end

  def cooked(); end

  def cooked!(); end

  def cursor(); end

  def cursor=(cursor); end

  def cursor_down(arg); end

  def cursor_left(arg); end

  def cursor_right(arg); end

  def cursor_up(arg); end

  def echo=(echo); end

  def echo?(); end

  def erase_line(arg); end

  def erase_screen(arg); end

  def getch(*arg); end

  def getpass(*arg); end

  def goto(arg, arg1); end

  def goto_column(arg); end

  def iflush(); end

  def ioflush(); end

  def noecho(); end

  def nonblock(*arg); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def oflush(); end

  def pathconf(arg); end

  def pressed?(); end

  def raw(*arg); end

  def raw!(*arg); end

  def ready?(); end

  def scroll_backward(arg); end

  def scroll_forward(arg); end

  def set_encoding_by_bom(); end

  def wait(*arg); end

  def wait_priority(*arg); end

  def wait_readable(*arg); end

  def wait_writable(*arg); end

  def winsize(); end

  def winsize=(winsize); end
  PRIORITY = ::T.let(nil, ::T.untyped)
  READABLE = ::T.let(nil, ::T.untyped)
  WRITABLE = ::T.let(nil, ::T.untyped)
end

class IO::Buffer
  include ::Comparable
  def clear(*arg); end

  def copy(*arg); end

  def empty?(); end

  def external?(); end

  def free(); end

  def get_string(*arg); end

  def get_value(arg, arg1); end

  def hexdump(); end

  def initialize(*arg); end

  def internal?(); end

  def locked(); end

  def locked?(); end

  def mapped?(); end

  def null?(); end

  def pread(arg, arg1, arg2); end

  def pwrite(arg, arg1, arg2); end

  def read(arg, arg1); end

  def readonly?(); end

  def resize(arg); end

  def set_string(*arg); end

  def set_value(arg, arg1, arg2); end

  def size(); end

  def slice(arg, arg1); end

  def transfer(); end

  def valid?(); end

  def write(arg, arg1); end
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
  EXTERNAL = ::T.let(nil, ::T.untyped)
  HOST_ENDIAN = ::T.let(nil, ::T.untyped)
  INTERNAL = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MAPPED = ::T.let(nil, ::T.untyped)
  NETWORK_ENDIAN = ::T.let(nil, ::T.untyped)
  PAGE_SIZE = ::T.let(nil, ::T.untyped)
  PRIVATE = ::T.let(nil, ::T.untyped)
  READONLY = ::T.let(nil, ::T.untyped)
end

class IO::Buffer::AccessError
end

class IO::Buffer::AccessError
end

class IO::Buffer::AllocationError
end

class IO::Buffer::AllocationError
end

class IO::Buffer::InvalidatedError
end

class IO::Buffer::InvalidatedError
end

class IO::Buffer::LockedError
end

class IO::Buffer::LockedError
end

class IO::Buffer
  def self.for(arg); end

  def self.map(*arg); end
end

class IO::ConsoleMode
  def echo=(echo); end

  def raw(*arg); end

  def raw!(*arg); end
end

class IO::ConsoleMode
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class IO
  def self.console(*arg); end

  def self.console_size(); end

  def self.default_console_size(); end

  def self.new(*arg); end
end

class IPAddr
  def ==(other); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end

  def netmask(); end

  def zone_id(); end

  def zone_id=(zid); end
  VERSION = ::T.let(nil, ::T.untyped)
end

module IRB
  IRBRC_EXT = ::T.let(nil, ::T.untyped)
  MagicFile = ::T.let(nil, ::T.untyped)
  STDIN_FILE_NAME = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module IRB::Color
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  DIM = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  REVERSE = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

module IRB::Color
  def self.clear(colorable: T.unsafe(nil)); end

  def self.colorable?(); end

  def self.colorize(text, seq, colorable: T.unsafe(nil)); end

  def self.colorize_code(code, complete: T.unsafe(nil), ignore_error: T.unsafe(nil), colorable: T.unsafe(nil)); end

  def self.inspect_colorable?(obj, seen: T.unsafe(nil)); end
end

class IRB::ColorPrinter
  def text(str, width=T.unsafe(nil)); end
end

class IRB::ColorPrinter
end

class IRB::Context
  def __exit__(*arg); end

  def __inspect__(); end

  def __to_s__(); end

  def echo_on_assignment(); end

  def echo_on_assignment=(echo_on_assignment); end

  def echo_on_assignment?(); end

  def evaluate(line, line_no, exception: T.unsafe(nil)); end

  def extra_doc_dirs(); end

  def extra_doc_dirs=(extra_doc_dirs); end

  def initialize(irb, workspace=T.unsafe(nil), input_method=T.unsafe(nil)); end

  def inspect_last_value(); end

  def newline_before_multiline_output(); end

  def newline_before_multiline_output=(newline_before_multiline_output); end

  def newline_before_multiline_output?(); end

  def use_autocomplete(); end

  def use_autocomplete?(); end

  def use_colorize(); end

  def use_colorize?(); end

  def use_multiline(); end

  def use_multiline?(); end

  def use_reidline(); end

  def use_reidline?(); end

  def use_singleline(); end

  def use_singleline?(); end
  IDNAME_IVARS = ::T.let(nil, ::T.untyped)
  NOPRINTING_IVARS = ::T.let(nil, ::T.untyped)
  NO_INSPECTING_IVARS = ::T.let(nil, ::T.untyped)
end

class IRB::DefaultEncodings
  def external(); end

  def external=(_); end

  def internal(); end

  def internal=(_); end
end

class IRB::DefaultEncodings
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module IRB::ExtendCommandBundle
  def irb(*opts, **kwargs, &b); end

  def irb_change_workspace(*opts, **kwargs, &b); end

  def irb_current_working_workspace(*opts, **kwargs, &b); end

  def irb_fg(*opts, **kwargs, &b); end

  def irb_help(*opts, **kwargs, &b); end

  def irb_info(*opts, **kwargs, &b); end

  def irb_jobs(*opts, **kwargs, &b); end

  def irb_kill(*opts, **kwargs, &b); end

  def irb_ls(*opts, **kwargs, &b); end

  def irb_measure(*opts, **kwargs, &b); end

  def irb_pop_workspace(*opts, **kwargs, &b); end

  def irb_push_workspace(*opts, **kwargs, &b); end

  def irb_show_source(*opts, **kwargs, &b); end

  def irb_source(*opts, **kwargs, &b); end

  def irb_whereami(*opts, **kwargs, &b); end

  def irb_workspaces(*opts, **kwargs, &b); end
end

IRB::ExtendCommandBundle::EXCB = IRB::ExtendCommandBundle

module IRB::ExtendCommandBundle
  def self.irb_original_method_name(method_name); end
end

class IRB::FileInputMethod
  def close(); end

  def initialize(file); end
end

class IRB::FileInputMethod
  def self.open(file, &block); end
end

module IRB::InputCompletor
  BASIC_WORD_BREAK_CHARACTERS = ::T.let(nil, ::T.untyped)
  CompletionProc = ::T.let(nil, ::T.untyped)
  CompletionRequireProc = ::T.let(nil, ::T.untyped)
  Operators = ::T.let(nil, ::T.untyped)
  PerfectMatchedProc = ::T.let(nil, ::T.untyped)
  ReservedWords = ::T.let(nil, ::T.untyped)
end

module IRB::InputCompletor
  def self.absolute_path?(p); end

  def self.ignored_modules(); end

  def self.retrieve_completion_data(input, bind: T.unsafe(nil), doc_namespace: T.unsafe(nil)); end

  def self.retrieve_files_to_require_from_load_path(); end

  def self.retrieve_files_to_require_relative_from_current_dir(); end

  def self.retrieve_gem_and_system_load_path(); end

  def self.select_message(receiver, message, candidates, sep=T.unsafe(nil)); end
end

class IRB::InputMethod
  def initialize(file=T.unsafe(nil)); end

  def winsize(); end
end

class IRB::Inspector
  def initialize(inspect_proc, init_proc=T.unsafe(nil)); end
end

class IRB::Irb
  def assignment_expression?(line); end

  def convert_invalid_byte_sequence(str, enc); end

  def encode_with_invalid_byte_sequence(str, enc); end

  def handle_exception(exc); end

  def initialize(workspace=T.unsafe(nil), input_method=T.unsafe(nil)); end

  def output_value(omit=T.unsafe(nil)); end

  def prompt(prompt, ltype, indent, line_no); end
  ASSIGNMENT_NODE_TYPES = ::T.let(nil, ::T.untyped)
end

class IRB::Locale
  def String(mes); end

  def encoding(); end

  def find(file, paths=T.unsafe(nil)); end

  def format(*opts); end

  def gets(*rs); end

  def initialize(locale=T.unsafe(nil)); end

  def lang(); end

  def load(file, priv=T.unsafe(nil)); end

  def modifier(); end

  def print(*opts); end

  def printf(*opts); end

  def puts(*opts); end

  def readline(*rs); end

  def require(file, priv=T.unsafe(nil)); end

  def territory(); end
  LOCALE_DIR = ::T.let(nil, ::T.untyped)
  LOCALE_NAME_RE = ::T.let(nil, ::T.untyped)
end

class IRB::Locale
end

class IRB::OutputMethod::NotImplementedError
  def initialize(val); end
end

class IRB::ReadlineInputMethod
  def initialize(); end
end

class IRB::ReadlineInputMethod
  def self.initialize_readline(); end
end

class IRB::ReidlineInputMethod
  include ::Reline
  def auto_indent(&block); end

  def check_termination(&block); end

  def dynamic_prompt(&block); end

  def encoding(); end

  def eof?(); end

  def initialize(); end

  def line(line_no); end
  SHOW_DOC_DIALOG = ::T.let(nil, ::T.untyped)
end

class IRB::ReidlineInputMethod
end

class IRB::StdioInputMethod
  def initialize(); end
end

class IRB::WorkSpace
  def initialize(*main); end

  def local_variable_get(name); end

  def local_variable_set(name, value); end
end

module IRB
  def self.Inspector(inspect, init=T.unsafe(nil)); end

  def self.delete_caller(); end

  def self.init_config(ap_path); end

  def self.init_error(); end

  def self.load_modules(); end

  def self.parse_opts(argv: T.unsafe(nil)); end

  def self.rc_file(ext=T.unsafe(nil)); end

  def self.rc_file_generators(); end

  def self.run_config(); end

  def self.set_measure_callback(type=T.unsafe(nil), arg=T.unsafe(nil), &block); end

  def self.setup(ap_path, argv: T.unsafe(nil)); end

  def self.unset_measure_callback(type=T.unsafe(nil)); end
end

class InertiaRails::StaticController
  def static(); end
end

class Integer
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
  include ::ActiveSupport::NumericWithFormat
  include ::ActiveSupport::DeprecatedNumericWithFormat
  def to_bn(); end
end

class Integer
  def self.try_convert(arg); end
end

class InternalApisController
  include ::Apiable
  include ::AbstractController::Helpers
  include ::ActionController::RequestForgeryProtection
  include ::CurrentSpace
  include ::I18nable
  include ::ActionController::Cookies
  def _helper_methods(); end

  def _helper_methods=(_helper_methods); end

  def _helper_methods?(); end

  def allow_forgery_protection(); end

  def allow_forgery_protection=(value); end

  def default_protect_from_forgery(); end

  def default_protect_from_forgery=(value); end

  def forgery_protection_origin_check(); end

  def forgery_protection_origin_check=(value); end

  def forgery_protection_strategy(); end

  def forgery_protection_strategy=(value); end

  def graphql(); end

  def log_warning_on_csrf_failure(); end

  def log_warning_on_csrf_failure=(value); end

  def per_form_csrf_tokens(); end

  def per_form_csrf_tokens=(value); end

  def request_forgery_protection_token(); end

  def request_forgery_protection_token=(value); end

  def show_locales(); end

  def urlsafe_csrf_tokens(); end
end

module InternalApisController::HelperMethods
  def cookies(*args, **arg, &block); end

  def form_authenticity_token(*args, **arg, &block); end

  def protect_against_forgery?(*args, **arg, &block); end
end

module InternalApisController::HelperMethods
end

class InternalApisController
  extend ::AbstractController::Helpers::ClassMethods
  def self._helper_methods(); end

  def self._helper_methods=(value); end

  def self._helper_methods?(); end

  def self._helpers(); end

  def self.allow_forgery_protection(); end

  def self.allow_forgery_protection=(value); end

  def self.default_protect_from_forgery(); end

  def self.default_protect_from_forgery=(value); end

  def self.forgery_protection_origin_check(); end

  def self.forgery_protection_origin_check=(value); end

  def self.forgery_protection_strategy(); end

  def self.forgery_protection_strategy=(value); end

  def self.log_warning_on_csrf_failure(); end

  def self.log_warning_on_csrf_failure=(value); end

  def self.per_form_csrf_tokens(); end

  def self.per_form_csrf_tokens=(value); end

  def self.request_forgery_protection_token(); end

  def self.request_forgery_protection_token=(value); end

  def self.urlsafe_csrf_tokens(); end

  def self.urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end
end

class JSON::Ext::Generator::State
  def escape_slash(); end

  def escape_slash=(escape_slash); end

  def escape_slash?(); end
end

class JSON::Ext::Generator::State
  def self.from_state(arg); end
end

class JSON::Ext::Parser
  def initialize(*arg); end
end

JSON::Parser = JSON::Ext::Parser

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module JSON
  extend ::Bootsnap::CompileCache::JSON::Patch
  def self.create_fast_state(); end

  def self.create_pretty_state(); end

  def self.load_file(filespec, opts=T.unsafe(nil)); end

  def self.load_file!(filespec, opts=T.unsafe(nil)); end
end

class JSONClient
  def content_type_json_request(); end

  def content_type_json_response_regex(); end

  def initialize(*args); end
  CONTENT_TYPE_JSON = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE_JSON_REGEX = ::T.let(nil, ::T.untyped)
end

module JWT::Algos
  ALGOS = ::T.let(nil, ::T.untyped)
end

module JWT::Algos::Ecdsa
  NAMED_CURVES = ::T.let(nil, ::T.untyped)
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

module JWT::Algos::Eddsa
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

module JWT::Algos::Hmac
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

module JWT::Algos::None
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

module JWT::Algos::Ps
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

module JWT::Algos::Rsa
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

module JWT::Algos::Unsupported
  SUPPORTED = ::T.let(nil, ::T.untyped)
end

class JWT::ClaimsValidator
  NUMERIC_CLAIMS = ::T.let(nil, ::T.untyped)
end

module JWT::DefaultOptions
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class JWT::Encode
  ALG_KEY = ::T.let(nil, ::T.untyped)
  ALG_NONE = ::T.let(nil, ::T.untyped)
end

class JWT::JWK::EC
  BINARY = ::T.let(nil, ::T.untyped)
  KTY = ::T.let(nil, ::T.untyped)
  KTYS = ::T.let(nil, ::T.untyped)
end

class JWT::JWK::HMAC
  KTY = ::T.let(nil, ::T.untyped)
  KTYS = ::T.let(nil, ::T.untyped)
end

class JWT::JWK::RSA
  BINARY = ::T.let(nil, ::T.untyped)
  KTY = ::T.let(nil, ::T.untyped)
  KTYS = ::T.let(nil, ::T.untyped)
  RSA_KEY_ELEMENTS = ::T.let(nil, ::T.untyped)
end

class JWT::Verify
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Kernel
  include ::DEBUGGER__::TrapInterceptor
  def debugger(pre: T.unsafe(nil), do: T.unsafe(nil), up_level: T.unsafe(nil)); end

  def itself(); end

  def object_id(); end

  def pretty_inspect(); end

  def then(); end

  def yield_self(); end
end

module Kernel
  def self.at_exit(); end

  def self.autoload(arg, arg1); end

  def self.trap(*arg); end
end

class KeyError
  include ::DidYouMean::Correctable
end

class LoadError
  include ::DidYouMean::Correctable
end

module Lockbox
  VERSION = ::T.let(nil, ::T.untyped)
end

module Lockbox::ActiveStorageExtensions::Attached
  def encrypt_attachable(attachable); end

  def encrypted?(); end
end

module Lockbox::ActiveStorageExtensions::AttachedMany
  def rotate_encryption!(); end
end

module Lockbox::ActiveStorageExtensions::AttachedOne
  def rotate_encryption!(); end
end

module Lockbox::ActiveStorageExtensions::Attachment
  def download(); end

  def open(**options); end

  def preview(*args); end

  def variant(*args); end
end

module Lockbox::ActiveStorageExtensions::CreateOne
  def initialize(name, record, attachable); end
end

class Lockbox::LogSubscriber
  def decrypt_file(event); end

  def encrypt_file(event); end
end

module Lockbox::Padding
  PAD_FIRST_BYTE = ::T.let(nil, ::T.untyped)
  PAD_ZERO_BYTE = ::T.let(nil, ::T.untyped)
end

class Logger
  def debug!(); end

  def error!(); end

  def fatal!(); end

  def info!(); end

  def warn!(); end
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  DatetimeFormat = ::T.let(nil, ::T.untyped)
  Format = ::T.let(nil, ::T.untyped)
end

class Logger::LogDevice
  include ::MonitorMixin
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Lograge
  VERSION = ::T.let(nil, ::T.untyped)
end

class Lograge::Formatters::L2met
  L2MET_FIELDS = ::T.let(nil, ::T.untyped)
  UNWANTED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Lograge::LogSubscribers::ActionCable
  def connect(event); end

  def disconnect(event); end

  def perform_action(event); end

  def subscribe(event); end

  def unsubscribe(event); end
end

class Lograge::LogSubscribers::ActionController
  def process_action(event); end

  def redirect_to(event); end

  def unpermitted_parameters(event); end
end

class Lograge::SilentLogger
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Logstop
  CREDIT_CARD_REGEX = ::T.let(nil, ::T.untyped)
  CREDIT_CARD_REGEX_DELIMITERS = ::T.let(nil, ::T.untyped)
  EMAIL_REGEX = ::T.let(nil, ::T.untyped)
  FILTERED_STR = ::T.let(nil, ::T.untyped)
  FILTERED_URL_STR = ::T.let(nil, ::T.untyped)
  IP_REGEX = ::T.let(nil, ::T.untyped)
  PHONE_REGEX = ::T.let(nil, ::T.untyped)
  SSN_REGEX = ::T.let(nil, ::T.untyped)
  URL_PASSWORD_REGEX = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Loofah
  VERSION = ::T.let(nil, ::T.untyped)
end

module Loofah::DocumentDecorator
  def initialize(*args, &block); end
end

module Loofah::Elements
  BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  INLINE_LINE_BREAK = ::T.let(nil, ::T.untyped)
  LINEBREAKERS = ::T.let(nil, ::T.untyped)
  LOOSE_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML4 = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML5 = ::T.let(nil, ::T.untyped)
end

class Loofah::HTML::Document
  def serialize_root(); end
end

class Loofah::HTML::DocumentFragment
  def serialize_root(); end
end

class Loofah::HTML::DocumentFragment
  def self.parse(tags, encoding=T.unsafe(nil)); end
end

module Loofah::HTML5::SafeList
  ACCEPTABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_ELEMENTS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  ALLOWED_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ALLOWED_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ARIA_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ATTR_VAL_IS_URI = ::T.let(nil, ::T.untyped)
  MATHML_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  MATHML_ELEMENTS = ::T.let(nil, ::T.untyped)
  PROTOCOL_SEPARATOR = ::T.let(nil, ::T.untyped)
  SHORTHAND_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  SVG_ALLOW_LOCAL_HREF = ::T.let(nil, ::T.untyped)
  SVG_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SVG_ATTR_VAL_ALLOWS_REF = ::T.let(nil, ::T.untyped)
  SVG_ELEMENTS = ::T.let(nil, ::T.untyped)
  TAGS_SAFE_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::Scrub
  CONTROL_CHARACTERS = ::T.let(nil, ::T.untyped)
  CRASS_SEMICOLON = ::T.let(nil, ::T.untyped)
  CSS_IMPORTANT = ::T.let(nil, ::T.untyped)
  CSS_KEYWORDISH = ::T.let(nil, ::T.untyped)
  CSS_PROPERTY_STRING_WITHOUT_EMBEDDED_QUOTES = ::T.let(nil, ::T.untyped)
  DATA_ATTRIBUTE_NAME = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::Scrub
  def self.allowed_element?(element_name); end

  def self.force_correct_attribute_escaping!(node); end

  def self.scrub_attributes(node); end

  def self.scrub_css(style); end

  def self.scrub_css_attribute(node); end
end

Loofah::HTML5::WhiteList = Loofah::HTML5::SafeList

module Loofah::LibxmlWorkarounds
  BROKEN_ESCAPING_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  BROKEN_ESCAPING_ATTRIBUTES_QUALIFYING_TAG = ::T.let(nil, ::T.untyped)
end

module Loofah::MetaHelpers
  def self.add_downcased_set_members_to_all_set_constants(mojule); end
end

module Loofah::ScrubBehavior::Node
  def scrub!(scrubber); end
end

module Loofah::ScrubBehavior::NodeSet
  def scrub!(scrubber); end
end

module Loofah::ScrubBehavior
  def self.resolve_scrubber(scrubber); end
end

class Loofah::Scrubber
  def append_attribute(node, attribute, value); end

  def block(); end

  def direction(); end

  def initialize(options=T.unsafe(nil), &block); end

  def scrub(node); end

  def traverse(node); end
  CONTINUE = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

module Loofah::Scrubbers
  MAP = ::T.let(nil, ::T.untyped)
end

class Loofah::Scrubbers::Escape
  def initialize(); end
end

class Loofah::Scrubbers::NewlineBlockElements
  def initialize(); end
end

class Loofah::Scrubbers::NoFollow
  def initialize(); end
end

class Loofah::Scrubbers::NoOpener
  def initialize(); end
end

class Loofah::Scrubbers::Prune
  def initialize(); end
end

class Loofah::Scrubbers::Strip
  def initialize(); end
end

class Loofah::Scrubbers::Unprintable
  def initialize(); end
end

class Loofah::Scrubbers::Whitewash
  def initialize(); end
end

module Loofah::Scrubbers
  def self.scrubber_symbols(); end
end

module Loofah::TextBehavior
  def inner_text(options=T.unsafe(nil)); end

  def text(options=T.unsafe(nil)); end

  def to_str(options=T.unsafe(nil)); end

  def to_text(options=T.unsafe(nil)); end
end

class Loofah::XML::DocumentFragment
  def self.parse(tags); end
end

module Loofah
  def self.document(*args, &block); end

  def self.fragment(*args, &block); end

  def self.remove_extraneous_whitespace(string); end

  def self.scrub_document(string_or_io, method); end

  def self.scrub_fragment(string_or_io, method); end

  def self.scrub_xml_document(string_or_io, method); end

  def self.scrub_xml_fragment(string_or_io, method); end

  def self.xml_document(*args, &block); end

  def self.xml_fragment(*args, &block); end
end

class MIME::Type
  VERSION = ::T.let(nil, ::T.untyped)
end

class MIME::Types
  VERSION = ::T.let(nil, ::T.untyped)
end

module MIME::Types::Columnar
  LOAD_MUTEX = ::T.let(nil, ::T.untyped)
end

module MIME::Types::Data
  PATH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class MIME::Types
  extend ::Enumerable
end

module Mail
  RANDOM_TAG = ::T.let(nil, ::T.untyped)
end

class Mail::Address
  include ::Mail::Utilities
  include ::Mail::Constants
  def ==(other_address); end

  def address(output_type=T.unsafe(nil)); end

  def address=(value); end

  def comments(); end

  def decoded(); end

  def display_name(output_type=T.unsafe(nil)); end

  def display_name=(str); end

  def domain(output_type=T.unsafe(nil)); end

  def encoded(); end

  def format(output_type=T.unsafe(nil)); end

  def group(); end

  def initialize(value=T.unsafe(nil)); end

  def local(output_type=T.unsafe(nil)); end

  def name(); end

  def raw(); end
end

class Mail::Address
  def self.wrap(address); end
end

class Mail::AddressContainer
  def <<(address); end

  def initialize(field, list=T.unsafe(nil)); end
end

class Mail::AddressContainer
end

class Mail::AddressList
  def addresses(); end

  def addresses_grouped_by_group(); end

  def group_names(); end

  def initialize(string); end
end

class Mail::AddressList
end

class Mail::AttachmentsList
  def [](index_value); end

  def []=(name, value); end

  def guess_encoding(); end

  def initialize(parts_list); end

  def inline(); end

  def set_mime_type(filename); end
end

class Mail::AttachmentsList
end

class Mail::BccField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def include_in_headers(); end

  def include_in_headers=(include_in_headers); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::BccField
end

class Mail::Body
  def <<(val); end

  def ==(other); end

  def =~(regexp); end

  def ascii_only?(); end

  def boundary(); end

  def boundary=(val); end

  def charset(); end

  def charset=(val); end

  def decoded(); end

  def default_encoding(); end

  def empty?(); end

  def encoded(transfer_encoding=T.unsafe(nil)); end

  def encoding(val=T.unsafe(nil)); end

  def encoding=(val); end

  def epilogue(); end

  def epilogue=(val); end

  def include?(other); end

  def initialize(string=T.unsafe(nil)); end

  def match(regexp); end

  def multipart?(); end

  def negotiate_best_encoding(message_encoding, allowed_encodings=T.unsafe(nil)); end

  def parts(); end

  def preamble(); end

  def preamble=(val); end

  def raw_source(); end

  def set_sort_order(order); end

  def sort_parts!(); end

  def split!(boundary); end
end

class Mail::Body
end

class Mail::CcField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CcField
end

module Mail::CheckDeliveryParams
end

module Mail::CheckDeliveryParams
  def self.check(mail); end

  def self.check_addr(addr_name, addr); end

  def self.check_from(addr); end

  def self.check_message(message); end

  def self.check_to(addrs); end

  def self.validate_smtp_addr(addr); end
end

class Mail::CommentsField
  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CommentsField
end

module Mail::CommonAddress
  def <<(val); end

  def addresses(); end

  def addrs(); end

  def charset(); end

  def decoded_group_addresses(); end

  def default(); end

  def display_names(); end

  def each(&blk); end

  def encode_if_needed(val); end

  def encoded_group_addresses(); end

  def formatted(); end

  def group_addresses(); end

  def group_names(); end

  def groups(); end

  def parse(val=T.unsafe(nil)); end

  def value=(val); end
end

module Mail::CommonAddress
end

module Mail::CommonDate
  def date_time(); end

  def default(); end

  def parse(val=T.unsafe(nil)); end
end

module Mail::CommonDate
end

module Mail::CommonField
  include ::Mail::Constants
  def default(); end

  def field_length(); end

  def name(); end

  def name=(value); end

  def responsible_for?(val); end

  def to_s(); end

  def value(); end

  def value=(value); end
  FILENAME_RE = ::T.let(nil, ::T.untyped)
end

module Mail::CommonField
end

module Mail::CommonMessageId
  def default(); end

  def element(); end

  def message_id(); end

  def message_ids(); end

  def parse(val=T.unsafe(nil)); end
end

module Mail::CommonMessageId
end

class Mail::Configuration
  include ::Singleton
  def delivery_method(method=T.unsafe(nil), settings=T.unsafe(nil)); end

  def lookup_delivery_method(method); end

  def lookup_retriever_method(method); end

  def param_encode_language(value=T.unsafe(nil)); end

  def retriever_method(method=T.unsafe(nil), settings=T.unsafe(nil)); end
end

class Mail::Configuration
  extend ::Singleton::SingletonClassMethods
end

module Mail::Constants
  ASTERISK = ::T.let(nil, ::T.untyped)
  ATOM_UNSAFE = ::T.let(nil, ::T.untyped)
  B_VALUES = ::T.let(nil, ::T.untyped)
  CAPITAL_M = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR = ::T.let(nil, ::T.untyped)
  CR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CR_ENCODED = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  EQUAL_LF = ::T.let(nil, ::T.untyped)
  FIELD_BODY = ::T.let(nil, ::T.untyped)
  FIELD_LINE = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
  FIELD_PREFIX = ::T.let(nil, ::T.untyped)
  FIELD_SPLIT = ::T.let(nil, ::T.untyped)
  FULL_ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  FWS = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  HEADER_SPLIT = ::T.let(nil, ::T.untyped)
  HYPHEN = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  LF_ENCODED = ::T.let(nil, ::T.untyped)
  NULL_SENDER = ::T.let(nil, ::T.untyped)
  PHRASE_UNSAFE = ::T.let(nil, ::T.untyped)
  QP_SAFE = ::T.let(nil, ::T.untyped)
  QP_UNSAFE = ::T.let(nil, ::T.untyped)
  Q_VALUES = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TOKEN_UNSAFE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  WSP = ::T.let(nil, ::T.untyped)
end

module Mail::Constants
end

class Mail::ContentDescriptionField
  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDescriptionField
end

class Mail::ContentDispositionElement
  def disposition_type(); end

  def initialize(string); end

  def parameters(); end
end

class Mail::ContentDispositionElement
end

class Mail::ContentDispositionField
  def decoded(); end

  def disposition_type(); end

  def element(); end

  def encoded(); end

  def filename(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def parameters(); end

  def parse(val=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDispositionField
end

class Mail::ContentIdField
  def content_id(); end

  def decoded(); end

  def element(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def parse(val=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentIdField
end

class Mail::ContentLocationElement
  def initialize(string); end

  def location(); end

  def to_s(*args); end
end

class Mail::ContentLocationElement
end

class Mail::ContentLocationField
  def decoded(); end

  def element(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def location(); end

  def parse(val=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentLocationField
end

class Mail::ContentTransferEncodingElement
  def encoding(); end

  def initialize(string); end
end

class Mail::ContentTransferEncodingElement
end

class Mail::ContentTransferEncodingField
  def decoded(); end

  def element(); end

  def encoded(); end

  def encoding(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def parse(val=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTransferEncodingField
end

class Mail::ContentTypeElement
  def initialize(string); end

  def main_type(); end

  def parameters(); end

  def sub_type(); end
end

class Mail::ContentTypeElement
end

class Mail::ContentTypeField
  def attempt_to_clean(); end

  def content_type(); end

  def decoded(); end

  def element(); end

  def encoded(); end

  def filename(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def main_type(); end

  def parameters(); end

  def parse(val=T.unsafe(nil)); end

  def string(); end

  def stringify(params); end

  def sub_type(); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTypeField
  def self.generate_boundary(); end

  def self.with_boundary(type); end
end

class Mail::DateField
  include ::Mail::CommonDate
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateField
end

class Mail::DateTimeElement
  def date_string(); end

  def initialize(string); end

  def time_string(); end
end

class Mail::DateTimeElement
end

module Mail::Encodings
  include ::Mail::Constants
end

class Mail::Encodings::Base64
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Base64
end

class Mail::Encodings::Binary
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Binary
end

class Mail::Encodings::EightBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::EightBit
end

class Mail::Encodings::Identity
end

class Mail::Encodings::Identity
  def self.decode(str); end

  def self.encode(str); end
end

class Mail::Encodings::QuotedPrintable
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::QuotedPrintable
end

class Mail::Encodings::SevenBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::SevenBit
end

class Mail::Encodings::TransferEncoding
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::TransferEncoding
  def self.can_encode?(enc); end

  def self.can_transport?(enc); end

  def self.compatible_input?(str); end

  def self.cost(str); end

  def self.lowest_cost(str, encodings); end

  def self.negotiate(message_encoding, source_encoding, str, allowed_encodings=T.unsafe(nil)); end

  def self.renegotiate(message_encoding, source_encoding, str, allowed_encodings=T.unsafe(nil)); end
end

class Mail::Encodings::UnixToUnix
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::UnixToUnix
  def self.decode(str); end

  def self.encode(str); end
end

module Mail::Encodings
  extend ::Mail::Utilities
  extend ::Mail::Constants
  def self.address_encode(address, charset=T.unsafe(nil)); end

  def self.b_value_decode(str); end

  def self.b_value_encode(string, encoding=T.unsafe(nil)); end

  def self.collapse_adjacent_encodings(str); end

  def self.decode_encode(str, output_type); end

  def self.defined?(name); end

  def self.each_base64_chunk_byterange(str, max_bytesize_per_base64_chunk, &block); end

  def self.each_chunk_byterange(str, max_bytesize_per_chunk); end

  def self.encode_non_usascii(address, charset); end

  def self.find_encoding(str); end

  def self.get_all(); end

  def self.get_encoding(name); end

  def self.get_name(name); end

  def self.param_decode(str, encoding); end

  def self.param_encode(str); end

  def self.q_value_decode(str); end

  def self.q_value_encode(encoded_str, encoding=T.unsafe(nil)); end

  def self.register(name, cls); end

  def self.transcode_charset(str, from_charset, to_charset=T.unsafe(nil)); end

  def self.unquote_and_convert_to(str, to_encoding); end

  def self.value_decode(str); end

  def self.value_encoding_from_string(str); end

  def self.with_ascii_kcode(); end
end

class Mail::Envelope
  def date(); end

  def element(); end

  def from(); end

  def initialize(*args); end
end

class Mail::Envelope
end

class Mail::EnvelopeFromElement
  def address(); end

  def date_time(); end

  def formatted_date_time(); end

  def initialize(string); end
end

class Mail::EnvelopeFromElement
end

class Mail::Exim
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::Exim
end

class Mail::Field
  include ::Mail::Utilities
  include ::Mail::Constants
  include ::Comparable
  def ==(other); end

  def field(); end

  def field=(value); end

  def field_order_id(); end

  def initialize(name, value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def method_missing(name, *args, &block); end

  def name(); end

  def responsible_for?(val); end

  def same(other); end

  def unparsed_value(); end

  def update(name, value); end

  def value(); end

  def value=(val); end
  FIELDS_MAP = ::T.let(nil, ::T.untyped)
  FIELD_NAME_MAP = ::T.let(nil, ::T.untyped)
  FIELD_ORDER = ::T.let(nil, ::T.untyped)
  FIELD_ORDER_LOOKUP = ::T.let(nil, ::T.untyped)
  KNOWN_FIELDS = ::T.let(nil, ::T.untyped)
  STRUCTURED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::Field::FieldError
end

class Mail::Field::FieldError
end

class Mail::Field::IncompleteParseError
  def initialize(element, original_text, unparsed_index); end
end

class Mail::Field::IncompleteParseError
end

class Mail::Field::NilParseError
  def initialize(element); end
end

class Mail::Field::NilParseError
end

class Mail::Field::ParseError
  def element(); end

  def element=(element); end

  def initialize(element, value, reason); end

  def reason(); end

  def reason=(reason); end

  def value(); end

  def value=(value); end
end

class Mail::Field::ParseError
end

class Mail::Field::SyntaxError
end

class Mail::Field::SyntaxError
end

class Mail::Field
  def self.parse(field, charset=T.unsafe(nil)); end

  def self.split(raw_field); end
end

class Mail::FieldList
  def <<(new_field); end
end

class Mail::FieldList
end

class Mail::FileDelivery
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::FileDelivery
end

class Mail::FromField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::FromField
end

class Mail::Header
  include ::Mail::Utilities
  include ::Mail::Constants
  include ::Enumerable
  def [](name); end

  def []=(name, value); end

  def charset(); end

  def charset=(val); end

  def decoded(); end

  def encoded(); end

  def errors(); end

  def field_summary(); end

  def fields(); end

  def fields=(unfolded_fields); end

  def has_content_id?(); end

  def has_date?(); end

  def has_message_id?(); end

  def has_mime_version?(); end

  def initialize(header_text=T.unsafe(nil), charset=T.unsafe(nil)); end

  def raw_source(); end
  LIMITED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::Header
  def self.maximum_amount(); end

  def self.maximum_amount=(value); end
end

class Mail::IMAP
  def connection(&block); end

  def delete_all(mailbox=T.unsafe(nil)); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::IMAP
end

class Mail::InReplyToField
  include ::Mail::CommonMessageId
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::InReplyToField
end

class Mail::IndifferentHash
  def []=(key, value); end

  def convert_key(key); end

  def convert_value(value); end

  def default(key=T.unsafe(nil)); end

  def delete(key); end

  def fetch(key, *extras); end

  def has_key?(key); end

  def include?(key); end

  def initialize(constructor=T.unsafe(nil)); end

  def key?(key); end

  def member?(key); end

  def merge(hash); end

  def merge!(other_hash); end

  def regular_update(*arg); end

  def regular_writer(arg, arg1); end

  def store(key, value); end

  def update(other_hash); end

  def values_at(*indices); end
end

class Mail::IndifferentHash
  def self.new_from_hash_copying_default(hash); end
end

class Mail::KeywordsField
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def keywords(); end

  def parse(val=T.unsafe(nil)); end

  def phrase_list(); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::KeywordsField
end

class Mail::LoggerDelivery
  include ::Mail::CheckDeliveryParams
  def deliver!(mail); end

  def initialize(settings); end

  def logger(); end

  def settings(); end

  def severity(); end
end

class Mail::LoggerDelivery
end

module Mail::Matchers
  def an_attachment_with_filename(filename); end

  def any_attachment(); end

  def have_sent_email(); end
end

class Mail::Matchers::AnyAttachmentMatcher
  def ===(other); end
end

class Mail::Matchers::AnyAttachmentMatcher
end

class Mail::Matchers::AttachmentFilenameMatcher
  def ===(other); end

  def filename(); end

  def initialize(filename); end
end

class Mail::Matchers::AttachmentFilenameMatcher
end

class Mail::Matchers::HasSentEmailMatcher
  def bcc(recipient_or_list); end

  def cc(recipient_or_list); end

  def description(); end

  def dump_deliveries(); end

  def explain_expectations(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def filter_matched_deliveries(deliveries); end

  def from(sender); end

  def initialize(_context); end

  def matches?(subject); end

  def matches_on_attachments?(delivery); end

  def matches_on_blind_copy_recipients?(delivery); end

  def matches_on_body?(delivery); end

  def matches_on_body_matcher?(delivery); end

  def matches_on_copy_recipients?(delivery); end

  def matches_on_having_attachments?(delivery); end

  def matches_on_html_part_body?(delivery); end

  def matches_on_recipients?(delivery); end

  def matches_on_sender?(delivery); end

  def matches_on_subject?(delivery); end

  def matches_on_subject_matcher?(delivery); end

  def matches_on_text_part_body?(delivery); end

  def matching_body(body_matcher); end

  def matching_subject(subject_matcher); end

  def to(recipient_or_list); end

  def with_any_attachments(); end

  def with_attachments(attachments); end

  def with_body(body); end

  def with_html(body); end

  def with_no_attachments(); end

  def with_subject(subject); end

  def with_text(body); end
end

class Mail::Matchers::HasSentEmailMatcher
end

module Mail::Matchers
end

class Mail::Message
  include ::Mail::Utilities
  include ::Mail::Constants
  def ==(other); end

  def [](name); end

  def []=(name, value); end

  def action(); end

  def add_charset(); end

  def add_content_transfer_encoding(); end

  def add_content_type(); end

  def add_date(date_val=T.unsafe(nil)); end

  def add_file(values); end

  def add_message_id(msg_id_val=T.unsafe(nil)); end

  def add_mime_version(ver_val=T.unsafe(nil)); end

  def add_part(part); end

  def add_transfer_encoding(); end

  def all_parts(); end

  def attachment(); end

  def attachment?(); end

  def attachments(); end

  def bcc(val=T.unsafe(nil)); end

  def bcc=(val); end

  def bcc_addresses(); end

  def bcc_addrs(); end

  def body(value=T.unsafe(nil)); end

  def body=(value); end

  def body_encoding(value=T.unsafe(nil)); end

  def body_encoding=(value); end

  def bounced?(); end

  def boundary(); end

  def cc(val=T.unsafe(nil)); end

  def cc=(val); end

  def cc_addresses(); end

  def cc_addrs(); end

  def charset(); end

  def charset=(value); end

  def comments(val=T.unsafe(nil)); end

  def comments=(val); end

  def content_description(val=T.unsafe(nil)); end

  def content_description=(val); end

  def content_disposition(val=T.unsafe(nil)); end

  def content_disposition=(val); end

  def content_id(val=T.unsafe(nil)); end

  def content_id=(val); end

  def content_location(val=T.unsafe(nil)); end

  def content_location=(val); end

  def content_transfer_encoding(val=T.unsafe(nil)); end

  def content_transfer_encoding=(val); end

  def content_type(val=T.unsafe(nil)); end

  def content_type=(val); end

  def content_type_parameters(); end

  def convert_to_multipart(); end

  def date(val=T.unsafe(nil)); end

  def date=(val); end

  def decode_body(); end

  def decoded(); end

  def default(sym, val=T.unsafe(nil)); end

  def deliver(); end

  def deliver!(); end

  def delivery_handler(); end

  def delivery_handler=(delivery_handler); end

  def delivery_method(method=T.unsafe(nil), settings=T.unsafe(nil)); end

  def delivery_status_part(); end

  def delivery_status_report?(); end

  def destinations(); end

  def diagnostic_code(); end

  def encode!(); end

  def encoded(); end

  def envelope_date(); end

  def envelope_from(); end

  def error_status(); end

  def errors(); end

  def filename(); end

  def final_recipient(); end

  def find_first_mime_type(mt); end

  def from(val=T.unsafe(nil)); end

  def from=(val); end

  def from_address(); end

  def from_addrs(); end

  def has_attachments?(); end

  def has_charset?(); end

  def has_content_transfer_encoding?(); end

  def has_content_type?(); end

  def has_date?(); end

  def has_message_id?(); end

  def has_mime_version?(); end

  def has_transfer_encoding?(); end

  def header(value=T.unsafe(nil)); end

  def header=(value); end

  def header_fields(); end

  def headers(hash=T.unsafe(nil)); end

  def html_part(&block); end

  def html_part=(msg); end

  def in_reply_to(val=T.unsafe(nil)); end

  def in_reply_to=(val); end

  def inform_interceptors(); end

  def inform_observers(); end

  def initialize(*args, &block); end

  def is_marked_for_delete?(); end

  def keywords(val=T.unsafe(nil)); end

  def keywords=(val); end

  def main_type(); end

  def mark_for_delete=(value=T.unsafe(nil)); end

  def message_content_type(); end

  def message_id(val=T.unsafe(nil)); end

  def message_id=(val); end

  def method_missing(name, *args, &block); end

  def mime_parameters(); end

  def mime_type(); end

  def mime_version(val=T.unsafe(nil)); end

  def mime_version=(val); end

  def multipart?(); end

  def multipart_report?(); end

  def part(params=T.unsafe(nil)); end

  def parts(); end

  def perform_deliveries(); end

  def perform_deliveries=(perform_deliveries); end

  def raise_delivery_errors(); end

  def raise_delivery_errors=(raise_delivery_errors); end

  def raw_envelope(); end

  def raw_source(); end

  def read(); end

  def ready_to_send!(); end

  def received(val=T.unsafe(nil)); end

  def received=(val); end

  def recipients(); end

  def recipients_addresses(); end

  def references(val=T.unsafe(nil)); end

  def references=(val); end

  def register_for_delivery_notification(observer); end

  def remote_mta(); end

  def reply(*args, &block); end

  def reply_to(val=T.unsafe(nil)); end

  def reply_to=(val); end

  def resent_bcc(val=T.unsafe(nil)); end

  def resent_bcc=(val); end

  def resent_cc(val=T.unsafe(nil)); end

  def resent_cc=(val); end

  def resent_date(val=T.unsafe(nil)); end

  def resent_date=(val); end

  def resent_from(val=T.unsafe(nil)); end

  def resent_from=(val); end

  def resent_message_id(val=T.unsafe(nil)); end

  def resent_message_id=(val); end

  def resent_sender(val=T.unsafe(nil)); end

  def resent_sender=(val); end

  def resent_to(val=T.unsafe(nil)); end

  def resent_to=(val); end

  def retryable?(); end

  def return_path(val=T.unsafe(nil)); end

  def return_path=(val); end

  def sender(val=T.unsafe(nil)); end

  def sender=(val); end

  def set_envelope(val); end

  def skip_deletion(); end

  def smtp_envelope_from(val=T.unsafe(nil)); end

  def smtp_envelope_from=(val); end

  def smtp_envelope_to(val=T.unsafe(nil)); end

  def smtp_envelope_to=(val); end

  def sub_type(); end

  def subject(val=T.unsafe(nil)); end

  def subject=(val); end

  def text?(); end

  def text_part(&block); end

  def text_part=(msg); end

  def to(val=T.unsafe(nil)); end

  def to=(val); end

  def to_addresses(); end

  def to_addrs(); end

  def to_yaml(opts=T.unsafe(nil)); end

  def transfer_encoding(); end

  def transport_encoding(val=T.unsafe(nil)); end

  def transport_encoding=(val); end

  def without_attachments!(); end

  def x_original_to_addresses(); end
  HEADER_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Mail::Message
  def self.default_charset(); end

  def self.default_charset=(charset); end

  def self.from_hash(hash); end

  def self.from_yaml(str); end
end

class Mail::MessageIdField
  include ::Mail::CommonMessageId
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdField
end

class Mail::MessageIdsElement
  def initialize(string); end

  def message_id(); end

  def message_ids(); end
end

class Mail::MessageIdsElement
end

class Mail::MimeVersionElement
  def initialize(string); end

  def major(); end

  def minor(); end
end

class Mail::MimeVersionElement
end

class Mail::MimeVersionField
  def decoded(); end

  def element(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def major(); end

  def minor(); end

  def parse(val=T.unsafe(nil)); end

  def version(); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::MimeVersionField
end

module Mail::Multibyte
  VALID_CHARACTER = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Chars
  include ::Comparable
  def =~(other); end

  def [](*args); end

  def []=(*args); end

  def acts_like_string?(); end

  def capitalize(); end

  def capitalize!(*args); end

  def chars(string); end

  def compose(); end

  def decompose(); end

  def downcase(); end

  def downcase!(*args); end

  def g_length(); end

  def initialize(string); end

  def justify(integer, way, padstr=T.unsafe(nil)); end

  def limit(limit); end

  def method_missing(method, *args, &block); end

  def normalize(form=T.unsafe(nil)); end

  def padding(padsize, padstr=T.unsafe(nil)); end

  def respond_to?(method, include_private=T.unsafe(nil)); end

  def reverse(); end

  def reverse!(*args); end

  def slice(*args); end

  def slice!(*args); end

  def split(*args); end

  def tidy_bytes(force=T.unsafe(nil)); end

  def tidy_bytes!(*args); end

  def titlecase(); end

  def titleize(); end

  def to_str(); end

  def translate_offset(byte_offset); end

  def upcase(); end

  def upcase!(*args); end

  def wrapped_string(); end
end

class Mail::Multibyte::Chars
  def self.consumes?(string); end
end

class Mail::Multibyte::EncodingError
end

class Mail::Multibyte::EncodingError
end

module Mail::Multibyte::Unicode
  def apply_mapping(string, mapping); end

  def compose_codepoints(codepoints); end

  def decompose_codepoints(type, codepoints); end

  def default_normalization_form(); end

  def default_normalization_form=(default_normalization_form); end

  def g_pack(unpacked); end

  def g_unpack(string); end

  def in_char_class?(codepoint, classes); end

  def normalize(string, form=T.unsafe(nil)); end

  def reorder_characters(codepoints); end

  def tidy_bytes(string, force=T.unsafe(nil)); end

  def u_unpack(string); end
  HANGUL_JAMO_FIRST = ::T.let(nil, ::T.untyped)
  HANGUL_JAMO_LAST = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  LEADERS_AND_TRAILERS = ::T.let(nil, ::T.untyped)
  LEADERS_PAT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  TRAILERS_PAT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Unicode::Codepoint
  def code(); end

  def code=(code); end

  def combining_class(); end

  def combining_class=(combining_class); end

  def decomp_mapping(); end

  def decomp_mapping=(decomp_mapping); end

  def decomp_type(); end

  def decomp_type=(decomp_type); end

  def lowercase_mapping(); end

  def lowercase_mapping=(lowercase_mapping); end

  def swapcase_mapping(); end

  def uppercase_mapping(); end

  def uppercase_mapping=(uppercase_mapping); end
end

class Mail::Multibyte::Unicode::Codepoint
end

class Mail::Multibyte::Unicode::UnicodeDatabase
  def boundary(); end

  def boundary=(boundary); end

  def codepoints(); end

  def codepoints=(codepoints); end

  def composition_exclusion(); end

  def composition_exclusion=(composition_exclusion); end

  def composition_map(); end

  def composition_map=(composition_map); end

  def cp1252(); end

  def cp1252=(cp1252); end

  def load(); end
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Unicode::UnicodeDatabase
  def self.dirname(); end

  def self.filename(); end
end

module Mail::Multibyte::Unicode
  extend ::Mail::Multibyte::Unicode
  def self.codepoints_to_pattern(array_of_codepoints); end
end

module Mail::Multibyte
  def self.clean(string); end

  def self.mb_chars(str); end

  def self.proxy_class(); end

  def self.proxy_class=(proxy_class); end

  def self.valid_character(); end

  def self.verify(string); end

  def self.verify!(string); end
end

class Mail::OptionalField
end

class Mail::OptionalField
end

class Mail::POP3
  def connection(&block); end

  def delete_all(); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::POP3
end

class Mail::ParameterHash
  include ::Mail::Utilities
  include ::Mail::Constants
  def [](key_name); end

  def decoded(); end

  def encoded(); end
end

class Mail::ParameterHash
end

module Mail::ParserTools
  def chars(data, from_bytes, to_bytes); end
end

module Mail::ParserTools
end

module Mail::Parsers
end

module Mail::Parsers::AddressListsParser
end

class Mail::Parsers::AddressListsParser::AddressListStruct
  def addresses(); end

  def addresses=(_); end

  def error(); end

  def error=(_); end

  def group_names(); end

  def group_names=(_); end
end

class Mail::Parsers::AddressListsParser::AddressListStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Mail::Parsers::AddressListsParser::AddressStruct
  def comments(); end

  def comments=(_); end

  def display_name(); end

  def display_name=(_); end

  def domain(); end

  def domain=(_); end

  def error(); end

  def error=(_); end

  def group(); end

  def group=(_); end

  def local(); end

  def local=(_); end

  def obs_domain_list(); end

  def obs_domain_list=(_); end

  def raw(); end

  def raw=(_); end
end

class Mail::Parsers::AddressListsParser::AddressStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::AddressListsParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentDispositionParser
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def disposition_type(); end

  def disposition_type=(_); end

  def error(); end

  def error=(_); end

  def parameters(); end

  def parameters=(_); end
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentDispositionParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentLocationParser
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def error(); end

  def error=(_); end

  def location(); end

  def location=(_); end
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentLocationParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTransferEncodingParser
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def encoding(); end

  def encoding=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentTransferEncodingParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTypeParser
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def error(); end

  def error=(_); end

  def main_type(); end

  def main_type=(_); end

  def parameters(); end

  def parameters=(_); end

  def sub_type(); end

  def sub_type=(_); end
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentTypeParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::DateTimeParser
end

class Mail::Parsers::DateTimeParser::DateTimeStruct
  def date_string(); end

  def date_string=(_); end

  def error(); end

  def error=(_); end

  def time_string(); end

  def time_string=(_); end
end

class Mail::Parsers::DateTimeParser::DateTimeStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::DateTimeParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::EnvelopeFromParser
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def address(); end

  def address=(_); end

  def ctime_date(); end

  def ctime_date=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::EnvelopeFromParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MessageIdsParser
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def error(); end

  def error=(_); end

  def message_ids(); end

  def message_ids=(_); end
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::MessageIdsParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MimeVersionParser
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def error(); end

  def error=(_); end

  def major(); end

  def major=(_); end

  def minor(); end

  def minor=(_); end
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::MimeVersionParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

class Mail::Parsers::PhraseListsParser
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def error(); end

  def error=(_); end

  def phrases(); end

  def phrases=(_); end
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Mail::Parsers::PhraseListsParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ReceivedParser
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def date(); end

  def date=(_); end

  def error(); end

  def error=(_); end

  def info(); end

  def info=(_); end

  def time(); end

  def time=(_); end
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ReceivedParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers
end

class Mail::Part
  def add_content_id(content_id_val=T.unsafe(nil)); end

  def cid(); end

  def delivery_status_data(); end

  def delivery_status_report_part?(); end

  def has_content_id?(); end

  def inline?(); end

  def inline_content_id(); end

  def url(); end
end

class Mail::Part
end

class Mail::PartsList
  def attachments(); end

  def collect(); end

  def collect!(); end

  def encode_with(coder); end

  def initialize(*args); end

  def map(); end

  def map!(); end

  def parts(); end

  def sort(); end

  def sort!(order); end

  def to_yaml(options=T.unsafe(nil)); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Mail::PartsList
end

class Mail::PhraseList
  def initialize(string); end

  def phrases(); end
end

class Mail::PhraseList
end

class Mail::ReceivedElement
  include ::Mail::Utilities
  include ::Mail::Constants
  def date_time(); end

  def info(); end

  def initialize(string); end

  def to_s(*args); end
end

class Mail::ReceivedElement
end

class Mail::ReceivedField
  def date_time(); end

  def decoded(); end

  def element(); end

  def encoded(); end

  def formatted_date(); end

  def info(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end

  def parse(val=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReceivedField
end

class Mail::ReferencesField
  include ::Mail::CommonMessageId
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReferencesField
end

class Mail::ReplyToField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReplyToField
end

class Mail::ResentBccField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentBccField
end

class Mail::ResentCcField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentCcField
end

class Mail::ResentDateField
  include ::Mail::CommonDate
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentDateField
end

class Mail::ResentFromField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentFromField
end

class Mail::ResentMessageIdField
  include ::Mail::CommonMessageId
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentMessageIdField
end

class Mail::ResentSenderField
  include ::Mail::CommonAddress
  def address(); end

  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentSenderField
end

class Mail::ResentToField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentToField
end

class Mail::Retriever
  def all(options=T.unsafe(nil), &block); end

  def find_and_delete(options=T.unsafe(nil), &block); end

  def first(options=T.unsafe(nil), &block); end

  def last(options=T.unsafe(nil), &block); end
end

class Mail::Retriever
end

class Mail::ReturnPathField
  include ::Mail::CommonAddress
  def address(); end

  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReturnPathField
end

class Mail::Ruby19
end

class Mail::Ruby19::BestEffortCharsetEncoder
  def encode(string, charset); end
end

class Mail::Ruby19::BestEffortCharsetEncoder
end

class Mail::Ruby19::StrictCharsetEncoder
  def encode(string, charset); end
end

class Mail::Ruby19::StrictCharsetEncoder
end

class Mail::Ruby19
  def self.b_value_decode(str); end

  def self.b_value_encode(str, encoding=T.unsafe(nil)); end

  def self.bracket(str); end

  def self.charset_encoder(); end

  def self.charset_encoder=(charset_encoder); end

  def self.decode_base64(str); end

  def self.decode_utf7(utf7); end

  def self.encode_base64(str); end

  def self.encode_utf7(string); end

  def self.escape_bracket(str); end

  def self.escape_paren(str); end

  def self.get_constant(klass, string); end

  def self.has_constant?(klass, string); end

  def self.param_decode(str, encoding); end

  def self.param_encode(str); end

  def self.paren(str); end

  def self.pick_encoding(charset); end

  def self.q_value_decode(str); end

  def self.q_value_encode(str, encoding=T.unsafe(nil)); end

  def self.string_byteslice(str, *args); end

  def self.transcode_charset(str, from_encoding, to_encoding=T.unsafe(nil)); end

  def self.uri_parser(); end
end

Mail::RubyVer = Mail::Ruby19

class Mail::SMTP
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SMTP
end

class Mail::SMTPConnection
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end

  def smtp(); end

  def smtp=(smtp); end
end

class Mail::SMTPConnection
end

class Mail::SenderField
  include ::Mail::CommonAddress
  def address(); end

  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::SenderField
end

class Mail::Sendmail
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::Sendmail
  def self.call(path, arguments, destinations, encoded_message); end

  def self.popen(command, &block); end

  def self.shellquote(address); end
end

class Mail::StructuredField
  include ::Mail::CommonField
  include ::Mail::Utilities
  include ::Mail::Constants
  def charset(); end

  def charset=(val); end

  def errors(); end

  def initialize(name=T.unsafe(nil), value=T.unsafe(nil), charset=T.unsafe(nil)); end
end

class Mail::StructuredField
end

class Mail::SubjectField
  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::SubjectField
end

class Mail::TestMailer
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::TestMailer
  def self.deliveries(); end

  def self.deliveries=(val); end
end

class Mail::TestRetriever
  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end
end

class Mail::TestRetriever
  def self.emails(); end

  def self.emails=(val); end
end

class Mail::ToField
  include ::Mail::CommonAddress
  def decoded(); end

  def encoded(); end

  def initialize(value=T.unsafe(nil), charset=T.unsafe(nil)); end
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ToField
end

class Mail::UnknownEncodingType
end

class Mail::UnknownEncodingType
end

class Mail::UnstructuredField
  include ::Mail::CommonField
  include ::Mail::Utilities
  include ::Mail::Constants
  def charset(); end

  def charset=(charset); end

  def decoded(); end

  def encoded(); end

  def errors(); end

  def initialize(name, value, charset=T.unsafe(nil)); end

  def parse(); end
end

class Mail::UnstructuredField
end

module Mail::Utilities
  include ::Mail::Constants
  def atom_safe?(str); end

  def bracket(str); end

  def capitalize_field(str); end

  def constantize(str); end

  def dasherize(str); end

  def dquote(str); end

  def escape_paren(str); end

  def map_lines(str, &block); end

  def map_with_index(enum, &block); end

  def match_to_s(obj1, obj2); end

  def paren(str); end

  def quote_atom(str); end

  def quote_phrase(str); end

  def quote_token(str); end

  def token_safe?(str); end

  def unbracket(str); end

  def underscoreize(str); end

  def unparen(str); end

  def uri_escape(str); end

  def uri_parser(); end

  def uri_unescape(str); end
  CRLF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  TO_CRLF_REGEX = ::T.let(nil, ::T.untyped)
end

module Mail::Utilities
  def self.binary_unsafe_to_crlf(string); end

  def self.binary_unsafe_to_lf(string); end

  def self.blank?(value); end

  def self.safe_for_line_ending_conversion?(string); end

  def self.to_crlf(string); end

  def self.to_lf(string); end

  def self.unescape(str); end

  def self.unquote(str); end
end

module Mail::VERSION
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module Mail::VERSION
  def self.version(); end
end

module Mail
  def self.all(*args, &block); end

  def self.connection(&block); end

  def self.defaults(&block); end

  def self.delete_all(*args, &block); end

  def self.deliver(*args, &block); end

  def self.delivery_method(); end

  def self.eager_autoload!(); end

  def self.find(*args, &block); end

  def self.find_and_delete(*args, &block); end

  def self.first(*args, &block); end

  def self.from_source(source); end

  def self.inform_interceptors(mail); end

  def self.inform_observers(mail); end

  def self.last(*args, &block); end

  def self.new(*args, &block); end

  def self.random_tag(); end

  def self.read(filename); end

  def self.read_from_string(mail_as_string); end

  def self.register_autoload(name, path); end

  def self.register_interceptor(interceptor); end

  def self.register_observer(observer); end

  def self.retriever_method(); end

  def self.something_random(); end

  def self.uniq(); end

  def self.unregister_interceptor(interceptor); end

  def self.unregister_observer(observer); end
end

module Marcel
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  MAGIC = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  BINARY = ::T.let(nil, ::T.untyped)
end

class MatchData
  def match(arg); end

  def match_length(arg); end
end

module Memoist
  VERSION = ::T.let(nil, ::T.untyped)
end

class MessageMock
  def header(); end

  def http_version=(value); end

  def initialize(headers); end
end

module MessagePack::Time
  Packer = ::T.let(nil, ::T.untyped)
  TIME_AT_3_AVAILABLE = ::T.let(nil, ::T.untyped)
  Unpacker = ::T.let(nil, ::T.untyped)
end

class MessagePack::Timestamp
  TIMESTAMP32_MAX_SEC = ::T.let(nil, ::T.untyped)
  TIMESTAMP64_MAX_SEC = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

class Method
  def private?(); end

  def protected?(); end

  def public?(); end
end

module MethodSource
  VERSION = ::T.let(nil, ::T.untyped)
end

module MethodSource::CodeHelpers::IncompleteExpression
  GENERIC_REGEXPS = ::T.let(nil, ::T.untyped)
  RBX_ONLY_REGEXPS = ::T.let(nil, ::T.untyped)
end

module Mime
  ALL = ::T.let(nil, ::T.untyped)
  EXTENSION_LOOKUP = ::T.let(nil, ::T.untyped)
  LOOKUP = ::T.let(nil, ::T.untyped)
  SET = ::T.let(nil, ::T.untyped)
end

class Mime::AllType
  include ::Singleton
  def initialize(); end
end

class Mime::AllType
  extend ::Singleton::SingletonClassMethods
end

class Mime::Mimes
  include ::Enumerable
  def <<(type); end

  def delete_if(); end

  def each(&block); end

  def symbols(); end
end

class Mime::NullType
  include ::Singleton
  def ref(); end
end

class Mime::NullType
  extend ::Singleton::SingletonClassMethods
end

class Mime::Type
  def ==(mime_type); end

  def ===(list); end

  def =~(mime_type); end

  def all?(); end

  def eql?(other); end

  def html?(); end

  def initialize(string, symbol=T.unsafe(nil), synonyms=T.unsafe(nil)); end

  def match?(mime_type); end

  def ref(); end

  def string(); end

  def symbol(); end

  def synonyms(); end

  def to_str(); end

  def to_sym(); end
  MIME_NAME = ::T.let(nil, ::T.untyped)
  MIME_PARAMETER = ::T.let(nil, ::T.untyped)
  MIME_PARAMETER_VALUE = ::T.let(nil, ::T.untyped)
  MIME_REGEXP = ::T.let(nil, ::T.untyped)
end

class Mime::Type::AcceptItem
  def index(); end

  def index=(index); end

  def initialize(index, name, q=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def q(); end

  def q=(q); end
end

class Mime::Type::AcceptItem
end

class Mime::Type::AcceptList
end

class Mime::Type::AcceptList
  def self.find_item_by_name(array, name); end

  def self.sort!(list); end
end

class Mime::Type::InvalidMimeType
end

class Mime::Type::InvalidMimeType
end

class Mime::Type
  def self.lookup(string); end

  def self.lookup_by_extension(extension); end

  def self.parse(accept_header); end

  def self.parse_data_with_trailing_star(type); end

  def self.parse_trailing_star(accept_header); end

  def self.register(string, symbol, mime_type_synonyms=T.unsafe(nil), extension_synonyms=T.unsafe(nil), skip_lookup=T.unsafe(nil)); end

  def self.register_alias(string, symbol, extension_synonyms=T.unsafe(nil)); end

  def self.register_callback(&block); end

  def self.unregister(symbol); end
end

module Mime
  def self.[](type); end

  def self.fetch(type, &block); end
end

module MiniMime
  VERSION = ::T.let(nil, ::T.untyped)
end

module MiniMime::Configuration
  def self.content_type_db_path(); end

  def self.content_type_db_path=(content_type_db_path); end

  def self.ext_db_path(); end

  def self.ext_db_path=(ext_db_path); end
end

class MiniMime::Db
  def lookup_by_content_type(content_type); end

  def lookup_by_extension(extension); end
  LOCK = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db::Cache
  def []=(key, val); end

  def fetch(key, &blk); end

  def initialize(size); end
end

class MiniMime::Db::RandomAccessDb
  def initialize(path, sort_order); end

  def lookup(val); end

  def lookup_uncached(val); end

  def resolve(row); end
  MAX_CACHED = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db
  def self.lookup_by_content_type(content_type); end

  def self.lookup_by_extension(extension); end

  def self.lookup_by_filename(filename); end
end

class MiniMime::Info
  def [](idx); end

  def binary?(); end

  def content_type(); end

  def content_type=(content_type); end

  def encoding(); end

  def encoding=(encoding); end

  def extension(); end

  def extension=(extension); end

  def initialize(buffer); end
  BINARY_ENCODINGS = ::T.let(nil, ::T.untyped)
end

module MiniMime
  def self.lookup_by_content_type(mime); end

  def self.lookup_by_extension(extension); end

  def self.lookup_by_filename(filename); end
end

MiniTest = Minitest

module Minitest
  ENCS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Minitest::AbstractReporter
  def lock(); end

  def locked?(); end

  def passed?(); end

  def prerecord(klass, name); end

  def record(result); end

  def report(); end

  def start(); end

  def synchronize(&block); end

  def try_lock(); end

  def unlock(); end
end

class Minitest::Assertion
  def error(); end

  def location(); end

  def result_code(); end

  def result_label(); end
end

module Minitest::Assertions
  def _synchronize(); end

  def assert_in_delta(exp, act, delta=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_in_epsilon(exp, act, epsilon=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_instance_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_kind_of(cls, obj, msg=T.unsafe(nil)); end

  def assert_match(matcher, obj, msg=T.unsafe(nil)); end

  def assert_operator(o1, op, o2=T.unsafe(nil), msg=T.unsafe(nil)); end

  def assert_output(stdout=T.unsafe(nil), stderr=T.unsafe(nil)); end

  def assert_path_exists(path, msg=T.unsafe(nil)); end

  def assert_predicate(o1, op, msg=T.unsafe(nil)); end

  def assert_respond_to(obj, meth, msg=T.unsafe(nil)); end

  def assert_same(exp, act, msg=T.unsafe(nil)); end

  def assert_send(send_ary, m=T.unsafe(nil)); end

  def assert_silent(); end

  def assert_throws(sym, msg=T.unsafe(nil)); end

  def capture_io(); end

  def capture_subprocess_io(); end

  def diff(exp, act); end

  def exception_details(e, msg); end

  def fail_after(y, m, d, msg); end

  def flunk(msg=T.unsafe(nil)); end

  def message(msg=T.unsafe(nil), ending=T.unsafe(nil), &default); end

  def mu_pp(obj); end

  def mu_pp_for_diff(obj); end

  def pass(_msg=T.unsafe(nil)); end

  def refute_in_delta(exp, act, delta=T.unsafe(nil), msg=T.unsafe(nil)); end

  def refute_in_epsilon(a, b, epsilon=T.unsafe(nil), msg=T.unsafe(nil)); end

  def refute_instance_of(cls, obj, msg=T.unsafe(nil)); end

  def refute_kind_of(cls, obj, msg=T.unsafe(nil)); end

  def refute_match(matcher, obj, msg=T.unsafe(nil)); end

  def refute_operator(o1, op, o2=T.unsafe(nil), msg=T.unsafe(nil)); end

  def refute_path_exists(path, msg=T.unsafe(nil)); end

  def refute_predicate(o1, op, msg=T.unsafe(nil)); end

  def refute_respond_to(obj, meth, msg=T.unsafe(nil)); end

  def refute_same(exp, act, msg=T.unsafe(nil)); end

  def skip(msg=T.unsafe(nil), bt=T.unsafe(nil)); end

  def skip_until(y, m, d, msg); end

  def skipped?(); end

  def things_to_diff(exp, act); end
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  def self.diff(); end

  def self.diff=(o); end
end

class Minitest::BacktraceFilter
  def filter(bt); end
  MT_RE = ::T.let(nil, ::T.untyped)
end

class Minitest::CompositeReporter
  def <<(reporter); end

  def initialize(*reporters); end

  def io(); end

  def reporters(); end

  def reporters=(reporters); end
end

module Minitest::Guard
  def jruby?(platform=T.unsafe(nil)); end

  def maglev?(platform=T.unsafe(nil)); end

  def mri?(platform=T.unsafe(nil)); end

  def osx?(platform=T.unsafe(nil)); end

  def rubinius?(platform=T.unsafe(nil)); end

  def windows?(platform=T.unsafe(nil)); end
end

class Minitest::Parallel::Executor
  def <<(work); end

  def initialize(size); end

  def shutdown(); end

  def size(); end

  def start(); end
end

module Minitest::Parallel::Test
  def _synchronize(); end
end

module Minitest::Parallel::Test::ClassMethods
  def run_one_method(klass, method_name, reporter); end

  def test_order(); end
end

module Minitest::Reportable
  def class_name(); end

  def error?(); end

  def location(); end

  def passed?(); end

  def result_code(); end

  def skipped?(); end
end

class Minitest::Reporter
  def initialize(io=T.unsafe(nil), options=T.unsafe(nil)); end

  def io(); end

  def io=(io); end

  def options(); end

  def options=(options); end
end

class Minitest::Result
  def klass(); end

  def klass=(klass); end

  def source_location(); end

  def source_location=(source_location); end
end

class Minitest::Result
  def self.from(runnable); end
end

class Minitest::Runnable
  def assertions(); end

  def assertions=(assertions); end

  def failure(); end

  def failures(); end

  def failures=(failures); end

  def initialize(name); end

  def marshal_dump(); end

  def marshal_load(ary); end

  def name(); end

  def name=(o); end

  def passed?(); end

  def result_code(); end

  def run(); end

  def skipped?(); end

  def time(); end

  def time=(time); end

  def time_it(); end
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Runnable
  def self.inherited(klass); end

  def self.methods_matching(re); end

  def self.on_signal(name, action); end

  def self.reset(); end

  def self.run(reporter, options=T.unsafe(nil)); end

  def self.run_one_method(klass, method_name, reporter); end

  def self.runnable_methods(); end

  def self.runnables(); end

  def self.with_info_handler(reporter, &block); end
end

class Minitest::StatisticsReporter
  def assertions(); end

  def assertions=(assertions); end

  def count(); end

  def count=(count); end

  def errors(); end

  def errors=(errors); end

  def failures(); end

  def failures=(failures); end

  def results(); end

  def results=(results); end

  def skips(); end

  def skips=(skips); end

  def start_time(); end

  def start_time=(start_time); end

  def total_time(); end

  def total_time=(total_time); end
end

class Minitest::SummaryReporter
  def aggregated_results(io); end

  def old_sync(); end

  def old_sync=(old_sync); end

  def statistics(); end

  def summary(); end

  def sync(); end

  def sync=(sync); end
end

class Minitest::Test
  def capture_exceptions(); end

  def sanitize_exception(e); end

  def with_info_handler(&block); end
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

module Minitest::Test::LifecycleHooks
  def after_setup(); end

  def after_teardown(); end

  def before_setup(); end

  def before_teardown(); end

  def setup(); end

  def teardown(); end
end

class Minitest::Test
  def self.i_suck_and_my_tests_are_order_dependent!(); end

  def self.io_lock(); end

  def self.io_lock=(io_lock); end

  def self.make_my_diffs_pretty!(); end

  def self.parallelize_me!(); end

  def self.test_order(); end
end

class Minitest::UnexpectedError
  def error=(error); end

  def initialize(error); end
end

class Minitest::Unit
  VERSION = ::T.let(nil, ::T.untyped)
end

class Minitest::Unit
  def self.after_tests(&b); end

  def self.autorun(); end
end

module Minitest
  def self.__run(reporter, options); end

  def self.after_run(&block); end

  def self.backtrace_filter(); end

  def self.backtrace_filter=(backtrace_filter); end

  def self.clock_time(); end

  def self.extensions(); end

  def self.extensions=(extensions); end

  def self.filter_backtrace(bt); end

  def self.info_signal(); end

  def self.info_signal=(info_signal); end

  def self.init_plugins(options); end

  def self.load_plugins(); end

  def self.parallel_executor(); end

  def self.parallel_executor=(parallel_executor); end

  def self.process_args(args=T.unsafe(nil)); end

  def self.reporter(); end

  def self.reporter=(reporter); end

  def self.run_one_method(klass, method_name); end
end

module Miscreant
  VERSION = ::T.let(nil, ::T.untyped)
end

class Miscreant::AES::PMAC
  PRECOMPUTED_BLOCKS = ::T.let(nil, ::T.untyped)
end

module Miscreant::STREAM
  COUNTER_MAX = ::T.let(nil, ::T.untyped)
  LAST_BLOCK_FLAG = ::T.let(nil, ::T.untyped)
  NONCE_SIZE = ::T.let(nil, ::T.untyped)
end

class Module
  def singleton_method_added(mid); end
  DELEGATION_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
  DELEGATION_RESERVED_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  RUBY_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class Monitor
  def enter(); end

  def exit(); end

  def mon_check_owner(); end

  def mon_enter(); end

  def mon_exit(); end

  def mon_locked?(); end

  def mon_owned?(); end

  def mon_synchronize(); end

  def mon_try_enter(); end

  def new_cond(); end

  def synchronize(); end

  def try_enter(); end

  def try_mon_enter(); end

  def wait_for_cond(arg, arg1); end
end

module MonitorMixin
  def initialize(*arg, **arg1, &arg2); end
end

class MonitorMixin::ConditionVariable
  def initialize(monitor); end
end

module MultiJson
  ALIASES = ::T.let(nil, ::T.untyped)
  REQUIREMENT_MAP = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

MultiJson::DecodeError = MultiJson::ParseError

MultiJson::LoadError = MultiJson::ParseError

module MultiJson::OptionsCache
  MAX_CACHE_SIZE = ::T.let(nil, ::T.untyped)
end

class MultiJson::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
end

module MultiXml
  CONTENT_ROOT = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  DISALLOWED_XML_TYPES = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  REQUIREMENT_MAP = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module Mutex_m
  VERSION = ::T.let(nil, ::T.untyped)
end

module NIO
  ENGINE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class NIO::ByteBuffer
  include ::Enumerable
  def <<(arg); end

  def [](arg); end

  def capacity(); end

  def clear(); end

  def each(&blk); end

  def flip(); end

  def full?(); end

  def get(*arg); end

  def initialize(arg); end

  def limit(); end

  def limit=(limit); end

  def mark(); end

  def position(); end

  def position=(position); end

  def read_from(arg); end

  def remaining(); end

  def reset(); end

  def rewind(); end

  def size(); end

  def write_to(arg); end
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NIO::ByteBuffer
end

class NIO::Monitor
  def add_interest(arg); end

  def close(*arg); end

  def closed?(); end

  def initialize(arg, arg1, arg2); end

  def interests(); end

  def interests=(interests); end

  def io(); end

  def readable?(); end

  def readiness(); end

  def remove_interest(arg); end

  def selector(); end

  def value(); end

  def value=(value); end

  def writable?(); end

  def writeable?(); end
end

class NIO::Monitor
end

class NIO::Selector
  def backend(); end

  def close(); end

  def closed?(); end

  def deregister(arg); end

  def empty?(); end

  def initialize(*arg); end

  def register(arg, arg1); end

  def registered?(arg); end

  def wakeup(); end
end

class NIO::Selector
  def self.backends(); end
end

module NIO
  def self.engine(); end

  def self.pure?(env=T.unsafe(nil)); end
end

class NameError
  include ::ErrorHighlight::CoreExt
  include ::DidYouMean::Correctable
end

class Net::APOP
end

class Net::APOP
end

Net::APOPSession = Net::APOP

class Net::HTTP
  def begin_request_hacked(req); end

  def end_request_hacked(); end

  def extra_chain_cert(); end

  def extra_chain_cert=(extra_chain_cert); end

  def ipaddr(); end

  def ipaddr=(addr); end

  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def request_with_mini_profiler(*args, &block); end

  def request_without_mini_profiler(req, body=T.unsafe(nil), &block); end

  def verify_hostname(); end

  def verify_hostname=(verify_hostname); end

  def write_timeout(); end

  def write_timeout=(sec); end
  ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

Net::HTTP::ProxyMod = Net::HTTP::ProxyDelta

class Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
end

Net::HTTPClientError::EXCEPTION_TYPE = Net::HTTPServerException

Net::HTTPClientErrorCode = Net::HTTPClientError

class Net::HTTPEarlyHints
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPEarlyHints
end

Net::HTTPFatalErrorCode = Net::HTTPClientError

class Net::HTTPInformation
end

Net::HTTPInformationCode::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPInformation
end

class Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPLoopDetected
end

class Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPMisdirectedRequest
end

Net::HTTPMovedTemporarily = Net::HTTPFound

Net::HTTPMultipleChoice = Net::HTTPMultipleChoices

class Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPNotExtended
end

class Net::HTTPPayloadTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPPayloadTooLarge
end

class Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPProcessing
end

class Net::HTTPRangeNotSatisfiable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPRangeNotSatisfiable
end

Net::HTTPRedirection::EXCEPTION_TYPE = Net::HTTPRetriableError

Net::HTTPRedirectionCode = Net::HTTPRedirection

Net::HTTPRequestURITooLarge = Net::HTTPURITooLong

Net::HTTPResponceReceiver = Net::HTTPResponse

class Net::HTTPResponse
  def begin_reading_body_hacked(sock, reqmethodallowbody); end

  def end_reading_body_hacked(); end
end

Net::HTTPResponseReceiver = Net::HTTPResponse

Net::HTTPRetriableCode = Net::HTTPRedirection

Net::HTTPServerError::EXCEPTION_TYPE = Net::HTTPFatalError

Net::HTTPServerErrorCode = Net::HTTPServerError

Net::HTTPSession = Net::HTTP

Net::HTTPSuccess::EXCEPTION_TYPE = Net::HTTPError

Net::HTTPSuccessCode = Net::HTTPSuccess

class Net::HTTPURITooLong
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPURITooLong
end

Net::HTTPUnknownResponse::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPVariantAlsoNegotiates
end

class Net::IMAP
  def id(client_id=T.unsafe(nil)); end

  def idle_response_timeout(); end

  def namespace(); end

  def open_timeout(); end
  ALL = ::T.let(nil, ::T.untyped)
  ARCHIVE = ::T.let(nil, ::T.untyped)
  DRAFTS = ::T.let(nil, ::T.untyped)
  HAS_CHILDREN = ::T.let(nil, ::T.untyped)
  HAS_NO_CHILDREN = ::T.let(nil, ::T.untyped)
  JUNK = ::T.let(nil, ::T.untyped)
  NONEXISTENT = ::T.let(nil, ::T.untyped)
  REMOTE = ::T.let(nil, ::T.untyped)
  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
  SENT = ::T.let(nil, ::T.untyped)
  SUBSCRIBED = ::T.let(nil, ::T.untyped)
  TRASH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::Authenticators
  def add_authenticator(auth_type, authenticator); end

  def authenticator(auth_type, *args); end
end

module Net::IMAP::Authenticators
end

class Net::IMAP::ClientID
  def initialize(data); end

  def send_data(imap, tag); end

  def validate(); end
end

class Net::IMAP::ClientID
end

class Net::IMAP::IgnoredResponse
end

class Net::IMAP::IgnoredResponse
end

class Net::IMAP::Namespace
end

class Net::IMAP::Namespace
end

class Net::IMAP::Namespaces
end

class Net::IMAP::Namespaces
end

module Net::IMAP::NumValidator
  def self.ensure_mod_sequence_value(num); end

  def self.valid_mod_sequence_value?(num); end
end

class Net::IMAP::PlainAuthenticator
  NULL = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::ResponseParser
  ASTRING_CHARS_TOKENS = ::T.let(nil, ::T.untyped)
  SPACES_REGEXP = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::ResponseParser::Token
  def self.keyword_init?(); end
end

module Net::IMAP::StringFormatter
  LITERAL_REGEX = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringFormatter
  def self.nstring(str); end

  def self.string(str); end

  def self.valid_nstring?(str); end

  def self.valid_string?(str); end
end

class Net::IMAP::UnknownResponseError
end

class Net::IMAP::UnknownResponseError
end

class Net::IMAP
  extend ::Net::IMAP::Authenticators
end

Net::NetPrivate::HTTPRequest = Net::HTTPRequest

Net::NetPrivate::Socket = Net::InternetMessageIO

Net::POP = Net::POP3

class Net::POP3
  def active?(); end

  def address(); end

  def apop?(); end

  def auth_only(account, password); end

  def delete_all(); end

  def disable_ssl(); end

  def each(&block); end

  def each_mail(&block); end

  def enable_ssl(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil), port=T.unsafe(nil)); end

  def finish(); end

  def initialize(addr, port=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def logging(msg); end

  def mails(); end

  def n_bytes(); end

  def n_mails(); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def port(); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def reset(); end

  def set_all_uids(); end

  def set_debug_output(arg); end

  def start(account, password); end

  def started?(); end

  def use_ssl?(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::POP3
  def self.APOP(isapop); end

  def self.auth_only(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def self.certs(); end

  def self.create_ssl_params(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil)); end

  def self.default_pop3_port(); end

  def self.default_pop3s_port(); end

  def self.default_port(); end

  def self.delete_all(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.disable_ssl(); end

  def self.enable_ssl(*args); end

  def self.foreach(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.socket_type(); end

  def self.ssl_params(); end

  def self.start(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.use_ssl?(); end

  def self.verify(); end
end

class Net::POP3Command
  def apop(account, password); end

  def auth(account, password); end

  def dele(num); end

  def initialize(sock); end

  def list(); end

  def quit(); end

  def retr(num, &block); end

  def rset(); end

  def socket(); end

  def stat(); end

  def top(num, lines=T.unsafe(nil), &block); end

  def uidl(num=T.unsafe(nil)); end
end

class Net::POP3Command
end

Net::POP3Session = Net::POP3

class Net::POPAuthenticationError
end

class Net::POPAuthenticationError
end

class Net::POPBadResponse
end

class Net::POPBadResponse
end

class Net::POPError
end

class Net::POPError
end

class Net::POPMail
  def all(dest=T.unsafe(nil), &block); end

  def delete(); end

  def delete!(); end

  def deleted?(); end

  def header(dest=T.unsafe(nil)); end

  def initialize(num, len, pop, cmd); end

  def length(); end

  def mail(dest=T.unsafe(nil), &block); end

  def number(); end

  def pop(dest=T.unsafe(nil), &block); end

  def size(); end

  def top(lines, dest=T.unsafe(nil)); end

  def uid=(uid); end

  def uidl(); end

  def unique_id(); end
end

class Net::POPMail
end

Net::POPSession = Net::POP3

Net::ProtocRetryError = Net::ProtoRetriableError

class Net::Protocol
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::SMTP
  def capabilities(); end

  def capable?(key); end

  def ssl_context_params(); end

  def ssl_context_params=(ssl_context_params); end

  def tls_hostname(); end

  def tls_hostname=(tls_hostname); end

  def tls_verify(); end

  def tls_verify=(tls_verify); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::SMTP::Address
  def address(); end

  def initialize(address, *args, **kw_args); end

  def parameters(); end
end

module Net::SMTPError
  def initialize(response, message: T.unsafe(nil)); end

  def message(); end

  def response(); end
end

Net::SMTPSession = Net::SMTP

module Net::WebMockHTTPResponse
  def read_body(dest=T.unsafe(nil), &block); end
end

class Net::WebMockNetBufferedIO
  def initialize(io, *args, **kwargs); end
end

class NilClass
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
  def to_d(); end
end

class NoMatchingPatternError
end

class NoMatchingPatternError
end

class NoMatchingPatternKeyError
  include ::DidYouMean::Correctable
  def key(); end

  def matchee(); end
end

class NoMatchingPatternKeyError
end

module Nokogiri
  LIBXML2_PATCHES = ::T.let(nil, ::T.untyped)
  LIBXML_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_ICONV_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXML_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_MEMORY_MANAGEMENT = ::T.let(nil, ::T.untyped)
  LIBXSLT_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_DATETIME_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXSLT_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_PATCHES = ::T.let(nil, ::T.untyped)
  OTHER_LIBRARY_VERSIONS = ::T.let(nil, ::T.untyped)
  PACKAGED_LIBRARIES = ::T.let(nil, ::T.untyped)
  PRECOMPILED_LIBRARIES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Node
  ALLOW_COMBINATOR_ON_SELF = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Parser
  CACHE_SWITCH_NAME = ::T.let(nil, ::T.untyped)
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::XPathVisitor
  WILDCARD_NAMESPACES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::CSS::XPathVisitor::BuiltinsConfig
  ALWAYS = ::T.let(nil, ::T.untyped)
  NEVER = ::T.let(nil, ::T.untyped)
  OPTIMAL = ::T.let(nil, ::T.untyped)
  VALUES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::CSS::XPathVisitor::DoctypeConfig
  HTML4 = ::T.let(nil, ::T.untyped)
  HTML5 = ::T.let(nil, ::T.untyped)
  VALUES = ::T.let(nil, ::T.untyped)
  XML = ::T.let(nil, ::T.untyped)
end

module Nokogiri::ClassResolver
  VALID_NAMESPACES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Decorators::Slop
  XPATH_PREFIX = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Gumbo
  DEFAULT_MAX_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_ERRORS = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_TREE_DEPTH = ::T.let(nil, ::T.untyped)
end

Nokogiri::HTML = Nokogiri::HTML4

module Nokogiri::HTML4
  NamedCharacters = ::T.let(nil, ::T.untyped)
end

class Nokogiri::HTML4::ElementDescription
  ACTION_ATTR = ::T.let(nil, ::T.untyped)
  ALIGN_ATTR = ::T.let(nil, ::T.untyped)
  ALT_ATTR = ::T.let(nil, ::T.untyped)
  APPLET_ATTRS = ::T.let(nil, ::T.untyped)
  AREA_ATTRS = ::T.let(nil, ::T.untyped)
  ATTRS = ::T.let(nil, ::T.untyped)
  A_ATTRS = ::T.let(nil, ::T.untyped)
  BASEFONT_ATTRS = ::T.let(nil, ::T.untyped)
  BGCOLOR_ATTR = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  BLOCKLI_ELT = ::T.let(nil, ::T.untyped)
  BODY_ATTRS = ::T.let(nil, ::T.untyped)
  BODY_CONTENTS = ::T.let(nil, ::T.untyped)
  BODY_DEPR = ::T.let(nil, ::T.untyped)
  BUTTON_ATTRS = ::T.let(nil, ::T.untyped)
  CELLHALIGN = ::T.let(nil, ::T.untyped)
  CELLVALIGN = ::T.let(nil, ::T.untyped)
  CLEAR_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ELT = ::T.let(nil, ::T.untyped)
  COMPACT_ATTR = ::T.let(nil, ::T.untyped)
  COMPACT_ATTRS = ::T.let(nil, ::T.untyped)
  CONTENT_ATTR = ::T.let(nil, ::T.untyped)
  COREATTRS = ::T.let(nil, ::T.untyped)
  CORE_ATTRS = ::T.let(nil, ::T.untyped)
  CORE_I18N_ATTRS = ::T.let(nil, ::T.untyped)
  DIR_ATTR = ::T.let(nil, ::T.untyped)
  DL_CONTENTS = ::T.let(nil, ::T.untyped)
  DefaultDescriptions = ::T.let(nil, ::T.untyped)
  EDIT_ATTRS = ::T.let(nil, ::T.untyped)
  EMBED_ATTRS = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  EVENTS = ::T.let(nil, ::T.untyped)
  FIELDSET_CONTENTS = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
  FLOW_PARAM = ::T.let(nil, ::T.untyped)
  FONTSTYLE = ::T.let(nil, ::T.untyped)
  FONT_ATTRS = ::T.let(nil, ::T.untyped)
  FORMCTRL = ::T.let(nil, ::T.untyped)
  FORM_ATTRS = ::T.let(nil, ::T.untyped)
  FORM_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAMESET_ATTRS = ::T.let(nil, ::T.untyped)
  FRAMESET_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAME_ATTRS = ::T.let(nil, ::T.untyped)
  HEADING = ::T.let(nil, ::T.untyped)
  HEAD_ATTRS = ::T.let(nil, ::T.untyped)
  HEAD_CONTENTS = ::T.let(nil, ::T.untyped)
  HREF_ATTRS = ::T.let(nil, ::T.untyped)
  HR_DEPR = ::T.let(nil, ::T.untyped)
  HTML_ATTRS = ::T.let(nil, ::T.untyped)
  HTML_CDATA = ::T.let(nil, ::T.untyped)
  HTML_CONTENT = ::T.let(nil, ::T.untyped)
  HTML_FLOW = ::T.let(nil, ::T.untyped)
  HTML_INLINE = ::T.let(nil, ::T.untyped)
  HTML_PCDATA = ::T.let(nil, ::T.untyped)
  I18N = ::T.let(nil, ::T.untyped)
  I18N_ATTRS = ::T.let(nil, ::T.untyped)
  IFRAME_ATTRS = ::T.let(nil, ::T.untyped)
  IMG_ATTRS = ::T.let(nil, ::T.untyped)
  INLINE = ::T.let(nil, ::T.untyped)
  INLINE_P = ::T.let(nil, ::T.untyped)
  INPUT_ATTRS = ::T.let(nil, ::T.untyped)
  LABEL_ATTR = ::T.let(nil, ::T.untyped)
  LABEL_ATTRS = ::T.let(nil, ::T.untyped)
  LANGUAGE_ATTR = ::T.let(nil, ::T.untyped)
  LEGEND_ATTRS = ::T.let(nil, ::T.untyped)
  LINK_ATTRS = ::T.let(nil, ::T.untyped)
  LIST = ::T.let(nil, ::T.untyped)
  LI_ELT = ::T.let(nil, ::T.untyped)
  MAP_CONTENTS = ::T.let(nil, ::T.untyped)
  META_ATTRS = ::T.let(nil, ::T.untyped)
  MODIFIER = ::T.let(nil, ::T.untyped)
  NAME_ATTR = ::T.let(nil, ::T.untyped)
  NOFRAMES_CONTENT = ::T.let(nil, ::T.untyped)
  OBJECT_ATTRS = ::T.let(nil, ::T.untyped)
  OBJECT_CONTENTS = ::T.let(nil, ::T.untyped)
  OBJECT_DEPR = ::T.let(nil, ::T.untyped)
  OL_ATTRS = ::T.let(nil, ::T.untyped)
  OPTGROUP_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ELT = ::T.let(nil, ::T.untyped)
  PARAM_ATTRS = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PHRASE = ::T.let(nil, ::T.untyped)
  PRE_CONTENT = ::T.let(nil, ::T.untyped)
  PROMPT_ATTRS = ::T.let(nil, ::T.untyped)
  QUOTE_ATTRS = ::T.let(nil, ::T.untyped)
  ROWS_COLS_ATTR = ::T.let(nil, ::T.untyped)
  SCRIPT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_CONTENT = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  SRC_ALT_ATTRS = ::T.let(nil, ::T.untyped)
  STYLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_CONTENTS = ::T.let(nil, ::T.untyped)
  TABLE_DEPR = ::T.let(nil, ::T.untyped)
  TALIGN_ATTRS = ::T.let(nil, ::T.untyped)
  TARGET_ATTR = ::T.let(nil, ::T.untyped)
  TEXTAREA_ATTRS = ::T.let(nil, ::T.untyped)
  TH_TD_ATTR = ::T.let(nil, ::T.untyped)
  TH_TD_DEPR = ::T.let(nil, ::T.untyped)
  TR_CONTENTS = ::T.let(nil, ::T.untyped)
  TR_ELT = ::T.let(nil, ::T.untyped)
  TYPE_ATTR = ::T.let(nil, ::T.untyped)
  UL_DEPR = ::T.let(nil, ::T.untyped)
  VERSION_ATTR = ::T.let(nil, ::T.untyped)
  WIDTH_ATTR = ::T.let(nil, ::T.untyped)
end

Nokogiri::HTML4::ElementDescription::Desc = Struct::HTMLElementDescription

module Nokogiri::HTML5
  HTML_NAMESPACE = ::T.let(nil, ::T.untyped)
  MATHML_NAMESPACE = ::T.let(nil, ::T.untyped)
  SVG_NAMESPACE = ::T.let(nil, ::T.untyped)
  XLINK_NAMESPACE = ::T.let(nil, ::T.untyped)
  XMLNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  XML_NAMESPACE = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML
  XML_C14N_1_0 = ::T.let(nil, ::T.untyped)
  XML_C14N_1_1 = ::T.let(nil, ::T.untyped)
  XML_C14N_EXCLUSIVE_1_0 = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Builder
  DEFAULT_DOCUMENT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Document
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NCNAME_CHAR = ::T.let(nil, ::T.untyped)
  NCNAME_RE = ::T.let(nil, ::T.untyped)
  NCNAME_START_CHAR = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::ElementContent
  ELEMENT = ::T.let(nil, ::T.untyped)
  MULT = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  OPT = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  SEQ = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::EntityDecl
  EXTERNAL_GENERAL_PARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_GENERAL_UNPARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_GENERAL = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_PREDEFINED = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Node
  include ::Nokogiri::HTML5::Node
  ATTRIBUTE_DECL = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_NODE = ::T.let(nil, ::T.untyped)
  CDATA_SECTION_NODE = ::T.let(nil, ::T.untyped)
  COMMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCB_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_FRAG_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_TYPE_NODE = ::T.let(nil, ::T.untyped)
  DTD_NODE = ::T.let(nil, ::T.untyped)
  ELEMENT_DECL = ::T.let(nil, ::T.untyped)
  ELEMENT_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_DECL = ::T.let(nil, ::T.untyped)
  ENTITY_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_REF_NODE = ::T.let(nil, ::T.untyped)
  HTML_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NAMESPACE_DECL = ::T.let(nil, ::T.untyped)
  NOTATION_NODE = ::T.let(nil, ::T.untyped)
  PI_NODE = ::T.let(nil, ::T.untyped)
  TEXT_NODE = ::T.let(nil, ::T.untyped)
  XINCLUDE_END = ::T.let(nil, ::T.untyped)
  XINCLUDE_START = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::NodeSet
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::ParseOptions
  BIG_LINES = ::T.let(nil, ::T.untyped)
  COMPACT = ::T.let(nil, ::T.untyped)
  DEFAULT_HTML = ::T.let(nil, ::T.untyped)
  DEFAULT_SCHEMA = ::T.let(nil, ::T.untyped)
  DEFAULT_XML = ::T.let(nil, ::T.untyped)
  DEFAULT_XSLT = ::T.let(nil, ::T.untyped)
  DTDATTR = ::T.let(nil, ::T.untyped)
  DTDLOAD = ::T.let(nil, ::T.untyped)
  DTDVALID = ::T.let(nil, ::T.untyped)
  HUGE = ::T.let(nil, ::T.untyped)
  NOBASEFIX = ::T.let(nil, ::T.untyped)
  NOBLANKS = ::T.let(nil, ::T.untyped)
  NOCDATA = ::T.let(nil, ::T.untyped)
  NODICT = ::T.let(nil, ::T.untyped)
  NOENT = ::T.let(nil, ::T.untyped)
  NOERROR = ::T.let(nil, ::T.untyped)
  NONET = ::T.let(nil, ::T.untyped)
  NOWARNING = ::T.let(nil, ::T.untyped)
  NOXINCNODE = ::T.let(nil, ::T.untyped)
  NSCLEAN = ::T.let(nil, ::T.untyped)
  OLD10 = ::T.let(nil, ::T.untyped)
  PEDANTIC = ::T.let(nil, ::T.untyped)
  RECOVER = ::T.let(nil, ::T.untyped)
  SAX1 = ::T.let(nil, ::T.untyped)
  STRICT = ::T.let(nil, ::T.untyped)
  XINCLUDE = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Reader
  TYPE_ATTRIBUTE = ::T.let(nil, ::T.untyped)
  TYPE_CDATA = ::T.let(nil, ::T.untyped)
  TYPE_COMMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_FRAGMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_TYPE = ::T.let(nil, ::T.untyped)
  TYPE_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY_REFERENCE = ::T.let(nil, ::T.untyped)
  TYPE_NONE = ::T.let(nil, ::T.untyped)
  TYPE_NOTATION = ::T.let(nil, ::T.untyped)
  TYPE_PROCESSING_INSTRUCTION = ::T.let(nil, ::T.untyped)
  TYPE_SIGNIFICANT_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_TEXT = ::T.let(nil, ::T.untyped)
  TYPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_XML_DECLARATION = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::SAX::Parser
  ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::Searchable
  LOOKS_LIKE_XPATH = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::XPath
  CURRENT_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  GLOBAL_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  ROOT_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  SUBTREE_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
end

class OAuth2::Client
  DEFAULT_EXTRACT_ACCESS_TOKEN = ::T.let(nil, ::T.untyped)
  RESERVED_PARAM_KEYS = ::T.let(nil, ::T.untyped)
end

class Object
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::PP::ObjectMixin
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  include ::ActiveSupport::Dependencies::RequireDependency
  include ::DEBUGGER__::TrapInterceptor
  def to_yaml(options=T.unsafe(nil)); end
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class Object
  def self.yaml_tag(url); end
end

class ObjectSpace::InternalObjectWrapper
  def internal_object_id(); end

  def type(); end
end

class ObjectSpace::InternalObjectWrapper
end

module ObjectSpace
  def self.allocation_class_path(arg); end

  def self.allocation_generation(arg); end

  def self.allocation_method_id(arg); end

  def self.allocation_sourcefile(arg); end

  def self.allocation_sourceline(arg); end

  def self.count_imemo_objects(*arg); end

  def self.count_nodes(*arg); end

  def self.count_objects_size(*arg); end

  def self.count_symbols(*arg); end

  def self.count_tdata_objects(*arg); end

  def self.dump(obj, output: T.unsafe(nil)); end

  def self.dump_all(output: T.unsafe(nil), full: T.unsafe(nil), since: T.unsafe(nil)); end

  def self.internal_class_of(arg); end

  def self.internal_super_of(arg); end

  def self.memsize_of(arg); end

  def self.memsize_of_all(*arg); end

  def self.reachable_objects_from(arg); end

  def self.reachable_objects_from_root(); end

  def self.trace_object_allocations(); end

  def self.trace_object_allocations_debug_start(); end
end

module Observable
  VERSION = ::T.let(nil, ::T.untyped)
end

module Oj
  CUSTOM_MIMIC_JSON_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Oj::CStack
end

class Oj::CStack
end

class Oj::Cache
end

class Oj::Cache
end

class OmniAuth::AuthHash
  def regular_writer(key, value); end

  def valid?(); end
end

class OmniAuth::AuthHash::InfoHash
  def name(); end

  def name?(); end

  def to_hash(); end

  def valid?(); end
end

class OmniAuth::AuthHash::InfoHash
  def self.subkey_class(); end
end

class OmniAuth::AuthHash
  def self.subkey_class(); end
end

class OmniAuth::AuthenticityTokenProtection
  def call!(env); end

  def initialize(options=T.unsafe(nil)); end
end

class OmniAuth::AuthenticityTokenProtection
  def self.call(env); end
end

class OmniAuth::Builder
  def before_callback_phase(&block); end

  def before_options_phase(&block); end

  def before_request_phase(&block); end

  def configure(&block); end

  def on_failure(&block); end

  def options(options=T.unsafe(nil)); end

  def provider(klass, *args, **opts, &block); end
end

class OmniAuth::Builder
end

class OmniAuth::FailureEndpoint
  def call(); end

  def env(); end

  def initialize(env); end

  def origin_query_param(); end

  def raise_out!(); end

  def redirect_to_failure(); end

  def strategy_name_query_param(); end

  def strategy_path_prefix(); end
end

class OmniAuth::FailureEndpoint
  def self.call(env); end
end

class OmniAuth::Form
  def button(text); end

  def css(); end

  def fieldset(legend, options=T.unsafe(nil), &block); end

  def footer(); end

  def header(title, header_info); end

  def html(html); end

  def initialize(options=T.unsafe(nil)); end

  def input_field(type, name); end

  def label_field(text, target); end

  def options(); end

  def options=(options); end

  def password_field(label, name); end

  def text_field(label, name); end

  def to_html(); end

  def to_response(); end
  DEFAULT_CSS = ::T.let(nil, ::T.untyped)
end

class OmniAuth::Form
  def self.build(options=T.unsafe(nil), &block); end
end

module OmniAuth::GitHub
  VERSION = ::T.let(nil, ::T.untyped)
end

class OmniAuth::KeyStore
  def self.override_logging(); end
end

module OmniAuth::OAuth2
  VERSION = ::T.let(nil, ::T.untyped)
end

module OmniAuth::RailsCsrfProtection
  VERSION = ::T.let(nil, ::T.untyped)
end

class OmniAuth::RailsCsrfProtection::Railtie
end

class OmniAuth::RailsCsrfProtection::Railtie
end

class OmniAuth::RailsCsrfProtection::TokenVerifier
  include ::ActiveSupport::Configurable
  include ::AbstractController::Helpers
  include ::ActiveSupport::Callbacks
  include ::AbstractController::Callbacks
  include ::ActionController::RequestForgeryProtection
  def __callbacks(); end

  def __callbacks?(); end

  def _helper_methods(); end

  def _helper_methods=(_helper_methods); end

  def _helper_methods?(); end

  def _process_action_callbacks(); end

  def _run_process_action_callbacks(&block); end

  def allow_forgery_protection(); end

  def allow_forgery_protection=(value); end

  def call(env); end

  def default_protect_from_forgery(); end

  def default_protect_from_forgery=(value); end

  def forgery_protection_origin_check(); end

  def forgery_protection_origin_check=(value); end

  def forgery_protection_strategy(); end

  def forgery_protection_strategy=(value); end

  def log_warning_on_csrf_failure(); end

  def log_warning_on_csrf_failure=(value); end

  def params(*arg, **arg1, &arg2); end

  def per_form_csrf_tokens(); end

  def per_form_csrf_tokens=(value); end

  def request_forgery_protection_token(); end

  def request_forgery_protection_token=(value); end

  def session(*arg, **arg1, &arg2); end

  def urlsafe_csrf_tokens(); end
end

module OmniAuth::RailsCsrfProtection::TokenVerifier::HelperMethods
  def form_authenticity_token(*args, **arg, &block); end

  def protect_against_forgery?(*args, **arg, &block); end
end

module OmniAuth::RailsCsrfProtection::TokenVerifier::HelperMethods
end

class OmniAuth::RailsCsrfProtection::TokenVerifier
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::AbstractController::Callbacks::ClassMethods
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self.__callbacks?(); end

  def self._helper_methods(); end

  def self._helper_methods=(value); end

  def self._helper_methods?(); end

  def self._helpers(); end

  def self._process_action_callbacks(); end

  def self._process_action_callbacks=(value); end

  def self.allow_forgery_protection(); end

  def self.allow_forgery_protection=(value); end

  def self.default_protect_from_forgery(); end

  def self.default_protect_from_forgery=(value); end

  def self.forgery_protection_origin_check(); end

  def self.forgery_protection_origin_check=(value); end

  def self.forgery_protection_strategy(); end

  def self.forgery_protection_strategy=(value); end

  def self.log_warning_on_csrf_failure(); end

  def self.log_warning_on_csrf_failure=(value); end

  def self.per_form_csrf_tokens(); end

  def self.per_form_csrf_tokens=(value); end

  def self.request_forgery_protection_token(); end

  def self.request_forgery_protection_token=(value); end

  def self.urlsafe_csrf_tokens(); end

  def self.urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end
end

module OmniAuth::RailsCsrfProtection
end

class OmniAuth::Strategies::Developer
  include ::OmniAuth::Strategy
end

class OmniAuth::Strategies::Developer
  extend ::OmniAuth::Strategy::ClassMethods
end

class OmniAuth::Strategies::GitHub
  def email(); end

  def email_access_allowed?(); end

  def emails(); end

  def primary_email(); end

  def raw_info(); end

  def scope(); end
end

class OmniAuth::Strategies::GoogleOauth2
  def custom_build_access_token(); end

  def raw_info(); end
  ALLOWED_ISSUERS = ::T.let(nil, ::T.untyped)
  BASE_SCOPES = ::T.let(nil, ::T.untyped)
  BASE_SCOPE_URL = ::T.let(nil, ::T.untyped)
  DEFAULT_SCOPE = ::T.let(nil, ::T.untyped)
  IMAGE_SIZE_REGEXP = ::T.let(nil, ::T.untyped)
  USER_INFO_URL = ::T.let(nil, ::T.untyped)
end

class OmniAuth::Strategies::OAuth2
  def access_token(); end

  def access_token=(access_token); end

  def authorize_params(); end

  def build_access_token(); end

  def client(); end

  def deep_symbolize(options); end

  def options_for(option); end

  def pkce_authorize_params(); end

  def pkce_token_params(); end

  def token_params(); end
end

class OmniAuth::Strategies::OAuth2::CallbackError
  def error(); end

  def error=(error); end

  def error_reason(); end

  def error_reason=(error_reason); end

  def error_uri(); end

  def error_uri=(error_uri); end

  def initialize(error, error_reason=T.unsafe(nil), error_uri=T.unsafe(nil)); end
end

class OmniAuth::Strategies::OAuth2
  def self.inherited(subclass); end
end

module OmniAuth::Strategy
  def app(); end

  def auth_hash(); end

  def call(env); end

  def call!(env); end

  def call_app!(env=T.unsafe(nil)); end

  def callback_call(); end

  def callback_path(); end

  def callback_phase(); end

  def callback_url(); end

  def credentials(); end

  def current_path(); end

  def custom_path(kind); end

  def env(); end

  def extra(); end

  def fail!(message_key, exception=T.unsafe(nil)); end

  def full_host(); end

  def info(); end

  def initialize(app, *args, &block); end

  def inspect(); end

  def log(level, message); end

  def merge_stack(stack); end

  def mock_call!(*arg); end

  def mock_callback_call(); end

  def mock_request_call(); end

  def name(); end

  def on_auth_path?(); end

  def on_callback_path?(); end

  def on_path?(path); end

  def on_request_path?(); end

  def options(); end

  def options_call(); end

  def options_request?(); end

  def path_prefix(); end

  def query_string(); end

  def redirect(uri); end

  def request(); end

  def request_call(); end

  def request_path(); end

  def request_phase(); end

  def response(); end

  def script_name(); end

  def session(); end

  def setup_path(); end

  def setup_phase(); end

  def skip_info?(); end

  def ssl?(); end

  def uid(); end

  def user_info(); end

  def warn_if_using_get_on_request_path(); end
  CURRENT_PATH_REGEX = ::T.let(nil, ::T.untyped)
  EMPTY_STRING = ::T.let(nil, ::T.untyped)
end

module OmniAuth::Strategy::ClassMethods
  def args(args=T.unsafe(nil)); end

  def compile_stack(ancestors, method, context); end

  def configure(options=T.unsafe(nil)); end

  def credentials(&block); end

  def credentials_stack(context); end

  def default_options(); end

  def extra(&block); end

  def extra_stack(context); end

  def info(&block); end

  def info_stack(context); end

  def option(name, value=T.unsafe(nil)); end

  def uid(&block); end

  def uid_stack(context); end
end

module OmniAuth::Strategy
  def self.included(base); end
end

module OmniAuth::Test
end

class OmniAuth::Test::PhonySession
  def call(env); end

  def initialize(app); end
end

class OmniAuth::Test::PhonySession
end

module OmniAuth::Test::StrategyMacros
  def sets_an_auth_hash(); end

  def sets_provider_to(provider); end

  def sets_uid_to(uid); end

  def sets_user_info_to(user_info); end
end

module OmniAuth::Test::StrategyMacros
end

module OmniAuth::Test::StrategyTestCase
  def app(); end

  def app_response(); end

  def session(); end

  def strategy(); end
end

module OmniAuth::Test::StrategyTestCase
end

module OmniAuth::Test
end

module Open3
  VERSION = ::T.let(nil, ::T.untyped)
end

class OpenSSL::ASN1::ASN1Data
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::BN
  def +@(); end

  def -@(); end

  def /(arg); end

  def abs(); end

  def get_flags(arg); end

  def negative?(); end

  def set_flags(arg); end
  CONSTTIME = ::T.let(nil, ::T.untyped)
end

module OpenSSL::Buffering
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def getbyte(); end
end

class OpenSSL::Buffering::Buffer
  def <<(string); end

  def concat(string); end

  def initialize(); end
  BINARY = ::T.let(nil, ::T.untyped)
end

class OpenSSL::Buffering::Buffer
end

class OpenSSL::Cipher
  def ccm_data_len=(ccm_data_len); end
end

class OpenSSL::HMAC
  def ==(other); end

  def base64digest(); end
end

class OpenSSL::HMAC
  def self.base64digest(digest, key, data); end
end

module OpenSSL::KDF
end

class OpenSSL::KDF::KDFError
end

class OpenSSL::KDF::KDFError
end

module OpenSSL::KDF
  def self.hkdf(*arg); end

  def self.pbkdf2_hmac(*arg); end

  def self.scrypt(*arg); end
end

module OpenSSL::Marshal
  def _dump(_level); end
end

module OpenSSL::Marshal::ClassMethods
  def _load(string); end
end

module OpenSSL::Marshal::ClassMethods
end

module OpenSSL::Marshal
  def self.included(base); end
end

class OpenSSL::OCSP::Request
  def signed?(); end
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKey::DH
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::DH
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

class OpenSSL::PKey::DSA
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::DSA
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

class OpenSSL::PKey::EC
  include ::OpenSSL::Marshal
  EXPLICIT_CURVE = ::T.let(nil, ::T.untyped)
end

class OpenSSL::PKey::EC::Point
  def add(arg); end

  def to_octet_string(arg); end
end

class OpenSSL::PKey::EC
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::PKey::PKey
  def compare?(arg); end

  def decrypt(*arg); end

  def derive(*arg); end

  def encrypt(*arg); end

  def oid(); end

  def private_to_der(*arg); end

  def private_to_pem(*arg); end

  def public_to_der(); end

  def public_to_pem(); end

  def sign_raw(*arg); end

  def to_text(); end

  def verify_raw(*arg); end

  def verify_recover(*arg); end
end

class OpenSSL::PKey::RSA
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::RSA
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

module OpenSSL::PKey
  def self.generate_key(*arg); end

  def self.generate_parameters(*arg); end
end

module OpenSSL::SSL
  OP_ALLOW_NO_DHE_KEX = ::T.let(nil, ::T.untyped)
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_ENABLE_MIDDLEBOX_COMPAT = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ANTI_REPLAY = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_NO_TLSv1_3 = ::T.let(nil, ::T.untyped)
  OP_PRIORITIZE_CHACHA = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_1_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_2_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

class OpenSSL::SSL::SSLSocket
  def alpn_protocol(); end

  def finished_message(); end

  def peer_finished_message(); end

  def tmp_key(); end
end

class OpenSSL::SSL::SSLSocket
  def self.open(remote_host, remote_port, local_host=T.unsafe(nil), local_port=T.unsafe(nil), context: T.unsafe(nil)); end
end

module OpenSSL::SSL::SocketForwarder
  def fileno(); end
end

module OpenSSL::Timestamp
end

class OpenSSL::Timestamp::Factory
  def additional_certs(); end

  def additional_certs=(additional_certs); end

  def allowed_digests(); end

  def allowed_digests=(allowed_digests); end

  def create_timestamp(arg, arg1, arg2); end

  def default_policy_id(); end

  def default_policy_id=(default_policy_id); end

  def gen_time(); end

  def gen_time=(gen_time); end

  def serial_number(); end

  def serial_number=(serial_number); end
end

class OpenSSL::Timestamp::Factory
end

class OpenSSL::Timestamp::Request
  def algorithm(); end

  def algorithm=(algorithm); end

  def cert_requested=(cert_requested); end

  def cert_requested?(); end

  def initialize(*arg); end

  def message_imprint(); end

  def message_imprint=(message_imprint); end

  def nonce(); end

  def nonce=(nonce); end

  def policy_id(); end

  def policy_id=(policy_id); end

  def to_der(); end

  def version(); end

  def version=(version); end
end

class OpenSSL::Timestamp::Request
end

class OpenSSL::Timestamp::Response
  def failure_info(); end

  def initialize(arg); end

  def status(); end

  def status_text(); end

  def to_der(); end

  def token(); end

  def token_info(); end

  def tsa_certificate(); end

  def verify(*arg); end
  GRANTED = ::T.let(nil, ::T.untyped)
  GRANTED_WITH_MODS = ::T.let(nil, ::T.untyped)
  REJECTION = ::T.let(nil, ::T.untyped)
  REVOCATION_NOTIFICATION = ::T.let(nil, ::T.untyped)
  REVOCATION_WARNING = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class OpenSSL::Timestamp::Response
end

class OpenSSL::Timestamp::TimestampError
end

class OpenSSL::Timestamp::TimestampError
end

class OpenSSL::Timestamp::TokenInfo
  def algorithm(); end

  def gen_time(); end

  def initialize(arg); end

  def message_imprint(); end

  def nonce(); end

  def ordering(); end

  def policy_id(); end

  def serial_number(); end

  def to_der(); end

  def version(); end
end

class OpenSSL::Timestamp::TokenInfo
end

module OpenSSL::Timestamp
end

module OpenSSL::X509
  V_ERR_CA_KEY_TOO_SMALL = ::T.let(nil, ::T.untyped)
  V_ERR_CA_MD_TOO_WEAK = ::T.let(nil, ::T.untyped)
  V_ERR_CRL_PATH_VALIDATION_ERROR = ::T.let(nil, ::T.untyped)
  V_ERR_DANE_NO_MATCH = ::T.let(nil, ::T.untyped)
  V_ERR_DIFFERENT_CRL_SCOPE = ::T.let(nil, ::T.untyped)
  V_ERR_EE_KEY_TOO_SMALL = ::T.let(nil, ::T.untyped)
  V_ERR_EMAIL_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_EXCLUDED_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_HOSTNAME_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_CALL = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_NON_CA = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_POLICY_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_IP_ADDRESS_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_KEYUSAGE_NO_CRL_SIGN = ::T.let(nil, ::T.untyped)
  V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = ::T.let(nil, ::T.untyped)
  V_ERR_NO_EXPLICIT_POLICY = ::T.let(nil, ::T.untyped)
  V_ERR_NO_VALID_SCTS = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_CERT_UNKNOWN = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_VERIFY_FAILED = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_VERIFY_NEEDED = ::T.let(nil, ::T.untyped)
  V_ERR_PATH_LOOP = ::T.let(nil, ::T.untyped)
  V_ERR_PERMITTED_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_PATH_LENGTH_EXCEEDED = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_SUBJECT_NAME_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_STORE_LOOKUP = ::T.let(nil, ::T.untyped)
  V_ERR_SUBTREE_MINMAX = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_ALGORITHM = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_CURVE = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_VERSION = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_LOS_NOT_ALLOWED = ::T.let(nil, ::T.untyped)
  V_ERR_UNABLE_TO_GET_CRL_ISSUER = ::T.let(nil, ::T.untyped)
  V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_UNHANDLED_CRITICAL_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_UNNESTED_RESOURCE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSPECIFIED = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_EXTENSION_FEATURE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_NAME_SYNTAX = ::T.let(nil, ::T.untyped)
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_PARTIAL_CHAIN = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_128_LOS = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_128_LOS_ONLY = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_192_LOS = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
  V_FLAG_USE_CHECK_TIME = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  include ::OpenSSL::Marshal
  def ==(other); end
end

class OpenSSL::X509::Attribute
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::CRL
  include ::OpenSSL::Marshal
  include ::OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def ==(other); end
end

class OpenSSL::X509::CRL
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Certificate
  include ::OpenSSL::Marshal
  include ::OpenSSL::X509::Extension::SubjectKeyIdentifier
  include ::OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::CRLDistributionPoints
  include ::OpenSSL::X509::Extension::AuthorityInfoAccess
  include ::OpenSSL::X509::Extension::Helpers
end

class OpenSSL::X509::Certificate
  extend ::OpenSSL::Marshal::ClassMethods
  def self.load(arg); end

  def self.load_file(path); end
end

class OpenSSL::X509::Extension
  include ::OpenSSL::Marshal
  def ==(other); end

  def value_der(); end
end

module OpenSSL::X509::Extension::AuthorityInfoAccess
  include ::OpenSSL::X509::Extension::Helpers
  def ca_issuer_uris(); end

  def ocsp_uris(); end
end

module OpenSSL::X509::Extension::AuthorityInfoAccess
end

module OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def authority_key_identifier(); end
end

module OpenSSL::X509::Extension::AuthorityKeyIdentifier
end

module OpenSSL::X509::Extension::CRLDistributionPoints
  include ::OpenSSL::X509::Extension::Helpers
  def crl_uris(); end
end

module OpenSSL::X509::Extension::CRLDistributionPoints
end

module OpenSSL::X509::Extension::Helpers
  def find_extension(oid); end
end

module OpenSSL::X509::Extension::Helpers
end

module OpenSSL::X509::Extension::SubjectKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def subject_key_identifier(); end
end

module OpenSSL::X509::Extension::SubjectKeyIdentifier
end

class OpenSSL::X509::Extension
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Name
  include ::OpenSSL::Marshal
  def to_utf8(); end
end

class OpenSSL::X509::Name
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Request
  include ::OpenSSL::Marshal
  def ==(other); end
end

class OpenSSL::X509::Request
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Revoked
  def ==(other); end

  def to_der(); end
end

module OpenSSL
  def self.fips_mode(); end

  def self.fixed_length_secure_compare(arg, arg1); end

  def self.secure_compare(a, b); end
end

class OpenStruct
  def __id__!(); end

  def __send__!(*arg); end

  def class!(); end

  def clone!(freeze: T.unsafe(nil)); end

  def define_singleton_method!(*arg); end

  def delete_field!(name); end

  def dig!(name, *names); end

  def display!(*arg); end

  def dup!(); end

  def each_pair!(); end

  def encode_with(coder); end

  def encode_with!(coder); end

  def enum_for!(*arg); end

  def extend!(mod, *args); end

  def freeze!(); end

  def gem!(dep, *reqs); end

  def hash!(); end

  def init_with(coder); end

  def init_with!(coder); end

  def inspect!(); end

  def instance_eval!(*arg); end

  def instance_exec!(*arg); end

  def instance_variable_get!(arg); end

  def instance_variable_set!(arg, arg1); end

  def instance_variables!(); end

  def itself!(); end

  def marshal_dump!(); end

  def method!(arg); end

  def methods!(*arg); end

  def object_id!(); end

  def private_methods!(*arg); end

  def protected_methods!(*arg); end

  def public_method!(arg); end

  def public_methods!(*arg); end

  def public_send!(*arg); end

  def remove_instance_variable!(arg); end

  def send!(*arg); end

  def singleton_class!(); end

  def singleton_method!(arg); end

  def singleton_methods!(*arg); end

  def taint!(); end

  def tap!(); end

  def then!(); end

  def to_enum!(*arg); end

  def to_h!(&block); end

  def to_s!(); end

  def trust!(); end

  def untaint!(); end

  def untrust!(); end

  def yield_self!(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class OpenURI::Buffer
  def <<(str); end

  def io(); end

  def size(); end
  StringMax = ::T.let(nil, ::T.untyped)
end

class OpenURI::Buffer
end

class OpenURI::HTTPError
  def initialize(message, io); end
end

class OpenURI::HTTPRedirect
  def initialize(message, io, uri); end
end

module OpenURI::Meta
  def content_type_parse(); end

  def meta_add_field(name, value); end

  def meta_add_field2(name, values); end

  def meta_setup_encoding(); end
  RE_LWS = ::T.let(nil, ::T.untyped)
  RE_PARAMETERS = ::T.let(nil, ::T.untyped)
  RE_QUOTED_STRING = ::T.let(nil, ::T.untyped)
  RE_TOKEN = ::T.let(nil, ::T.untyped)
end

module OpenURI::Meta
  def self.init(obj, src=T.unsafe(nil)); end
end

module OpenURI
  def self.check_options(options); end

  def self.open_http(buf, target, proxy, options); end

  def self.open_loop(uri, options); end

  def self.open_uri(name, *rest); end

  def self.redirectable?(uri1, uri2); end

  def self.scan_open_optional_arguments(*rest); end
end

class OptionParser
  def additional_message(typ, opt); end

  def require_exact(); end

  def require_exact=(require_exact); end
  Version = ::T.let(nil, ::T.untyped)
end

class OptionParser::List
  def get_candidates(id); end
end

class OptionParser::ParseError
  def additional(); end

  def additional=(additional); end
end

module OrmAdapter
  VERSION = ::T.let(nil, ::T.untyped)
end

module PG
  include ::PG::Constants
  ERROR_CLASSES = ::T.let(nil, ::T.untyped)
  POSTGRESQL_LIB_PATH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PG::ActiveSqlTransaction
end

class PG::ActiveSqlTransaction
end

class PG::AdminShutdown
end

class PG::AdminShutdown
end

class PG::AmbiguousAlias
end

class PG::AmbiguousAlias
end

class PG::AmbiguousColumn
end

class PG::AmbiguousColumn
end

class PG::AmbiguousFunction
end

class PG::AmbiguousFunction
end

class PG::AmbiguousParameter
end

class PG::AmbiguousParameter
end

class PG::ArraySubscriptError
end

class PG::ArraySubscriptError
end

class PG::AssertFailure
end

class PG::AssertFailure
end

class PG::BadCopyFileFormat
end

class PG::BadCopyFileFormat
end

class PG::BasicTypeMapBasedOnResult
  include ::PG::BasicTypeRegistry::Checker
  def initialize(connection_or_coder_maps, registry: T.unsafe(nil)); end
end

class PG::BasicTypeMapBasedOnResult
end

class PG::BasicTypeMapForQueries
  include ::PG::BasicTypeRegistry::Checker
  def encode_array_as(); end

  def encode_array_as=(pg_type); end

  def initialize(connection_or_coder_maps, registry: T.unsafe(nil), if_undefined: T.unsafe(nil)); end
  DEFAULT_ARRAY_TYPE_MAP = ::T.let(nil, ::T.untyped)
  DEFAULT_TYPE_MAP = ::T.let(nil, ::T.untyped)
end

class PG::BasicTypeMapForQueries::BinaryData
end

class PG::BasicTypeMapForQueries::BinaryData
end

class PG::BasicTypeMapForQueries::UndefinedEncoder
end

class PG::BasicTypeMapForQueries::UndefinedEncoder
end

class PG::BasicTypeMapForQueries
end

class PG::BasicTypeMapForResults
  include ::PG::BasicTypeRegistry::Checker
  def initialize(connection_or_coder_maps, registry: T.unsafe(nil)); end
end

class PG::BasicTypeMapForResults::WarningTypeMap
  def initialize(typenames); end

  def typecast_result_value(result, _tuple, field); end
end

class PG::BasicTypeMapForResults::WarningTypeMap
end

class PG::BasicTypeMapForResults
end

class PG::BasicTypeRegistry
  include ::PG::BasicTypeRegistry::Checker
  def alias_type(format, new, old); end

  def coders_for(format, direction); end

  def define_default_types(); end

  def register_coder(coder); end

  def register_default_types(); end

  def register_type(format, name, encoder_class, decoder_class); end
  DEFAULT_TYPE_REGISTRY = ::T.let(nil, ::T.untyped)
end

module PG::BasicTypeRegistry::Checker
  def build_coder_maps(conn_or_maps, registry: T.unsafe(nil)); end

  def check_format_and_direction(format, direction); end
  ValidDirections = ::T.let(nil, ::T.untyped)
  ValidFormats = ::T.let(nil, ::T.untyped)
end

module PG::BasicTypeRegistry::Checker
end

class PG::BasicTypeRegistry::CoderMap
  def coder_by_name(name); end

  def coder_by_oid(oid); end

  def coders(); end

  def coders_by_name(); end

  def coders_by_oid(); end

  def initialize(result, coders_by_name, format, arraycoder); end
  DONT_QUOTE_TYPES = ::T.let(nil, ::T.untyped)
end

class PG::BasicTypeRegistry::CoderMap
end

class PG::BasicTypeRegistry::CoderMapsBundle
  def each_format(direction); end

  def initialize(connection, registry: T.unsafe(nil)); end

  def map_for(format, direction); end

  def typenames_by_oid(); end
end

class PG::BasicTypeRegistry::CoderMapsBundle
end

class PG::BasicTypeRegistry
  def self.alias_type(*args); end

  def self.register_coder(*args); end

  def self.register_type(*args); end
end

module PG::BinaryDecoder
end

class PG::BinaryDecoder::Boolean
  include ::PG::Coder::BinaryFormatting
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Boolean
end

class PG::BinaryDecoder::Bytea
  include ::PG::Coder::BinaryFormatting
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Bytea
end

class PG::BinaryDecoder::Float
  include ::PG::Coder::BinaryFormatting
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Float
end

class PG::BinaryDecoder::Integer
  include ::PG::Coder::BinaryFormatting
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Integer
end

class PG::BinaryDecoder::String
  include ::PG::Coder::BinaryFormatting
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::String
end

class PG::BinaryDecoder::Timestamp
  include ::PG::Coder::BinaryFormatting
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Timestamp
end

class PG::BinaryDecoder::TimestampLocal
end

class PG::BinaryDecoder::TimestampLocal
end

class PG::BinaryDecoder::TimestampUtc
end

class PG::BinaryDecoder::TimestampUtc
end

class PG::BinaryDecoder::TimestampUtcToLocal
end

class PG::BinaryDecoder::TimestampUtcToLocal
end

class PG::BinaryDecoder::ToBase64
  include ::PG::Coder::BinaryFormatting
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::ToBase64
end

module PG::BinaryDecoder
end

module PG::BinaryEncoder
end

class PG::BinaryEncoder::Boolean
  include ::PG::Coder::BinaryFormatting
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Boolean
end

class PG::BinaryEncoder::Bytea
  include ::PG::Coder::BinaryFormatting
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Bytea
end

class PG::BinaryEncoder::FromBase64
  include ::PG::Coder::BinaryFormatting
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::FromBase64
end

class PG::BinaryEncoder::Int2
  include ::PG::Coder::BinaryFormatting
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int2
end

class PG::BinaryEncoder::Int4
  include ::PG::Coder::BinaryFormatting
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int4
end

class PG::BinaryEncoder::Int8
  include ::PG::Coder::BinaryFormatting
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int8
end

class PG::BinaryEncoder::String
  include ::PG::Coder::BinaryFormatting
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::String
end

module PG::BinaryEncoder
end

class PG::BranchTransactionAlreadyActive
end

class PG::BranchTransactionAlreadyActive
end

class PG::CannotCoerce
end

class PG::CannotCoerce
end

class PG::CannotConnectNow
end

class PG::CannotConnectNow
end

class PG::CantChangeRuntimeParam
end

class PG::CantChangeRuntimeParam
end

class PG::CardinalityViolation
end

class PG::CardinalityViolation
end

class PG::CaseNotFound
end

class PG::CaseNotFound
end

class PG::CharacterNotInRepertoire
end

class PG::CharacterNotInRepertoire
end

class PG::CheckViolation
end

class PG::CheckViolation
end

class PG::Coder
  def ==(v); end

  def flags(); end

  def flags=(flags); end

  def format(); end

  def format=(format); end

  def initialize(params=T.unsafe(nil)); end

  def inspect_short(); end

  def marshal_dump(); end

  def marshal_load(str); end

  def name(); end

  def name=(name); end

  def oid(); end

  def oid=(oid); end

  def to_h(); end
  FORMAT_ERROR_MASK = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_PARTIAL = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_RAISE = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_STRING = ::T.let(nil, ::T.untyped)
  TIMESTAMP_APP_LOCAL = ::T.let(nil, ::T.untyped)
  TIMESTAMP_APP_UTC = ::T.let(nil, ::T.untyped)
  TIMESTAMP_DB_LOCAL = ::T.let(nil, ::T.untyped)
  TIMESTAMP_DB_UTC = ::T.let(nil, ::T.untyped)
end

module PG::Coder::BinaryFormatting
  def initialize(params=T.unsafe(nil)); end
  Params = ::T.let(nil, ::T.untyped)
end

module PG::Coder::BinaryFormatting
end

class PG::Coder
end

class PG::CollationMismatch
end

class PG::CollationMismatch
end

class PG::CompositeCoder
  def delimiter(); end

  def delimiter=(delimiter); end

  def elements_type(); end

  def elements_type=(elements_type); end

  def needs_quotation=(needs_quotation); end

  def needs_quotation?(); end
end

class PG::CompositeCoder
end

class PG::CompositeDecoder
end

class PG::CompositeDecoder
end

class PG::CompositeEncoder
end

class PG::CompositeEncoder
end

class PG::ConfigFileError
end

class PG::ConfigFileError
end

class PG::ConfigurationLimitExceeded
end

class PG::ConfigurationLimitExceeded
end

class PG::Connection
  include ::PG::Constants
  def async_cancel(); end

  def async_describe_portal(arg); end

  def async_describe_prepared(arg); end

  def async_encrypt_password(password, username, algorithm=T.unsafe(nil)); end

  def async_exec(*args, &blk); end

  def async_exec_params(*arg); end

  def async_exec_prepared(*arg); end

  def async_exec_without_profiling(*arg); end

  def async_flush(); end

  def async_get_copy_data(async=T.unsafe(nil), decoder=T.unsafe(nil)); end

  def async_get_last_result(); end

  def async_get_result(); end

  def async_isnonblocking(); end

  def async_prepare(*arg); end

  def async_put_copy_data(buffer, encoder=T.unsafe(nil)); end

  def async_put_copy_end(*args); end

  def async_query(*arg); end

  def async_reset(); end

  def async_set_client_encoding(arg); end

  def async_setnonblocking(enabled); end

  def backend_key(); end

  def backend_pid(); end

  def block(*arg); end

  def cancel(); end

  def client_encoding=(client_encoding); end

  def close(); end

  def conndefaults(); end

  def conndefaults_hash(); end

  def connect_poll(); end

  def connection_needs_password(); end

  def connection_used_password(); end

  def conninfo(); end

  def conninfo_hash(); end

  def consume_input(); end

  def copy_data(sql, coder=T.unsafe(nil)); end

  def db(); end

  def decoder_for_get_copy_data(); end

  def decoder_for_get_copy_data=(decoder_for_get_copy_data); end

  def describe_portal(arg); end

  def describe_prepared(arg); end

  def discard_results(); end

  def encoder_for_put_copy_data(); end

  def encoder_for_put_copy_data=(encoder_for_put_copy_data); end

  def encrypt_password(password, username, algorithm=T.unsafe(nil)); end

  def enter_pipeline_mode(); end

  def error_message(); end

  def escape(arg); end

  def escape_bytea(arg); end

  def escape_identifier(arg); end

  def escape_literal(arg); end

  def escape_string(arg); end

  def exec(*args, &blk); end

  def exec_params(*args, &blk); end

  def exec_params_without_profiling(*arg); end

  def exec_prepared(*args, &blk); end

  def exec_prepared_without_profiling(*arg); end

  def exec_without_profiling(*arg); end

  def exit_pipeline_mode(); end

  def external_encoding(); end

  def field_name_type(); end

  def field_name_type=(field_name_type); end

  def finish(); end

  def finished?(); end

  def flush(); end

  def get_client_encoding(); end

  def get_copy_data(async=T.unsafe(nil), decoder=T.unsafe(nil)); end

  def get_last_result(); end

  def get_result(); end

  def host(); end

  def internal_encoding(); end

  def internal_encoding=(internal_encoding); end

  def is_busy(); end

  def isnonblocking(); end

  def lo_close(arg); end

  def lo_creat(*arg); end

  def lo_create(arg); end

  def lo_export(arg, arg1); end

  def lo_import(arg); end

  def lo_lseek(arg, arg1, arg2); end

  def lo_open(*arg); end

  def lo_read(arg, arg1); end

  def lo_seek(arg, arg1, arg2); end

  def lo_tell(arg); end

  def lo_truncate(arg, arg1); end

  def lo_unlink(arg); end

  def lo_write(arg, arg1); end

  def loclose(arg); end

  def locreat(*arg); end

  def locreate(arg); end

  def loexport(arg, arg1); end

  def loimport(arg); end

  def lolseek(arg, arg1, arg2); end

  def loopen(*arg); end

  def loread(arg, arg1); end

  def loseek(arg, arg1, arg2); end

  def lotell(arg); end

  def lotruncate(arg, arg1); end

  def lounlink(arg); end

  def lowrite(arg, arg1); end

  def make_empty_pgresult(arg); end

  def nonblocking?(); end

  def notifies(); end

  def notifies_wait(*arg); end

  def options(); end

  def parameter_status(arg); end

  def pass(); end

  def pipeline_status(); end

  def pipeline_sync(); end

  def port(); end

  def prepare(*args, &blk); end

  def prepare_without_profiling(*arg); end

  def protocol_version(); end

  def put_copy_data(buffer, encoder=T.unsafe(nil)); end

  def put_copy_end(*args); end

  def query(*args, &blk); end

  def quote_ident(arg); end

  def reset(); end

  def reset_poll(); end

  def reset_start(); end

  def send_describe_portal(arg); end

  def send_describe_prepared(arg); end

  def send_flush_request(); end

  def send_prepare(*arg); end

  def send_query(*arg); end

  def send_query_params(*arg); end

  def send_query_prepared(*args, &blk); end

  def send_query_prepared_without_profiling(*arg); end

  def server_version(); end

  def set_client_encoding(arg); end

  def set_default_encoding(); end

  def set_error_context_visibility(arg); end

  def set_error_verbosity(arg); end

  def set_notice_processor(); end

  def set_notice_receiver(); end

  def set_single_row_mode(); end

  def setnonblocking(enabled); end

  def socket(); end

  def socket_io(); end

  def ssl_attribute(arg); end

  def ssl_attribute_names(); end

  def ssl_attributes(); end

  def ssl_in_use?(); end

  def status(); end

  def sync_cancel(); end

  def sync_describe_portal(arg); end

  def sync_describe_prepared(arg); end

  def sync_encrypt_password(*arg); end

  def sync_exec(*arg); end

  def sync_exec_params(*arg); end

  def sync_exec_prepared(*arg); end

  def sync_flush(); end

  def sync_get_copy_data(*arg); end

  def sync_get_last_result(); end

  def sync_get_result(); end

  def sync_isnonblocking(); end

  def sync_prepare(*arg); end

  def sync_put_copy_data(*arg); end

  def sync_put_copy_end(*arg); end

  def sync_reset(); end

  def sync_set_client_encoding(arg); end

  def sync_setnonblocking(arg); end

  def trace(arg); end

  def transaction(); end

  def transaction_status(); end

  def tty(); end

  def type_map_for_queries(); end

  def type_map_for_queries=(type_map_for_queries); end

  def type_map_for_results(); end

  def type_map_for_results=(type_map_for_results); end

  def unescape_bytea(arg); end

  def untrace(); end

  def user(); end

  def wait_for_notify(*arg); end
  CONNECT_ARGUMENT_ORDER = ::T.let(nil, ::T.untyped)
  HOST_AND_PORT = ::T.let(nil, ::T.untyped)
  POSTGRESQL_URI = ::T.let(nil, ::T.untyped)
end

class PG::Connection
  def self.async_api=(enable); end

  def self.async_connect(*args, **kwargs); end

  def self.async_ping(*args); end

  def self.async_send_api=(enable); end

  def self.conndefaults(); end

  def self.conndefaults_hash(); end

  def self.connect(*args, **kwargs); end

  def self.connect_hash_to_string(hash); end

  def self.connect_start(*arg); end

  def self.connect_string_to_hash(str); end

  def self.encrypt_password(arg, arg1); end

  def self.escape(arg); end

  def self.escape_bytea(arg); end

  def self.escape_string(arg); end

  def self.isthreadsafe(); end

  def self.new(*args, **kwargs); end

  def self.open(*args, **kwargs); end

  def self.parse_connect_args(*args); end

  def self.ping(*args); end

  def self.quote_connstr(value); end

  def self.quote_ident(arg); end

  def self.setdb(*args, **kwargs); end

  def self.setdblogin(*args, **kwargs); end

  def self.sync_connect(*arg); end

  def self.sync_ping(*arg); end

  def self.unescape_bytea(arg); end
end

class PG::ConnectionBad
end

class PG::ConnectionBad
end

class PG::ConnectionDoesNotExist
end

class PG::ConnectionDoesNotExist
end

class PG::ConnectionException
end

class PG::ConnectionException
end

class PG::ConnectionFailure
end

class PG::ConnectionFailure
end

module PG::Constants
  CONNECTION_AUTH_OK = ::T.let(nil, ::T.untyped)
  CONNECTION_AWAITING_RESPONSE = ::T.let(nil, ::T.untyped)
  CONNECTION_BAD = ::T.let(nil, ::T.untyped)
  CONNECTION_CHECK_STANDBY = ::T.let(nil, ::T.untyped)
  CONNECTION_CHECK_TARGET = ::T.let(nil, ::T.untyped)
  CONNECTION_CHECK_WRITABLE = ::T.let(nil, ::T.untyped)
  CONNECTION_CONSUME = ::T.let(nil, ::T.untyped)
  CONNECTION_GSS_STARTUP = ::T.let(nil, ::T.untyped)
  CONNECTION_MADE = ::T.let(nil, ::T.untyped)
  CONNECTION_NEEDED = ::T.let(nil, ::T.untyped)
  CONNECTION_OK = ::T.let(nil, ::T.untyped)
  CONNECTION_SETENV = ::T.let(nil, ::T.untyped)
  CONNECTION_SSL_STARTUP = ::T.let(nil, ::T.untyped)
  CONNECTION_STARTED = ::T.let(nil, ::T.untyped)
  INVALID_OID = ::T.let(nil, ::T.untyped)
  INV_READ = ::T.let(nil, ::T.untyped)
  INV_WRITE = ::T.let(nil, ::T.untyped)
  InvalidOid = ::T.let(nil, ::T.untyped)
  PGRES_BAD_RESPONSE = ::T.let(nil, ::T.untyped)
  PGRES_COMMAND_OK = ::T.let(nil, ::T.untyped)
  PGRES_COPY_BOTH = ::T.let(nil, ::T.untyped)
  PGRES_COPY_IN = ::T.let(nil, ::T.untyped)
  PGRES_COPY_OUT = ::T.let(nil, ::T.untyped)
  PGRES_EMPTY_QUERY = ::T.let(nil, ::T.untyped)
  PGRES_FATAL_ERROR = ::T.let(nil, ::T.untyped)
  PGRES_NONFATAL_ERROR = ::T.let(nil, ::T.untyped)
  PGRES_PIPELINE_ABORTED = ::T.let(nil, ::T.untyped)
  PGRES_PIPELINE_SYNC = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_FAILED = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_OK = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_READING = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_WRITING = ::T.let(nil, ::T.untyped)
  PGRES_SINGLE_TUPLE = ::T.let(nil, ::T.untyped)
  PGRES_TUPLES_OK = ::T.let(nil, ::T.untyped)
  PG_DIAG_COLUMN_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_CONSTRAINT_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_CONTEXT = ::T.let(nil, ::T.untyped)
  PG_DIAG_DATATYPE_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_INTERNAL_POSITION = ::T.let(nil, ::T.untyped)
  PG_DIAG_INTERNAL_QUERY = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_DETAIL = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_HINT = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_PRIMARY = ::T.let(nil, ::T.untyped)
  PG_DIAG_SCHEMA_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_SEVERITY = ::T.let(nil, ::T.untyped)
  PG_DIAG_SEVERITY_NONLOCALIZED = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_FILE = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_FUNCTION = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_LINE = ::T.let(nil, ::T.untyped)
  PG_DIAG_SQLSTATE = ::T.let(nil, ::T.untyped)
  PG_DIAG_STATEMENT_POSITION = ::T.let(nil, ::T.untyped)
  PG_DIAG_TABLE_NAME = ::T.let(nil, ::T.untyped)
  PQERRORS_DEFAULT = ::T.let(nil, ::T.untyped)
  PQERRORS_SQLSTATE = ::T.let(nil, ::T.untyped)
  PQERRORS_TERSE = ::T.let(nil, ::T.untyped)
  PQERRORS_VERBOSE = ::T.let(nil, ::T.untyped)
  PQPING_NO_ATTEMPT = ::T.let(nil, ::T.untyped)
  PQPING_NO_RESPONSE = ::T.let(nil, ::T.untyped)
  PQPING_OK = ::T.let(nil, ::T.untyped)
  PQPING_REJECT = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_ALWAYS = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_ERRORS = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_NEVER = ::T.let(nil, ::T.untyped)
  PQTRANS_ACTIVE = ::T.let(nil, ::T.untyped)
  PQTRANS_IDLE = ::T.let(nil, ::T.untyped)
  PQTRANS_INERROR = ::T.let(nil, ::T.untyped)
  PQTRANS_INTRANS = ::T.let(nil, ::T.untyped)
  PQTRANS_UNKNOWN = ::T.let(nil, ::T.untyped)
  PQ_PIPELINE_ABORTED = ::T.let(nil, ::T.untyped)
  PQ_PIPELINE_OFF = ::T.let(nil, ::T.untyped)
  PQ_PIPELINE_ON = ::T.let(nil, ::T.untyped)
  SEEK_CUR = ::T.let(nil, ::T.untyped)
  SEEK_END = ::T.let(nil, ::T.untyped)
  SEEK_SET = ::T.let(nil, ::T.untyped)
end

module PG::Constants
end

class PG::CopyCoder
  def delimiter(); end

  def delimiter=(delimiter); end

  def null_string(); end

  def null_string=(null_string); end

  def type_map(); end

  def type_map=(type_map); end
end

class PG::CopyCoder
end

class PG::CopyDecoder
  include ::PG::Coder::BinaryFormatting
end

class PG::CopyDecoder
end

class PG::CopyEncoder
  include ::PG::Coder::BinaryFormatting
end

class PG::CopyEncoder
end

class PG::CrashShutdown
end

class PG::CrashShutdown
end

class PG::DataCorrupted
end

class PG::DataCorrupted
end

class PG::DataException
end

class PG::DataException
end

class PG::DatabaseDropped
end

class PG::DatabaseDropped
end

class PG::DatatypeMismatch
end

class PG::DatatypeMismatch
end

class PG::DatetimeFieldOverflow
end

class PG::DatetimeFieldOverflow
end

class PG::DependentObjectsStillExist
end

class PG::DependentObjectsStillExist
end

class PG::DependentPrivilegeDescriptorsStillExist
end

class PG::DependentPrivilegeDescriptorsStillExist
end

class PG::DiagnosticsException
end

class PG::DiagnosticsException
end

class PG::DiskFull
end

class PG::DiskFull
end

class PG::DivisionByZero
end

class PG::DivisionByZero
end

class PG::DuplicateAlias
end

class PG::DuplicateAlias
end

class PG::DuplicateColumn
end

class PG::DuplicateColumn
end

class PG::DuplicateCursor
end

class PG::DuplicateCursor
end

class PG::DuplicateDatabase
end

class PG::DuplicateDatabase
end

class PG::DuplicateFile
end

class PG::DuplicateFile
end

class PG::DuplicateFunction
end

class PG::DuplicateFunction
end

class PG::DuplicateJsonObjectKeyValue
end

class PG::DuplicateJsonObjectKeyValue
end

class PG::DuplicateObject
end

class PG::DuplicateObject
end

class PG::DuplicatePstatement
end

class PG::DuplicatePstatement
end

class PG::DuplicateSchema
end

class PG::DuplicateSchema
end

class PG::DuplicateTable
end

class PG::DuplicateTable
end

class PG::EREContainingSqlNotPermitted
end

class PG::EREContainingSqlNotPermitted
end

class PG::EREModifyingSqlDataNotPermitted
end

class PG::EREModifyingSqlDataNotPermitted
end

class PG::EREProhibitedSqlStatementAttempted
end

class PG::EREProhibitedSqlStatementAttempted
end

class PG::EREReadingSqlDataNotPermitted
end

class PG::EREReadingSqlDataNotPermitted
end

class PG::ERIEEventTriggerProtocolViolated
end

class PG::ERIEEventTriggerProtocolViolated
end

class PG::ERIEInvalidSqlstateReturned
end

class PG::ERIEInvalidSqlstateReturned
end

class PG::ERIENullValueNotAllowed
end

class PG::ERIENullValueNotAllowed
end

class PG::ERIESrfProtocolViolated
end

class PG::ERIESrfProtocolViolated
end

class PG::ERIETriggerProtocolViolated
end

class PG::ERIETriggerProtocolViolated
end

class PG::Error
  def connection(); end

  def error(); end

  def result(); end
end

class PG::Error
end

class PG::ErrorInAssignment
end

class PG::ErrorInAssignment
end

class PG::EscapeCharacterConflict
end

class PG::EscapeCharacterConflict
end

class PG::ExclusionViolation
end

class PG::ExclusionViolation
end

class PG::ExternalRoutineException
end

class PG::ExternalRoutineException
end

class PG::ExternalRoutineInvocationException
end

class PG::ExternalRoutineInvocationException
end

class PG::FdwColumnNameNotFound
end

class PG::FdwColumnNameNotFound
end

class PG::FdwDynamicParameterValueNeeded
end

class PG::FdwDynamicParameterValueNeeded
end

class PG::FdwError
end

class PG::FdwError
end

class PG::FdwFunctionSequenceError
end

class PG::FdwFunctionSequenceError
end

class PG::FdwInconsistentDescriptorInformation
end

class PG::FdwInconsistentDescriptorInformation
end

class PG::FdwInvalidAttributeValue
end

class PG::FdwInvalidAttributeValue
end

class PG::FdwInvalidColumnName
end

class PG::FdwInvalidColumnName
end

class PG::FdwInvalidColumnNumber
end

class PG::FdwInvalidColumnNumber
end

class PG::FdwInvalidDataType
end

class PG::FdwInvalidDataType
end

class PG::FdwInvalidDataTypeDescriptors
end

class PG::FdwInvalidDataTypeDescriptors
end

class PG::FdwInvalidDescriptorFieldIdentifier
end

class PG::FdwInvalidDescriptorFieldIdentifier
end

class PG::FdwInvalidHandle
end

class PG::FdwInvalidHandle
end

class PG::FdwInvalidOptionIndex
end

class PG::FdwInvalidOptionIndex
end

class PG::FdwInvalidOptionName
end

class PG::FdwInvalidOptionName
end

class PG::FdwInvalidStringFormat
end

class PG::FdwInvalidStringFormat
end

class PG::FdwInvalidStringLengthOrBufferLength
end

class PG::FdwInvalidStringLengthOrBufferLength
end

class PG::FdwInvalidUseOfNullPointer
end

class PG::FdwInvalidUseOfNullPointer
end

class PG::FdwNoSchemas
end

class PG::FdwNoSchemas
end

class PG::FdwOptionNameNotFound
end

class PG::FdwOptionNameNotFound
end

class PG::FdwOutOfMemory
end

class PG::FdwOutOfMemory
end

class PG::FdwReplyHandle
end

class PG::FdwReplyHandle
end

class PG::FdwSchemaNotFound
end

class PG::FdwSchemaNotFound
end

class PG::FdwTableNotFound
end

class PG::FdwTableNotFound
end

class PG::FdwTooManyHandles
end

class PG::FdwTooManyHandles
end

class PG::FdwUnableToCreateExecution
end

class PG::FdwUnableToCreateExecution
end

class PG::FdwUnableToCreateReply
end

class PG::FdwUnableToCreateReply
end

class PG::FdwUnableToEstablishConnection
end

class PG::FdwUnableToEstablishConnection
end

class PG::FeatureNotSupported
end

class PG::FeatureNotSupported
end

class PG::FloatingPointException
end

class PG::FloatingPointException
end

class PG::ForeignKeyViolation
end

class PG::ForeignKeyViolation
end

class PG::GeneratedAlways
end

class PG::GeneratedAlways
end

class PG::GroupingError
end

class PG::GroupingError
end

class PG::HeldCursorRequiresSameIsolationLevel
end

class PG::HeldCursorRequiresSameIsolationLevel
end

class PG::IdleInTransactionSessionTimeout
end

class PG::IdleInTransactionSessionTimeout
end

class PG::IdleSessionTimeout
end

class PG::IdleSessionTimeout
end

class PG::InFailedSqlTransaction
end

class PG::InFailedSqlTransaction
end

class PG::InappropriateAccessModeForBranchTransaction
end

class PG::InappropriateAccessModeForBranchTransaction
end

class PG::InappropriateIsolationLevelForBranchTransaction
end

class PG::InappropriateIsolationLevelForBranchTransaction
end

class PG::IndeterminateCollation
end

class PG::IndeterminateCollation
end

class PG::IndeterminateDatatype
end

class PG::IndeterminateDatatype
end

class PG::IndexCorrupted
end

class PG::IndexCorrupted
end

class PG::IndicatorOverflow
end

class PG::IndicatorOverflow
end

class PG::InsufficientPrivilege
end

class PG::InsufficientPrivilege
end

class PG::InsufficientResources
end

class PG::InsufficientResources
end

class PG::IntegrityConstraintViolation
end

class PG::IntegrityConstraintViolation
end

class PG::InternalError
end

class PG::InternalError
end

class PG::IntervalFieldOverflow
end

class PG::IntervalFieldOverflow
end

class PG::InvalidArgumentForLog
end

class PG::InvalidArgumentForLog
end

class PG::InvalidArgumentForNthValue
end

class PG::InvalidArgumentForNthValue
end

class PG::InvalidArgumentForNtile
end

class PG::InvalidArgumentForNtile
end

class PG::InvalidArgumentForPowerFunction
end

class PG::InvalidArgumentForPowerFunction
end

class PG::InvalidArgumentForSqlJsonDatetimeFunction
end

class PG::InvalidArgumentForSqlJsonDatetimeFunction
end

class PG::InvalidArgumentForWidthBucketFunction
end

class PG::InvalidArgumentForWidthBucketFunction
end

class PG::InvalidAuthorizationSpecification
end

class PG::InvalidAuthorizationSpecification
end

class PG::InvalidBinaryRepresentation
end

class PG::InvalidBinaryRepresentation
end

class PG::InvalidCatalogName
end

class PG::InvalidCatalogName
end

class PG::InvalidChangeOfResultFields
end

class PG::InvalidChangeOfResultFields
end

class PG::InvalidCharacterValueForCast
end

class PG::InvalidCharacterValueForCast
end

class PG::InvalidColumnDefinition
end

class PG::InvalidColumnDefinition
end

class PG::InvalidColumnReference
end

class PG::InvalidColumnReference
end

class PG::InvalidCursorDefinition
end

class PG::InvalidCursorDefinition
end

class PG::InvalidCursorName
end

class PG::InvalidCursorName
end

class PG::InvalidCursorState
end

class PG::InvalidCursorState
end

class PG::InvalidDatabaseDefinition
end

class PG::InvalidDatabaseDefinition
end

class PG::InvalidDatetimeFormat
end

class PG::InvalidDatetimeFormat
end

class PG::InvalidEscapeCharacter
end

class PG::InvalidEscapeCharacter
end

class PG::InvalidEscapeOctet
end

class PG::InvalidEscapeOctet
end

class PG::InvalidEscapeSequence
end

class PG::InvalidEscapeSequence
end

class PG::InvalidForeignKey
end

class PG::InvalidForeignKey
end

class PG::InvalidFunctionDefinition
end

class PG::InvalidFunctionDefinition
end

class PG::InvalidGrantOperation
end

class PG::InvalidGrantOperation
end

class PG::InvalidGrantor
end

class PG::InvalidGrantor
end

class PG::InvalidIndicatorParameterValue
end

class PG::InvalidIndicatorParameterValue
end

class PG::InvalidJsonText
end

class PG::InvalidJsonText
end

class PG::InvalidName
end

class PG::InvalidName
end

class PG::InvalidObjectDefinition
end

class PG::InvalidObjectDefinition
end

class PG::InvalidParameterValue
end

class PG::InvalidParameterValue
end

class PG::InvalidPassword
end

class PG::InvalidPassword
end

class PG::InvalidPrecedingOrFollowingSize
end

class PG::InvalidPrecedingOrFollowingSize
end

class PG::InvalidPstatementDefinition
end

class PG::InvalidPstatementDefinition
end

class PG::InvalidRecursion
end

class PG::InvalidRecursion
end

class PG::InvalidRegularExpression
end

class PG::InvalidRegularExpression
end

class PG::InvalidResultStatus
end

class PG::InvalidResultStatus
end

class PG::InvalidRoleSpecification
end

class PG::InvalidRoleSpecification
end

class PG::InvalidRowCountInLimitClause
end

class PG::InvalidRowCountInLimitClause
end

class PG::InvalidRowCountInResultOffsetClause
end

class PG::InvalidRowCountInResultOffsetClause
end

class PG::InvalidSchemaDefinition
end

class PG::InvalidSchemaDefinition
end

class PG::InvalidSchemaName
end

class PG::InvalidSchemaName
end

class PG::InvalidSqlJsonSubscript
end

class PG::InvalidSqlJsonSubscript
end

class PG::InvalidSqlStatementName
end

class PG::InvalidSqlStatementName
end

class PG::InvalidTableDefinition
end

class PG::InvalidTableDefinition
end

class PG::InvalidTablesampleArgument
end

class PG::InvalidTablesampleArgument
end

class PG::InvalidTablesampleRepeat
end

class PG::InvalidTablesampleRepeat
end

class PG::InvalidTextRepresentation
end

class PG::InvalidTextRepresentation
end

class PG::InvalidTimeZoneDisplacementValue
end

class PG::InvalidTimeZoneDisplacementValue
end

class PG::InvalidTransactionInitiation
end

class PG::InvalidTransactionInitiation
end

class PG::InvalidTransactionState
end

class PG::InvalidTransactionState
end

class PG::InvalidTransactionTermination
end

class PG::InvalidTransactionTermination
end

class PG::InvalidUseOfEscapeCharacter
end

class PG::InvalidUseOfEscapeCharacter
end

class PG::InvalidXmlComment
end

class PG::InvalidXmlComment
end

class PG::InvalidXmlContent
end

class PG::InvalidXmlContent
end

class PG::InvalidXmlDocument
end

class PG::InvalidXmlDocument
end

class PG::InvalidXmlProcessingInstruction
end

class PG::InvalidXmlProcessingInstruction
end

class PG::IoError
end

class PG::IoError
end

class PG::LEInvalidSpecification
end

class PG::LEInvalidSpecification
end

class PG::LocatorException
end

class PG::LocatorException
end

class PG::LockFileExists
end

class PG::LockFileExists
end

class PG::LockNotAvailable
end

class PG::LockNotAvailable
end

class PG::MoreThanOneSqlJsonItem
end

class PG::MoreThanOneSqlJsonItem
end

class PG::MostSpecificTypeMismatch
end

class PG::MostSpecificTypeMismatch
end

class PG::NameTooLong
end

class PG::NameTooLong
end

class PG::NoActiveSqlTransaction
end

class PG::NoActiveSqlTransaction
end

class PG::NoActiveSqlTransactionForBranchTransaction
end

class PG::NoActiveSqlTransactionForBranchTransaction
end

class PG::NoDataFound
end

class PG::NoDataFound
end

class PG::NoResultError
end

class PG::NoResultError
end

class PG::NoSqlJsonItem
end

class PG::NoSqlJsonItem
end

class PG::NonNumericSqlJsonItem
end

class PG::NonNumericSqlJsonItem
end

class PG::NonUniqueKeysInAJsonObject
end

class PG::NonUniqueKeysInAJsonObject
end

class PG::NonstandardUseOfEscapeCharacter
end

class PG::NonstandardUseOfEscapeCharacter
end

class PG::NotAllCopyDataRetrieved
end

class PG::NotAllCopyDataRetrieved
end

class PG::NotAnXmlDocument
end

class PG::NotAnXmlDocument
end

class PG::NotInBlockingMode
end

class PG::NotInBlockingMode
end

class PG::NotNullViolation
end

class PG::NotNullViolation
end

class PG::NullValueNoIndicatorParameter
end

class PG::NullValueNoIndicatorParameter
end

class PG::NullValueNotAllowed
end

class PG::NullValueNotAllowed
end

class PG::NumericValueOutOfRange
end

class PG::NumericValueOutOfRange
end

class PG::ObjectInUse
end

class PG::ObjectInUse
end

class PG::ObjectNotInPrerequisiteState
end

class PG::ObjectNotInPrerequisiteState
end

class PG::OperatorIntervention
end

class PG::OperatorIntervention
end

class PG::OutOfMemory
end

class PG::OutOfMemory
end

class PG::PlpgsqlError
end

class PG::PlpgsqlError
end

class PG::ProgramLimitExceeded
end

class PG::ProgramLimitExceeded
end

class PG::ProtocolViolation
end

class PG::ProtocolViolation
end

class PG::QueryCanceled
end

class PG::QueryCanceled
end

class PG::RaiseException
end

class PG::RaiseException
end

class PG::ReadOnlySqlTransaction
end

class PG::ReadOnlySqlTransaction
end

class PG::RecordCoder
  def type_map(); end

  def type_map=(type_map); end
end

class PG::RecordCoder
end

class PG::RecordDecoder
end

class PG::RecordDecoder
end

class PG::RecordEncoder
end

class PG::RecordEncoder
end

class PG::ReservedName
end

class PG::ReservedName
end

class PG::RestrictViolation
end

class PG::RestrictViolation
end

class PG::Result
  include ::Enumerable
  include ::PG::Constants
  def [](arg); end

  def autoclear?(); end

  def check(); end

  def check_result(); end

  def clear(); end

  def cleared?(); end

  def cmd_status(); end

  def cmd_tuples(); end

  def cmdtuples(); end

  def column_values(arg); end

  def each(*args, &blk); end

  def each_row(); end

  def each_without_profiling(); end

  def error_field(arg); end

  def error_message(); end

  def fformat(arg); end

  def field_name_type(); end

  def field_name_type=(field_name_type); end

  def field_names_as(type); end

  def field_values(arg); end

  def fields(); end

  def fmod(arg); end

  def fname(arg); end

  def fnumber(arg); end

  def fsize(arg); end

  def ftable(arg); end

  def ftablecol(arg); end

  def ftype(arg); end

  def getisnull(arg, arg1); end

  def getlength(arg, arg1); end

  def getvalue(arg, arg1); end

  def map_types!(type_map); end

  def mp_report_sql(&block); end

  def nfields(); end

  def nparams(); end

  def ntuples(); end

  def num_fields(); end

  def num_tuples(); end

  def oid_value(); end

  def paramtype(arg); end

  def res_status(arg); end

  def result_error_field(arg); end

  def result_error_message(); end

  def result_status(); end

  def result_verbose_error_message(arg, arg1); end

  def stream_each(); end

  def stream_each_row(); end

  def stream_each_tuple(); end

  def tuple(arg); end

  def tuple_values(arg); end

  def type_map(); end

  def type_map=(type_map); end

  def values(*args, &blk); end

  def values_without_profiling(); end

  def verbose_error_message(arg, arg1); end
end

class PG::SEInvalidSpecification
end

class PG::SEInvalidSpecification
end

class PG::SREFunctionExecutedNoReturnStatement
end

class PG::SREFunctionExecutedNoReturnStatement
end

class PG::SREModifyingSqlDataNotPermitted
end

class PG::SREModifyingSqlDataNotPermitted
end

class PG::SREProhibitedSqlStatementAttempted
end

class PG::SREProhibitedSqlStatementAttempted
end

class PG::SREReadingSqlDataNotPermitted
end

class PG::SREReadingSqlDataNotPermitted
end

class PG::SavepointException
end

class PG::SavepointException
end

class PG::SchemaAndDataStatementMixingNotSupported
end

class PG::SchemaAndDataStatementMixingNotSupported
end

class PG::SequenceGeneratorLimitExceeded
end

class PG::SequenceGeneratorLimitExceeded
end

class PG::ServerError
end

class PG::ServerError
end

class PG::SimpleCoder
end

class PG::SimpleCoder
end

class PG::SimpleDecoder
end

class PG::SimpleDecoder
end

class PG::SimpleEncoder
end

class PG::SimpleEncoder
end

class PG::SingletonSqlJsonItemRequired
end

class PG::SingletonSqlJsonItemRequired
end

class PG::SnapshotTooOld
end

class PG::SnapshotTooOld
end

class PG::SqlJsonArrayNotFound
end

class PG::SqlJsonArrayNotFound
end

class PG::SqlJsonMemberNotFound
end

class PG::SqlJsonMemberNotFound
end

class PG::SqlJsonNumberNotFound
end

class PG::SqlJsonNumberNotFound
end

class PG::SqlJsonObjectNotFound
end

class PG::SqlJsonObjectNotFound
end

class PG::SqlJsonScalarRequired
end

class PG::SqlJsonScalarRequired
end

class PG::SqlRoutineException
end

class PG::SqlRoutineException
end

class PG::SqlStatementNotYetComplete
end

class PG::SqlStatementNotYetComplete
end

class PG::SqlclientUnableToEstablishSqlconnection
end

class PG::SqlclientUnableToEstablishSqlconnection
end

class PG::SqlserverRejectedEstablishmentOfSqlconnection
end

class PG::SqlserverRejectedEstablishmentOfSqlconnection
end

class PG::StackedDiagnosticsAccessedWithoutActiveHandler
end

class PG::StackedDiagnosticsAccessedWithoutActiveHandler
end

class PG::StatementTooComplex
end

class PG::StatementTooComplex
end

class PG::StringDataLengthMismatch
end

class PG::StringDataLengthMismatch
end

class PG::StringDataRightTruncation
end

class PG::StringDataRightTruncation
end

class PG::SubstringError
end

class PG::SubstringError
end

class PG::SyntaxError
end

class PG::SyntaxError
end

class PG::SyntaxErrorOrAccessRuleViolation
end

class PG::SyntaxErrorOrAccessRuleViolation
end

class PG::SystemError
end

class PG::SystemError
end

class PG::TRDeadlockDetected
end

class PG::TRDeadlockDetected
end

class PG::TRIntegrityConstraintViolation
end

class PG::TRIntegrityConstraintViolation
end

class PG::TRSerializationFailure
end

class PG::TRSerializationFailure
end

class PG::TRStatementCompletionUnknown
end

class PG::TRStatementCompletionUnknown
end

class PG::TextDecoder::Array
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Array
end

class PG::TextDecoder::Boolean
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Boolean
end

class PG::TextDecoder::Bytea
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Bytea
end

class PG::TextDecoder::CopyRow
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::CopyRow
end

class PG::TextDecoder::Date
  def decode(string, tuple=T.unsafe(nil), field=T.unsafe(nil)); end
end

class PG::TextDecoder::Date
end

class PG::TextDecoder::Float
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Float
end

class PG::TextDecoder::FromBase64
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::FromBase64
end

class PG::TextDecoder::Identifier
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Identifier
end

class PG::TextDecoder::Inet
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Inet
end

class PG::TextDecoder::Integer
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Integer
end

class PG::TextDecoder::JSON
  def decode(string, tuple=T.unsafe(nil), field=T.unsafe(nil)); end
end

class PG::TextDecoder::JSON
end

class PG::TextDecoder::Numeric
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Numeric
end

class PG::TextDecoder::Record
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Record
end

class PG::TextDecoder::String
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::String
end

class PG::TextDecoder::Timestamp
  def decode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Timestamp
end

class PG::TextDecoder::TimestampUtc
end

class PG::TextDecoder::TimestampUtc
end

class PG::TextDecoder::TimestampUtcToLocal
end

class PG::TextDecoder::TimestampUtcToLocal
end

PG::TextDecoder::TimestampWithTimeZone = PG::TextDecoder::Timestamp

PG::TextDecoder::TimestampWithoutTimeZone = PG::TextDecoder::TimestampLocal

module PG::TextEncoder
end

class PG::TextEncoder::Array
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Array
end

class PG::TextEncoder::Boolean
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Boolean
end

class PG::TextEncoder::Bytea
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Bytea
end

class PG::TextEncoder::CopyRow
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::CopyRow
end

class PG::TextEncoder::Date
  def encode(value); end
end

class PG::TextEncoder::Date
end

class PG::TextEncoder::Float
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Float
end

class PG::TextEncoder::Identifier
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Identifier
end

class PG::TextEncoder::Inet
  def encode(value); end
end

class PG::TextEncoder::Inet
end

class PG::TextEncoder::Integer
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Integer
end

class PG::TextEncoder::JSON
  def encode(value); end
end

class PG::TextEncoder::JSON
end

class PG::TextEncoder::Numeric
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Numeric
end

class PG::TextEncoder::QuotedLiteral
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::QuotedLiteral
end

class PG::TextEncoder::Record
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Record
end

class PG::TextEncoder::String
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::String
end

class PG::TextEncoder::TimestampUtc
  def encode(value); end
end

class PG::TextEncoder::TimestampUtc
end

class PG::TextEncoder::TimestampWithTimeZone
  def encode(value); end
end

class PG::TextEncoder::TimestampWithTimeZone
end

class PG::TextEncoder::TimestampWithoutTimeZone
  def encode(value); end
end

class PG::TextEncoder::TimestampWithoutTimeZone
end

class PG::TextEncoder::ToBase64
  def encode(*arg); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::ToBase64
end

module PG::TextEncoder
end

class PG::TooManyArguments
end

class PG::TooManyArguments
end

class PG::TooManyColumns
end

class PG::TooManyColumns
end

class PG::TooManyConnections
end

class PG::TooManyConnections
end

class PG::TooManyJsonArrayElements
end

class PG::TooManyJsonArrayElements
end

class PG::TooManyJsonObjectMembers
end

class PG::TooManyJsonObjectMembers
end

class PG::TooManyRows
end

class PG::TooManyRows
end

class PG::TransactionResolutionUnknown
end

class PG::TransactionResolutionUnknown
end

class PG::TransactionRollback
end

class PG::TransactionRollback
end

class PG::TriggeredActionException
end

class PG::TriggeredActionException
end

class PG::TriggeredDataChangeViolation
end

class PG::TriggeredDataChangeViolation
end

class PG::TrimError
end

class PG::TrimError
end

class PG::Tuple
  include ::Enumerable
  def [](arg); end

  def each(&blk); end

  def each_key(&block); end

  def each_value(); end

  def fetch(*arg); end

  def has_key?(key); end

  def index(arg); end

  def key?(key); end

  def keys(); end

  def length(); end

  def size(); end

  def values(); end
end

class PG::Tuple
end

module PG::TypeMap::DefaultTypeMappable
  def default_type_map(); end

  def default_type_map=(default_type_map); end

  def with_default_type_map(arg); end
end

class PG::TypeMapAllStrings
end

class PG::TypeMapAllStrings
end

class PG::TypeMapByClass
  include ::PG::TypeMap::DefaultTypeMappable
  def [](arg); end

  def []=(arg, arg1); end

  def coders(); end
end

class PG::TypeMapByClass
end

class PG::TypeMapByColumn
  include ::PG::TypeMap::DefaultTypeMappable
  def coders(); end

  def initialize(arg); end

  def oids(); end
end

class PG::TypeMapByColumn
end

class PG::TypeMapByMriType
  include ::PG::TypeMap::DefaultTypeMappable
  def [](arg); end

  def []=(arg, arg1); end

  def coders(); end
end

class PG::TypeMapByMriType
end

class PG::TypeMapByOid
  include ::PG::TypeMap::DefaultTypeMappable
  def add_coder(arg); end

  def build_column_map(arg); end

  def coders(); end

  def max_rows_for_online_lookup(); end

  def max_rows_for_online_lookup=(max_rows_for_online_lookup); end

  def rm_coder(arg, arg1); end
end

class PG::TypeMapByOid
end

class PG::TypeMapInRuby
  include ::PG::TypeMap::DefaultTypeMappable
  def typecast_copy_get(arg, arg1, arg2, arg3); end

  def typecast_query_param(arg, arg1); end

  def typecast_result_value(arg, arg1, arg2); end
end

class PG::TypeMapInRuby
end

class PG::UnableToSend
end

class PG::UnableToSend
end

class PG::UndefinedColumn
end

class PG::UndefinedColumn
end

class PG::UndefinedFile
end

class PG::UndefinedFile
end

class PG::UndefinedFunction
end

class PG::UndefinedFunction
end

class PG::UndefinedObject
end

class PG::UndefinedObject
end

class PG::UndefinedParameter
end

class PG::UndefinedParameter
end

class PG::UndefinedTable
end

class PG::UndefinedTable
end

class PG::UniqueViolation
end

class PG::UniqueViolation
end

class PG::UnsafeNewEnumValueUsage
end

class PG::UnsafeNewEnumValueUsage
end

class PG::UnterminatedCString
end

class PG::UnterminatedCString
end

class PG::UntranslatableCharacter
end

class PG::UntranslatableCharacter
end

class PG::WindowingError
end

class PG::WindowingError
end

class PG::WithCheckOptionViolation
end

class PG::WithCheckOptionViolation
end

class PG::WrongObjectType
end

class PG::WrongObjectType
end

class PG::ZeroLengthCharacterString
end

class PG::ZeroLengthCharacterString
end

module PG
  def self.connect(*args, **kwargs); end

  def self.init_openssl(arg, arg1); end

  def self.init_ssl(arg); end

  def self.is_threadsafe?(); end

  def self.isthreadsafe(); end

  def self.library_version(); end

  def self.threadsafe?(); end

  def self.version_string(include_buildnum=T.unsafe(nil)); end
end

class PP
  def self.width_for(out); end
end

ParseError = Racc::ParseError

module Parser
  MESSAGES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Parser::Context
  FLAGS = ::T.let(nil, ::T.untyped)
end

Parser::CurrentRuby = Parser::Ruby31

class Parser::Diagnostic
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer
  ESCAPES = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_BEGIN = ::T.let(nil, ::T.untyped)
  LEX_STATES = ::T.let(nil, ::T.untyped)
  PUNCTUATION = ::T.let(nil, ::T.untyped)
  PUNCTUATION_BEGIN = ::T.let(nil, ::T.untyped)
  REGEXP_META_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Dedenter
  TAB_WIDTH = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Literal
  DELIMITERS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::MaxNumparamStack
  ORDINARY_PARAMS = ::T.let(nil, ::T.untyped)
end

module Parser::Meta
  NODE_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby24
  def _reduce_10(val, _values, result); end

  def _reduce_100(val, _values, result); end

  def _reduce_101(val, _values, result); end

  def _reduce_102(val, _values, result); end

  def _reduce_103(val, _values, result); end

  def _reduce_104(val, _values, result); end

  def _reduce_105(val, _values, result); end

  def _reduce_106(val, _values, result); end

  def _reduce_107(val, _values, result); end

  def _reduce_108(val, _values, result); end

  def _reduce_11(val, _values, result); end

  def _reduce_110(val, _values, result); end

  def _reduce_111(val, _values, result); end

  def _reduce_112(val, _values, result); end

  def _reduce_118(val, _values, result); end

  def _reduce_12(val, _values, result); end

  def _reduce_122(val, _values, result); end

  def _reduce_123(val, _values, result); end

  def _reduce_124(val, _values, result); end

  def _reduce_13(val, _values, result); end

  def _reduce_14(val, _values, result); end

  def _reduce_16(val, _values, result); end

  def _reduce_17(val, _values, result); end

  def _reduce_18(val, _values, result); end

  def _reduce_19(val, _values, result); end

  def _reduce_196(val, _values, result); end

  def _reduce_197(val, _values, result); end

  def _reduce_198(val, _values, result); end

  def _reduce_199(val, _values, result); end

  def _reduce_2(val, _values, result); end

  def _reduce_20(val, _values, result); end

  def _reduce_200(val, _values, result); end

  def _reduce_201(val, _values, result); end

  def _reduce_202(val, _values, result); end

  def _reduce_203(val, _values, result); end

  def _reduce_204(val, _values, result); end

  def _reduce_205(val, _values, result); end

  def _reduce_206(val, _values, result); end

  def _reduce_207(val, _values, result); end

  def _reduce_208(val, _values, result); end

  def _reduce_209(val, _values, result); end

  def _reduce_21(val, _values, result); end

  def _reduce_210(val, _values, result); end

  def _reduce_211(val, _values, result); end

  def _reduce_212(val, _values, result); end

  def _reduce_213(val, _values, result); end

  def _reduce_214(val, _values, result); end

  def _reduce_215(val, _values, result); end

  def _reduce_216(val, _values, result); end

  def _reduce_217(val, _values, result); end

  def _reduce_218(val, _values, result); end

  def _reduce_219(val, _values, result); end

  def _reduce_22(val, _values, result); end

  def _reduce_220(val, _values, result); end

  def _reduce_221(val, _values, result); end

  def _reduce_222(val, _values, result); end

  def _reduce_223(val, _values, result); end

  def _reduce_224(val, _values, result); end

  def _reduce_225(val, _values, result); end

  def _reduce_226(val, _values, result); end

  def _reduce_227(val, _values, result); end

  def _reduce_228(val, _values, result); end

  def _reduce_229(val, _values, result); end

  def _reduce_23(val, _values, result); end

  def _reduce_230(val, _values, result); end

  def _reduce_231(val, _values, result); end

  def _reduce_232(val, _values, result); end

  def _reduce_233(val, _values, result); end

  def _reduce_234(val, _values, result); end

  def _reduce_235(val, _values, result); end

  def _reduce_236(val, _values, result); end

  def _reduce_24(val, _values, result); end

  def _reduce_241(val, _values, result); end

  def _reduce_242(val, _values, result); end

  def _reduce_244(val, _values, result); end

  def _reduce_245(val, _values, result); end

  def _reduce_246(val, _values, result); end

  def _reduce_248(val, _values, result); end

  def _reduce_25(val, _values, result); end

  def _reduce_251(val, _values, result); end

  def _reduce_252(val, _values, result); end

  def _reduce_253(val, _values, result); end

  def _reduce_254(val, _values, result); end

  def _reduce_255(val, _values, result); end

  def _reduce_256(val, _values, result); end

  def _reduce_257(val, _values, result); end

  def _reduce_258(val, _values, result); end

  def _reduce_259(val, _values, result); end

  def _reduce_26(val, _values, result); end

  def _reduce_260(val, _values, result); end

  def _reduce_261(val, _values, result); end

  def _reduce_262(val, _values, result); end

  def _reduce_263(val, _values, result); end

  def _reduce_264(val, _values, result); end

  def _reduce_265(val, _values, result); end

  def _reduce_266(val, _values, result); end

  def _reduce_267(val, _values, result); end

  def _reduce_269(val, _values, result); end

  def _reduce_27(val, _values, result); end

  def _reduce_270(val, _values, result); end

  def _reduce_271(val, _values, result); end

  def _reduce_28(val, _values, result); end

  def _reduce_282(val, _values, result); end

  def _reduce_283(val, _values, result); end

  def _reduce_284(val, _values, result); end

  def _reduce_285(val, _values, result); end

  def _reduce_286(val, _values, result); end

  def _reduce_287(val, _values, result); end

  def _reduce_288(val, _values, result); end

  def _reduce_289(val, _values, result); end

  def _reduce_290(val, _values, result); end

  def _reduce_291(val, _values, result); end

  def _reduce_292(val, _values, result); end

  def _reduce_293(val, _values, result); end

  def _reduce_294(val, _values, result); end

  def _reduce_295(val, _values, result); end

  def _reduce_296(val, _values, result); end

  def _reduce_297(val, _values, result); end

  def _reduce_298(val, _values, result); end

  def _reduce_299(val, _values, result); end

  def _reduce_3(val, _values, result); end

  def _reduce_30(val, _values, result); end

  def _reduce_300(val, _values, result); end

  def _reduce_301(val, _values, result); end

  def _reduce_303(val, _values, result); end

  def _reduce_304(val, _values, result); end

  def _reduce_305(val, _values, result); end

  def _reduce_306(val, _values, result); end

  def _reduce_307(val, _values, result); end

  def _reduce_308(val, _values, result); end

  def _reduce_309(val, _values, result); end

  def _reduce_31(val, _values, result); end

  def _reduce_310(val, _values, result); end

  def _reduce_311(val, _values, result); end

  def _reduce_312(val, _values, result); end

  def _reduce_313(val, _values, result); end

  def _reduce_314(val, _values, result); end

  def _reduce_315(val, _values, result); end

  def _reduce_316(val, _values, result); end

  def _reduce_317(val, _values, result); end

  def _reduce_318(val, _values, result); end

  def _reduce_319(val, _values, result); end

  def _reduce_32(val, _values, result); end

  def _reduce_320(val, _values, result); end

  def _reduce_321(val, _values, result); end

  def _reduce_322(val, _values, result); end

  def _reduce_323(val, _values, result); end

  def _reduce_324(val, _values, result); end

  def _reduce_325(val, _values, result); end

  def _reduce_326(val, _values, result); end

  def _reduce_327(val, _values, result); end

  def _reduce_328(val, _values, result); end

  def _reduce_329(val, _values, result); end

  def _reduce_330(val, _values, result); end

  def _reduce_331(val, _values, result); end

  def _reduce_332(val, _values, result); end

  def _reduce_333(val, _values, result); end

  def _reduce_335(val, _values, result); end

  def _reduce_336(val, _values, result); end

  def _reduce_339(val, _values, result); end

  def _reduce_34(val, _values, result); end

  def _reduce_343(val, _values, result); end

  def _reduce_345(val, _values, result); end

  def _reduce_348(val, _values, result); end

  def _reduce_349(val, _values, result); end

  def _reduce_35(val, _values, result); end

  def _reduce_350(val, _values, result); end

  def _reduce_351(val, _values, result); end

  def _reduce_353(val, _values, result); end

  def _reduce_354(val, _values, result); end

  def _reduce_355(val, _values, result); end

  def _reduce_356(val, _values, result); end

  def _reduce_357(val, _values, result); end

  def _reduce_358(val, _values, result); end

  def _reduce_359(val, _values, result); end

  def _reduce_36(val, _values, result); end

  def _reduce_360(val, _values, result); end

  def _reduce_361(val, _values, result); end

  def _reduce_362(val, _values, result); end

  def _reduce_363(val, _values, result); end

  def _reduce_364(val, _values, result); end

  def _reduce_365(val, _values, result); end

  def _reduce_366(val, _values, result); end

  def _reduce_367(val, _values, result); end

  def _reduce_368(val, _values, result); end

  def _reduce_369(val, _values, result); end

  def _reduce_37(val, _values, result); end

  def _reduce_370(val, _values, result); end

  def _reduce_371(val, _values, result); end

  def _reduce_373(val, _values, result); end

  def _reduce_374(val, _values, result); end

  def _reduce_375(val, _values, result); end

  def _reduce_376(val, _values, result); end

  def _reduce_377(val, _values, result); end

  def _reduce_378(val, _values, result); end

  def _reduce_379(val, _values, result); end

  def _reduce_38(val, _values, result); end

  def _reduce_380(val, _values, result); end

  def _reduce_382(val, _values, result); end

  def _reduce_383(val, _values, result); end

  def _reduce_384(val, _values, result); end

  def _reduce_385(val, _values, result); end

  def _reduce_386(val, _values, result); end

  def _reduce_387(val, _values, result); end

  def _reduce_388(val, _values, result); end

  def _reduce_389(val, _values, result); end

  def _reduce_39(val, _values, result); end

  def _reduce_390(val, _values, result); end

  def _reduce_391(val, _values, result); end

  def _reduce_393(val, _values, result); end

  def _reduce_394(val, _values, result); end

  def _reduce_395(val, _values, result); end

  def _reduce_396(val, _values, result); end

  def _reduce_397(val, _values, result); end

  def _reduce_398(val, _values, result); end

  def _reduce_399(val, _values, result); end

  def _reduce_4(val, _values, result); end

  def _reduce_40(val, _values, result); end

  def _reduce_400(val, _values, result); end

  def _reduce_401(val, _values, result); end

  def _reduce_402(val, _values, result); end

  def _reduce_403(val, _values, result); end

  def _reduce_404(val, _values, result); end

  def _reduce_405(val, _values, result); end

  def _reduce_406(val, _values, result); end

  def _reduce_407(val, _values, result); end

  def _reduce_408(val, _values, result); end

  def _reduce_409(val, _values, result); end

  def _reduce_41(val, _values, result); end

  def _reduce_410(val, _values, result); end

  def _reduce_411(val, _values, result); end

  def _reduce_412(val, _values, result); end

  def _reduce_413(val, _values, result); end

  def _reduce_414(val, _values, result); end

  def _reduce_415(val, _values, result); end

  def _reduce_416(val, _values, result); end

  def _reduce_417(val, _values, result); end

  def _reduce_418(val, _values, result); end

  def _reduce_419(val, _values, result); end

  def _reduce_420(val, _values, result); end

  def _reduce_421(val, _values, result); end

  def _reduce_422(val, _values, result); end

  def _reduce_423(val, _values, result); end

  def _reduce_424(val, _values, result); end

  def _reduce_425(val, _values, result); end

  def _reduce_426(val, _values, result); end

  def _reduce_427(val, _values, result); end

  def _reduce_429(val, _values, result); end

  def _reduce_43(val, _values, result); end

  def _reduce_430(val, _values, result); end

  def _reduce_431(val, _values, result); end

  def _reduce_434(val, _values, result); end

  def _reduce_436(val, _values, result); end

  def _reduce_441(val, _values, result); end

  def _reduce_442(val, _values, result); end

  def _reduce_443(val, _values, result); end

  def _reduce_444(val, _values, result); end

  def _reduce_445(val, _values, result); end

  def _reduce_446(val, _values, result); end

  def _reduce_447(val, _values, result); end

  def _reduce_448(val, _values, result); end

  def _reduce_449(val, _values, result); end

  def _reduce_450(val, _values, result); end

  def _reduce_451(val, _values, result); end

  def _reduce_452(val, _values, result); end

  def _reduce_453(val, _values, result); end

  def _reduce_454(val, _values, result); end

  def _reduce_455(val, _values, result); end

  def _reduce_456(val, _values, result); end

  def _reduce_457(val, _values, result); end

  def _reduce_458(val, _values, result); end

  def _reduce_459(val, _values, result); end

  def _reduce_46(val, _values, result); end

  def _reduce_460(val, _values, result); end

  def _reduce_461(val, _values, result); end

  def _reduce_462(val, _values, result); end

  def _reduce_463(val, _values, result); end

  def _reduce_464(val, _values, result); end

  def _reduce_465(val, _values, result); end

  def _reduce_466(val, _values, result); end

  def _reduce_467(val, _values, result); end

  def _reduce_468(val, _values, result); end

  def _reduce_469(val, _values, result); end

  def _reduce_47(val, _values, result); end

  def _reduce_470(val, _values, result); end

  def _reduce_471(val, _values, result); end

  def _reduce_472(val, _values, result); end

  def _reduce_473(val, _values, result); end

  def _reduce_474(val, _values, result); end

  def _reduce_475(val, _values, result); end

  def _reduce_477(val, _values, result); end

  def _reduce_478(val, _values, result); end

  def _reduce_479(val, _values, result); end

  def _reduce_48(val, _values, result); end

  def _reduce_480(val, _values, result); end

  def _reduce_481(val, _values, result); end

  def _reduce_482(val, _values, result); end

  def _reduce_483(val, _values, result); end

  def _reduce_484(val, _values, result); end

  def _reduce_485(val, _values, result); end

  def _reduce_486(val, _values, result); end

  def _reduce_487(val, _values, result); end

  def _reduce_488(val, _values, result); end

  def _reduce_489(val, _values, result); end

  def _reduce_49(val, _values, result); end

  def _reduce_490(val, _values, result); end

  def _reduce_491(val, _values, result); end

  def _reduce_492(val, _values, result); end

  def _reduce_493(val, _values, result); end

  def _reduce_494(val, _values, result); end

  def _reduce_495(val, _values, result); end

  def _reduce_496(val, _values, result); end

  def _reduce_497(val, _values, result); end

  def _reduce_498(val, _values, result); end

  def _reduce_499(val, _values, result); end

  def _reduce_5(val, _values, result); end

  def _reduce_500(val, _values, result); end

  def _reduce_501(val, _values, result); end

  def _reduce_502(val, _values, result); end

  def _reduce_503(val, _values, result); end

  def _reduce_504(val, _values, result); end

  def _reduce_505(val, _values, result); end

  def _reduce_506(val, _values, result); end

  def _reduce_507(val, _values, result); end

  def _reduce_508(val, _values, result); end

  def _reduce_509(val, _values, result); end

  def _reduce_510(val, _values, result); end

  def _reduce_511(val, _values, result); end

  def _reduce_512(val, _values, result); end

  def _reduce_513(val, _values, result); end

  def _reduce_514(val, _values, result); end

  def _reduce_515(val, _values, result); end

  def _reduce_516(val, _values, result); end

  def _reduce_517(val, _values, result); end

  def _reduce_518(val, _values, result); end

  def _reduce_519(val, _values, result); end

  def _reduce_520(val, _values, result); end

  def _reduce_521(val, _values, result); end

  def _reduce_522(val, _values, result); end

  def _reduce_523(val, _values, result); end

  def _reduce_524(val, _values, result); end

  def _reduce_525(val, _values, result); end

  def _reduce_526(val, _values, result); end

  def _reduce_527(val, _values, result); end

  def _reduce_528(val, _values, result); end

  def _reduce_529(val, _values, result); end

  def _reduce_530(val, _values, result); end

  def _reduce_531(val, _values, result); end

  def _reduce_532(val, _values, result); end

  def _reduce_533(val, _values, result); end

  def _reduce_535(val, _values, result); end

  def _reduce_536(val, _values, result); end

  def _reduce_537(val, _values, result); end

  def _reduce_538(val, _values, result); end

  def _reduce_539(val, _values, result); end

  def _reduce_540(val, _values, result); end

  def _reduce_541(val, _values, result); end

  def _reduce_542(val, _values, result); end

  def _reduce_543(val, _values, result); end

  def _reduce_544(val, _values, result); end

  def _reduce_545(val, _values, result); end

  def _reduce_546(val, _values, result); end

  def _reduce_547(val, _values, result); end

  def _reduce_548(val, _values, result); end

  def _reduce_549(val, _values, result); end

  def _reduce_55(val, _values, result); end

  def _reduce_552(val, _values, result); end

  def _reduce_553(val, _values, result); end

  def _reduce_554(val, _values, result); end

  def _reduce_555(val, _values, result); end

  def _reduce_556(val, _values, result); end

  def _reduce_557(val, _values, result); end

  def _reduce_558(val, _values, result); end

  def _reduce_559(val, _values, result); end

  def _reduce_56(val, _values, result); end

  def _reduce_562(val, _values, result); end

  def _reduce_563(val, _values, result); end

  def _reduce_566(val, _values, result); end

  def _reduce_567(val, _values, result); end

  def _reduce_568(val, _values, result); end

  def _reduce_57(val, _values, result); end

  def _reduce_570(val, _values, result); end

  def _reduce_571(val, _values, result); end

  def _reduce_573(val, _values, result); end

  def _reduce_574(val, _values, result); end

  def _reduce_575(val, _values, result); end

  def _reduce_576(val, _values, result); end

  def _reduce_577(val, _values, result); end

  def _reduce_578(val, _values, result); end

  def _reduce_59(val, _values, result); end

  def _reduce_591(val, _values, result); end

  def _reduce_592(val, _values, result); end

  def _reduce_597(val, _values, result); end

  def _reduce_598(val, _values, result); end

  def _reduce_6(val, _values, result); end

  def _reduce_60(val, _values, result); end

  def _reduce_602(val, _values, result); end

  def _reduce_606(val, _values, result); end

  def _reduce_61(val, _values, result); end

  def _reduce_62(val, _values, result); end

  def _reduce_63(val, _values, result); end

  def _reduce_64(val, _values, result); end

  def _reduce_65(val, _values, result); end

  def _reduce_66(val, _values, result); end

  def _reduce_67(val, _values, result); end

  def _reduce_68(val, _values, result); end

  def _reduce_69(val, _values, result); end

  def _reduce_70(val, _values, result); end

  def _reduce_71(val, _values, result); end

  def _reduce_72(val, _values, result); end

  def _reduce_73(val, _values, result); end

  def _reduce_75(val, _values, result); end

  def _reduce_76(val, _values, result); end

  def _reduce_77(val, _values, result); end

  def _reduce_78(val, _values, result); end

  def _reduce_79(val, _values, result); end

  def _reduce_8(val, _values, result); end

  def _reduce_80(val, _values, result); end

  def _reduce_81(val, _values, result); end

  def _reduce_82(val, _values, result); end

  def _reduce_83(val, _values, result); end

  def _reduce_85(val, _values, result); end

  def _reduce_86(val, _values, result); end

  def _reduce_87(val, _values, result); end

  def _reduce_88(val, _values, result); end

  def _reduce_89(val, _values, result); end

  def _reduce_9(val, _values, result); end

  def _reduce_90(val, _values, result); end

  def _reduce_91(val, _values, result); end

  def _reduce_92(val, _values, result); end

  def _reduce_93(val, _values, result); end

  def _reduce_94(val, _values, result); end

  def _reduce_95(val, _values, result); end

  def _reduce_96(val, _values, result); end

  def _reduce_97(val, _values, result); end

  def _reduce_98(val, _values, result); end

  def _reduce_99(val, _values, result); end

  def _reduce_none(val, _values, result); end

  def default_encoding(); end

  def local_pop(); end

  def local_push(); end

  def version(); end
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby31
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Buffer
  ENCODING_RE = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Comment::Associator
  MAGIC_COMMENT_RE = ::T.let(nil, ::T.untyped)
  POSTFIX_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Source::TreeRewriter
  ACTIONS = ::T.let(nil, ::T.untyped)
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
  POLICY_TO_LEVEL = ::T.let(nil, ::T.untyped)
end

class Parser::StaticEnvironment
  ANONYMOUS_BLOCKARG = ::T.let(nil, ::T.untyped)
  FORWARD_ARGS = ::T.let(nil, ::T.untyped)
end

class PatchedStringIO
  def orig_read_nonblock(*arg); end

  def read_nonblock(size, *args, **kwargs); end
end

class Proc
  def <<(arg); end

  def >>(arg); end

  def clone(); end
end

class Process::Status
  def self.wait(*arg); end
end

class Process::Tms
  def self.keyword_init?(); end
end

module Process
  extend ::DEBUGGER__::ForkInterceptor
  extend ::ActiveSupport::ForkTracker::ModernCoreExt
end

class Promise
  VERSION = ::T.let(nil, ::T.untyped)
end

module Psych
  VERSION = ::T.let(nil, ::T.untyped)
end

class Psych::Visitors::RestrictedYAMLTree
  def visit_Symbol(sym); end
  DEFAULT_PERMITTED_CLASSES = ::T.let(nil, ::T.untyped)
end

class Psych::Visitors::RestrictedYAMLTree
end

class Psych::Visitors::Visitor
  def self.dispatch_cache(); end
end

module Psych
  extend ::Bootsnap::CompileCache::YAML::Psych4::Patch
  def self.add_builtin_type(type_tag, &block); end

  def self.add_domain_type(domain, type_tag, &block); end

  def self.add_tag(tag, klass); end

  def self.config(); end

  def self.domain_types(*args, **arg, &block); end

  def self.domain_types=(*args, **arg, &block); end

  def self.dump_tags(*args, **arg, &block); end

  def self.dump_tags=(*args, **arg, &block); end

  def self.libyaml_version(); end

  def self.load_tags(*args, **arg, &block); end

  def self.load_tags=(*args, **arg, &block); end

  def self.remove_type(type_tag); end

  def self.safe_dump(o, io=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.safe_load_file(filename, **kwargs); end

  def self.unsafe_load(yaml, filename: T.unsafe(nil), fallback: T.unsafe(nil), symbolize_names: T.unsafe(nil), freeze: T.unsafe(nil)); end

  def self.unsafe_load_file(filename, **kwargs); end
end

module PublicSuffix
  BANG = ::T.let(nil, ::T.untyped)
  DOT = ::T.let(nil, ::T.untyped)
  STAR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PublicSuffix::List
  DEFAULT_LIST_PATH = ::T.let(nil, ::T.untyped)
end

module Puma
  HAS_FORK = ::T.let(nil, ::T.untyped)
  HAS_SSL = ::T.let(nil, ::T.untyped)
  HAS_UNIX_SOCKET = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  IS_JRUBY = ::T.let(nil, ::T.untyped)
  IS_MRI = ::T.let(nil, ::T.untyped)
  IS_OSX = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  Plugins = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Puma::Binder
  def activated_sockets(); end

  def add_ssl_listener(host, port, ctx, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_tcp_listener(host, port, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_unix_listener(path, umask=T.unsafe(nil), mode=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def close(); end

  def close_listeners(); end

  def connected_ports(); end

  def create_activated_fds(env_hash); end

  def create_inherited_fds(env_hash); end

  def env(sock); end

  def envs(); end

  def inherit_ssl_listener(fd, ctx); end

  def inherit_tcp_listener(host, port, fd); end

  def inherit_unix_listener(path, fd); end

  def inherited_fds(); end

  def initialize(events, conf=T.unsafe(nil)); end

  def ios(); end

  def ios=(ios); end

  def listeners(); end

  def listeners=(listeners); end

  def localhost_authority(); end

  def localhost_authority_context(); end

  def parse(binds, logger, log_msg=T.unsafe(nil)); end

  def proto_env(); end

  def redirects_for_restart(); end

  def redirects_for_restart_env(); end

  def synthesize_binds_from_activated_fs(binds, only_matching); end

  def unix_paths(); end
  RACK_VERSION = ::T.let(nil, ::T.untyped)
end

class Puma::Client
  def body(); end

  def call(); end

  def can_close?(); end

  def close(); end

  def closed?(*args, **arg, &block); end

  def eagerly_finish(); end

  def env(); end

  def expect_proxy_proto=(val); end

  def finish(timeout); end

  def hijacked(); end

  def in_data_phase(); end

  def initialize(io, env=T.unsafe(nil)); end

  def io(); end

  def io_ok?(); end

  def listener(); end

  def listener=(listener); end

  def peerip(); end

  def peerip=(peerip); end

  def ready(); end

  def remote_addr_header(); end

  def remote_addr_header=(remote_addr_header); end

  def reset(fast_check=T.unsafe(nil)); end

  def set_timeout(val); end

  def tempfile(); end

  def timeout(); end

  def timeout!(); end

  def timeout_at(); end

  def to_io(); end

  def try_to_finish(); end

  def try_to_parse_proxy_protocol(); end

  def write_error(status_code); end
  ALLOWED_TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE_INVALID = ::T.let(nil, ::T.untyped)
  CHUNK_VALID_ENDING = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_VALUE_INVALID = ::T.let(nil, ::T.untyped)
  EmptyBody = ::T.let(nil, ::T.untyped)
  TE_ERR_MSG = ::T.let(nil, ::T.untyped)
end

class Puma::Cluster
  def all_workers_booted?(); end

  def check_workers(); end

  def cull_start_index(diff); end

  def cull_workers(); end

  def fork_worker!(); end

  def halt(); end

  def next_worker_index(); end

  def phased_restart(); end

  def preload?(); end

  def reload_worker_directory(); end

  def restart(); end

  def run(); end

  def setup_signals(); end

  def spawn_worker(idx, master); end

  def spawn_workers(); end

  def start_phased_restart(); end

  def stats(); end

  def stop(); end

  def stop_blocked(); end

  def stop_workers(); end

  def worker(index, master); end

  def workers_to_cull(diff); end
end

class Puma::Cluster::Worker
  def index(); end

  def initialize(index:, master:, launcher:, pipes:, server: T.unsafe(nil)); end

  def master(); end

  def run(); end
end

class Puma::Cluster::WorkerHandle
  def boot!(); end

  def booted?(); end

  def hup(); end

  def index(); end

  def initialize(idx, pid, phase, options); end

  def kill(); end

  def last_checkin(); end

  def last_status(); end

  def phase(); end

  def phase=(phase); end

  def pid(); end

  def pid=(pid); end

  def ping!(status); end

  def ping_timeout(); end

  def signal(); end

  def started_at(); end

  def term(); end

  def term!(); end

  def term?(); end

  def uptime(); end
end

module Puma::ConfigDefault
  DefaultRackup = ::T.let(nil, ::T.untyped)
  DefaultTCPHost = ::T.let(nil, ::T.untyped)
  DefaultTCPPort = ::T.let(nil, ::T.untyped)
  DefaultWorkerCheckInterval = ::T.let(nil, ::T.untyped)
  DefaultWorkerShutdownTimeout = ::T.let(nil, ::T.untyped)
  DefaultWorkerTimeout = ::T.let(nil, ::T.untyped)
end

class Puma::Configuration
  def app(); end

  def app_configured?(); end

  def clamp(); end

  def config_files(); end

  def configure(); end

  def default_max_threads(); end

  def environment(); end

  def environment_str(); end

  def final_options(); end

  def flatten(); end

  def flatten!(); end

  def initialize(user_options=T.unsafe(nil), default_options=T.unsafe(nil), &block); end

  def load(); end

  def load_plugin(name); end

  def options(); end

  def plugins(); end

  def puma_default_options(); end

  def rackup(); end

  def run_hooks(key, arg, events); end
end

class Puma::Configuration::ConfigMiddleware
  def call(env); end

  def initialize(config, app); end
end

class Puma::Configuration
  def self.random_token(); end

  def self.temp_path(); end
end

module Puma::Const
  BANNED_HEADER_KEY = ::T.let(nil, ::T.untyped)
  CGI_VER = ::T.let(nil, ::T.untyped)
  CHUNKED = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  CLOSE = ::T.let(nil, ::T.untyped)
  CLOSE_CHUNKED = ::T.let(nil, ::T.untyped)
  CODE_NAME = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONNECTION_CLOSE = ::T.let(nil, ::T.untyped)
  CONNECTION_KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH2 = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_S = ::T.let(nil, ::T.untyped)
  CONTINUE = ::T.let(nil, ::T.untyped)
  DQUOTE = ::T.let(nil, ::T.untyped)
  EARLY_HINTS = ::T.let(nil, ::T.untyped)
  ERROR_RESPONSE = ::T.let(nil, ::T.untyped)
  FAST_TRACK_KA_TIMEOUT = ::T.let(nil, ::T.untyped)
  FIRST_DATA_TIMEOUT = ::T.let(nil, ::T.untyped)
  GATEWAY_INTERFACE = ::T.let(nil, ::T.untyped)
  HALT_COMMAND = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HIJACK = ::T.let(nil, ::T.untyped)
  HIJACK_IO = ::T.let(nil, ::T.untyped)
  HIJACK_P = ::T.let(nil, ::T.untyped)
  HTTP = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTPS_KEY = ::T.let(nil, ::T.untyped)
  HTTP_10_200 = ::T.let(nil, ::T.untyped)
  HTTP_11 = ::T.let(nil, ::T.untyped)
  HTTP_11_100 = ::T.let(nil, ::T.untyped)
  HTTP_11_200 = ::T.let(nil, ::T.untyped)
  HTTP_CONNECTION = ::T.let(nil, ::T.untyped)
  HTTP_EXPECT = ::T.let(nil, ::T.untyped)
  HTTP_HEADER_DELIMITER = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  ILLEGAL_HEADER_KEY_REGEX = ::T.let(nil, ::T.untyped)
  ILLEGAL_HEADER_VALUE_REGEX = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  LINE_END = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  LOCALHOST_IP = ::T.let(nil, ::T.untyped)
  MAX_BODY = ::T.let(nil, ::T.untyped)
  MAX_FAST_INLINE = ::T.let(nil, ::T.untyped)
  MAX_HEADER = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  PERSISTENT_TIMEOUT = ::T.let(nil, ::T.untyped)
  PORT_443 = ::T.let(nil, ::T.untyped)
  PORT_80 = ::T.let(nil, ::T.untyped)
  PROXY_PROTOCOL_V1_REGEX = ::T.let(nil, ::T.untyped)
  PUMA_CONFIG = ::T.let(nil, ::T.untyped)
  PUMA_PEERCERT = ::T.let(nil, ::T.untyped)
  PUMA_SERVER_STRING = ::T.let(nil, ::T.untyped)
  PUMA_SOCKET = ::T.let(nil, ::T.untyped)
  PUMA_TMP_BASE = ::T.let(nil, ::T.untyped)
  PUMA_VERSION = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_AFTER_REPLY = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  REMOTE_ADDR = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  REQUEST_URI = ::T.let(nil, ::T.untyped)
  RESTART_COMMAND = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SERVER_SOFTWARE = ::T.let(nil, ::T.untyped)
  STOP_COMMAND = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING2 = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING_CHUNKED = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WRITE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Puma::DSL
  def _load_from(path); end

  def _offer_plugins(); end

  def activate_control_app(url=T.unsafe(nil), opts=T.unsafe(nil)); end

  def after_worker_boot(&block); end

  def after_worker_fork(&block); end

  def app(obj=T.unsafe(nil), &block); end

  def before_fork(&block); end

  def bind(url); end

  def bind_to_activated_sockets(bind=T.unsafe(nil)); end

  def clean_thread_locals(which=T.unsafe(nil)); end

  def clear_binds!(); end

  def debug(); end

  def default_host(); end

  def directory(dir); end

  def drain_on_shutdown(which=T.unsafe(nil)); end

  def early_hints(answer=T.unsafe(nil)); end

  def environment(environment); end

  def extra_runtime_dependencies(answer=T.unsafe(nil)); end

  def first_data_timeout(seconds); end

  def force_shutdown_after(val=T.unsafe(nil)); end

  def fork_worker(after_requests=T.unsafe(nil)); end

  def get(key, default=T.unsafe(nil)); end

  def initialize(options, config); end

  def inject(&blk); end

  def io_selector_backend(backend); end

  def load(file); end

  def log_formatter(&block); end

  def log_requests(which=T.unsafe(nil)); end

  def lowlevel_error_handler(obj=T.unsafe(nil), &block); end

  def max_fast_inline(num_of_requests); end

  def mutate_stdout_and_stderr_to_sync_on_write(enabled=T.unsafe(nil)); end

  def nakayoshi_fork(enabled=T.unsafe(nil)); end

  def on_refork(&block); end

  def on_restart(&block); end

  def on_worker_boot(&block); end

  def on_worker_fork(&block); end

  def on_worker_shutdown(&block); end

  def out_of_band(&block); end

  def persistent_timeout(seconds); end

  def pidfile(path); end

  def plugin(name); end

  def port(port, host=T.unsafe(nil)); end

  def preload_app!(answer=T.unsafe(nil)); end

  def prune_bundler(answer=T.unsafe(nil)); end

  def queue_requests(answer=T.unsafe(nil)); end

  def quiet(which=T.unsafe(nil)); end

  def rack_url_scheme(scheme=T.unsafe(nil)); end

  def rackup(path); end

  def raise_exception_on_sigterm(answer=T.unsafe(nil)); end

  def restart_command(cmd); end

  def set_default_host(host); end

  def set_remote_address(val=T.unsafe(nil)); end

  def shutdown_debug(val=T.unsafe(nil)); end

  def silence_single_worker_warning(); end

  def ssl_bind(host, port, opts=T.unsafe(nil)); end

  def state_path(path); end

  def state_permission(permission); end

  def stdout_redirect(stdout=T.unsafe(nil), stderr=T.unsafe(nil), append=T.unsafe(nil)); end

  def tag(string); end

  def threads(min, max); end

  def wait_for_less_busy_worker(val=T.unsafe(nil)); end

  def worker_boot_timeout(timeout); end

  def worker_check_interval(interval); end

  def worker_culling_strategy(strategy); end

  def worker_shutdown_timeout(timeout); end

  def worker_timeout(timeout); end

  def workers(count); end
end

class Puma::DSL
  def self.ssl_bind_str(host, port, opts); end
end

class Puma::ErrorLogger
  def debug(options=T.unsafe(nil)); end

  def info(options=T.unsafe(nil)); end

  def initialize(ioerr); end

  def ioerr(); end

  def request_dump(req); end

  def request_headers(req); end

  def request_parsed?(req); end

  def request_title(req); end

  def title(options=T.unsafe(nil)); end
  REQUEST_FORMAT = ::T.let(nil, ::T.untyped)
end

class Puma::ErrorLogger
  def self.stdio(); end
end

class Puma::Events
  def connection_error(error, req, text=T.unsafe(nil)); end

  def debug(str); end

  def debug_error(error, req=T.unsafe(nil), text=T.unsafe(nil)); end

  def error(str); end

  def fire(hook, *args); end

  def fire_on_booted!(); end

  def fire_on_restart!(); end

  def fire_on_stopped!(); end

  def format(str); end

  def formatter(); end

  def formatter=(formatter); end

  def initialize(stdout, stderr); end

  def log(str); end

  def on_booted(&block); end

  def on_restart(&block); end

  def on_stopped(&block); end

  def parse_error(error, req); end

  def register(hook, obj=T.unsafe(nil), &blk); end

  def ssl_error(error, ssl_socket); end

  def stderr(); end

  def stdout(); end

  def unknown_error(error, req=T.unsafe(nil), text=T.unsafe(nil)); end

  def write(str); end
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Puma::Events::DefaultFormatter
  def call(str); end
end

class Puma::Events::PidFormatter
  def call(str); end
end

class Puma::Events
  def self.null(); end

  def self.stdio(); end

  def self.strings(); end
end

class Puma::HttpParserError
end

class Puma::HttpParserError
end

class Puma::IOBuffer
  def append(*args); end

  def reset(); end
end

module Puma::JSONSerialization
  BACKSLASH = ::T.let(nil, ::T.untyped)
  CHAR_TO_ESCAPE = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR_TO_ESCAPE = ::T.let(nil, ::T.untyped)
  QUOTE = ::T.let(nil, ::T.untyped)
end

class Puma::Launcher
  def binder(); end

  def close_binder_listeners(); end

  def config(); end

  def connected_ports(); end

  def delete_pidfile(); end

  def events(); end

  def halt(); end

  def initialize(conf, launcher_args=T.unsafe(nil)); end

  def options(); end

  def phased_restart(); end

  def restart(); end

  def restart_args(); end

  def restart_dir(); end

  def run(); end

  def stats(); end

  def stop(); end

  def thread_status(); end

  def write_state(); end
  KEYS_NOT_TO_PERSIST_IN_STATE = ::T.let(nil, ::T.untyped)
end

module Puma::MiniSSL
  HAS_TLS1_3 = ::T.let(nil, ::T.untyped)
  OPENSSL_LIBRARY_VERSION = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_SSL3 = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_TLS1 = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_TLS1_1 = ::T.let(nil, ::T.untyped)
  OPENSSL_VERSION = ::T.let(nil, ::T.untyped)
  VERIFICATION_FLAGS = ::T.let(nil, ::T.untyped)
  VERIFY_FAIL_IF_NO_PEER_CERT = ::T.let(nil, ::T.untyped)
  VERIFY_NONE = ::T.let(nil, ::T.untyped)
  VERIFY_PEER = ::T.let(nil, ::T.untyped)
end

class Puma::MiniSSL::ContextBuilder
  def context(); end

  def initialize(params, events); end
end

class Puma::MiniSSL::SSLError
end

class Puma::MiniSSL::SSLError
end

class Puma::NullIO
  def close(); end

  def each(&blk); end

  def eof?(); end

  def flush(); end

  def gets(); end

  def puts(*ary); end

  def read(count=T.unsafe(nil), _buffer=T.unsafe(nil)); end

  def rewind(); end

  def size(); end

  def string(); end

  def sync(); end

  def sync=(v); end

  def write(*ary); end
end

class Puma::Plugin
  def in_background(&blk); end
  CALLER_FILE = ::T.let(nil, ::T.untyped)
end

class Puma::Plugin
  def self.create(&blk); end

  def self.extract_name(ary); end
end

class Puma::PluginLoader
  def create(name); end

  def fire_starts(launcher); end
end

class Puma::PluginRegistry
  def add_background(blk); end

  def find(name); end

  def fire_background(); end

  def register(name, cls); end
end

class Puma::Rack::Builder
  def call(env); end

  def initialize(default_app=T.unsafe(nil), &block); end

  def map(path, &block); end

  def run(app); end

  def to_app(); end

  def use(middleware, *args, &block); end

  def warmup(prc=T.unsafe(nil), &block); end
end

class Puma::Rack::Builder
  def self.app(default_app=T.unsafe(nil), &block); end

  def self.new_from_string(builder_script, file=T.unsafe(nil)); end

  def self.parse_file(config, opts=T.unsafe(nil)); end
end

class Puma::Rack::Options
  def handler_opts(options); end

  def parse!(args); end
end

class Puma::Reactor
  def add(client); end

  def initialize(backend, &block); end

  def run(background=T.unsafe(nil)); end

  def shutdown(); end
end

module Puma::Request
  def default_server_port(env); end

  def handle_request(client, lines, requests); end

  def normalize_env(env, client); end
end

class Puma::Runner
  def app(); end

  def close_control_listeners(); end

  def debug(str); end

  def development?(); end

  def error(str); end

  def initialize(cli, events); end

  def load_and_bind(); end

  def log(str); end

  def output_header(mode); end

  def redirect_io(); end

  def redirected_io?(); end

  def ruby_engine(); end

  def start_control(); end

  def start_server(); end

  def stop_control(); end

  def test?(); end

  def wakeup!(); end
end

class Puma::Server
  def add_ssl_listener(*args, **arg, &block); end

  def add_tcp_listener(*args, **arg, &block); end

  def add_unix_listener(*args, **arg, &block); end

  def app(); end

  def app=(app); end

  def auto_trim_time(); end

  def auto_trim_time=(auto_trim_time); end

  def backlog(); end

  def begin_restart(sync=T.unsafe(nil)); end

  def binder(); end

  def binder=(binder); end

  def client_error(e, client); end

  def closed_socket?(socket); end

  def connected_ports(*args, **arg, &block); end

  def cork_socket(socket); end

  def early_hints(); end

  def early_hints=(early_hints); end

  def events(); end

  def first_data_timeout(); end

  def first_data_timeout=(first_data_timeout); end

  def graceful_shutdown(); end

  def halt(sync=T.unsafe(nil)); end

  def handle_check(); end

  def handle_servers(); end

  def inherit_binder(bind); end

  def initialize(app, events=T.unsafe(nil), options=T.unsafe(nil)); end

  def leak_stack_on_error(); end

  def leak_stack_on_error=(leak_stack_on_error); end

  def lowlevel_error(e, env, status=T.unsafe(nil)); end

  def max_threads(); end

  def max_threads=(max_threads); end

  def min_threads(); end

  def min_threads=(min_threads); end

  def persistent_timeout(); end

  def persistent_timeout=(persistent_timeout); end

  def pool_capacity(); end

  def process_client(client, buffer); end

  def reactor_wakeup(client); end

  def reaping_time(); end

  def reaping_time=(reaping_time); end

  def requests_count(); end

  def run(background=T.unsafe(nil), thread_name: T.unsafe(nil)); end

  def running(); end

  def shutting_down?(); end

  def stats(); end

  def stop(sync=T.unsafe(nil)); end

  def thread(); end

  def uncork_socket(socket); end

  def with_force_shutdown(client, &block); end
  STAT_METHODS = ::T.let(nil, ::T.untyped)
  ThreadLocalKey = ::T.let(nil, ::T.untyped)
end

class Puma::Server
  def self.current(); end
end

class Puma::Single
  def halt(); end

  def restart(); end

  def run(); end

  def stats(); end

  def stop(); end

  def stop_blocked(); end
end

class Puma::ThreadPool
  def <<(work); end

  def auto_reap!(timeout=T.unsafe(nil)); end

  def auto_trim!(timeout=T.unsafe(nil)); end

  def backlog(); end

  def busy_threads(); end

  def clean_thread_locals(); end

  def clean_thread_locals=(clean_thread_locals); end

  def initialize(name, min, max, *extra, &block); end

  def out_of_band_hook(); end

  def out_of_band_hook=(out_of_band_hook); end

  def pool_capacity(); end

  def reap(); end

  def shutdown(timeout=T.unsafe(nil)); end

  def spawned(); end

  def trim(force=T.unsafe(nil)); end

  def trim_requested(); end

  def wait_for_less_busy_worker(delay_s); end

  def wait_until_not_full(); end

  def waiting(); end

  def with_force_shutdown(); end

  def with_mutex(&block); end
  SHUTDOWN_GRACE_TIME = ::T.let(nil, ::T.untyped)
end

class Puma::ThreadPool::Automaton
  def initialize(pool, timeout, thread_name, message); end

  def start!(); end

  def stop(); end
end

class Puma::ThreadPool
  def self.clean_thread_locals(); end
end

class Puma::UserFileDefaultOptions
  def [](key); end

  def []=(key, value); end

  def all_of(key); end

  def default_options(); end

  def fetch(key, default_value=T.unsafe(nil)); end

  def file_options(); end

  def final_options(); end

  def finalize_values(); end

  def initialize(user_options, default_options); end

  def user_options(); end
end

module Puma::Util
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Puma::Util::HeaderHash
  def [](k); end

  def []=(k, v); end

  def delete(k); end

  def has_key?(k); end

  def include?(k); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(k); end

  def member?(k); end

  def merge(other); end

  def merge!(other); end

  def replace(other); end
end

class Puma::Util::HeaderHash
  def self.new(hash=T.unsafe(nil)); end
end

module Puma::Util
  def self.nakayoshi_gc(events); end

  def self.parse_query(qs, d=T.unsafe(nil), &unescaper); end

  def self.pipe(); end

  def self.purge_interrupt_queue(); end

  def self.unescape(s, encoding=T.unsafe(nil)); end
end

module PumaWorkerKiller
  VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::Alias
  def initialize(text, old_name, new_name, comment, singleton=T.unsafe(nil)); end
end

class RDoc::AnyMethod
  def _call_seq(); end

  def section_title(); end

  def section_title=(section_title); end
end

class RDoc::Attr
  def initialize(text, name, rw, comment, singleton=T.unsafe(nil)); end
end

class RDoc::ClassModule
  def initialize(name, superclass=T.unsafe(nil)); end
end

class RDoc::CodeObject
  def initialize_visibility(); end
end

class RDoc::Comment
  def initialize(text=T.unsafe(nil), location=T.unsafe(nil), language=T.unsafe(nil)); end

  def line(); end

  def line=(line); end
end

class RDoc::Constant
  def initialize(name, value, comment); end
  MARSHAL_VERSION = ::T.let(nil, ::T.untyped)
end

class RDoc::Context
  def add_module_by_normal_module(mod); end

  def initialize_methods_etc(); end

  def instance_methods(); end
end

class RDoc::Context::Section
  def initialize(parent, title, comment); end
end

class RDoc::CrossReference
  def initialize(context); end

  def resolve_method(name); end
end

module RDoc::Encoding
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

module RDoc::Encoding
  def self.detect_encoding(string); end

  def self.remove_magic_comment(string); end
end

class RDoc::Generator::Darkfish
  def initialize(store, options); end
end

class RDoc::Generator::JsonIndex
  def initialize(parent_generator, options); end
end

class RDoc::Generator::POT
  def initialize(store, options); end
end

class RDoc::Generator::POT::MessageExtractor
  def initialize(store); end
end

class RDoc::Generator::POT::POEntry
  def initialize(msgid, options=T.unsafe(nil)); end
end

class RDoc::Generator::RI
  def initialize(store, options); end
end

class RDoc::I18n::Locale
  def initialize(name); end
end

class RDoc::I18n::Text
  def initialize(raw); end
end

class RDoc::Markdown
  def _Table(); end

  def _TableColumn(); end

  def _TableItem(); end

  def _TableLine(); end

  def _TableRow(); end

  def initialize(extensions=T.unsafe(nil), debug=T.unsafe(nil)); end
end

class RDoc::Markdown::Literals
  def initialize(str, debug=T.unsafe(nil)); end
end

class RDoc::Markdown::Literals::MemoEntry
  def initialize(ans, pos); end
end

class RDoc::Markdown::Literals::RuleInfo
  def initialize(name, rendered); end
end

class RDoc::Markdown::MemoEntry
  def initialize(ans, pos); end
end

class RDoc::Markdown::RuleInfo
  def initialize(name, rendered); end
end

class RDoc::Markup
  def add_regexp_handling(pattern, name); end

  def initialize(attribute_manager=T.unsafe(nil)); end
end

class RDoc::Markup::AttrChanger
  def self.keyword_init?(); end
end

class RDoc::Markup::AttrSpan
  def initialize(length, exclusive); end
end

class RDoc::Markup::AttributeManager
  def add_regexp_handling(pattern, name, exclusive=T.unsafe(nil)); end

  def convert_attrs_matching_word_pairs(str, attrs, exclusive); end

  def convert_attrs_word_pair_map(str, attrs, exclusive); end

  def convert_regexp_handlings(str, attrs, exclusive=T.unsafe(nil)); end

  def exclusive?(attr); end

  def exclusive_bitmap(); end

  def regexp_handlings(); end
  NON_PRINTING_END = ::T.let(nil, ::T.untyped)
  NON_PRINTING_START = ::T.let(nil, ::T.untyped)
end

class RDoc::Markup::Attributes
  def regexp_handling(); end
end

class RDoc::Markup::Document
  def initialize(*parts); end
end

class RDoc::Markup::Formatter
  def add_regexp_handling_RDOCLINK(); end

  def add_regexp_handling_TIDYLINK(); end

  def convert_regexp_handling(target); end

  def initialize(options, markup=T.unsafe(nil)); end
end

class RDoc::Markup::Formatter::InlineTag
  def self.keyword_init?(); end
end

class RDoc::Markup::Heading
  def self.keyword_init?(); end
end

class RDoc::Markup::Include
  def initialize(file, include_path); end
end

class RDoc::Markup::IndentedParagraph
  def initialize(indent, *parts); end
end

class RDoc::Markup::List
  def initialize(type=T.unsafe(nil), *items); end
end

class RDoc::Markup::ListItem
  def initialize(label=T.unsafe(nil), *parts); end
end

class RDoc::Markup::Parser::MyStringScanner
  def [](i); end

  def eos?(); end

  def initialize(input); end

  def matched(); end

  def newline!(); end

  def pos(); end

  def scan(re); end

  def unscan(s); end
end

class RDoc::Markup::Parser::MyStringScanner
end

class RDoc::Markup::PreProcess
  def initialize(input_file_name, include_path); end
end

class RDoc::Markup::Raw
  def initialize(*parts); end
end

class RDoc::Markup::RegexpHandling
  def ==(o); end

  def initialize(type, text); end

  def text(); end

  def text=(text); end

  def type(); end
end

class RDoc::Markup::RegexpHandling
end

class RDoc::Markup::Table
  def ==(other); end

  def accept(visitor); end

  def align(); end

  def align=(align); end

  def body(); end

  def body=(body); end

  def header(); end

  def header=(header); end

  def initialize(header, align, body); end
end

class RDoc::Markup::Table
end

class RDoc::Markup::ToHtml
  def accept_table(header, body, aligns); end

  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_HYPERLINK(target); end

  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end

  def init_link_notation_regexp_handlings(); end

  def init_regexp_handlings(); end
end

class RDoc::Markup::ToHtmlCrossref
  def handle_regexp_CROSSREF(target); end

  def initialize(options, from_path, context, markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToHtmlSnippet
  def handle_regexp_CROSSREF(target); end

  def initialize(options, characters=T.unsafe(nil), paragraphs=T.unsafe(nil), markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToJoinedParagraph
  def accept_table(*node); end

  def initialize(); end
end

class RDoc::Markup::ToLabel
  def handle_regexp_CROSSREF(target); end

  def handle_regexp_HARD_BREAK(*node); end

  def handle_regexp_TIDYLINK(target); end

  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToMarkdown
  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end
end

class RDoc::Markup::ToRdoc
  def accept_table(header, body, aligns); end

  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_SUPPRESSED_CROSSREF(target); end

  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToTableOfContents
  def accept_table(*node); end

  def initialize(); end
end

class RDoc::Markup::ToTtOnly
  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::MethodAttr
  def initialize(text, name); end
end

class RDoc::Mixin
  def initialize(name, comment); end
end

class RDoc::Options
  def initialize(loaded_options=T.unsafe(nil)); end

  def override(map); end
end

class RDoc::Options
  def self.load_options(); end
end

class RDoc::Parser
  def initialize(top_level, file_name, content, options, stats); end
end

class RDoc::Parser::C
  def add_alias(var_name, class_obj, old_name, new_name, comment); end

  def do_classes_and_modules(); end

  def new_comment(text=T.unsafe(nil), location=T.unsafe(nil), language=T.unsafe(nil)); end
end

class RDoc::Parser::ChangeLog
  def parse_date(date); end
end

module RDoc::Parser::ChangeLog::Git
  def create_entries(entries); end

  def parse_entries(); end

  def parse_info(info); end
  HEADING_LEVEL = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser::ChangeLog::Git::LogEntry
  def accept(visitor); end

  def aref(); end

  def author(); end

  def author=(_); end

  def base(); end

  def base=(_); end

  def commit(); end

  def commit=(_); end

  def contents(); end

  def contents=(_); end

  def date(); end

  def date=(_); end

  def email(); end

  def email=(_); end

  def initialize(base, commit, author, email, date, contents); end

  def label(context=T.unsafe(nil)); end

  def level(); end

  def text(); end
end

class RDoc::Parser::ChangeLog::Git::LogEntry
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module RDoc::Parser::ChangeLog::Git
end

class RDoc::Parser::RipperStateLex
  def get_squashed_tk(); end

  def initialize(code); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  RIPPER_HAS_LEX_STATE = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser::RipperStateLex::InnerStateLex
  def initialize(code); end

  def on_default(event, tok, data); end
end

class RDoc::Parser::RipperStateLex::InnerStateLex
end

class RDoc::Parser::RipperStateLex::Token
  def char_no(); end

  def char_no=(_); end

  def kind(); end

  def kind=(_); end

  def line_no(); end

  def line_no=(_); end

  def state(); end

  def state=(_); end

  def text(); end

  def text=(_); end
end

class RDoc::Parser::RipperStateLex::Token
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RDoc::Parser::RipperStateLex
  def self.end?(token); end

  def self.parse(code); end
end

class RDoc::Parser::Ruby
  def get_included_module_with_optional_parens(); end

  def parse_included_with_activesupport_concern(container, comment); end

  def retrieve_comment_body(tk); end
end

module RDoc::Parser::RubyTools
  def skip_tkspace_without_nl(); end
end

class RDoc::RD::BlockParser
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
end

class RDoc::RD::Inline
  def initialize(rdoc, reference); end
end

class RDoc::RD::InlineParser
  def initialize(block_parser); end
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
end

class RDoc::RI::Driver
  def initialize(initial_options=T.unsafe(nil)); end
end

class RDoc::RI::Driver::NotFoundError
  def initialize(klass, suggestions=T.unsafe(nil)); end
end

RDoc::RI::Store = RDoc::Store

class RDoc::Require
  def initialize(name, comment); end
end

class RDoc::Servlet
  def initialize(server, stores, cache, mount_path=T.unsafe(nil), extra_doc_dirs=T.unsafe(nil)); end
end

class RDoc::Stats
  def initialize(store, num_files, verbosity=T.unsafe(nil)); end
end

class RDoc::Stats::Quiet
  def initialize(num_files); end
end

class RDoc::Store
  def initialize(path=T.unsafe(nil), type=T.unsafe(nil)); end

  def unmatched_constant_alias(); end

  def update_parser_of_file(absolute_name, parser); end
end

class RDoc::Store::MissingFileError
  def initialize(store, file, name); end
end

class RDoc::Task
  def before_running_rdoc(&block); end

  def check_names(names); end

  def clobber_task_description(); end

  def defaults(); end

  def define(); end

  def external(); end

  def external=(external); end

  def generator(); end

  def generator=(generator); end

  def initialize(name=T.unsafe(nil)); end

  def inline_source(); end

  def inline_source=(value); end

  def main(); end

  def main=(main); end

  def markup(); end

  def markup=(markup); end

  def name(); end

  def name=(name); end

  def option_list(); end

  def options(); end

  def options=(options); end

  def rdoc_dir(); end

  def rdoc_dir=(rdoc_dir); end

  def rdoc_files(); end

  def rdoc_files=(rdoc_files); end

  def rdoc_task_description(); end

  def rerdoc_task_description(); end

  def template(); end

  def template=(template); end

  def title(); end

  def title=(title); end
end

class RDoc::Task
end

module RDoc::Text
  def language(); end

  def language=(language); end
end

class RDoc::TopLevel
  def initialize(absolute_name, relative_name=T.unsafe(nil)); end
end

module RDoc
  def self.home(); end
end

class REXML::AttlistDecl
  def initialize(source); end
end

class REXML::Attribute
  def initialize(first, second=T.unsafe(nil), parent=T.unsafe(nil)); end
end

class REXML::Attributes
  def initialize(element); end
end

class REXML::CData
  def initialize(first, whitespace=T.unsafe(nil), parent=T.unsafe(nil)); end
end

class REXML::Child
  def initialize(parent=T.unsafe(nil)); end
end

class REXML::Comment
  def initialize(first, second=T.unsafe(nil)); end
end

class REXML::Declaration
  def initialize(src); end
end

class REXML::DocType
  def initialize(first, parent=T.unsafe(nil)); end
end

class REXML::Document
  def initialize(source=T.unsafe(nil), context=T.unsafe(nil)); end
end

class REXML::Element
  def initialize(arg=T.unsafe(nil), parent=T.unsafe(nil), context=T.unsafe(nil)); end
end

class REXML::Elements
  def initialize(parent); end

  def parent(); end
end

class REXML::Entity
  def initialize(stream, value=T.unsafe(nil), parent=T.unsafe(nil), reference=T.unsafe(nil)); end
end

class REXML::ExternalEntity
  def initialize(src); end
end

class REXML::Formatters::Default
  def initialize(ie_hack=T.unsafe(nil)); end
end

class REXML::Formatters::Pretty
  def initialize(indentation=T.unsafe(nil), ie_hack=T.unsafe(nil)); end
end

class REXML::IOSource
  def initialize(arg, block_size=T.unsafe(nil), encoding=T.unsafe(nil)); end
end

class REXML::Instruction
  def initialize(target, content=T.unsafe(nil)); end
end

class REXML::Light::Node
  def <<(element); end

  def =~(path); end

  def [](reference, ns=T.unsafe(nil)); end

  def []=(reference, ns, value=T.unsafe(nil)); end

  def children(); end

  def each(&blk); end

  def has_name?(name, namespace=T.unsafe(nil)); end

  def initialize(node=T.unsafe(nil)); end

  def local_name(); end

  def local_name=(name_str); end

  def name(); end

  def name=(name_str, ns=T.unsafe(nil)); end

  def namespace(prefix=T.unsafe(nil)); end

  def namespace=(namespace); end

  def node_type(); end

  def parent(); end

  def parent=(node); end

  def prefix(namespace=T.unsafe(nil)); end

  def root(); end

  def size(); end

  def text=(foo); end
  NAMESPLIT = ::T.let(nil, ::T.untyped)
  PARENTS = ::T.let(nil, ::T.untyped)
end

class REXML::NotationDecl
  def initialize(name, middle, pub, sys); end
end

class REXML::Output
  def initialize(real_IO, encd=T.unsafe(nil)); end
end

class REXML::ParseException
  def initialize(message, source=T.unsafe(nil), parser=T.unsafe(nil), exception=T.unsafe(nil)); end
end

class REXML::Parsers::BaseParser
  def initialize(source); end
  EXTERNAL_ID_PUBLIC = ::T.let(nil, ::T.untyped)
  EXTERNAL_ID_SYSTEM = ::T.let(nil, ::T.untyped)
  PUBLIC_ID = ::T.let(nil, ::T.untyped)
  QNAME = ::T.let(nil, ::T.untyped)
  QNAME_STR = ::T.let(nil, ::T.untyped)
end

class REXML::Parsers::StreamParser
  def initialize(source, listener); end
end

class REXML::Parsers::TreeParser
  def initialize(source, build_context=T.unsafe(nil)); end
end

class REXML::Parsers::XPathParser
  LOCAL_NAME_WILDCARD = ::T.let(nil, ::T.untyped)
  PREFIX_WILDCARD = ::T.let(nil, ::T.untyped)
end

class REXML::ReferenceWriter
  def initialize(id_type, public_id_literal, system_literal, context=T.unsafe(nil)); end

  def write(output); end
end

class REXML::Source
  def initialize(arg, encoding=T.unsafe(nil)); end
end

class REXML::Text
  def initialize(arg, respect_whitespace=T.unsafe(nil), parent=T.unsafe(nil), raw=T.unsafe(nil), entity_filter=T.unsafe(nil), illegal=T.unsafe(nil)); end
end

class REXML::UndefinedNamespaceException
  def initialize(prefix, source, parser); end
end

class REXML::Validation::ValidationException
  def initialize(msg); end
end

class REXML::XMLDecl
  def initialize(version=T.unsafe(nil), encoding=T.unsafe(nil), standalone=T.unsafe(nil)); end
end

class REXML::XPathNode
  def context(); end

  def initialize(node, context=T.unsafe(nil)); end

  def position(); end

  def raw_node(); end
end

class REXML::XPathParser
  def initialize(strict: T.unsafe(nil)); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class REXMLUtilityNode
  def add_node(node); end

  def attributes(); end

  def attributes=(attributes); end

  def children(); end

  def children=(children); end

  def initialize(name, normalized_attributes=T.unsafe(nil)); end

  def inner_html(); end

  def name(); end

  def name=(name); end

  def to_hash(); end

  def to_html(); end

  def type(); end

  def type=(type); end

  def typecast_value(value); end

  def undasherize_keys(params); end
end

class REXMLUtilityNode
  def self.available_typecasts(); end

  def self.available_typecasts=(obj); end

  def self.typecasts(); end

  def self.typecasts=(obj); end
end

class REXMLUtiliyNodeString
  def attributes(); end

  def attributes=(attributes); end
end

module RSpec
  MODULES_TO_AUTOLOAD = ::T.let(nil, ::T.untyped)
end

class RSpec::CallerFilter
  ADDITIONAL_TOP_LEVEL_FILES = ::T.let(nil, ::T.untyped)
  IGNORE_REGEX = ::T.let(nil, ::T.untyped)
  LIB_REGEX = ::T.let(nil, ::T.untyped)
  RSPEC_LIBS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Bisect::BisectFailedError
  def self.for_failed_spec_run(spec_output); end
end

class RSpec::Core::Bisect::Channel
  def close(); end

  def receive(); end

  def send(message); end
  MARSHAL_DUMP_ENCODING = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Bisect::ExampleSetDescriptor
  def all_example_ids(); end

  def all_example_ids=(_); end

  def failed_example_ids(); end

  def failed_example_ids=(_); end
end

class RSpec::Core::Bisect::ExampleSetDescriptor
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RSpec::Core::Bisect::Notifier
  def initialize(formatter); end

  def publish(event, *args); end
end

class RSpec::Core::Configuration
  DEFAULT_FORMATTER = ::T.let(nil, ::T.untyped)
  FAILED_STATUS = ::T.let(nil, ::T.untyped)
  MOCKING_ADAPTERS = ::T.let(nil, ::T.untyped)
  PASSED_STATUS = ::T.let(nil, ::T.untyped)
  PENDING_STATUS = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  UNKNOWN_STATUS = ::T.let(nil, ::T.untyped)
  VALID_STATUSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::ConfigurationOptions
  OPTIONS_ORDER = ::T.let(nil, ::T.untyped)
  UNFORCED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNPROCESSABLE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::DidYouMean
  def call(); end

  def initialize(relative_file_name); end

  def relative_file_name(); end
end

RSpec::Core::Example::AllExceptionsExcludingDangerousOnesOnRubiesThatAllowIt = RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue

class RSpec::Core::ExampleGroup
  INSTANCE_VARIABLE_TO_IGNORE = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::ExampleStatusDumper
  def dump(); end

  def initialize(examples); end
end

class RSpec::Core::ExampleStatusDumper
  def self.dump(examples); end
end

class RSpec::Core::ExampleStatusMerger
  def initialize(this_run, from_previous_runs); end

  def merge(); end
end

class RSpec::Core::ExampleStatusMerger
  def self.merge(this_run, from_previous_runs); end
end

class RSpec::Core::ExampleStatusParser
  def initialize(string); end

  def parse(); end
end

class RSpec::Core::ExampleStatusParser
  def self.parse(string); end
end

class RSpec::Core::ExampleStatusPersister
  def initialize(examples, file_name); end

  def persist(); end
end

class RSpec::Core::ExampleStatusPersister
  def self.load_from(file_name); end

  def self.persist(examples, file_name); end
end

RSpec::Core::ExclusionRules = RSpec::Core::FilterRules

class RSpec::Core::FilterRules
  PROC_HEX_NUMBER = ::T.let(nil, ::T.untyped)
  PROJECT_DIR = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::BaseBisectFormatter
  def example_failed(notification); end

  def example_finished(notification); end

  def initialize(expected_failures); end

  def start_dump(_notification); end
end

class RSpec::Core::Formatters::BaseBisectFormatter
  def self.inherited(formatter); end
end

class RSpec::Core::Formatters::BaseTextFormatter
  def dump_failures(notification); end

  def dump_pending(notification); end

  def dump_summary(summary); end

  def message(notification); end

  def seed(notification); end
end

class RSpec::Core::Formatters::BisectDRbFormatter
  def initialize(_output); end

  def notify_results(results); end
end

module RSpec::Core::Formatters::ConsoleCodes
  VT100_CODES = ::T.let(nil, ::T.untyped)
  VT100_CODE_VALUES = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter
  DEPRECATION_STREAM_NOTICE = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_CONFIG_NOTICE = ::T.let(nil, ::T.untyped)
  TOO_MANY_WARNINGS_NOTICE = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter
  TOO_MANY_USES_LIMIT = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DocumentationFormatter
  def example_failed(failure); end

  def example_group_finished(_notification); end

  def example_passed(passed); end

  def example_pending(pending); end

  def example_started(_notification); end
end

class RSpec::Core::Formatters::ExceptionPresenter
  PENDING_DETAIL_FORMATTER = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::FailureListFormatter
  def dump_profile(_profile); end

  def example_failed(failure); end

  def message(_message); end
end

class RSpec::Core::Formatters::FallbackMessageFormatter
  def initialize(output); end

  def message(notification); end

  def output(); end
end

module RSpec::Core::Formatters::Helpers
  DEFAULT_PRECISION = ::T.let(nil, ::T.untyped)
  SUB_SECOND_PRECISION = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::HtmlFormatter
  def dump_summary(summary); end

  def example_failed(failure); end

  def example_passed(passed); end

  def example_pending(pending); end

  def example_started(_notification); end

  def start_dump(_notification); end
end

class RSpec::Core::Formatters::HtmlPrinter
  def flush(); end

  def initialize(output); end

  def make_example_group_header_red(group_id); end

  def make_example_group_header_yellow(group_id); end

  def make_header_red(); end

  def make_header_yellow(); end

  def move_progress(percent_done); end

  def print_example_failed(pending_fixed, description, run_time, failure_id, exception, extra_content); end

  def print_example_group_end(); end

  def print_example_group_start(group_id, description, number_of_parents); end

  def print_example_passed(description, run_time); end

  def print_example_pending(description, pending_message); end

  def print_html_start(); end

  def print_summary(duration, example_count, failure_count, pending_count); end
  GLOBAL_SCRIPTS = ::T.let(nil, ::T.untyped)
  GLOBAL_STYLES = ::T.let(nil, ::T.untyped)
  HTML_HEADER = ::T.let(nil, ::T.untyped)
  REPORT_HEADER = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::JsonFormatter
  def dump_profile(profile); end

  def dump_profile_slowest_example_groups(profile); end

  def dump_profile_slowest_examples(profile); end

  def dump_summary(summary); end

  def message(notification); end

  def output_hash(); end

  def seed(notification); end

  def stop(notification); end
end

class RSpec::Core::Formatters::ProfileFormatter
  def dump_profile(profile); end

  def initialize(output); end

  def output(); end
end

class RSpec::Core::Formatters::ProgressFormatter
  def example_failed(_notification); end

  def example_passed(_notification); end

  def example_pending(_notification); end

  def start_dump(_notification); end
end

module RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation
  RESET_CODE = ::T.let(nil, ::T.untyped)
end

RSpec::Core::Formatters::SyntaxHighlighter::WindowsImplementation = RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation

class RSpec::Core::Hooks::HookCollections
  EMPTY_HOOK_ARRAY = ::T.let(nil, ::T.untyped)
  HOOK_TYPES = ::T.let(nil, ::T.untyped)
  SCOPES = ::T.let(nil, ::T.untyped)
  SCOPE_ALIASES = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Metadata
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::MockingAdapters::RSpec
  def setup_mocks_for_rspec(); end

  def teardown_mocks_for_rspec(); end

  def verify_mocks_for_rspec(); end
end

module RSpec::Core::MockingAdapters::RSpec
  def self.configuration(); end

  def self.framework_name(); end
end

class RSpec::Core::Ordering::Random
  MAX_32_BIT = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Pending
  NOT_YET_IMPLEMENTED = ::T.let(nil, ::T.untyped)
  NO_REASON_GIVEN = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Profiler
  def example_group_finished(notification); end

  def example_group_started(notification); end

  def example_groups(); end

  def example_started(notification); end
  NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Reporter
  RSPEC_NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::SharedContext
  def __shared_context_recordings(); end

  def after(*args, &block); end

  def append_after(*args, &block); end

  def append_before(*args, &block); end

  def around(*args, &block); end

  def before(*args, &block); end

  def context(*args, &block); end

  def describe(*args, &block); end

  def hooks(*args, &block); end

  def included(group); end

  def let(*args, &block); end

  def let!(*args, &block); end

  def prepend_after(*args, &block); end

  def prepend_before(*args, &block); end

  def subject(*args, &block); end

  def subject!(*args, &block); end
end

class RSpec::Core::SharedContext::Recording
  def args(); end

  def args=(_); end

  def block(); end

  def block=(_); end

  def method_name(); end

  def method_name=(_); end

  def playback_onto(group); end
end

class RSpec::Core::SharedContext::Recording
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module RSpec::Core::SharedContext
  def self.record(methods); end
end

module RSpec::Core::ShellEscape
  SHELLS_ALLOWING_UNQUOTED_IDS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Expectations
end

class RSpec::Expectations::BlockExpectationTarget
  def not_to(matcher, message=T.unsafe(nil), &block); end

  def to(matcher, message=T.unsafe(nil), &block); end

  def to_not(matcher, message=T.unsafe(nil), &block); end
end

class RSpec::Expectations::BlockExpectationTarget
end

class RSpec::Expectations::BlockSnippetExtractor
  def body_content_lines(); end

  def initialize(proc, method_name); end

  def method_name(); end
end

class RSpec::Expectations::BlockSnippetExtractor::AmbiguousTargetError
end

class RSpec::Expectations::BlockSnippetExtractor::AmbiguousTargetError
end

class RSpec::Expectations::BlockSnippetExtractor::BlockLocator
  def beginning_line_number(); end

  def beginning_line_number=(_); end

  def body_content_locations(); end

  def method_call_location(); end

  def method_name(); end

  def method_name=(_); end

  def source(); end

  def source=(_); end
end

class RSpec::Expectations::BlockSnippetExtractor::BlockLocator
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RSpec::Expectations::BlockSnippetExtractor::BlockTokenExtractor
  def beginning_line_number(); end

  def beginning_line_number=(_); end

  def body_tokens(); end

  def method_name(); end

  def method_name=(_); end

  def source(); end

  def source=(_); end

  def state(); end
end

class RSpec::Expectations::BlockSnippetExtractor::BlockTokenExtractor
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RSpec::Expectations::BlockSnippetExtractor::Error
end

class RSpec::Expectations::BlockSnippetExtractor::Error
end

class RSpec::Expectations::BlockSnippetExtractor::TargetNotFoundError
end

class RSpec::Expectations::BlockSnippetExtractor::TargetNotFoundError
end

class RSpec::Expectations::BlockSnippetExtractor
  def self.try_extracting_single_line_body_of(proc, method_name); end
end

class RSpec::Expectations::Configuration
  def add_should_and_should_not_to(*modules); end

  def backtrace_formatter(); end

  def backtrace_formatter=(backtrace_formatter); end

  def color?(); end

  def false_positives_handler(); end

  def include_chain_clauses_in_custom_matcher_descriptions=(include_chain_clauses_in_custom_matcher_descriptions); end

  def include_chain_clauses_in_custom_matcher_descriptions?(); end

  def max_formatted_output_length=(length); end

  def on_potential_false_positives(); end

  def on_potential_false_positives=(behavior); end

  def reset_syntaxes_to_default(); end

  def strict_predicate_matchers(); end

  def strict_predicate_matchers=(flag); end

  def strict_predicate_matchers?(); end

  def syntax(); end

  def syntax=(values); end

  def warn_about_potential_false_positives=(boolean); end

  def warn_about_potential_false_positives?(); end
  FALSE_POSITIVE_BEHAVIOURS = ::T.let(nil, ::T.untyped)
end

module RSpec::Expectations::Configuration::NullBacktraceFormatter
end

module RSpec::Expectations::Configuration::NullBacktraceFormatter
  def self.format_backtrace(backtrace); end
end

class RSpec::Expectations::Configuration
end

module RSpec::Expectations::ExpectationHelper
end

module RSpec::Expectations::ExpectationHelper
  def self.check_message(msg); end

  def self.handle_failure(matcher, message, failure_message_method); end

  def self.modern_matcher_from(matcher); end

  def self.with_matcher(handler, matcher, message); end
end

class RSpec::Expectations::ExpectationNotMetError
end

class RSpec::Expectations::ExpectationNotMetError
end

class RSpec::Expectations::ExpectationTarget
  include ::RSpec::Expectations::ExpectationTarget::InstanceMethods
  def initialize(value); end

  def target(); end
end

module RSpec::Expectations::ExpectationTarget::InstanceMethods
  def not_to(matcher=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def to(matcher=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def to_not(matcher=T.unsafe(nil), message=T.unsafe(nil), &block); end
end

module RSpec::Expectations::ExpectationTarget::InstanceMethods
end

module RSpec::Expectations::ExpectationTarget::UndefinedValue
end

module RSpec::Expectations::ExpectationTarget::UndefinedValue
end

class RSpec::Expectations::ExpectationTarget
  def self.for(value, block); end
end

class RSpec::Expectations::FailureAggregator
  def aggregate(); end

  def block_label(); end

  def call(failure, options); end

  def failures(); end

  def initialize(block_label, metadata); end

  def metadata(); end

  def other_errors(); end
end

class RSpec::Expectations::FailureAggregator
end

RSpec::Expectations::LegacyMacherAdapter = RSpec::Expectations::LegacyMatcherAdapter

class RSpec::Expectations::LegacyMatcherAdapter
  def initialize(matcher); end
end

class RSpec::Expectations::LegacyMatcherAdapter::RSpec1
  def failure_message(); end

  def failure_message_when_negated(); end
end

class RSpec::Expectations::LegacyMatcherAdapter::RSpec1
  def self.interface_matches?(matcher); end
end

class RSpec::Expectations::LegacyMatcherAdapter::RSpec2
  def failure_message(); end

  def failure_message_when_negated(); end
end

class RSpec::Expectations::LegacyMatcherAdapter::RSpec2
  def self.interface_matches?(matcher); end
end

class RSpec::Expectations::LegacyMatcherAdapter
  def self.wrap(matcher); end
end

class RSpec::Expectations::MultipleExpectationsNotMetError
  include ::RSpec::Core::MultipleExceptionError::InterfaceTag
  def aggregation_block_label(); end

  def aggregation_metadata(); end

  def all_exceptions(); end

  def exception_count_description(); end

  def failures(); end

  def initialize(failure_aggregator); end

  def other_errors(); end

  def summary(); end
end

class RSpec::Expectations::MultipleExpectationsNotMetError
end

class RSpec::Expectations::NegativeExpectationHandler
end

class RSpec::Expectations::NegativeExpectationHandler
  def self.does_not_match?(matcher, actual, &block); end

  def self.handle_matcher(actual, initial_matcher, custom_message=T.unsafe(nil), &block); end

  def self.opposite_should_method(); end

  def self.should_method(); end

  def self.verb(); end
end

class RSpec::Expectations::PositiveExpectationHandler
end

class RSpec::Expectations::PositiveExpectationHandler
  def self.handle_matcher(actual, initial_matcher, custom_message=T.unsafe(nil), &block); end

  def self.opposite_should_method(); end

  def self.should_method(); end

  def self.verb(); end
end

module RSpec::Expectations::Syntax
end

module RSpec::Expectations::Syntax
  def self.default_should_host(); end

  def self.disable_expect(syntax_host=T.unsafe(nil)); end

  def self.disable_should(syntax_host=T.unsafe(nil)); end

  def self.enable_expect(syntax_host=T.unsafe(nil)); end

  def self.enable_should(syntax_host=T.unsafe(nil)); end

  def self.expect_enabled?(syntax_host=T.unsafe(nil)); end

  def self.should_enabled?(syntax_host=T.unsafe(nil)); end

  def self.warn_about_should!(); end

  def self.warn_about_should_unless_configured(method_name); end
end

class RSpec::Expectations::ValueExpectationTarget
end

class RSpec::Expectations::ValueExpectationTarget
end

module RSpec::Expectations::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Expectations::Version
end

module RSpec::Expectations
  def self.configuration(); end

  def self.differ(); end

  def self.fail_with(message, expected=T.unsafe(nil), actual=T.unsafe(nil)); end
end

module RSpec::Matchers
  def a_block_changing(*args, &block); end

  def a_block_outputting(*args, &block); end

  def a_block_raising(*args, &block); end

  def a_block_throwing(*args, &block); end

  def a_block_yielding_control(*args, &block); end

  def a_block_yielding_successive_args(*args, &block); end

  def a_block_yielding_with_args(*args, &block); end

  def a_block_yielding_with_no_args(*args, &block); end

  def a_collection_containing_exactly(*args, &block); end

  def a_collection_ending_with(*args, &block); end

  def a_collection_including(*args, &block); end

  def a_collection_starting_with(*args, &block); end

  def a_falsey_value(*args, &block); end

  def a_falsy_value(*args, &block); end

  def a_hash_including(*args, &block); end

  def a_kind_of(*args, &block); end

  def a_nil_value(*args, &block); end

  def a_range_covering(*args, &block); end

  def a_string_ending_with(*args, &block); end

  def a_string_including(*args, &block); end

  def a_string_matching(*args, &block); end

  def a_string_starting_with(*args, &block); end

  def a_truthy_value(*args, &block); end

  def a_value(*args, &block); end

  def a_value_between(*args, &block); end

  def a_value_within(*args, &block); end

  def aggregate_failures(label=T.unsafe(nil), metadata=T.unsafe(nil), &block); end

  def all(expected); end

  def an_instance_of(*args, &block); end

  def an_object_eq_to(*args, &block); end

  def an_object_eql_to(*args, &block); end

  def an_object_equal_to(*args, &block); end

  def an_object_existing(*args, &block); end

  def an_object_having_attributes(*args, &block); end

  def an_object_matching(*args, &block); end

  def an_object_responding_to(*args, &block); end

  def an_object_satisfying(*args, &block); end

  def be(*args); end

  def be_a(klass); end

  def be_a_kind_of(expected); end

  def be_an(klass); end

  def be_an_instance_of(expected); end

  def be_between(min, max); end

  def be_falsey(); end

  def be_falsy(*args, &block); end

  def be_instance_of(expected); end

  def be_kind_of(expected); end

  def be_nil(); end

  def be_truthy(); end

  def be_within(delta); end

  def change(receiver=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def changing(*args, &block); end

  def contain_exactly(*items); end

  def containing_exactly(*args, &block); end

  def cover(*values); end

  def covering(*args, &block); end

  def end_with(*expected); end

  def ending_with(*args, &block); end

  def eq(expected); end

  def eq_to(*args, &block); end

  def eql(expected); end

  def eql_to(*args, &block); end

  def equal(expected); end

  def equal_to(*args, &block); end

  def exist(*args); end

  def existing(*args, &block); end

  def expect(value=T.unsafe(nil), &block); end

  def have_attributes(expected); end

  def having_attributes(*args, &block); end

  def include(*expected); end

  def including(*args, &block); end

  def match(expected); end

  def match_array(items); end

  def match_regex(*args, &block); end

  def matching(*args, &block); end

  def output(expected=T.unsafe(nil)); end

  def raise_error(error=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def raise_exception(error=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def raising(*args, &block); end

  def respond_to(*names); end

  def responding_to(*args, &block); end

  def satisfy(description=T.unsafe(nil), &block); end

  def satisfying(*args, &block); end

  def start_with(*expected); end

  def starting_with(*args, &block); end

  def throw_symbol(expected_symbol=T.unsafe(nil), expected_arg=T.unsafe(nil)); end

  def throwing(*args, &block); end

  def within(*args, &block); end

  def yield_control(); end

  def yield_successive_args(*args); end

  def yield_with_args(*args); end

  def yield_with_no_args(); end

  def yielding_control(*args, &block); end

  def yielding_successive_args(*args, &block); end

  def yielding_with_args(*args, &block); end

  def yielding_with_no_args(*args, &block); end
  BE_PREDICATE_REGEX = ::T.let(nil, ::T.untyped)
  DYNAMIC_MATCHER_REGEX = ::T.let(nil, ::T.untyped)
  HAS_REGEX = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::AliasedMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(base_matcher, description_block); end

  def method_missing(*arg); end
end

class RSpec::Matchers::AliasedMatcher
end

class RSpec::Matchers::AliasedMatcherWithOperatorSupport
end

class RSpec::Matchers::AliasedMatcherWithOperatorSupport
end

class RSpec::Matchers::AliasedNegatedMatcher
  def does_not_match?(*args, &block); end

  def matches?(*args, &block); end
end

RSpec::Matchers::AliasedNegatedMatcher::DefaultFailureMessages = RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages

class RSpec::Matchers::AliasedNegatedMatcher
end

module RSpec::Matchers::BuiltIn
end

class RSpec::Matchers::BuiltIn::All
  def does_not_match?(_actual); end

  def failed_objects(); end

  def initialize(matcher); end

  def matcher(); end
end

class RSpec::Matchers::BuiltIn::All
end

class RSpec::Matchers::BuiltIn::BaseMatcher
  include ::RSpec::Matchers::Composable
  include ::RSpec::Matchers::BuiltIn::BaseMatcher::HashFormatting
  include ::RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  def actual(); end

  def actual_formatted(); end

  def description(); end

  def diffable?(); end

  def expected(); end

  def expected_formatted(); end

  def expects_call_stack_jump?(); end

  def initialize(expected=T.unsafe(nil)); end

  def match_unless_raises(*exceptions); end

  def matcher_name(); end

  def matcher_name=(matcher_name); end

  def matches?(actual); end

  def present_ivars(); end

  def rescued_exception(); end

  def supports_block_expectations?(); end

  def supports_value_expectations?(); end
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  def failure_message(); end

  def failure_message_when_negated(); end
end

module RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  def self.has_default_failure_messages?(matcher); end
end

module RSpec::Matchers::BuiltIn::BaseMatcher::HashFormatting
end

module RSpec::Matchers::BuiltIn::BaseMatcher::HashFormatting
  def self.improve_hash_formatting(inspect_string); end
end

class RSpec::Matchers::BuiltIn::BaseMatcher
  def self.matcher_name(); end
end

class RSpec::Matchers::BuiltIn::Be
  include ::RSpec::Matchers::BuiltIn::BeHelpers
  def <(operand); end

  def <=(operand); end

  def ==(operand); end

  def ===(operand); end

  def =~(operand); end

  def >(operand); end

  def >=(operand); end

  def initialize(*args); end
end

class RSpec::Matchers::BuiltIn::Be
end

class RSpec::Matchers::BuiltIn::BeAKindOf
end

class RSpec::Matchers::BuiltIn::BeAKindOf
end

class RSpec::Matchers::BuiltIn::BeAnInstanceOf
end

class RSpec::Matchers::BuiltIn::BeAnInstanceOf
end

class RSpec::Matchers::BuiltIn::BeBetween
  def exclusive(); end

  def inclusive(); end

  def initialize(min, max); end
end

class RSpec::Matchers::BuiltIn::BeBetween
end

class RSpec::Matchers::BuiltIn::BeComparedTo
  include ::RSpec::Matchers::BuiltIn::BeHelpers
  def does_not_match?(actual); end

  def initialize(operand, operator); end
end

class RSpec::Matchers::BuiltIn::BeComparedTo
end

class RSpec::Matchers::BuiltIn::BeFalsey
end

class RSpec::Matchers::BuiltIn::BeFalsey
end

module RSpec::Matchers::BuiltIn::BeHelpers
end

module RSpec::Matchers::BuiltIn::BeHelpers
end

class RSpec::Matchers::BuiltIn::BeNil
end

class RSpec::Matchers::BuiltIn::BeNil
end

class RSpec::Matchers::BuiltIn::BePredicate
  REGEX = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::BePredicate
end

class RSpec::Matchers::BuiltIn::BeTruthy
end

class RSpec::Matchers::BuiltIn::BeTruthy
end

class RSpec::Matchers::BuiltIn::BeWithin
  def initialize(delta); end

  def of(expected); end

  def percent_of(expected); end
end

class RSpec::Matchers::BuiltIn::BeWithin
end

module RSpec::Matchers::BuiltIn::CaptureStderr
end

module RSpec::Matchers::BuiltIn::CaptureStderr
  def self.capture(block); end
end

module RSpec::Matchers::BuiltIn::CaptureStdout
end

module RSpec::Matchers::BuiltIn::CaptureStdout
  def self.capture(block); end
end

class RSpec::Matchers::BuiltIn::CaptureStreamToTempfile
  def capture(block); end
end

class RSpec::Matchers::BuiltIn::CaptureStreamToTempfile
end

class RSpec::Matchers::BuiltIn::Change
  def by(expected_delta); end

  def by_at_least(minimum); end

  def by_at_most(maximum); end

  def does_not_match?(event_proc); end

  def from(value); end

  def initialize(receiver=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def matches?(event_proc); end

  def to(value); end
end

class RSpec::Matchers::BuiltIn::Change
end

class RSpec::Matchers::BuiltIn::ChangeDetails
  def actual_after(); end

  def actual_delta(); end

  def changed?(); end

  def initialize(matcher_name, receiver=T.unsafe(nil), message=T.unsafe(nil), &block); end

  def perform_change(event_proc); end

  def value_representation(); end
end

module RSpec::Matchers::BuiltIn::ChangeDetails::UNDEFINED
end

module RSpec::Matchers::BuiltIn::ChangeDetails::UNDEFINED
end

class RSpec::Matchers::BuiltIn::ChangeDetails
end

class RSpec::Matchers::BuiltIn::ChangeFromValue
  def does_not_match?(event_proc); end

  def initialize(change_details, expected_before); end

  def to(value); end
end

class RSpec::Matchers::BuiltIn::ChangeFromValue
end

class RSpec::Matchers::BuiltIn::ChangeRelatively
  def does_not_match?(_event_proc); end

  def initialize(change_details, expected_delta, relativity, &comparer); end

  def matches?(event_proc); end
end

class RSpec::Matchers::BuiltIn::ChangeRelatively
end

class RSpec::Matchers::BuiltIn::ChangeToValue
  def does_not_match?(_event_proc); end

  def from(value); end

  def initialize(change_details, expected_after); end
end

class RSpec::Matchers::BuiltIn::ChangeToValue
end

class RSpec::Matchers::BuiltIn::Compound
  def diffable_matcher_list(); end

  def does_not_match?(_actual); end

  def evaluator(); end

  def initialize(matcher_1, matcher_2); end

  def matcher_1(); end

  def matcher_2(); end
end

class RSpec::Matchers::BuiltIn::Compound::And
end

class RSpec::Matchers::BuiltIn::Compound::And
end

class RSpec::Matchers::BuiltIn::Compound::NestedEvaluator
  def initialize(actual, matcher_1, matcher_2); end

  def matcher_matches?(matcher); end
end

class RSpec::Matchers::BuiltIn::Compound::NestedEvaluator
  def self.matcher_expects_call_stack_jump?(matcher); end
end

class RSpec::Matchers::BuiltIn::Compound::Or
end

class RSpec::Matchers::BuiltIn::Compound::Or
end

class RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator
  def initialize(actual, *arg); end

  def matcher_matches?(matcher); end
end

class RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator
end

class RSpec::Matchers::BuiltIn::Compound
end

class RSpec::Matchers::BuiltIn::ContainExactly
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer
  def actual_to_expected_matched_indexes(); end

  def expected_to_actual_matched_indexes(); end

  def find_best_solution(); end

  def initialize(expected_to_actual_matched_indexes, actual_to_expected_matched_indexes); end

  def solution(); end
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::NullSolution
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::NullSolution
  def self.worse_than?(_other); end
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::Solution
  def +(derived_candidate_solution); end

  def candidate?(); end

  def ideal?(); end

  def indeterminate_actual_indexes(); end

  def indeterminate_actual_indexes=(_); end

  def indeterminate_expected_indexes(); end

  def indeterminate_expected_indexes=(_); end

  def unmatched_actual_indexes(); end

  def unmatched_actual_indexes=(_); end

  def unmatched_expected_indexes(); end

  def unmatched_expected_indexes=(_); end

  def unmatched_item_count(); end

  def worse_than?(other); end
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer::Solution
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer
end

class RSpec::Matchers::BuiltIn::ContainExactly
end

module RSpec::Matchers::BuiltIn::CountExpectation
  def at_least(number); end

  def at_most(number); end

  def count_expectation_type(); end

  def exactly(number); end

  def expected_count(); end

  def once(); end

  def thrice(); end

  def times(); end

  def twice(); end
end

module RSpec::Matchers::BuiltIn::CountExpectation
end

class RSpec::Matchers::BuiltIn::Cover
  def does_not_match?(range); end

  def initialize(*expected); end

  def matches?(range); end
end

class RSpec::Matchers::BuiltIn::Cover
end

class RSpec::Matchers::BuiltIn::DynamicPredicate
  include ::RSpec::Matchers::BuiltIn::BeHelpers
  def does_not_match?(actual, &block); end

  def initialize(method_name, *args, **arg, &block); end

  def matches?(actual, &block); end
end

class RSpec::Matchers::BuiltIn::DynamicPredicate
end

class RSpec::Matchers::BuiltIn::EndWith
end

class RSpec::Matchers::BuiltIn::EndWith
end

class RSpec::Matchers::BuiltIn::Eq
end

class RSpec::Matchers::BuiltIn::Eq
end

class RSpec::Matchers::BuiltIn::Eql
end

class RSpec::Matchers::BuiltIn::Eql
end

class RSpec::Matchers::BuiltIn::Equal
  LITERAL_SINGLETONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::Equal
end

class RSpec::Matchers::BuiltIn::Exist
  def does_not_match?(actual); end

  def initialize(*expected); end
end

class RSpec::Matchers::BuiltIn::Exist::ExistenceTest
  def actual_exists?(); end

  def valid_test?(); end

  def validity_message(); end
end

class RSpec::Matchers::BuiltIn::Exist::ExistenceTest
end

class RSpec::Matchers::BuiltIn::Exist
end

class RSpec::Matchers::BuiltIn::Has
  REGEX = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::Has
end

class RSpec::Matchers::BuiltIn::HaveAttributes
  def does_not_match?(actual); end

  def initialize(expected); end

  def respond_to_failed(); end
end

class RSpec::Matchers::BuiltIn::HaveAttributes
end

class RSpec::Matchers::BuiltIn::Include
  include ::RSpec::Matchers::BuiltIn::CountExpectation
  def does_not_match?(actual); end

  def expecteds(); end

  def initialize(*expecteds); end
end

class RSpec::Matchers::BuiltIn::Include
end

class RSpec::Matchers::BuiltIn::Match
  def initialize(expected); end

  def with_captures(*captures); end
end

class RSpec::Matchers::BuiltIn::Match
end

class RSpec::Matchers::BuiltIn::NegativeOperatorMatcher
  def __delegate_operator(actual, operator, expected); end
end

class RSpec::Matchers::BuiltIn::NegativeOperatorMatcher
end

module RSpec::Matchers::BuiltIn::NullCapture
end

module RSpec::Matchers::BuiltIn::NullCapture
  def self.capture(_block); end
end

class RSpec::Matchers::BuiltIn::OperatorMatcher
  def !=(_expected); end

  def !~(_expected); end

  def <(expected); end

  def <=(expected); end

  def ==(expected); end

  def ===(expected); end

  def =~(expected); end

  def >(expected); end

  def >=(expected); end

  def description(); end

  def fail_with_message(message); end

  def initialize(actual); end
end

class RSpec::Matchers::BuiltIn::OperatorMatcher
  def self.get(klass, operator); end

  def self.register(klass, operator, matcher); end

  def self.registry(); end

  def self.unregister(klass, operator); end

  def self.use_custom_matcher_or_delegate(operator); end
end

class RSpec::Matchers::BuiltIn::Output
  def does_not_match?(block); end

  def initialize(expected); end

  def matches?(block); end

  def to_stderr(); end

  def to_stderr_from_any_process(); end

  def to_stdout(); end

  def to_stdout_from_any_process(); end
end

class RSpec::Matchers::BuiltIn::Output
end

class RSpec::Matchers::BuiltIn::PositiveOperatorMatcher
  def __delegate_operator(actual, operator, expected); end
end

class RSpec::Matchers::BuiltIn::PositiveOperatorMatcher
end

class RSpec::Matchers::BuiltIn::RaiseError
  include ::RSpec::Matchers::Composable
  def description(); end

  def does_not_match?(given_proc); end

  def expects_call_stack_jump?(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(expected_error_or_message, expected_message, &block); end

  def matches?(given_proc, negative_expectation=T.unsafe(nil), &block); end

  def supports_block_expectations?(); end

  def supports_value_expectations?(); end

  def with_message(expected_message); end
  UndefinedValue = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::RaiseError
end

class RSpec::Matchers::BuiltIn::ReliableMatchData
  def captures(); end

  def initialize(match_data); end

  def match_data(); end

  def names(); end
end

class RSpec::Matchers::BuiltIn::ReliableMatchData
end

class RSpec::Matchers::BuiltIn::RespondTo
  def and_any_keywords(); end

  def and_keywords(*keywords); end

  def and_unlimited_arguments(); end

  def argument(); end

  def arguments(); end

  def does_not_match?(actual); end

  def ignoring_method_signature_failure!(); end

  def initialize(*names); end

  def with(n); end

  def with_any_keywords(); end

  def with_keywords(*keywords); end

  def with_unlimited_arguments(); end
end

class RSpec::Matchers::BuiltIn::RespondTo::ArityCheck
  def initialize(expected_arity, expected_keywords, arbitrary_keywords, unlimited_arguments); end

  def matches?(actual, name); end

  def method_signature_for(actual, name); end

  def verifier_for(actual, name); end
end

class RSpec::Matchers::BuiltIn::RespondTo::ArityCheck
end

class RSpec::Matchers::BuiltIn::RespondTo
end

class RSpec::Matchers::BuiltIn::Satisfy
  def initialize(description=T.unsafe(nil), &block); end

  def matches?(actual, &block); end
end

class RSpec::Matchers::BuiltIn::Satisfy
end

class RSpec::Matchers::BuiltIn::SpecificValuesChange
  def initialize(change_details, from, to); end

  def matches?(event_proc); end
end

RSpec::Matchers::BuiltIn::SpecificValuesChange::MATCH_ANYTHING = BasicObject

class RSpec::Matchers::BuiltIn::SpecificValuesChange
end

RSpec::Matchers::BuiltIn::StartAndEndWith = RSpec::Matchers::BuiltIn::StartOrEndWith

class RSpec::Matchers::BuiltIn::StartOrEndWith
  def initialize(*expected); end
end

class RSpec::Matchers::BuiltIn::StartOrEndWith
end

class RSpec::Matchers::BuiltIn::StartWith
end

class RSpec::Matchers::BuiltIn::StartWith
end

class RSpec::Matchers::BuiltIn::ThrowSymbol
  include ::RSpec::Matchers::Composable
  def description(); end

  def does_not_match?(given_proc); end

  def expects_call_stack_jump?(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(expected_symbol=T.unsafe(nil), expected_arg=T.unsafe(nil)); end

  def matches?(given_proc); end

  def supports_block_expectations?(); end

  def supports_value_expectations?(); end
end

class RSpec::Matchers::BuiltIn::ThrowSymbol
end

class RSpec::Matchers::BuiltIn::YieldControl
  include ::RSpec::Matchers::BuiltIn::CountExpectation
  def does_not_match?(block); end

  def matches?(block); end
end

class RSpec::Matchers::BuiltIn::YieldControl
end

class RSpec::Matchers::BuiltIn::YieldProbe
  def assert_used!(); end

  def assert_valid_expect_block!(); end

  def has_block?(); end

  def initialize(block, &callback); end

  def num_yields(); end

  def num_yields=(num_yields); end

  def probe(); end

  def single_yield_args(); end

  def to_proc(); end

  def yielded_args(); end

  def yielded_args=(yielded_args); end

  def yielded_once?(matcher_name); end
end

class RSpec::Matchers::BuiltIn::YieldProbe
  def self.probe(block, &callback); end
end

class RSpec::Matchers::BuiltIn::YieldSuccessiveArgs
  def does_not_match?(block); end

  def initialize(*args); end

  def matches?(block); end
end

class RSpec::Matchers::BuiltIn::YieldSuccessiveArgs
end

class RSpec::Matchers::BuiltIn::YieldWithArgs
  def does_not_match?(block); end

  def initialize(*args); end

  def matches?(block); end
end

class RSpec::Matchers::BuiltIn::YieldWithArgs
end

class RSpec::Matchers::BuiltIn::YieldWithNoArgs
  def does_not_match?(block); end

  def matches?(block); end
end

class RSpec::Matchers::BuiltIn::YieldWithNoArgs
end

module RSpec::Matchers::BuiltIn
end

module RSpec::Matchers::Composable
  def &(matcher); end

  def ===(value); end

  def and(matcher); end

  def or(matcher); end

  def |(matcher); end
end

module RSpec::Matchers::Composable
  def self.should_enumerate?(item); end

  def self.surface_descriptions_in(item); end

  def self.unreadable_io?(object); end
end

module RSpec::Matchers::DSL
  def alias_matcher(new_name, old_name, options=T.unsafe(nil), &description_override); end

  def define(name, &declarations); end

  def define_negated_matcher(negated_name, base_name, &description_override); end

  def matcher(name, &declarations); end
end

module RSpec::Matchers::DSL::DefaultImplementations
  include ::RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  def description(); end

  def diffable?(); end

  def expects_call_stack_jump?(); end

  def supports_block_expectations?(); end

  def supports_value_expectations?(); end
end

module RSpec::Matchers::DSL::DefaultImplementations
end

module RSpec::Matchers::DSL::Macros
  def chain(method_name, *attr_names, &definition); end

  def description(&definition); end

  def diffable(); end

  def failure_message(&definition); end

  def failure_message_when_negated(&definition); end

  def match(options=T.unsafe(nil), &match_block); end

  def match_unless_raises(expected_exception=T.unsafe(nil), &match_block); end

  def match_when_negated(options=T.unsafe(nil), &match_block); end

  def supports_block_expectations(); end
  RAISE_NOTIFIER = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers::DSL::Macros::Deprecated
  def failure_message_for_should(&definition); end

  def failure_message_for_should_not(&definition); end

  def match_for_should(&definition); end

  def match_for_should_not(&definition); end
end

module RSpec::Matchers::DSL::Macros::Deprecated
end

module RSpec::Matchers::DSL::Macros
end

class RSpec::Matchers::DSL::Matcher
  include ::RSpec::Matchers::DSL::DefaultImplementations
  include ::RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  include ::RSpec::Matchers
  include ::RSpec::Matchers::Composable
  def actual(); end

  def block_arg(); end

  def expected(); end

  def expected_as_array(); end

  def initialize(name, declarations, matcher_execution_context, *expected, &block_arg); end

  def name(); end

  def rescued_exception(); end
end

class RSpec::Matchers::DSL::Matcher
  extend ::RSpec::Matchers::DSL::Macros
  extend ::RSpec::Matchers::DSL::Macros::Deprecated
end

module RSpec::Matchers::DSL
end

module RSpec::Matchers::EnglishPhrasing
end

module RSpec::Matchers::EnglishPhrasing
  def self.list(obj); end

  def self.split_words(sym); end
end

class RSpec::Matchers::ExpectedsForMultipleDiffs
  def initialize(expected_list); end

  def message_with_diff(message, differ, actual); end
  DEFAULT_DIFF_LABEL = ::T.let(nil, ::T.untyped)
  DESCRIPTION_MAX_LENGTH = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::ExpectedsForMultipleDiffs
  def self.for_many_matchers(matchers); end

  def self.from(expected); end
end

class RSpec::Matchers::MatcherDelegator
  include ::RSpec::Matchers::Composable
  def base_matcher(); end

  def initialize(base_matcher); end

  def method_missing(*args, &block); end
end

class RSpec::Matchers::MatcherDelegator
end

module RSpec::Matchers
  extend ::RSpec::Matchers::DSL
  def self.alias_matcher(*args, &block); end

  def self.clear_generated_description(); end

  def self.configuration(); end

  def self.generated_description(); end

  def self.is_a_describable_matcher?(obj); end

  def self.is_a_matcher?(obj); end

  def self.last_description(); end

  def self.last_expectation_handler(); end

  def self.last_expectation_handler=(last_expectation_handler); end

  def self.last_matcher(); end

  def self.last_matcher=(last_matcher); end
end

module RSpec::Mocks
  DEFAULT_CALLBACK_INVOCATION_STRATEGY = ::T.let(nil, ::T.untyped)
  IGNORED_BACKTRACE_LINE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AllowanceTarget
  def expression(); end

  def not_to(matcher, *_args); end

  def to(matcher, &block); end

  def to_not(matcher, *_args); end
end

class RSpec::Mocks::AndInvokeImplementation
  def call(*args, &block); end

  def initialize(procs_to_invoke); end
end

class RSpec::Mocks::AndReturnImplementation
  def call(*_args_to_ignore, &_block); end

  def initialize(values_to_return); end
end

class RSpec::Mocks::AndWrapOriginalImplementation
  def call(*args, **arg, &block); end

  def initial_action=(_value); end

  def initialize(method, block); end

  def inner_action(); end

  def inner_action=(_value); end

  def terminal_action=(_value); end
end

class RSpec::Mocks::AndYieldImplementation
  def call(*_args_to_ignore, &block); end

  def initialize(args_to_yield, eval_context, error_generator); end
end

class RSpec::Mocks::AnyInstance::Chain
  def constrained_to_any_of?(*constraints); end

  def expectation_fulfilled!(); end

  def initialize(recorder, *args, &block); end

  def matches_args?(*args); end

  def never(); end

  def playback!(instance); end
end

module RSpec::Mocks::AnyInstance::Chain::Customizations
  def and_call_original(*args, &block); end

  def and_raise(*args, &block); end

  def and_return(*args, &block); end

  def and_throw(*args, &block); end

  def and_wrap_original(*args, &block); end

  def and_yield(*args, &block); end

  def at_least(*args, &block); end

  def at_most(*args, &block); end

  def exactly(*args, &block); end

  def never(*args, &block); end

  def once(*args, &block); end

  def thrice(*args, &block); end

  def time(*args, &block); end

  def times(*args, &block); end

  def twice(*args, &block); end

  def with(*args, &block); end
end

module RSpec::Mocks::AnyInstance::Chain::Customizations
  def self.record(method_name); end
end

class RSpec::Mocks::AnyInstance::ErrorGenerator
  def raise_does_not_implement_error(klass, method_name); end

  def raise_message_already_received_by_other_instance_error(method_name, object_inspect, invoked_instance); end

  def raise_not_supported_with_prepend_error(method_name, problem_mod); end

  def raise_second_instance_received_message_error(unfulfilled_expectations); end
end

class RSpec::Mocks::AnyInstance::ExpectChainChain
  def initialize(*args); end
end

class RSpec::Mocks::AnyInstance::ExpectationChain
  def expectation_fulfilled?(); end

  def initialize(*args, &block); end
end

class RSpec::Mocks::AnyInstance::FluentInterfaceProxy
  def initialize(targets); end

  def method_missing(*args, &block); end
end

class RSpec::Mocks::AnyInstance::MessageChains
  def [](method_name); end

  def add(method_name, chain); end

  def all_expectations_fulfilled?(); end

  def each_unfulfilled_expectation_matching(method_name, *args); end

  def has_expectation?(method_name); end

  def playback!(instance, method_name); end

  def received_expected_message!(method_name); end

  def remove_stub_chains_for!(method_name); end

  def unfulfilled_expectations(); end
end

class RSpec::Mocks::AnyInstance::PositiveExpectationChain
  ExpectationInvocationOrder = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AnyInstance::Proxy
  def expect_chain(*chain, &block); end

  def initialize(recorder, target_proxies); end

  def klass(); end

  def should_not_receive(method_name, &block); end

  def should_receive(method_name, &block); end

  def stub(method_name_or_method_map, &block); end

  def stub_chain(*chain, &block); end

  def unstub(method_name); end
end

class RSpec::Mocks::AnyInstance::Recorder
  def already_observing?(method_name); end

  def build_alias_method_name(method_name); end

  def expect_chain(*method_names_and_optional_return_values, &block); end

  def initialize(klass); end

  def instance_that_received(method_name); end

  def klass(); end

  def message_chains(); end

  def notify_received_message(_object, message, args, _blk); end

  def playback!(instance, method_name); end

  def should_not_receive(method_name, &block); end

  def should_receive(method_name, &block); end

  def stop_all_observation!(); end

  def stop_observing!(method_name); end

  def stub(method_name, &block); end

  def stub_chain(*method_names_and_optional_return_values, &block); end

  def stubs(); end

  def unstub(method_name); end

  def verify(); end
end

class RSpec::Mocks::AnyInstance::StubChain
  def expectation_fulfilled?(); end
  EmptyInvocationOrder = ::T.let(nil, ::T.untyped)
  InvocationOrder = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AnyInstance::StubChainChain
  def initialize(*args); end
end

module RSpec::Mocks::AnyInstance
  def self.error_generator(); end
end

class RSpec::Mocks::AnyInstanceAllowanceTarget
  def expression(); end

  def not_to(matcher, *_args); end

  def to(matcher, &block); end

  def to_not(matcher, *_args); end
end

class RSpec::Mocks::AnyInstanceExpectationTarget
  def expression(); end

  def not_to(matcher, &block); end

  def to(matcher, &block); end

  def to_not(matcher, &block); end
end

class RSpec::Mocks::ArgumentListMatcher
  def args_match?(*actual_args, **arg); end

  def expected_args(); end

  def initialize(*expected_args, **arg); end

  def resolve_expected_args_based_on(actual_args); end
  MATCH_ALL = ::T.let(nil, ::T.untyped)
end

module RSpec::Mocks::ArgumentMatchers
  def a_kind_of(klass); end

  def an_instance_of(klass); end

  def any_args(); end

  def anything(); end

  def array_including(*args); end

  def boolean(); end

  def duck_type(*args); end

  def hash_excluding(*args); end

  def hash_including(*args); end

  def hash_not_including(*args); end

  def instance_of(klass); end

  def kind_of(klass); end

  def no_args(); end
end

module RSpec::Mocks::ArgumentMatchers
  def self.anythingize_lonely_keys(*args); end
end

class RSpec::Mocks::CallbackInvocationStrategy
  def call(doubled_module); end
end

class RSpec::Mocks::ClassNewMethodReference
  def self.applies_to?(method_name); end
end

class RSpec::Mocks::Configuration
  def add_stub_and_should_receive_to(*modules); end

  def allow_message_expectations_on_nil(); end

  def allow_message_expectations_on_nil=(allow_message_expectations_on_nil); end

  def before_verifying_doubles(&block); end

  def color?(); end

  def patch_marshal_to_support_partial_doubles=(val); end

  def reset_syntaxes_to_default(); end

  def syntax(); end

  def syntax=(*values); end

  def temporarily_suppress_partial_double_verification(); end

  def temporarily_suppress_partial_double_verification=(temporarily_suppress_partial_double_verification); end

  def transfer_nested_constants=(transfer_nested_constants); end

  def transfer_nested_constants?(); end

  def verify_doubled_constant_names=(verify_doubled_constant_names); end

  def verify_doubled_constant_names?(); end

  def verify_partial_doubles=(val); end

  def verify_partial_doubles?(); end

  def verifying_double_callbacks(); end

  def when_declaring_verifying_double(&block); end

  def yield_receiver_to_any_instance_implementation_blocks=(yield_receiver_to_any_instance_implementation_blocks); end

  def yield_receiver_to_any_instance_implementation_blocks?(); end
end

class RSpec::Mocks::Constant
  def hidden=(hidden); end

  def hidden?(); end

  def initialize(name); end

  def mutated?(); end

  def name(); end

  def original_value(); end

  def original_value=(original_value); end

  def previously_defined=(previously_defined); end

  def previously_defined?(); end

  def stubbed=(stubbed); end

  def stubbed?(); end

  def valid_name=(valid_name); end

  def valid_name?(); end
end

class RSpec::Mocks::Constant
  def self.original(name); end

  def self.unmutated(name); end
end

class RSpec::Mocks::ConstantMutator::BaseMutator
  def full_constant_name(); end

  def idempotently_reset(); end

  def initialize(full_constant_name, mutated_value, transfer_nested_constants); end

  def original_value(); end

  def to_constant(); end
end

class RSpec::Mocks::ConstantMutator::ConstantHider
  def mutate(); end

  def reset(); end
end

class RSpec::Mocks::ConstantMutator::DefinedConstantReplacer
  def initialize(*args); end

  def mutate(); end

  def reset(); end

  def should_transfer_nested_constants?(); end

  def transfer_nested_constants(); end

  def verify_constants_to_transfer!(); end
end

class RSpec::Mocks::ConstantMutator::UndefinedConstantSetter
  def mutate(); end

  def reset(); end
end

class RSpec::Mocks::ConstantMutator
  def self.hide(constant_name); end

  def self.mutate(mutator); end

  def self.raise_on_invalid_const(); end

  def self.stub(constant_name, value, options=T.unsafe(nil)); end
end

class RSpec::Mocks::DirectObjectReference
  def const_to_replace(); end

  def defined?(); end

  def description(); end

  def initialize(object); end

  def target(); end

  def when_loaded(); end
end

class RSpec::Mocks::ErrorGenerator
  def default_error_message(expectation, expected_args, actual_args); end

  def describe_expectation(verb, message, expected_received_count, _actual_received_count, args); end

  def expectation_on_nil_message(method_name); end

  def initialize(target=T.unsafe(nil)); end

  def intro(unwrapped=T.unsafe(nil)); end

  def method_call_args_description(args, generic_prefix=T.unsafe(nil), matcher_prefix=T.unsafe(nil)); end

  def opts(); end

  def opts=(opts); end

  def raise_already_invoked_error(message, calling_customization); end

  def raise_cant_constrain_count_for_negated_have_received_error(count_constraint); end

  def raise_double_negation_error(wrapped_expression); end

  def raise_expectation_error(message, expected_received_count, argument_list_matcher, actual_received_count, expectation_count_type, args, backtrace_line=T.unsafe(nil), source_id=T.unsafe(nil)); end

  def raise_expectation_on_mocked_method(method); end

  def raise_expectation_on_nil_error(method_name); end

  def raise_expectation_on_unstubbed_method(method); end

  def raise_expired_test_double_error(); end

  def raise_have_received_disallowed(type, reason); end

  def raise_invalid_arguments_error(verifier); end

  def raise_method_not_stubbed_error(method_name); end

  def raise_missing_block_error(args_to_yield); end

  def raise_missing_default_stub_error(expectation, args_for_multiple_calls); end

  def raise_non_public_error(method_name, visibility); end

  def raise_only_valid_on_a_partial_double(method); end

  def raise_out_of_order_error(message); end

  def raise_similar_message_args_error(expectation, args_for_multiple_calls, backtrace_line=T.unsafe(nil)); end

  def raise_unexpected_message_args_error(expectation, args_for_multiple_calls, source_id=T.unsafe(nil)); end

  def raise_unexpected_message_error(message, args); end

  def raise_unimplemented_error(doubled_module, method_name, object); end

  def raise_verifying_double_not_defined_error(ref); end

  def raise_wrong_arity_error(args_to_yield, signature); end
end

module RSpec::Mocks::ExampleMethods
  def allow(target); end

  def allow_any_instance_of(klass); end

  def allow_message_expectations_on_nil(); end

  def class_double(doubled_class, *args); end

  def class_spy(*args); end

  def double(*args); end

  def expect_any_instance_of(klass); end

  def have_received(method_name, &block); end

  def hide_const(constant_name); end

  def instance_double(doubled_class, *args); end

  def instance_spy(*args); end

  def object_double(object_or_name, *args); end

  def object_spy(*args); end

  def receive(method_name, &block); end

  def receive_message_chain(*messages, &block); end

  def receive_messages(message_return_value_hash); end

  def spy(*args); end

  def stub_const(constant_name, value, options=T.unsafe(nil)); end

  def without_partial_double_verification(); end
end

module RSpec::Mocks::ExampleMethods::ExpectHost
  def expect(target); end
end

module RSpec::Mocks::ExampleMethods
  def self.declare_double(type, *args); end

  def self.declare_verifying_double(type, ref, *args); end

  def self.extended(object); end

  def self.included(klass); end
end

class RSpec::Mocks::ExpectChain
  def self.expect_chain_on(object, *chain, &blk); end
end

module RSpec::Mocks::ExpectationTargetMethods
  def expression(); end

  def not_to(matcher, &block); end

  def to(matcher, &block); end

  def to_not(matcher, &block); end
end

class RSpec::Mocks::Implementation
  def call(*args, **arg, &block); end

  def initial_action(); end

  def initial_action=(initial_action); end

  def inner_action(); end

  def inner_action=(inner_action); end

  def terminal_action(); end

  def terminal_action=(terminal_action); end
end

class RSpec::Mocks::InstanceMethodStasher
  def handle_restoration_failures(); end

  def initialize(object, method); end

  def method_is_stashed?(); end

  def original_method(); end

  def restore(); end

  def stash(); end
end

class RSpec::Mocks::MarshalExtension
  def self.patch!(); end

  def self.unpatch!(); end
end

class RSpec::Mocks::Matchers::ExpectationCustomization
  def block(); end

  def block=(block); end

  def initialize(method_name, args, block); end

  def playback_onto(expectation); end
end

class RSpec::Mocks::Matchers::HaveReceived
  def at_least(*args); end

  def at_most(*args); end

  def description(); end

  def does_not_match?(subject); end

  def exactly(*args); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(method_name, &block); end

  def matches?(subject, &block); end

  def name(); end

  def once(*args); end

  def ordered(*args); end

  def setup_allowance(_subject, &_block); end

  def setup_any_instance_allowance(_subject, &_block); end

  def setup_any_instance_expectation(_subject, &_block); end

  def setup_any_instance_negative_expectation(_subject, &_block); end

  def setup_expectation(subject, &block); end

  def setup_negative_expectation(subject, &block); end

  def thrice(*args); end

  def time(*args); end

  def times(*args); end

  def twice(*args); end

  def with(*args); end
  ARGS_CONSTRAINTS = ::T.let(nil, ::T.untyped)
  CONSTRAINTS = ::T.let(nil, ::T.untyped)
  COUNT_CONSTRAINTS = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::Matchers::Receive
  def and_call_original(*args, **arg, &block); end

  def and_invoke(*args, **arg, &block); end

  def and_raise(*args, **arg, &block); end

  def and_return(*args, **arg, &block); end

  def and_throw(*args, **arg, &block); end

  def and_wrap_original(*args, **arg, &block); end

  def and_yield(*args, **arg, &block); end

  def at_least(*args, **arg, &block); end

  def at_most(*args, **arg, &block); end

  def description(); end

  def does_not_match?(subject, &block); end

  def exactly(*args, **arg, &block); end

  def initialize(message, block); end

  def matches?(subject, &block); end

  def name(); end

  def never(*args, **arg, &block); end

  def once(*args, **arg, &block); end

  def ordered(*args, **arg, &block); end

  def setup_allowance(subject, &block); end

  def setup_any_instance_allowance(subject, &block); end

  def setup_any_instance_expectation(subject, &block); end

  def setup_any_instance_negative_expectation(subject, &block); end

  def setup_expectation(subject, &block); end

  def setup_negative_expectation(subject, &block); end

  def thrice(*args, **arg, &block); end

  def time(*args, **arg, &block); end

  def times(*args, **arg, &block); end

  def twice(*args, **arg, &block); end

  def with(*args, **arg, &block); end
end

class RSpec::Mocks::Matchers::Receive::DefaultDescribable
  def description_for(verb); end

  def initialize(message); end
end

class RSpec::Mocks::Matchers::ReceiveMessageChain
  def and_call_original(*args, &block); end

  def and_invoke(*args, &block); end

  def and_raise(*args, &block); end

  def and_return(*args, &block); end

  def and_throw(*args, &block); end

  def and_yield(*args, &block); end

  def description(); end

  def does_not_match?(*_args); end

  def initialize(chain, &block); end

  def matches?(subject, &block); end

  def name(); end

  def setup_allowance(subject, &block); end

  def setup_any_instance_allowance(subject, &block); end

  def setup_any_instance_expectation(subject, &block); end

  def setup_expectation(subject, &block); end

  def setup_negative_expectation(*_args); end

  def with(*args, &block); end
end

class RSpec::Mocks::Matchers::ReceiveMessages
  def description(); end

  def does_not_match?(_subject); end

  def initialize(message_return_value_hash); end

  def matches?(subject); end

  def name(); end

  def setup_allowance(subject); end

  def setup_any_instance_allowance(subject); end

  def setup_any_instance_expectation(subject); end

  def setup_expectation(subject); end

  def setup_negative_expectation(_subject); end

  def warn_about_block(); end
end

class RSpec::Mocks::MessageChain
  def block(); end

  def chain(); end

  def initialize(object, *chain, &blk); end

  def object(); end

  def setup_chain(); end
end

class RSpec::Mocks::MessageExpectation
  def and_call_original(); end

  def and_invoke(first_proc, *procs); end

  def and_raise(*args); end

  def and_return(first_value, *values); end

  def and_throw(*args); end

  def and_wrap_original(&block); end

  def and_yield(*args, &block); end

  def at_least(n, &block); end

  def at_most(n, &block); end

  def exactly(n, &block); end

  def never(); end

  def once(&block); end

  def ordered(&block); end

  def thrice(&block); end

  def time(&block); end

  def times(&block); end

  def twice(&block); end

  def with(*args, **arg, &block); end
end

module RSpec::Mocks::MessageExpectation::ImplementationDetails
  def actual_received_count_matters?(); end

  def additional_expected_calls(); end

  def advise(*args); end

  def and_yield_receiver_to_implementation(); end

  def argument_list_matcher=(argument_list_matcher); end

  def called_max_times?(); end

  def description_for(verb); end

  def ensure_expected_ordering_received!(); end

  def error_generator(); end

  def error_generator=(error_generator); end

  def expectation_count_type(); end

  def expected_args(); end

  def expected_from=(expected_from); end

  def expected_messages_received?(); end

  def expected_received_count=(expected_received_count); end

  def generate_error(); end

  def ignoring_args?(); end

  def implementation(); end

  def implementation=(implementation); end

  def increase_actual_received_count!(); end

  def initialize(error_generator, expectation_ordering, expected_from, method_double, type=T.unsafe(nil), opts=T.unsafe(nil), &implementation_block); end

  def invoke(parent_stub, *args, **arg, &block); end

  def invoke_without_incrementing_received_count(parent_stub, *args, **arg, &block); end

  def matches?(message, *args, **arg); end

  def matches_at_least_count?(); end

  def matches_at_most_count?(); end

  def matches_exact_count?(); end

  def matches_name_but_not_args(message, *args); end

  def message(); end

  def negative?(); end

  def negative_expectation_for?(message); end

  def ordered?(); end

  def orig_object(); end

  def raise_out_of_order_error(); end

  def raise_unexpected_message_args_error(args_for_multiple_calls); end

  def safe_invoke(parent_stub, *args, **arg, &block); end

  def similar_messages(); end

  def type(); end

  def unadvise(args); end

  def verify_messages_received(); end

  def yield_receiver_to_implementation_block?(); end
end

class RSpec::Mocks::MethodDouble
  def add_default_stub(*args, &implementation); end

  def add_expectation(error_generator, expectation_ordering, expected_from, opts, &implementation); end

  def add_simple_expectation(method_name, response, error_generator, backtrace_line); end

  def add_simple_stub(method_name, response); end

  def add_stub(error_generator, expectation_ordering, expected_from, opts=T.unsafe(nil), &implementation); end

  def build_expectation(error_generator, expectation_ordering); end

  def clear(); end

  def configure_method(); end

  def define_proxy_method(); end

  def expectations(); end

  def initialize(object, method_name, proxy); end

  def message_expectation_class(); end

  def method_name(); end

  def method_stasher(); end

  def object(); end

  def object_singleton_class(); end

  def original_implementation_callable(); end

  def original_method(); end

  def proxy_method_invoked(_obj, *args, **arg, &block); end

  def raise_method_not_stubbed_error(); end

  def remove_stub(); end

  def remove_stub_if_present(); end

  def reset(); end

  def restore_original_method(); end

  def restore_original_visibility(); end

  def save_original_implementation_callable!(); end

  def setup_simple_method_double(method_name, response, collection, error_generator=T.unsafe(nil), backtrace_line=T.unsafe(nil)); end

  def show_frozen_warning(); end

  def stubs(); end

  def verify(); end

  def visibility(); end
end

class RSpec::Mocks::MethodReference
  def defined?(); end

  def implemented?(); end

  def initialize(object_reference, method_name); end

  def unimplemented?(); end

  def visibility(); end

  def with_signature(); end
end

class RSpec::Mocks::MethodReference
  def self.for(object_reference, method_name); end

  def self.instance_method_visibility_for(klass, method_name); end

  def self.method_defined_at_any_visibility?(klass, method_name); end

  def self.method_visibility_for(object, method_name); end
end

class RSpec::Mocks::NamedObjectReference
  def const_to_replace(); end

  def defined?(); end

  def description(); end

  def initialize(const_name); end

  def target(); end

  def when_loaded(); end
end

class RSpec::Mocks::NestedSpace
  def initialize(parent); end
end

class RSpec::Mocks::NoCallbackInvocationStrategy
  def call(_doubled_module); end
end

class RSpec::Mocks::ObjectReference
  MODULE_NAME_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ObjectReference
  def self.for(object_module_or_name, allow_direct_object_refs=T.unsafe(nil)); end
end

module RSpec::Mocks::ObjectVerifyingDoubleMethods
  def as_stubbed_const(options=T.unsafe(nil)); end
end

class RSpec::Mocks::OrderGroup
  def clear(); end

  def consume(); end

  def empty?(); end

  def handle_order_constraint(expectation); end

  def invoked(message); end

  def ready_for?(expectation); end

  def register(expectation); end

  def verify_invocation_order(expectation); end
end

module RSpec::Mocks::PartialClassDoubleProxyMethods
  def initialize(source_space, *args); end

  def method_double_from_ancestor_for(message); end

  def original_method_handle_for(message); end

  def original_unbound_method_handle_from_ancestor_for(message); end

  def superclass_proxy(); end
end

class RSpec::Mocks::PartialDoubleProxy
  def original_method_handle_for(message); end

  def visibility_for(method_name); end
end

class RSpec::Mocks::Proxy
  def add_message_expectation(method_name, opts=T.unsafe(nil), &block); end

  def add_simple_expectation(method_name, response, location); end

  def add_simple_stub(method_name, response); end

  def add_stub(method_name, opts=T.unsafe(nil), &implementation); end

  def build_expectation(method_name); end

  def check_for_unexpected_arguments(expectation); end

  def ensure_can_be_proxied!(object); end

  def ensure_implemented(*_args); end

  def has_negative_expectation?(message); end

  def initialize(object, order_group, options=T.unsafe(nil)); end

  def message_received(message, *args, **arg, &block); end

  def messages_arg_list(); end

  def method_double_if_exists_for_message(message); end

  def object(); end

  def original_method_handle_for(_message); end

  def prepended_modules_of_singleton_class(); end

  def raise_missing_default_stub_error(expectation, args_for_multiple_calls); end

  def raise_unexpected_message_error(method_name, args); end

  def received_message?(method_name, *args, &block); end

  def record_message_received(message, *args, &block); end

  def remove_stub(method_name); end

  def remove_stub_if_present(method_name); end

  def replay_received_message_on(expectation, &block); end

  def reset(); end

  def verify(); end

  def visibility_for(_method_name); end
  DEFAULT_MESSAGE_EXPECTATION_OPTS = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::Proxy::SpecificMessage
  def ==(expectation); end

  def args(); end

  def args=(_); end

  def message(); end

  def message=(_); end

  def object(); end

  def object=(_); end
end

class RSpec::Mocks::Proxy::SpecificMessage
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RSpec::Mocks::Proxy
  def self.prepended_modules_of(klass); end
end

class RSpec::Mocks::ProxyForNil
  def disallow_expectations(); end

  def disallow_expectations=(disallow_expectations); end

  def initialize(order_group); end

  def warn_about_expectations(); end

  def warn_about_expectations=(warn_about_expectations); end
end

class RSpec::Mocks::RootSpace
  def any_instance_proxy_for(*_args); end

  def any_instance_recorder_for(*_args); end

  def any_instance_recorders_from_ancestry_of(_object); end

  def new_scope(); end

  def proxy_for(*_args); end

  def register_constant_mutator(_mutator); end

  def registered?(_object); end

  def reset_all(); end

  def superclass_proxy_for(*_args); end

  def verify_all(); end
end

class RSpec::Mocks::SimpleMessageExpectation
  def called_max_times?(); end

  def initialize(message, response, error_generator, backtrace_line=T.unsafe(nil)); end

  def invoke(*_); end

  def matches?(message, *_); end

  def unadvise(_); end

  def verify_messages_received(); end
end

class RSpec::Mocks::Space
  def any_instance_mutex(); end

  def any_instance_proxy_for(klass); end

  def any_instance_recorder_for(klass, only_return_existing=T.unsafe(nil)); end

  def any_instance_recorders(); end

  def any_instance_recorders_from_ancestry_of(object); end

  def constant_mutator_for(name); end

  def ensure_registered(object); end

  def new_scope(); end

  def proxies(); end

  def proxies_of(klass); end

  def proxy_for(object); end

  def proxy_mutex(); end

  def register_constant_mutator(mutator); end

  def registered?(object); end

  def reset_all(); end

  def superclass_proxy_for(klass); end

  def verify_all(); end
end

class RSpec::Mocks::StubChain
  def self.stub_chain_on(object, *chain, &blk); end
end

module RSpec::Mocks::Syntax
  def self.default_should_syntax_host(); end

  def self.disable_expect(syntax_host=T.unsafe(nil)); end

  def self.disable_should(syntax_host=T.unsafe(nil)); end

  def self.enable_expect(syntax_host=T.unsafe(nil)); end

  def self.enable_should(syntax_host=T.unsafe(nil)); end

  def self.expect_enabled?(syntax_host=T.unsafe(nil)); end

  def self.should_enabled?(syntax_host=T.unsafe(nil)); end

  def self.warn_about_should!(); end

  def self.warn_unless_should_configured(method_name, replacement=T.unsafe(nil)); end
end

class RSpec::Mocks::TargetBase
  def initialize(target); end
end

module RSpec::Mocks::TargetDelegationClassMethods
  def delegate_not_to(matcher_method, options=T.unsafe(nil)); end

  def delegate_to(matcher_method); end

  def disallow_negation(method_name); end
end

module RSpec::Mocks::TargetDelegationInstanceMethods
  def target(); end
end

module RSpec::Mocks::TestDouble
  def ==(other); end

  def __build_mock_proxy_unless_expired(order_group); end

  def __disallow_further_usage!(); end

  def as_null_object(); end

  def freeze(); end

  def initialize(name=T.unsafe(nil), stubs=T.unsafe(nil)); end

  def inspect(); end

  def null_object?(); end

  def respond_to?(message, incl_private=T.unsafe(nil)); end

  def to_s(); end
end

module RSpec::Mocks::TestDoubleFormatter
  def self.format(dbl, unwrap=T.unsafe(nil)); end
end

module RSpec::Mocks::VerifyingDouble
  def __send__(name, *args, &block); end

  def initialize(doubled_module, *args); end

  def method_missing(message, *args, &block); end

  def respond_to?(message, include_private=T.unsafe(nil)); end

  def send(name, *args, &block); end
end

class RSpec::Mocks::VerifyingExistingMethodDouble
  def initialize(object, method_name, proxy); end

  def unimplemented?(); end

  def with_signature(); end
end

class RSpec::Mocks::VerifyingExistingMethodDouble
  def self.for(object, method_name, proxy); end
end

class RSpec::Mocks::VerifyingMessageExpectation
  def initialize(*args); end

  def method_reference(); end

  def method_reference=(method_reference); end

  def with(*args, &block); end
end

class RSpec::Mocks::VerifyingMethodDouble
  def add_expectation(*args, &block); end

  def add_stub(*args, &block); end

  def initialize(object, method_name, proxy, method_reference); end

  def proxy_method_invoked(obj, *args, &block); end

  def validate_arguments!(actual_args); end
end

class RSpec::Mocks::VerifyingPartialDoubleProxy
  def ensure_implemented(_method_name); end

  def initialize(object, expectation_ordering, optional_callback_invocation_strategy=T.unsafe(nil)); end

  def method_reference(); end
end

class RSpec::Mocks::VerifyingProxy
  def initialize(object, order_group, doubled_module, method_reference_class); end

  def method_reference(); end

  def validate_arguments!(method_name, args); end

  def visibility_for(method_name); end
end

module RSpec::Mocks::VerifyingProxyMethods
  def add_message_expectation(method_name, opts=T.unsafe(nil), &block); end

  def add_simple_stub(method_name, *args); end

  def add_stub(method_name, opts=T.unsafe(nil), &implementation); end

  def ensure_implemented(method_name); end

  def ensure_publicly_implemented(method_name, _object); end
end

module RSpec::Mocks::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Mocks
  def self.allow_message(subject, message, opts=T.unsafe(nil), &block); end

  def self.configuration(); end

  def self.error_generator(); end

  def self.expect_message(subject, message, opts=T.unsafe(nil), &block); end

  def self.setup(); end

  def self.space(); end

  def self.teardown(); end

  def self.verify(); end

  def self.with_temporary_scope(); end
end

RSpec::SharedContext = RSpec::Core::SharedContext

module RSpec::Support
  DEFAULT_FAILURE_NOTIFIER = ::T.let(nil, ::T.untyped)
  DEFAULT_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  KERNEL_METHOD_METHOD = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue
  AVOID_RESCUING = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::Differ
  def color?(); end

  def diff(actual, expected); end

  def diff_as_object(actual, expected); end

  def diff_as_string(actual, expected); end

  def initialize(opts=T.unsafe(nil)); end
end

class RSpec::Support::EncodedString
  REPLACE = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::FuzzyMatcher
  def self.values_match?(expected, actual); end
end

class RSpec::Support::HunkGenerator
  def hunks(); end

  def initialize(actual, expected); end
end

class RSpec::Support::MethodSignature
  INFINITY = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::Mutex
  NEW_MUTEX_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter
  def format(object); end

  def initialize(max_formatted_output_length=T.unsafe(nil)); end

  def max_formatted_output_length(); end

  def max_formatted_output_length=(max_formatted_output_length); end

  def prepare_array(array); end

  def prepare_element(element); end

  def prepare_for_inspection(object); end

  def prepare_hash(input_hash); end

  def recursive_structure?(object); end

  def sort_hash_keys(input_hash); end

  def with_entering_structure(structure); end
  ELLIPSIS = ::T.let(nil, ::T.untyped)
  INSPECTOR_CLASSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::BaseInspector
  def formatter(); end

  def formatter=(_); end

  def object(); end

  def object=(_); end

  def pretty_print(pp); end
end

class RSpec::Support::ObjectFormatter::BaseInspector
  def self.[](*arg); end

  def self.can_inspect?(_object); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RSpec::Support::ObjectFormatter::BigDecimalInspector
end

class RSpec::Support::ObjectFormatter::BigDecimalInspector
  def self.can_inspect?(object); end
end

class RSpec::Support::ObjectFormatter::DateTimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::DateTimeInspector
  def self.can_inspect?(object); end
end

class RSpec::Support::ObjectFormatter::DelegatorInspector
end

class RSpec::Support::ObjectFormatter::DelegatorInspector
  def self.can_inspect?(object); end
end

class RSpec::Support::ObjectFormatter::DescribableMatcherInspector
end

class RSpec::Support::ObjectFormatter::DescribableMatcherInspector
  def self.can_inspect?(object); end
end

class RSpec::Support::ObjectFormatter::InspectableItem
  def pretty_print(pp); end

  def text(); end

  def text=(_); end
end

class RSpec::Support::ObjectFormatter::InspectableItem
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RSpec::Support::ObjectFormatter::InspectableObjectInspector
end

class RSpec::Support::ObjectFormatter::InspectableObjectInspector
  def self.can_inspect?(object); end
end

class RSpec::Support::ObjectFormatter::TimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::TimeInspector
  def self.can_inspect?(object); end
end

class RSpec::Support::ObjectFormatter::UninspectableObjectInspector
  def klass(); end

  def native_object_id(); end
  OBJECT_ID_FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::UninspectableObjectInspector
  def self.can_inspect?(object); end
end

class RSpec::Support::ObjectFormatter
  def self.default_instance(); end

  def self.format(object); end

  def self.prepare_for_inspection(object); end
end

RSpec::Support::StrictSignatureVerifier = RSpec::Support::MethodSignatureVerifier

module RSpec::Support::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Support
  def self.require_rspec_expectations(f); end

  def self.require_rspec_matchers(f); end

  def self.require_rspec_mocks(f); end
end

class RSpecJUnitFormatter
  DISCOURAGED_REGEXP = ::T.let(nil, ::T.untyped)
  DISCOURAGED_REPLACEMENTS = ::T.let(nil, ::T.untyped)
  ILLEGAL_REGEXP = ::T.let(nil, ::T.untyped)
  ILLEGAL_REPLACEMENT = ::T.let(nil, ::T.untyped)
  STRIP_DIFF_COLORS_BLOCK_REGEXP = ::T.let(nil, ::T.untyped)
  STRIP_DIFF_COLORS_CODES_REGEXP = ::T.let(nil, ::T.untyped)
end

module Racc
  Copyright = ::T.let(nil, ::T.untyped)
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::Parser
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

module Rack
  CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  ETAG = ::T.let(nil, ::T.untyped)
  EXPIRES = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTP_COOKIE = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_PORT = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  LINK = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  POST = ::T.let(nil, ::T.untyped)
  PUT = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_ERRORS = ::T.let(nil, ::T.untyped)
  RACK_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_HIJACK_IO = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_IS_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  RACK_METHODOVERRIDE_ORIGINAL_METHOD = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  RACK_MULTIPROCESS = ::T.let(nil, ::T.untyped)
  RACK_MULTITHREAD = ::T.let(nil, ::T.untyped)
  RACK_RECURSIVE_INCLUDE = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_STRING = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_INPUT = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_VARS = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_RUNONCE = ::T.let(nil, ::T.untyped)
  RACK_SESSION = ::T.let(nil, ::T.untyped)
  RACK_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  RACK_SESSION_UNPACKED_COOKIE_DATA = ::T.let(nil, ::T.untyped)
  RACK_SHOWSTATUS_DETAIL = ::T.let(nil, ::T.untyped)
  RACK_TEMPFILES = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  RACK_VERSION = ::T.let(nil, ::T.untyped)
  RELEASE = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  SCRIPT_NAME = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
  TRACE = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  UNLINK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Rack::Auth
end

class Rack::Auth::AbstractHandler
  def initialize(app, realm=T.unsafe(nil), &authenticator); end

  def realm(); end

  def realm=(realm); end
end

class Rack::Auth::AbstractHandler
end

class Rack::Auth::AbstractRequest
  def initialize(env); end

  def params(); end

  def parts(); end

  def provided?(); end

  def request(); end

  def scheme(); end

  def valid?(); end
  AUTHORIZATION_KEYS = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::AbstractRequest
end

class Rack::Auth::Basic
  def call(env); end
end

class Rack::Auth::Basic::Request
  def basic?(); end

  def credentials(); end

  def username(); end
end

class Rack::Auth::Basic::Request
end

class Rack::Auth::Basic
end

module Rack::Auth::Digest
end

class Rack::Auth::Digest::MD5
  def call(env); end

  def initialize(app, realm=T.unsafe(nil), opaque=T.unsafe(nil), &authenticator); end

  def opaque(); end

  def opaque=(opaque); end

  def passwords_hashed=(passwords_hashed); end

  def passwords_hashed?(); end
  QOP = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::MD5
end

class Rack::Auth::Digest::Nonce
  def digest(); end

  def fresh?(); end

  def initialize(timestamp=T.unsafe(nil), given_digest=T.unsafe(nil)); end

  def stale?(); end

  def valid?(); end
end

class Rack::Auth::Digest::Nonce
  def self.parse(string); end

  def self.private_key(); end

  def self.private_key=(private_key); end

  def self.time_limit(); end

  def self.time_limit=(time_limit); end
end

class Rack::Auth::Digest::Params
  def [](k); end

  def []=(k, v); end

  def initialize(); end

  def quote(str); end
  UNQUOTED = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::Params
  def self.dequote(str); end

  def self.parse(str); end

  def self.split_header_value(str); end
end

class Rack::Auth::Digest::Request
  def correct_uri?(); end

  def digest?(); end

  def method(); end

  def method_missing(sym, *args); end

  def nonce(); end

  def respond_to?(sym, *arg); end
end

class Rack::Auth::Digest::Request
end

module Rack::Auth::Digest
end

module Rack::Auth
end

class Rack::BodyProxy
  def close(); end

  def closed?(); end

  def initialize(body, &block); end

  def method_missing(method_name, *args, **arg, &block); end
end

class Rack::BodyProxy
end

class Rack::Builder
  def call(env); end

  def freeze_app(); end

  def initialize(default_app=T.unsafe(nil), &block); end

  def map(path, &block); end

  def run(app); end

  def to_app(); end

  def use(middleware, *args, **arg, &block); end

  def warmup(prc=T.unsafe(nil), &block); end
  UTF_8_BOM = ::T.let(nil, ::T.untyped)
end

class Rack::Builder
  def self.app(default_app=T.unsafe(nil), &block); end

  def self.load_file(path, opts=T.unsafe(nil)); end

  def self.new_from_string(builder_script, file=T.unsafe(nil)); end

  def self.parse_file(config, opts=T.unsafe(nil)); end
end

class Rack::Cascade
  def <<(app); end

  def add(app); end

  def apps(); end

  def call(env); end

  def include?(app); end

  def initialize(apps, cascade_for=T.unsafe(nil)); end
  NotFound = ::T.let(nil, ::T.untyped)
end

class Rack::Cascade
end

class Rack::Chunked
  include ::Rack::Utils
  def call(env); end

  def chunkable_version?(ver); end

  def initialize(app); end
end

class Rack::Chunked::Body
  def close(); end

  def each(&block); end

  def initialize(body); end
  TAIL = ::T.let(nil, ::T.untyped)
  TERM = ::T.let(nil, ::T.untyped)
end

class Rack::Chunked::Body
end

class Rack::Chunked::TrailerBody
end

class Rack::Chunked::TrailerBody
end

class Rack::Chunked
end

class Rack::CommonLogger
  def call(env); end

  def initialize(app, logger=T.unsafe(nil)); end
  FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::CommonLogger
end

class Rack::ConditionalGet
  def call(env); end

  def initialize(app); end
end

class Rack::ConditionalGet
end

class Rack::Config
  def call(env); end

  def initialize(app, &block); end
end

class Rack::Config
end

class Rack::ContentLength
  include ::Rack::Utils
  def call(env); end

  def initialize(app); end
end

class Rack::ContentLength
end

class Rack::ContentType
  include ::Rack::Utils
  def call(env); end

  def initialize(app, content_type=T.unsafe(nil)); end
end

class Rack::ContentType
end

class Rack::Deflater
  def call(env); end

  def initialize(app, options=T.unsafe(nil)); end
end

class Rack::Deflater::GzipStream
  def close(); end

  def each(&block); end

  def initialize(body, mtime, sync); end

  def write(data); end
end

class Rack::Deflater::GzipStream
end

class Rack::Deflater
end

class Rack::Directory
  def call(env); end

  def check_bad_request(path_info); end

  def check_forbidden(path_info); end

  def entity_not_found(path_info); end

  def filesize_format(int); end

  def get(env); end

  def initialize(root, app=T.unsafe(nil)); end

  def list_directory(path_info, path, script_name); end

  def list_path(env, path, path_info, script_name); end

  def root(); end

  def stat(path); end
  DIR_FILE = ::T.let(nil, ::T.untyped)
  DIR_PAGE_FOOTER = ::T.let(nil, ::T.untyped)
  DIR_PAGE_HEADER = ::T.let(nil, ::T.untyped)
  FILESIZE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::Directory::DirectoryBody
end

class Rack::Directory::DirectoryBody
end

class Rack::Directory
end

class Rack::ETag
  def call(env); end

  def initialize(app, no_cache_control=T.unsafe(nil), cache_control=T.unsafe(nil)); end
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  ETAG_STRING = ::T.let(nil, ::T.untyped)
end

class Rack::ETag
end

class Rack::Events
  def call(env); end

  def initialize(app, handlers); end
end

module Rack::Events::Abstract
  def on_commit(req, res); end

  def on_error(req, res, e); end

  def on_finish(req, res); end

  def on_send(req, res); end

  def on_start(req, res); end
end

module Rack::Events::Abstract
end

class Rack::Events::BufferedResponse
  def body(); end

  def initialize(status, headers, body); end

  def to_a(); end
end

class Rack::Events::BufferedResponse
end

class Rack::Events::EventedBodyProxy
  def each(&blk); end

  def initialize(body, request, response, handlers, &block); end

  def request(); end

  def response(); end
end

class Rack::Events::EventedBodyProxy
end

class Rack::Events
end

Rack::File = Rack::Files

class Rack::Files
  def call(env); end

  def get(env); end

  def initialize(root, headers=T.unsafe(nil), default_mime=T.unsafe(nil)); end

  def root(); end

  def serving(request, path); end
  ALLOWED_VERBS = ::T.let(nil, ::T.untyped)
  ALLOW_HEADER = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
end

class Rack::Files::BaseIterator
  def bytesize(); end

  def close(); end

  def each(&blk); end

  def initialize(path, ranges, options); end

  def options(); end

  def path(); end

  def ranges(); end
end

class Rack::Files::BaseIterator
end

class Rack::Files::Iterator
  def to_path(); end
end

class Rack::Files::Iterator
end

class Rack::Files
  def self.method_added(name); end
end

class Rack::ForwardRequest
  def env(); end

  def initialize(url, env=T.unsafe(nil)); end

  def url(); end
end

class Rack::ForwardRequest
end

module Rack::Handler
end

class Rack::Handler::CGI
end

class Rack::Handler::CGI
  def self.run(app, **options); end

  def self.send_body(body); end

  def self.send_headers(status, headers); end

  def self.serve(app); end
end

class Rack::Handler::WEBrick
  def initialize(server, app); end
end

class Rack::Handler::WEBrick
  def self.run(app, **options); end

  def self.shutdown(); end

  def self.valid_options(); end
end

module Rack::Handler
  def self.default(); end

  def self.get(server); end

  def self.pick(server_names); end

  def self.register(server, klass); end

  def self.try_require(prefix, const_name); end
end

class Rack::Head
  def call(env); end

  def initialize(app); end
end

class Rack::Head
end

class Rack::HttpStreamingResponse
  def body(); end

  def code(); end

  def each(&block); end

  def headers(); end

  def initialize(request, host, port=T.unsafe(nil)); end

  def read_timeout(); end

  def read_timeout=(read_timeout); end

  def response(); end

  def session(); end

  def ssl_version(); end

  def ssl_version=(ssl_version); end

  def status(); end

  def use_ssl(); end

  def use_ssl=(use_ssl); end

  def verify_mode(); end

  def verify_mode=(verify_mode); end
end

class Rack::Lint
  include ::Rack::Lint::Assertion
  def _call(env); end

  def call(env=T.unsafe(nil)); end

  def check_content_length(status, headers); end

  def check_content_type(status, headers); end

  def check_env(env); end

  def check_error(error); end

  def check_headers(header); end

  def check_hijack(env); end

  def check_hijack_response(headers, env); end

  def check_input(input); end

  def check_status(status); end

  def close(); end

  def each(&blk); end

  def initialize(app); end

  def verify_content_length(bytes); end
end

module Rack::Lint::Assertion
  def assert(message); end
end

module Rack::Lint::Assertion
end

class Rack::Lint::ErrorWrapper
  include ::Rack::Lint::Assertion
  def close(*args); end

  def flush(); end

  def initialize(error); end

  def puts(str); end

  def write(str); end
end

class Rack::Lint::ErrorWrapper
end

class Rack::Lint::HijackWrapper
  include ::Rack::Lint::Assertion
  def close(*args, **arg, &block); end

  def close_read(*args, **arg, &block); end

  def close_write(*args, **arg, &block); end

  def closed?(*args, **arg, &block); end

  def flush(*args, **arg, &block); end

  def initialize(io); end

  def read(*args, **arg, &block); end

  def read_nonblock(*args, **arg, &block); end

  def write(*args, **arg, &block); end

  def write_nonblock(*args, **arg, &block); end
  REQUIRED_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::Lint::HijackWrapper
  extend ::Forwardable
end

class Rack::Lint::InputWrapper
  include ::Rack::Lint::Assertion
  def close(*args); end

  def each(*args, &blk); end

  def gets(*args); end

  def initialize(input); end

  def read(*args); end

  def rewind(*args); end
end

class Rack::Lint::InputWrapper
end

class Rack::Lint::LintError
end

class Rack::Lint::LintError
end

class Rack::Lint
end

class Rack::Lock
  def call(env); end

  def initialize(app, mutex=T.unsafe(nil)); end
end

class Rack::Lock
end

class Rack::Logger
  def call(env); end

  def initialize(app, level=T.unsafe(nil)); end
end

class Rack::Logger
end

class Rack::MediaType
  SPLIT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Rack::MediaType
  def self.params(content_type); end

  def self.type(content_type); end
end

class Rack::MethodOverride
  def call(env); end

  def initialize(app); end

  def method_override(env); end
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_OVERRIDE_HEADER = ::T.let(nil, ::T.untyped)
  METHOD_OVERRIDE_PARAM_KEY = ::T.let(nil, ::T.untyped)
end

class Rack::MethodOverride
end

module Rack::Mime
  MIME_TYPES = ::T.let(nil, ::T.untyped)
end

module Rack::Mime
  def self.match?(value, matcher); end

  def self.mime_type(ext, fallback=T.unsafe(nil)); end
end

class Rack::MiniProfiler
  def advanced_debugging_enabled?(); end

  def analyze_memory(); end

  def cache_control_value(); end

  def call(env); end

  def cancel_auto_inject(env); end

  def config(); end

  def current(); end

  def current=(c); end

  def dump_env(env); end

  def dump_exceptions(exceptions); end

  def flamegraph(graph, path); end

  def generate_html(page_struct, env, result_json=T.unsafe(nil)); end

  def get_profile_script(env); end

  def help(client_settings, env); end

  def ids(env); end

  def ids_comma_separated(env); end

  def initialize(app, config=T.unsafe(nil)); end

  def inject(fragment, script); end

  def inject_profiler(env, status, headers, body); end

  def make_link(postfix, env); end

  def serve_html(env); end

  def serve_results(env); end

  def text_result(body); end

  def tool_disabled_message(client_settings); end

  def trim_strings(strings, max_size); end

  def user(env); end
  ASSET_VERSION = ::T.let(nil, ::T.untyped)
  SOURCE_CODE_URI = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::AbstractStore
  def allowed_tokens(); end

  def diagnostics(user); end

  def fetch_snapshots_group(group_name); end

  def fetch_snapshots_overview(); end

  def get_unviewed_ids(user); end

  def load(id); end

  def load_snapshot(id, group_name); end

  def push_snapshot(page_struct, group_name, config); end

  def save(page_struct); end

  def set_all_unviewed(user, ids); end

  def set_unviewed(user, id); end

  def set_viewed(user, id); end

  def should_take_snapshot?(period); end

  def snapshots_group(group_name); end

  def snapshots_overview(); end
  MAX_TOKEN_AGE = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::ClientSettings
  def backtrace_default?(); end

  def backtrace_full?(); end

  def backtrace_level(); end

  def backtrace_level=(backtrace_level); end

  def backtrace_none?(); end

  def disable_profiling(); end

  def disable_profiling=(disable_profiling); end

  def disable_profiling?(); end

  def discard_cookie!(headers); end

  def handle_cookie(result); end

  def has_valid_cookie?(); end

  def initialize(env, store, start); end

  def write!(headers); end
  BACKTRACE_DEFAULT = ::T.let(nil, ::T.untyped)
  BACKTRACE_FULL = ::T.let(nil, ::T.untyped)
  BACKTRACE_NONE = ::T.let(nil, ::T.untyped)
  COOKIE_NAME = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::Config
  def assets_url(); end

  def assets_url=(lmbda); end

  def authorization_mode(); end

  def authorization_mode=(mode); end

  def auto_inject(); end

  def auto_inject=(auto_inject); end

  def backtrace_ignores(); end

  def backtrace_ignores=(backtrace_ignores); end

  def backtrace_includes(); end

  def backtrace_includes=(backtrace_includes); end

  def backtrace_remove(); end

  def backtrace_remove=(backtrace_remove); end

  def backtrace_threshold_ms(); end

  def backtrace_threshold_ms=(backtrace_threshold_ms); end

  def base_url_path(); end

  def base_url_path=(base_url_path); end

  def collapse_results(); end

  def collapse_results=(collapse_results); end

  def content_security_policy_nonce(); end

  def content_security_policy_nonce=(content_security_policy_nonce); end

  def cookie_path(); end

  def cookie_path=(cookie_path); end

  def disable_caching(); end

  def disable_caching=(disable_caching); end

  def enable_advanced_debugging_tools(); end

  def enable_advanced_debugging_tools=(enable_advanced_debugging_tools); end

  def enable_hotwire_turbo_drive_support(); end

  def enable_hotwire_turbo_drive_support=(enable_hotwire_turbo_drive_support); end

  def enabled(); end

  def enabled=(enabled); end

  def flamegraph_mode(); end

  def flamegraph_mode=(flamegraph_mode); end

  def flamegraph_sample_rate(); end

  def flamegraph_sample_rate=(flamegraph_sample_rate); end

  def horizontal_position(); end

  def html_container(); end

  def html_container=(html_container); end

  def logger(); end

  def logger=(logger); end

  def max_snapshot_groups(); end

  def max_snapshot_groups=(max_snapshot_groups); end

  def max_snapshots_per_group(); end

  def max_snapshots_per_group=(max_snapshots_per_group); end

  def max_sql_param_length(); end

  def max_sql_param_length=(max_sql_param_length); end

  def max_traces_to_show(); end

  def max_traces_to_show=(max_traces_to_show); end

  def merge!(config); end

  def position(); end

  def position=(position); end

  def pre_authorize_cb(); end

  def pre_authorize_cb=(pre_authorize_cb); end

  def show_children(); end

  def show_children=(show_children); end

  def show_controls(); end

  def show_controls=(show_controls); end

  def show_total_sql_count(); end

  def show_total_sql_count=(show_total_sql_count); end

  def show_trivial(); end

  def show_trivial=(show_trivial); end

  def skip_paths(); end

  def skip_paths=(skip_paths); end

  def skip_schema_queries(); end

  def skip_schema_queries=(skip_schema_queries); end

  def skip_sql_param_names(); end

  def skip_sql_param_names=(skip_sql_param_names); end

  def snapshot_every_n_requests(); end

  def snapshot_every_n_requests=(snapshot_every_n_requests); end

  def snapshot_hidden_custom_fields(); end

  def snapshot_hidden_custom_fields=(snapshot_hidden_custom_fields); end

  def snapshots_redact_sql_queries(); end

  def snapshots_redact_sql_queries=(snapshots_redact_sql_queries); end

  def snapshots_transport_auth_key(); end

  def snapshots_transport_auth_key=(snapshots_transport_auth_key); end

  def snapshots_transport_destination_url(); end

  def snapshots_transport_destination_url=(snapshots_transport_destination_url); end

  def snapshots_transport_gzip_requests(); end

  def snapshots_transport_gzip_requests=(snapshots_transport_gzip_requests); end

  def start_hidden(); end

  def start_hidden=(start_hidden); end

  def storage(); end

  def storage=(storage); end

  def storage_failure(); end

  def storage_failure=(storage_failure); end

  def storage_instance(); end

  def storage_instance=(storage_instance); end

  def storage_options(); end

  def storage_options=(storage_options); end

  def suppress_encoding(); end

  def suppress_encoding=(suppress_encoding); end

  def toggle_shortcut(); end

  def toggle_shortcut=(toggle_shortcut); end

  def use_existing_jquery(); end

  def use_existing_jquery=(use_existing_jquery); end

  def user_provider(); end

  def user_provider=(user_provider); end

  def vertical_position(); end
end

class Rack::MiniProfiler::Config
  def self.attr_accessor(*vars); end

  def self.attributes(); end

  def self.default(); end
end

class Rack::MiniProfiler::Context
  def current_timer(); end

  def current_timer=(current_timer); end

  def discard(); end

  def discard=(discard); end

  def full_backtrace(); end

  def full_backtrace=(full_backtrace); end

  def initialize(opts=T.unsafe(nil)); end

  def inject_js(); end

  def inject_js=(inject_js); end

  def measure(); end

  def measure=(measure); end

  def mpt_init(); end

  def mpt_init=(mpt_init); end

  def page_struct(); end

  def page_struct=(page_struct); end

  def skip_backtrace(); end

  def skip_backtrace=(skip_backtrace); end
end

class Rack::MiniProfiler::FileStore
  def cleanup_cache(); end

  def flush_tokens(); end

  def initialize(args=T.unsafe(nil)); end
  EXPIRES_IN_SECONDS = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::FileStore::FileCache
  def [](key); end

  def []=(key, val); end

  def initialize(path, prefix); end
end

class Rack::MiniProfiler::GCProfiler
  def analyze_growth(ids_before, ids_after); end

  def analyze_initial_state(ids_before); end

  def analyze_strings(ids_before, ids_after); end

  def diff_object_stats(before, after); end

  def object_space_stats(); end

  def profile_gc(app, env); end
end

class Rack::MiniProfiler::MemcacheStore
  def flush_tokens(); end

  def initialize(args=T.unsafe(nil)); end
  EXPIRES_IN_SECONDS = ::T.let(nil, ::T.untyped)
  MAX_RETRIES = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::MemoryStore
  def cleanup_cache(); end

  def initialize(args=T.unsafe(nil)); end

  def initialize_cleanup_thread(args=T.unsafe(nil)); end

  def initialize_locks(); end
  CLEANUP_CYCLE = ::T.let(nil, ::T.untyped)
  CLEANUP_INTERVAL = ::T.let(nil, ::T.untyped)
  EXPIRES_IN_SECONDS = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::MemoryStore::CacheCleanupThread
  def cleanup(); end

  def cycle_count(); end

  def increment_cycle(); end

  def initialize(interval, cycle, store); end

  def should_cleanup?(); end

  def sleepy_run(); end
end

module Rack::MiniProfiler::ProfilingMethods
  def counter(type, duration_ms=T.unsafe(nil)); end

  def counter_method(klass, method, &blk); end

  def finish_step(obj); end

  def profile_method(klass, method, type=T.unsafe(nil), &blk); end

  def profile_singleton_method(klass, method, type=T.unsafe(nil), &blk); end

  def record_sql(query, elapsed_ms, params=T.unsafe(nil)); end

  def start_step(name); end

  def step(name, opts=T.unsafe(nil)); end

  def uncounter_method(klass, method); end

  def unprofile_method(klass, method); end

  def unprofile_singleton_method(klass, method); end
end

class Rack::MiniProfiler::RedisStore
  def flush_tokens(); end

  def initialize(args=T.unsafe(nil)); end

  def prefix(); end

  def simulate_expire(); end
  COUNTER_LUA = ::T.let(nil, ::T.untyped)
  COUNTER_LUA_SHA = ::T.let(nil, ::T.untyped)
  EXPIRES_IN_SECONDS = ::T.let(nil, ::T.untyped)
end

class Rack::MiniProfiler::SnapshotsTransporter
  def buffer(); end

  def flush_buffer(); end

  def gzip_requests(); end

  def gzip_requests=(gzip_requests); end

  def initialize(config); end

  def max_buffer_size(); end

  def max_buffer_size=(max_buffer_size); end

  def requests_interval(); end

  def ship(snapshot); end
end

class Rack::MiniProfiler::SnapshotsTransporter
  def self.failed_http_requests_count(); end

  def self.successful_http_requests_count(); end

  def self.transport(snapshot); end

  def self.transported_snapshots_count(); end
end

class Rack::MiniProfiler::TimerStruct::Base
  def [](name); end

  def []=(name, val); end

  def attributes(); end

  def initialize(attrs=T.unsafe(nil)); end

  def to_json(*a); end
end

class Rack::MiniProfiler::TimerStruct::Client
  def initialize(env=T.unsafe(nil)); end

  def redirect_count(); end

  def timings(); end
end

class Rack::MiniProfiler::TimerStruct::Client
  def self.init_from_form_data(env, page_struct); end

  def self.init_instrumentation(); end

  def self.instrument(name, orig); end
end

class Rack::MiniProfiler::TimerStruct::Custom
  def initialize(type, duration_ms, page, parent); end

  def parent(); end

  def parent=(parent); end
end

class Rack::MiniProfiler::TimerStruct::Page
  def attributes_to_serialize(); end

  def duration_ms(); end

  def duration_ms_in_sql(); end

  def extra_json(); end

  def initialize(env); end

  def name(); end

  def root(); end
end

class Rack::MiniProfiler::TimerStruct::Page
  def self.from_hash(hash); end
end

class Rack::MiniProfiler::TimerStruct::Request
  def add_child(name); end

  def add_custom(type, elapsed_ms, page); end

  def add_sql(query, elapsed_ms, page, params=T.unsafe(nil), skip_backtrace=T.unsafe(nil), full_backtrace=T.unsafe(nil)); end

  def adjust_depth(); end

  def children(); end

  def children_duration(); end

  def children_duration=(children_duration); end

  def custom_timings(); end

  def depth(); end

  def duration_ms(); end

  def duration_ms_in_sql(); end

  def initialize(name, page, parent); end

  def move_child(child, destination); end

  def move_custom(type, custom, destination); end

  def move_sql(sql, destination); end

  def name(); end

  def parent(); end

  def parent=(parent); end

  def record_time(milliseconds=T.unsafe(nil)); end

  def sql_timings(); end

  def start(); end

  def start=(start); end

  def start_ms(); end
end

class Rack::MiniProfiler::TimerStruct::Request
  def self.createRoot(name, page); end
end

class Rack::MiniProfiler::TimerStruct::Sql
  def initialize(query, duration_ms, page, parent, params=T.unsafe(nil), skip_backtrace=T.unsafe(nil), full_backtrace=T.unsafe(nil)); end

  def parent(); end

  def parent=(parent); end

  def report_reader_duration(elapsed_ms); end

  def trim_binds(binds); end
end

class Rack::MiniProfiler
  extend ::Rack::MiniProfiler::ProfilingMethods
  def self.add_snapshot_custom_field(key, value); end

  def self.advanced_tools_message(); end

  def self.authorize_request(); end

  def self.binds_to_params(binds); end

  def self.config(); end

  def self.create_current(env=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.current(); end

  def self.current=(c); end

  def self.deauthorize_request(); end

  def self.discard_results(); end

  def self.generate_id(); end

  def self.get_snapshot_custom_fields(); end

  def self.patch_rails?(); end

  def self.redact_sql_queries?(); end

  def self.request_authorized?(); end

  def self.reset_config(); end

  def self.resources_root(); end

  def self.share_template(); end

  def self.snapshots_transporter?(); end

  def self.subscribe_sql_active_record(); end

  def self.subscribe_sql_active_record=(subscribe_sql_active_record); end
end

module Rack::MiniProfilerRails
  def self.create_engine(); end

  def self.get_key(payload); end

  def self.initialize!(app); end

  def self.serves_static_assets?(app); end

  def self.shorten_identifier(identifier); end

  def self.subscribe(event, &blk); end
end

module Rack::MiniProfilerRailsMethods
  def get_webpacker_assets_path(); end

  def render_notification_handler(name, finish, start, name_as_description: T.unsafe(nil)); end

  def should_measure?(); end

  def should_move?(child, node); end
end

class Rack::MockRequest
  def delete(uri, opts=T.unsafe(nil)); end

  def get(uri, opts=T.unsafe(nil)); end

  def head(uri, opts=T.unsafe(nil)); end

  def initialize(app); end

  def options(uri, opts=T.unsafe(nil)); end

  def patch(uri, opts=T.unsafe(nil)); end

  def post(uri, opts=T.unsafe(nil)); end

  def put(uri, opts=T.unsafe(nil)); end

  def request(method=T.unsafe(nil), uri=T.unsafe(nil), opts=T.unsafe(nil)); end
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class Rack::MockRequest::FatalWarner
  def flush(); end

  def puts(warning); end

  def string(); end

  def write(warning); end
end

class Rack::MockRequest::FatalWarner
end

class Rack::MockRequest::FatalWarning
end

class Rack::MockRequest::FatalWarning
end

class Rack::MockRequest
  def self.env_for(uri=T.unsafe(nil), opts=T.unsafe(nil)); end

  def self.parse_uri_rfc2396(uri); end
end

class Rack::MockResponse
  def =~(other); end

  def cookie(name); end

  def cookies(); end

  def errors(); end

  def errors=(errors); end

  def initialize(status, headers, body, errors=T.unsafe(nil)); end

  def match(other); end

  def original_headers(); end
end

class Rack::MockResponse
  def self.[](*arg, **arg1); end
end

module Rack::Multipart
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_CHAR = ::T.let(nil, ::T.untyped)
  BROKEN_QUOTED = ::T.let(nil, ::T.untyped)
  BROKEN_UNQUOTED = ::T.let(nil, ::T.untyped)
  CONDISP = ::T.let(nil, ::T.untyped)
  DISPPARM = ::T.let(nil, ::T.untyped)
  EOL = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_PARAMETER = ::T.let(nil, ::T.untyped)
  MULTIPART = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_DISPOSITION = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_ID = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER_NAME = ::T.let(nil, ::T.untyped)
  RFC2183 = ::T.let(nil, ::T.untyped)
  SECTION = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
  VALUE = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Generator
  def dump(); end

  def initialize(params, first=T.unsafe(nil)); end
end

class Rack::Multipart::Generator
end

class Rack::Multipart::MultipartPartLimitError
end

class Rack::Multipart::MultipartPartLimitError
end

class Rack::Multipart::Parser
  def initialize(boundary, tempfile, bufsize, query_parser); end

  def on_read(content); end

  def result(); end

  def state(); end
  BOUNDARY_REGEX = ::T.let(nil, ::T.untyped)
  BUFSIZE = ::T.let(nil, ::T.untyped)
  CHARSET = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  TEXT_PLAIN = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Parser::BoundedIO
  def initialize(io, content_length); end

  def read(size, outbuf=T.unsafe(nil)); end

  def rewind(); end
end

class Rack::Multipart::Parser::BoundedIO
end

class Rack::Multipart::Parser::Collector
  include ::Enumerable
  def each(&blk); end

  def initialize(tempfile); end

  def on_mime_body(mime_index, content); end

  def on_mime_finish(mime_index); end

  def on_mime_head(mime_index, head, filename, content_type, name); end
end

class Rack::Multipart::Parser::Collector::BufferPart
  def close(); end

  def file?(); end
end

class Rack::Multipart::Parser::Collector::BufferPart
end

class Rack::Multipart::Parser::Collector::MimePart
  def get_data(); end
end

class Rack::Multipart::Parser::Collector::MimePart
end

class Rack::Multipart::Parser::Collector::TempfilePart
  def close(); end

  def file?(); end
end

class Rack::Multipart::Parser::Collector::TempfilePart
end

class Rack::Multipart::Parser::Collector
end

class Rack::Multipart::Parser::MultipartInfo
  def params(); end

  def params=(_); end

  def tmp_files(); end

  def tmp_files=(_); end
end

class Rack::Multipart::Parser::MultipartInfo
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Rack::Multipart::Parser
  def self.parse(io, content_length, content_type, tmpfile, bufsize, qp); end

  def self.parse_boundary(content_type); end
end

class Rack::Multipart::UploadedFile
  def content_type(); end

  def content_type=(content_type); end

  def initialize(filepath=T.unsafe(nil), ct=T.unsafe(nil), bin=T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  def local_path(); end

  def method_missing(method_name, *args, &block); end

  def original_filename(); end

  def path(); end

  def respond_to?(*args); end
end

class Rack::Multipart::UploadedFile
end

module Rack::Multipart
  def self.build_multipart(params, first=T.unsafe(nil)); end

  def self.extract_multipart(req, params=T.unsafe(nil)); end

  def self.parse_multipart(env, params=T.unsafe(nil)); end
end

class Rack::NullLogger
  def <<(msg); end

  def add(severity, message=T.unsafe(nil), progname=T.unsafe(nil), &block); end

  def call(env); end

  def close(); end

  def datetime_format(); end

  def datetime_format=(datetime_format); end

  def debug(progname=T.unsafe(nil), &block); end

  def debug?(); end

  def error(progname=T.unsafe(nil), &block); end

  def error?(); end

  def fatal(progname=T.unsafe(nil), &block); end

  def fatal?(); end

  def formatter(); end

  def formatter=(formatter); end

  def info(progname=T.unsafe(nil), &block); end

  def info?(); end

  def initialize(app); end

  def level(); end

  def level=(level); end

  def progname(); end

  def progname=(progname); end

  def sev_threshold(); end

  def sev_threshold=(sev_threshold); end

  def unknown(progname=T.unsafe(nil), &block); end

  def warn(progname=T.unsafe(nil), &block); end

  def warn?(); end
end

class Rack::NullLogger
end

module Rack::Protection
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Protection::AuthenticityToken
  def mask_authenticity_token(session, path: T.unsafe(nil), method: T.unsafe(nil)); end
  TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
end

class Rack::Protection::AuthenticityToken
  def self.random_token(); end

  def self.token(session, path: T.unsafe(nil), method: T.unsafe(nil)); end
end

class Rack::Protection::Base
  def accepts?(env); end

  def app(); end

  def call(env); end

  def default_options(); end

  def default_reaction(env); end

  def deny(env); end

  def drop_session(env); end

  def encrypt(value); end

  def html?(headers); end

  def initialize(app, options=T.unsafe(nil)); end

  def instrument(env); end

  def options(); end

  def origin(env); end

  def random_string(secure=T.unsafe(nil)); end

  def react(env); end

  def referrer(env); end

  def report(env); end

  def safe?(env); end

  def secure_compare(a, b); end

  def session(env); end

  def session?(env); end

  def warn(env, message); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Protection::Base
  def self.default_options(options); end

  def self.default_reaction(reaction); end
end

class Rack::Protection::ContentSecurityPolicy
  def csp_policy(); end
  DIRECTIVES = ::T.let(nil, ::T.untyped)
  NO_ARG_DIRECTIVES = ::T.let(nil, ::T.untyped)
end

class Rack::Protection::ContentSecurityPolicy
end

class Rack::Protection::CookieTossing
  def bad_cookies(); end

  def cookie_paths(path); end

  def empty_cookie(host, path); end

  def redirect(env); end

  def remove_bad_cookies(request, response); end

  def session_key(); end
end

class Rack::Protection::CookieTossing
end

class Rack::Protection::EscapedParams
  def escape(object); end

  def escape_hash(hash); end

  def escape_string(str); end

  def handle(hash); end

  def initialize(*arg); end
end

class Rack::Protection::EscapedParams
  extend ::Rack::Utils
end

class Rack::Protection::FormToken
end

class Rack::Protection::FormToken
end

class Rack::Protection::FrameOptions
  def frame_options(); end
end

class Rack::Protection::HttpOrigin
  def base_url(env); end
  DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
end

class Rack::Protection::HttpOrigin
end

class Rack::Protection::IPSpoofing
end

class Rack::Protection::IPSpoofing
end

class Rack::Protection::JsonCsrf
  def close_body(body); end

  def has_vector?(request, headers); end

  def react_and_close(env, body); end
end

class Rack::Protection::JsonCsrf
end

class Rack::Protection::PathTraversal
  def cleanup(path); end
end

class Rack::Protection::PathTraversal
end

class Rack::Protection::ReferrerPolicy
end

class Rack::Protection::ReferrerPolicy
end

class Rack::Protection::RemoteReferrer
end

class Rack::Protection::RemoteReferrer
end

class Rack::Protection::RemoteToken
end

class Rack::Protection::RemoteToken
end

class Rack::Protection::SessionHijacking
end

class Rack::Protection::SessionHijacking
end

class Rack::Protection::StrictTransport
  def strict_transport(); end
end

class Rack::Protection::StrictTransport
end

class Rack::Protection::XSSHeader
end

class Rack::Protection::XSSHeader
end

module Rack::Protection
  def self.new(app, options=T.unsafe(nil)); end
end

class Rack::Proxy
  def call(env); end

  def initialize(app=T.unsafe(nil), opts=T.unsafe(nil)); end

  def perform_request(env); end

  def rewrite_env(env); end

  def rewrite_response(triplet); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Proxy
  def self.extract_http_request_headers(env); end

  def self.normalize_headers(headers); end

  def self.reconstruct_header_name(name); end

  def self.titleize(str); end
end

class Rack::QueryParser
  def initialize(params_class, key_space_limit, param_depth_limit); end

  def key_space_limit(); end

  def make_params(); end

  def new_depth_limit(param_depth_limit); end

  def new_space_limit(key_space_limit); end

  def normalize_params(params, name, v, depth); end

  def param_depth_limit(); end

  def parse_nested_query(qs, d=T.unsafe(nil)); end

  def parse_query(qs, d=T.unsafe(nil), &unescaper); end
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Rack::QueryParser::Params
  def [](key); end

  def []=(key, value); end

  def initialize(limit); end

  def key?(key); end

  def to_h(); end

  def to_params_hash(); end
end

class Rack::QueryParser
  def self.make_default(key_space_limit, param_depth_limit); end
end

class Rack::Recursive
  def _call(env); end

  def call(env); end

  def include(env, path); end

  def initialize(app); end
end

class Rack::Recursive
end

class Rack::Reloader
  def call(env); end

  def initialize(app, cooldown=T.unsafe(nil), backend=T.unsafe(nil)); end

  def reload!(stderr=T.unsafe(nil)); end

  def safe_load(file, mtime, stderr=T.unsafe(nil)); end
end

module Rack::Reloader::Stat
  def figure_path(file, paths); end

  def rotation(); end

  def safe_stat(file); end
end

module Rack::Reloader::Stat
end

class Rack::Reloader
end

class Rack::Request
  include ::Rack::Request::Env
  include ::Rack::Request::Helpers
  ALLOWED_SCHEMES = ::T.let(nil, ::T.untyped)
  SCHEME_WHITELIST = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Env
  def add_header(key, v); end

  def delete_header(name); end

  def each_header(&block); end

  def env(); end

  def fetch_header(name, &block); end

  def get_header(name); end

  def has_header?(name); end

  def initialize(env); end

  def set_header(name, v); end
end

module Rack::Request::Env
end

module Rack::Request::Helpers
  def GET(); end

  def POST(); end

  def [](key); end

  def []=(key, value); end

  def accept_encoding(); end

  def accept_language(); end

  def authority(); end

  def base_url(); end

  def body(); end

  def content_charset(); end

  def content_length(); end

  def content_type(); end

  def cookies(); end

  def delete?(); end

  def delete_param(k); end

  def form_data?(); end

  def forwarded_authority(); end

  def forwarded_for(); end

  def forwarded_port(); end

  def fullpath(); end

  def get?(); end

  def head?(); end

  def host(); end

  def host_authority(); end

  def host_with_port(authority=T.unsafe(nil)); end

  def hostname(); end

  def ip(); end

  def link?(); end

  def logger(); end

  def media_type(); end

  def media_type_params(); end

  def multithread?(); end

  def options?(); end

  def params(); end

  def parseable_data?(); end

  def patch?(); end

  def path(); end

  def path_info(); end

  def path_info=(s); end

  def port(); end

  def post?(); end

  def put?(); end

  def query_string(); end

  def referer(); end

  def referrer(); end

  def request_method(); end

  def scheme(); end

  def script_name(); end

  def script_name=(s); end

  def server_authority(); end

  def server_name(); end

  def server_port(); end

  def session(); end

  def session_options(); end

  def ssl?(); end

  def trace?(); end

  def trusted_proxy?(ip); end

  def unlink?(); end

  def update_param(k, v); end

  def url(); end

  def user_agent(); end

  def values_at(*keys); end

  def xhr?(); end
  DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
  FORM_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_HOST = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PORT = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  PARSEABLE_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Helpers
end

class Rack::Request
  def self.ip_filter(); end

  def self.ip_filter=(ip_filter); end
end

class Rack::Response
  include ::Rack::Response::Helpers
  def [](key); end

  def []=(key, v); end

  def body(); end

  def body=(body); end

  def chunked?(); end

  def close(); end

  def delete_header(key); end

  def each(&callback); end

  def empty?(); end

  def finish(&block); end

  def get_header(key); end

  def has_header?(key); end

  def header(); end

  def headers(); end

  def initialize(body=T.unsafe(nil), status=T.unsafe(nil), headers=T.unsafe(nil)); end

  def length(); end

  def length=(length); end

  def redirect(target, status=T.unsafe(nil)); end

  def set_header(key, v); end

  def status(); end

  def status=(status); end

  def to_a(&block); end

  def write(chunk); end
  CHUNKED = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

module Rack::Response::Helpers
  def accepted?(); end

  def add_header(key, v); end

  def append(chunk); end

  def bad_request?(); end

  def buffered_body!(); end

  def cache!(duration=T.unsafe(nil), directive: T.unsafe(nil)); end

  def cache_control(); end

  def cache_control=(v); end

  def client_error?(); end

  def content_length(); end

  def content_type(); end

  def content_type=(content_type); end

  def created?(); end

  def delete_cookie(key, value=T.unsafe(nil)); end

  def do_not_cache!(); end

  def etag(); end

  def etag=(v); end

  def forbidden?(); end

  def include?(header); end

  def informational?(); end

  def invalid?(); end

  def location(); end

  def location=(location); end

  def media_type(); end

  def media_type_params(); end

  def method_not_allowed?(); end

  def moved_permanently?(); end

  def no_content?(); end

  def not_found?(); end

  def ok?(); end

  def precondition_failed?(); end

  def redirect?(); end

  def redirection?(); end

  def server_error?(); end

  def set_cookie(key, value); end

  def set_cookie_header(); end

  def set_cookie_header=(v); end

  def successful?(); end

  def unauthorized?(); end

  def unprocessable?(); end
end

module Rack::Response::Helpers
end

class Rack::Response::Raw
  include ::Rack::Response::Helpers
  def delete_header(key); end

  def get_header(key); end

  def has_header?(key); end

  def headers(); end

  def initialize(status, headers); end

  def set_header(key, v); end

  def status(); end

  def status=(status); end
end

class Rack::Response::Raw
end

class Rack::Response
  def self.[](status, headers, body); end
end

class Rack::RewindableInput
  def close(); end

  def each(&block); end

  def gets(); end

  def initialize(io); end

  def read(*args); end

  def rewind(); end
end

class Rack::RewindableInput
end

class Rack::Runtime
  def call(env); end

  def initialize(app, name=T.unsafe(nil)); end
  FORMAT_STRING = ::T.let(nil, ::T.untyped)
  HEADER_NAME = ::T.let(nil, ::T.untyped)
end

class Rack::Runtime
end

class Rack::Sendfile
  def call(env); end

  def initialize(app, variation=T.unsafe(nil), mappings=T.unsafe(nil)); end
end

class Rack::Sendfile
end

class Rack::Server
  def app(); end

  def default_options(); end

  def initialize(options=T.unsafe(nil)); end

  def middleware(); end

  def options(); end

  def options=(options); end

  def server(); end

  def start(&block); end
end

class Rack::Server::Options
  def handler_opts(options); end

  def parse!(args); end
end

class Rack::Server::Options
end

class Rack::Server
  def self.default_middleware_by_environment(); end

  def self.logging_middleware(); end

  def self.middleware(); end

  def self.start(options=T.unsafe(nil)); end
end

module Rack::Session
end

module Rack::Session::Abstract
end

class Rack::Session::Abstract::ID
  def find_session(req, sid); end
end

class Rack::Session::Abstract::ID
  def self.inherited(klass); end
end

class Rack::Session::Abstract::Persisted
  def call(env); end

  def commit_session(req, res); end

  def context(env, app=T.unsafe(nil)); end

  def default_options(); end

  def initialize(app, options=T.unsafe(nil)); end

  def key(); end

  def sid_secure(); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::Persisted
end

class Rack::Session::Abstract::PersistedSecure
  def extract_session_id(*arg); end

  def generate_sid(*arg); end
end

class Rack::Session::Abstract::PersistedSecure::SecureSessionHash
end

class Rack::Session::Abstract::PersistedSecure::SecureSessionHash
end

class Rack::Session::Abstract::PersistedSecure
end

class Rack::Session::Abstract::SessionHash
  include ::Enumerable
  def [](key); end

  def []=(key, value); end

  def clear(); end

  def delete(key); end

  def destroy(); end

  def dig(key, *keys); end

  def each(&block); end

  def empty?(); end

  def exists?(); end

  def fetch(key, default=T.unsafe(nil), &block); end

  def has_key?(key); end

  def id(); end

  def id=(id); end

  def include?(key); end

  def initialize(store, req); end

  def key?(key); end

  def keys(); end

  def loaded?(); end

  def merge!(hash); end

  def options(); end

  def replace(hash); end

  def store(key, value); end

  def to_hash(); end

  def update(hash); end

  def values(); end
  Unspecified = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::SessionHash
  def self.find(req); end

  def self.set(req, session); end

  def self.set_options(req, options); end
end

module Rack::Session::Abstract
end

class Rack::Session::Cookie
  def coder(); end
end

class Rack::Session::Cookie::Base64
  def decode(str); end

  def encode(str); end
end

class Rack::Session::Cookie::Base64::JSON
  def encode(obj); end
end

class Rack::Session::Cookie::Base64::JSON
end

class Rack::Session::Cookie::Base64::Marshal
end

class Rack::Session::Cookie::Base64::Marshal
end

class Rack::Session::Cookie::Base64::ZipJSON
  def encode(obj); end
end

class Rack::Session::Cookie::Base64::ZipJSON
end

class Rack::Session::Cookie::Base64
end

class Rack::Session::Cookie::Identity
  def decode(str); end

  def encode(str); end
end

class Rack::Session::Cookie::Identity
end

class Rack::Session::Cookie::SessionId
  def cookie_value(); end

  def initialize(session_id, cookie_value); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Cookie::SessionId
end

class Rack::Session::Cookie
end

class Rack::Session::Pool
  def delete_session(req, session_id, options); end

  def find_session(req, sid); end

  def generate_sid(); end

  def mutex(); end

  def pool(); end

  def with_lock(req); end

  def write_session(req, session_id, new_session, options); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Pool
end

class Rack::Session::SessionId
  def cookie_value(); end

  def empty?(); end

  def initialize(public_id); end

  def private_id(); end

  def public_id(); end
  ID_VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Session::SessionId
end

module Rack::Session
end

class Rack::ShowExceptions
  def call(env); end

  def dump_exception(exception); end

  def h(obj); end

  def initialize(app); end

  def prefers_plaintext?(env); end

  def pretty(env, exception); end

  def template(); end
  CONTEXT = ::T.let(nil, ::T.untyped)
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowExceptions
end

class Rack::ShowStatus
  def call(env); end

  def h(obj); end

  def initialize(app); end
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowStatus
end

class Rack::Static
  def add_index_root?(path); end

  def applicable_rules(path); end

  def call(env); end

  def can_serve(path); end

  def initialize(app, options=T.unsafe(nil)); end

  def overwrite_file_path(path); end

  def route_file(path); end
end

class Rack::Static
end

class Rack::TempfileReaper
  def call(env); end

  def initialize(app); end
end

class Rack::TempfileReaper
end

module Rack::Test
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Test::Cookie
  include ::Rack::Utils
end

class Rack::Test::CookieJar
  DELIMITER = ::T.let(nil, ::T.untyped)
end

module Rack::Test::Methods
  METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::Test::Session
  include ::Rack::Utils
end

module Rack::Test::Utils
  include ::Rack::Utils
end

module Rack::Test::Utils
  extend ::Rack::Utils
end

class Rack::URLMap
  def call(env); end

  def initialize(map=T.unsafe(nil)); end

  def remap(map); end
end

class Rack::URLMap
end

module Rack::Utils
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML_PATTERN = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  NULL_BYTE = ::T.let(nil, ::T.untyped)
  PATH_SEPS = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
  SYMBOL_TO_STATUS_CODE = ::T.let(nil, ::T.untyped)
end

class Rack::Utils::Context
  def app(); end

  def call(env); end

  def context(env, app=T.unsafe(nil)); end

  def for(); end

  def initialize(app_f, app_r); end

  def recontext(app); end
end

class Rack::Utils::Context
end

class Rack::Utils::HeaderHash
  def [](k); end

  def []=(k, v); end

  def delete(k); end

  def has_key?(k); end

  def include?(k); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(k); end

  def member?(k); end

  def merge(other); end

  def merge!(other); end

  def names(); end

  def replace(other); end
end

class Rack::Utils::HeaderHash
  def self.[](headers); end
end

Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

module Rack::Utils
  def self.add_cookie_to_header(header, key, value); end

  def self.add_remove_cookie_to_header(header, key, value=T.unsafe(nil)); end

  def self.best_q_match(q_value_header, available_mimes); end

  def self.build_nested_query(value, prefix=T.unsafe(nil)); end

  def self.build_query(params); end

  def self.byte_ranges(env, size); end

  def self.clean_path_info(path_info); end

  def self.clock_time(); end

  def self.default_query_parser(); end

  def self.default_query_parser=(default_query_parser); end

  def self.delete_cookie_header!(header, key, value=T.unsafe(nil)); end

  def self.escape(s); end

  def self.escape_html(string); end

  def self.escape_path(s); end

  def self.get_byte_ranges(http_range, size); end

  def self.key_space_limit(); end

  def self.key_space_limit=(v); end

  def self.make_delete_cookie_header(header, key, value); end

  def self.multipart_part_limit(); end

  def self.multipart_part_limit=(multipart_part_limit); end

  def self.param_depth_limit(); end

  def self.param_depth_limit=(v); end

  def self.parse_cookies(env); end

  def self.parse_cookies_header(header); end

  def self.parse_nested_query(qs, d=T.unsafe(nil)); end

  def self.parse_query(qs, d=T.unsafe(nil), &unescaper); end

  def self.q_values(q_value_header); end

  def self.rfc2109(time); end

  def self.rfc2822(time); end

  def self.secure_compare(a, b); end

  def self.select_best_encoding(available_encodings, accept_encoding); end

  def self.set_cookie_header!(header, key, value); end

  def self.status_code(status); end

  def self.unescape(s, encoding=T.unsafe(nil)); end

  def self.unescape_path(s); end

  def self.valid_path?(path); end
end

module Rack
  def self.release(); end

  def self.version(); end
end

class Ractor::ClosedError
end

class Ractor::ClosedError
end

class Ractor::Error
end

class Ractor::Error
end

class Ractor::IsolationError
end

class Ractor::IsolationError
end

class Ractor::MovedError
end

class Ractor::MovedError
end

class Ractor::MovedObject
  def !(*arg); end

  def !=(*arg); end

  def ==(*arg); end

  def __id__(*arg); end

  def equal?(*arg); end
end

class Ractor::MovedObject
end

class Ractor::RemoteError
  def ractor(); end
end

class Ractor::RemoteError
end

class Ractor::UnsafeError
end

class Ractor::UnsafeError
end

class Ractor
  def self.new(*args, name: T.unsafe(nil), &block); end
end

class Rails::ApplicationController
end

module Rails::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::InertiaRails::Helper
  include ::ViteRails::TagHelpers
  include ::ApplicationHelper
  include ::DeviseHelper
end

module Rails::ApplicationController::HelperMethods
end

class Rails::ApplicationController
end

class Rails::BacktraceCleaner
  APP_DIRS_PATTERN = ::T.let(nil, ::T.untyped)
  RENDER_TEMPLATE_PATTERN = ::T.let(nil, ::T.untyped)
end

module Rails::Dom::Testing::Assertions::DomAssertions
  def assert_dom_equal(expected, actual, message=T.unsafe(nil)); end

  def assert_dom_not_equal(expected, actual, message=T.unsafe(nil)); end

  def compare_doms(expected, actual); end

  def equal_attribute?(attr, other_attr); end

  def equal_attribute_nodes?(nodes, other_nodes); end

  def equal_children?(child, other_child); end
end

module Rails::Dom::Testing::Assertions::SelectorAssertions
  def assert_select(*args, &block); end

  def assert_select_email(&block); end

  def assert_select_encoded(element=T.unsafe(nil), &block); end

  def css_select(*args); end
end

module Rails::Html
  XPATHS_TO_REMOVE = ::T.let(nil, ::T.untyped)
end

class Rails::Html::PermitScrubber
  def allowed_node?(node); end

  def attributes(); end

  def attributes=(attributes); end

  def initialize(); end

  def keep_node?(node); end

  def scrub_attribute(node, attr_node); end

  def scrub_attribute?(name); end

  def scrub_attributes(node); end

  def scrub_css_attribute(node); end

  def scrub_node(node); end

  def skip_node?(node); end

  def tags(); end

  def tags=(tags); end

  def validate!(var, name); end
end

class Rails::Html::SafeListSanitizer
  def sanitize_css(style_string); end
end

class Rails::Html::SafeListSanitizer
  def self.allowed_attributes(); end

  def self.allowed_attributes=(allowed_attributes); end

  def self.allowed_tags(); end

  def self.allowed_tags=(allowed_tags); end
end

class Rails::Html::Sanitizer
  def sanitize(html, options=T.unsafe(nil)); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rails::Html::Sanitizer
  def self.full_sanitizer(); end

  def self.link_sanitizer(); end

  def self.safe_list_sanitizer(); end

  def self.white_list_sanitizer(); end
end

class Rails::Html::TextOnlyScrubber
  def initialize(); end
end

Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

module Rails::Info
  def properties(); end

  def properties=(val); end
end

module Rails::Info
  def self.properties(); end

  def self.properties=(val); end

  def self.property(name, value=T.unsafe(nil)); end

  def self.to_html(); end
end

class Rails::InfoController
  def index(); end

  def properties(); end

  def routes(); end
end

class Rails::InfoController
end

class Rails::MailersController
  def index(); end

  def preview(); end
end

module Rails::MailersController::HelperMethods
  include ::Rails::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::InertiaRails::Helper
  include ::ViteRails::TagHelpers
  include ::ApplicationHelper
  include ::DeviseHelper
  def locale_query(*args, **arg, &block); end

  def part_query(*args, **arg, &block); end
end

module Rails::MailersController::HelperMethods
end

class Rails::MailersController
end

class Rails::Rack::Logger
  def call(env); end

  def initialize(app, taggers=T.unsafe(nil)); end
end

class Rails::WelcomeController
  def index(); end
end

class Rails::WelcomeController
end

module Rake
  EARLY = ::T.let(nil, ::T.untyped)
  EMPTY_TASK_ARGS = ::T.let(nil, ::T.untyped)
  LATE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rake::Application
  include ::Sentry::Rake::Application
  DEFAULT_RAKEFILES = ::T.let(nil, ::T.untyped)
end

module Rake::Backtrace
  SUPPRESSED_PATHS = ::T.let(nil, ::T.untyped)
  SUPPRESSED_PATHS_RE = ::T.let(nil, ::T.untyped)
  SUPPRESS_PATTERN = ::T.let(nil, ::T.untyped)
  SYS_KEYS = ::T.let(nil, ::T.untyped)
  SYS_PATHS = ::T.let(nil, ::T.untyped)
end

module Rake::DSL
  include ::FileUtils::StreamUtils_
end

class Rake::FileList
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PATTERNS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PROCS = ::T.let(nil, ::T.untyped)
  DELEGATING_METHODS = ::T.let(nil, ::T.untyped)
  GLOB_PATTERN = ::T.let(nil, ::T.untyped)
  MUST_DEFINE = ::T.let(nil, ::T.untyped)
  MUST_NOT_DEFINE = ::T.let(nil, ::T.untyped)
  SPECIAL_RETURN = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  include ::FileUtils::StreamUtils_
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  extend ::FileUtils::StreamUtils_
end

class Rake::InvocationChain
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::LinkedList
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::Promise
  NOT_SET = ::T.let(nil, ::T.untyped)
end

Rake::RDocTask = RDoc::Task

class Rake::Scope
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::Task
  include ::Sentry::Rake::Task
end

class Rake::TaskLib
  include ::FileUtils::StreamUtils_
end

module Rake::Version
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  NUMBERS = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
end

module Rake
  extend ::FileUtils::StreamUtils_
end

RakeFileUtils = Rake::FileUtilsExt

class Random::Base
  include ::Random::Formatter
  def bytes(arg); end

  def initialize(*arg); end

  def seed(); end
end

class Random::Base
  extend ::Random::Formatter
end

class Random
  def self.bytes(arg); end

  def self.seed(); end
end

class Range
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::DeprecatedRangeWithFormat
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::EachTimeWithZone
  def %(arg); end

  def entries(); end

  def to_a(); end
end

module RbConfig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.fire_update!(key, val, mkconf=T.unsafe(nil), conf=T.unsafe(nil)); end

  def self.ruby(); end
end

class Redis
  include ::ActiveSupport::Cache::ConnectionPoolLike
  Boolify = ::T.let(nil, ::T.untyped)
  BoolifySet = ::T.let(nil, ::T.untyped)
  Floatify = ::T.let(nil, ::T.untyped)
  FloatifyPairs = ::T.let(nil, ::T.untyped)
  Hashify = ::T.let(nil, ::T.untyped)
  HashifyClusterNodeInfo = ::T.let(nil, ::T.untyped)
  HashifyClusterNodes = ::T.let(nil, ::T.untyped)
  HashifyClusterSlaves = ::T.let(nil, ::T.untyped)
  HashifyClusterSlots = ::T.let(nil, ::T.untyped)
  HashifyInfo = ::T.let(nil, ::T.untyped)
  HashifyStreamAutoclaim = ::T.let(nil, ::T.untyped)
  HashifyStreamAutoclaimJustId = ::T.let(nil, ::T.untyped)
  HashifyStreamEntries = ::T.let(nil, ::T.untyped)
  HashifyStreamPendingDetails = ::T.let(nil, ::T.untyped)
  HashifyStreamPendings = ::T.let(nil, ::T.untyped)
  HashifyStreams = ::T.let(nil, ::T.untyped)
  Noop = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Redis::BaseObject
  def <(what); end

  def <=(what); end

  def ==(what); end

  def >(what); end

  def >=(what); end

  def allow_expiration(&block); end

  def as_json(*arg); end

  def initialize(key, *args); end

  def key(); end

  def options(); end

  def redis(); end

  def set_expiration(); end

  def to_hash(); end

  def to_json(*args); end
end

class Redis::Client
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Redis::Cluster::KeySlotConverter
  HASH_SLOTS = ::T.let(nil, ::T.untyped)
  XMODEM_CRC16_LOOKUP = ::T.let(nil, ::T.untyped)
end

class Redis::Cluster::Node
  ROLE_SLAVE = ::T.let(nil, ::T.untyped)
end

module Redis::Cluster::NodeKey
  DELIMITER = ::T.let(nil, ::T.untyped)
end

class Redis::Cluster::Option
  DEFAULT_SCHEME = ::T.let(nil, ::T.untyped)
  SECURE_SCHEME = ::T.let(nil, ::T.untyped)
  VALID_SCHEMES = ::T.let(nil, ::T.untyped)
end

class Redis::Cluster::Slot
  ROLE_SLAVE = ::T.let(nil, ::T.untyped)
end

module Redis::Connection::CommandHelper
  COMMAND_DELIMITER = ::T.let(nil, ::T.untyped)
end

class Redis::Connection::Ruby
  ASTERISK = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  DOLLAR = ::T.let(nil, ::T.untyped)
  MINUS = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
end

module Redis::Connection::SocketMixin
  CRLF = ::T.let(nil, ::T.untyped)
end

class Redis::Counter
  def +(what); end

  def -(what); end

  def decr(by=T.unsafe(nil), &block); end

  def decrby(by=T.unsafe(nil), &block); end

  def decrbyfloat(by=T.unsafe(nil), &block); end

  def decrement(by=T.unsafe(nil), &block); end

  def get(); end

  def getset(to=T.unsafe(nil)); end

  def incr(by=T.unsafe(nil), &block); end

  def incrby(by=T.unsafe(nil), &block); end

  def incrbyfloat(by=T.unsafe(nil), &block); end

  def increment(by=T.unsafe(nil), &block); end

  def reset(to=T.unsafe(nil)); end

  def set(val); end

  def to_f(); end

  def to_i(); end

  def value(); end

  def value=(val); end
end

class Redis::Distributed
  include ::ActiveSupport::Cache::ConnectionPoolLike
  def [](key); end

  def []=(key, value); end

  def _bpop(cmd, args); end

  def _eval(cmd, args); end

  def add_node(options); end

  def append(key, value); end

  def bgsave(); end

  def bitcount(key, start=T.unsafe(nil), stop=T.unsafe(nil)); end

  def bitop(operation, destkey, *keys); end

  def bitpos(key, bit, start=T.unsafe(nil), stop=T.unsafe(nil)); end

  def blmove(source, destination, where_source, where_destination, timeout: T.unsafe(nil)); end

  def blpop(*args); end

  def brpop(*args); end

  def brpoplpush(source, destination, deprecated_timeout=T.unsafe(nil), **options); end

  def dbsize(); end

  def decr(key); end

  def decrby(key, decrement); end

  def del(*args); end

  def discard(); end

  def dump(key); end

  def echo(value); end

  def ensure_same_node(command, keys); end

  def eval(*args); end

  def evalsha(*args); end

  def exec(); end

  def exists(*args); end

  def exists?(*args); end

  def expire(key, seconds); end

  def expireat(key, unix_time); end

  def flushall(); end

  def flushdb(); end

  def get(key); end

  def getbit(key, offset); end

  def getdel(key); end

  def getex(key, **options); end

  def getrange(key, start, stop); end

  def getset(key, value); end

  def hdel(key, *fields); end

  def hexists(key, field); end

  def hget(key, field); end

  def hgetall(key); end

  def hincrby(key, field, increment); end

  def hincrbyfloat(key, field, increment); end

  def hkeys(key); end

  def hlen(key); end

  def hmget(key, *fields); end

  def hmset(key, *attrs); end

  def hset(key, *attrs); end

  def hsetnx(key, field, value); end

  def hvals(key); end

  def incr(key); end

  def incrby(key, increment); end

  def incrbyfloat(key, increment); end

  def info(cmd=T.unsafe(nil)); end

  def initialize(node_configs, options=T.unsafe(nil)); end

  def key_tag(key); end

  def keys(glob=T.unsafe(nil)); end

  def lastsave(); end

  def lindex(key, index); end

  def linsert(key, where, pivot, value); end

  def llen(key); end

  def lmove(source, destination, where_source, where_destination); end

  def lpop(key, count=T.unsafe(nil)); end

  def lpush(key, value); end

  def lpushx(key, value); end

  def lrange(key, start, stop); end

  def lrem(key, count, value); end

  def lset(key, index, value); end

  def ltrim(key, start, stop); end

  def mapped_hmget(key, *fields); end

  def mapped_hmset(key, hash); end

  def mapped_mget(*keys); end

  def mapped_mset(_hash); end

  def mapped_msetnx(_hash); end

  def mget(*keys); end

  def migrate(_key, _options); end

  def monitor(); end

  def move(key, db); end

  def mset(*_args); end

  def msetnx(*_args); end

  def multi(&block); end

  def node_for(key); end

  def node_index_for(key); end

  def nodes(); end

  def on_each_node(command, *args); end

  def persist(key); end

  def pexpire(key, milliseconds); end

  def pexpireat(key, ms_unix_time); end

  def pfadd(key, member); end

  def pfcount(*keys); end

  def pfmerge(dest_key, *source_key); end

  def ping(); end

  def pipelined(); end

  def psetex(key, ttl, value); end

  def psubscribe(*channels, &block); end

  def pttl(key); end

  def publish(channel, message); end

  def punsubscribe(*channels); end

  def quit(); end

  def randomkey(); end

  def rename(old_name, new_name); end

  def renamenx(old_name, new_name); end

  def restore(key, ttl, serialized_value, **options); end

  def ring(); end

  def rpop(key, count=T.unsafe(nil)); end

  def rpoplpush(source, destination); end

  def rpush(key, value); end

  def rpushx(key, value); end

  def sadd(key, member); end

  def save(); end

  def scard(key); end

  def script(subcommand, *args); end

  def sdiff(*keys); end

  def sdiffstore(destination, *keys); end

  def select(db); end

  def set(key, value, **options); end

  def setbit(key, offset, value); end

  def setex(key, ttl, value); end

  def setnx(key, value); end

  def setrange(key, offset, value); end

  def sinter(*keys); end

  def sinterstore(destination, *keys); end

  def sismember(key, member); end

  def smembers(key); end

  def smismember(key, *members); end

  def smove(source, destination, member); end

  def sort(key, **options); end

  def spop(key, count=T.unsafe(nil)); end

  def srandmember(key, count=T.unsafe(nil)); end

  def srem(key, member); end

  def sscan(key, cursor, **options); end

  def sscan_each(key, **options, &block); end

  def strlen(key); end

  def subscribe(channel, *channels, &block); end

  def subscribed?(); end

  def sunion(*keys); end

  def sunionstore(destination, *keys); end

  def time(); end

  def ttl(key); end

  def type(key); end

  def unlink(*args); end

  def unsubscribe(*channels); end

  def unwatch(); end

  def watch(*keys, &block); end

  def zadd(key, *args, **arg); end

  def zcard(key); end

  def zcount(key, min, max); end

  def zincrby(key, increment, member); end

  def zinter(*keys, **options); end

  def zinterstore(destination, keys, **options); end

  def zmscore(key, *members); end

  def zrandmember(key, count=T.unsafe(nil), **options); end

  def zrange(key, start, stop, **options); end

  def zrangebyscore(key, min, max, **options); end

  def zrank(key, member); end

  def zrem(key, member); end

  def zremrangebyrank(key, start, stop); end

  def zremrangebyscore(key, min, max); end

  def zrevrange(key, start, stop, **options); end

  def zrevrangebyscore(key, max, min, **options); end

  def zrevrank(key, member); end

  def zscore(key, member); end

  def zunionstore(destination, keys, **options); end
end

class Redis::Distributed::CannotDistribute
  def initialize(command); end
end

class Redis::Distributed::CannotDistribute
end

class Redis::Distributed
end

class Redis::EnumerableObject
  def as_json(*arg); end

  def each(&block); end

  def sort(options=T.unsafe(nil)); end
end

class Redis::Future
  FutureNotReady = ::T.let(nil, ::T.untyped)
end

class Redis::HashKey
  def [](field); end

  def []=(field, value); end

  def all(); end

  def bulk_get(*fields); end

  def bulk_set(*args); end

  def bulk_values(*fields); end

  def clone(); end

  def count(); end

  def decr(field, by=T.unsafe(nil)); end

  def decrby(field, by=T.unsafe(nil)); end

  def decrbyfloat(field, by=T.unsafe(nil)); end

  def delete(*field); end

  def each_key(&block); end

  def each_value(&block); end

  def empty?(); end

  def fetch(field, *args, &block); end

  def fill(pairs=T.unsafe(nil)); end

  def get(field); end

  def has_key?(field); end

  def hget(field); end

  def include?(field); end

  def incr(field, by=T.unsafe(nil)); end

  def incrby(field, by=T.unsafe(nil)); end

  def incrbyfloat(field, by=T.unsafe(nil)); end

  def key?(field); end

  def keys(); end

  def length(); end

  def member?(field); end

  def size(); end

  def store(field, value); end

  def update(*args); end

  def vals(); end

  def value(); end

  def values(); end
end

class Redis::HashRing
  def add_node(node); end

  def get_node(key); end

  def get_node_pos(key); end

  def initialize(nodes=T.unsafe(nil), replicas=T.unsafe(nil)); end

  def iter_nodes(key); end

  def nodes(); end

  def remove_node(node); end

  def replicas(); end

  def ring(); end

  def sorted_keys(); end
  POINTS_PER_SERVER = ::T.let(nil, ::T.untyped)
end

class Redis::HashRing
  def self.binary_search(ary, value); end
end

module Redis::Helpers::CoreCommands
  def clear(); end

  def del(); end

  def delete(); end

  def exists(); end

  def exists?(); end

  def expire(seconds); end

  def expireat(unixtime); end

  def marshal(value, domarshal=T.unsafe(nil)); end

  def move(dbindex); end

  def persist(); end

  def rename(name, setkey=T.unsafe(nil)); end

  def renamenx(name, setkey=T.unsafe(nil)); end

  def serializer(); end

  def ttl(); end

  def type(); end

  def unmarshal(value, domarshal=T.unsafe(nil)); end
end

class Redis::List
  def <<(value); end

  def ==(x); end

  def [](index, length=T.unsafe(nil)); end

  def []=(index, value); end

  def at(index); end

  def delete(name, count=T.unsafe(nil)); end

  def empty?(); end

  def first(); end

  def get(); end

  def insert(where, pivot, value); end

  def last(); end

  def length(); end

  def pop(n=T.unsafe(nil)); end

  def push(*values); end

  def range(start_index, end_index); end

  def rpoplpush(destination); end

  def shift(n=T.unsafe(nil)); end

  def size(); end

  def slice(index, length=T.unsafe(nil)); end

  def unshift(*values); end

  def value(); end

  def values(); end
end

class Redis::Lock
  def generate_expiration(); end

  def lock(); end

  def value(); end
end

class Redis::Namespace
  ADMINISTRATIVE_COMMANDS = ::T.let(nil, ::T.untyped)
  COMMANDS = ::T.let(nil, ::T.untyped)
  DEPRECATED_COMMANDS = ::T.let(nil, ::T.untyped)
  HELPER_COMMANDS = ::T.let(nil, ::T.untyped)
  NAMESPACED_COMMANDS = ::T.let(nil, ::T.untyped)
  TRANSACTION_COMMANDS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Redis::Objects::Counters::InstanceMethods
  def decrement(name, by=T.unsafe(nil)); end

  def increment(name, by=T.unsafe(nil)); end
end

module Redis::Objects::Counters
  def self.included(klass); end
end

module Redis::Objects::Hashes
  def self.included(klass); end
end

module Redis::Objects::Lists
  def self.included(klass); end
end

module Redis::Objects::Locks
  def self.included(klass); end
end

module Redis::Objects::Sets
  def self.included(klass); end
end

module Redis::Objects::SortedSets
  def self.included(klass); end
end

module Redis::Objects::Values
  def self.included(klass); end
end

class Redis::Set
  def &(*sets); end

  def +(*sets); end

  def -(*sets); end

  def <<(value); end

  def ==(x); end

  def ^(*sets); end

  def add(value); end

  def count(); end

  def delete(value); end

  def delete_if(&block); end

  def diff(*sets); end

  def difference(*sets); end

  def diffstore(name, *sets); end

  def empty?(); end

  def get(); end

  def include?(value); end

  def inter(*sets); end

  def intersect(*sets); end

  def intersection(*sets); end

  def interstore(name, *sets); end

  def length(); end

  def member?(value); end

  def members(); end

  def merge(*values); end

  def move(value, destination); end

  def pop(count=T.unsafe(nil)); end

  def randmember(count=T.unsafe(nil)); end

  def size(); end

  def union(*sets); end

  def unionstore(name, *sets); end

  def value(); end

  def |(*sets); end
end

class Redis::Value
  def ==(other); end

  def compress(value); end

  def decompress(value); end

  def get(); end

  def marshal(value, *args); end

  def method_missing(*args); end

  def set(val); end

  def unmarshal(value, *args); end

  def value(); end

  def value=(val); end
end

class Refinement
end

class Refinement
end

module Reline
  DEFAULT_DIALOG_CONTEXT = ::T.let(nil, ::T.untyped)
  DEFAULT_DIALOG_PROC_AUTOCOMPLETE = ::T.let(nil, ::T.untyped)
  FILENAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  HISTORY = ::T.let(nil, ::T.untyped)
  USERNAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Reline::ANSI
  CAPNAME_KEY_BINDINGS = ::T.let(nil, ::T.untyped)
  END_BRACKETED_PASTE = ::T.let(nil, ::T.untyped)
  START_BRACKETED_PASTE = ::T.let(nil, ::T.untyped)
end

class Reline::Config
  KEYSEQ_PATTERN = ::T.let(nil, ::T.untyped)
  VARIABLE_NAMES = ::T.let(nil, ::T.untyped)
  VARIABLE_NAME_SYMBOLS = ::T.let(nil, ::T.untyped)
end

class Reline::Core
  ATTR_READER_NAMES = ::T.let(nil, ::T.untyped)
end

Reline::IOGate = Reline::ANSI

Reline::Key = Struct::Key

class Reline::KeyActor::Base
  MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyActor::Emacs
  MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyActor::ViCommand
  MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyActor::ViInsert
  MAPPING = ::T.let(nil, ::T.untyped)
end

module Reline::KillRing::State
  CONTINUED = ::T.let(nil, ::T.untyped)
  FRESH = ::T.let(nil, ::T.untyped)
  PROCESSED = ::T.let(nil, ::T.untyped)
  YANK = ::T.let(nil, ::T.untyped)
end

class Reline::LineEditor
  DIALOG_DEFAULT_HEIGHT = ::T.let(nil, ::T.untyped)
  PROMPT_LIST_CACHE_TIMEOUT = ::T.let(nil, ::T.untyped)
  VI_MOTIONS = ::T.let(nil, ::T.untyped)
end

Reline::LineEditor::CompletionJourneyData = Struct::CompletionJourneyData

module Reline::LineEditor::CompletionState
  COMPLETION = ::T.let(nil, ::T.untyped)
  JOURNEY = ::T.let(nil, ::T.untyped)
  MENU = ::T.let(nil, ::T.untyped)
  MENU_WITH_PERFECT_MATCH = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  PERFECT_MATCH = ::T.let(nil, ::T.untyped)
end

Reline::LineEditor::MenuInfo = Struct::MenuInfo

module Reline::Terminfo
  extend ::Fiddle::Importer
  extend ::Fiddle
  extend ::Fiddle::CParser
end

class Reline::Unicode
  CSI_REGEXP = ::T.let(nil, ::T.untyped)
  CSI_REGEXP_INDEX = ::T.let(nil, ::T.untyped)
  EscapedChars = ::T.let(nil, ::T.untyped)
  EscapedPairs = ::T.let(nil, ::T.untyped)
  GRAPHEME_CLUSTER_INDEX = ::T.let(nil, ::T.untyped)
  HalfwidthDakutenHandakuten = ::T.let(nil, ::T.untyped)
  MBCharWidthRE = ::T.let(nil, ::T.untyped)
  NON_PRINTING_END = ::T.let(nil, ::T.untyped)
  NON_PRINTING_END_INDEX = ::T.let(nil, ::T.untyped)
  NON_PRINTING_START = ::T.let(nil, ::T.untyped)
  NON_PRINTING_START_INDEX = ::T.let(nil, ::T.untyped)
  OSC_REGEXP = ::T.let(nil, ::T.untyped)
  OSC_REGEXP_INDEX = ::T.let(nil, ::T.untyped)
  WIDTH_SCANNER = ::T.let(nil, ::T.untyped)
end

class Reline::Unicode::EastAsianWidth
  TYPE_A = ::T.let(nil, ::T.untyped)
  TYPE_F = ::T.let(nil, ::T.untyped)
  TYPE_H = ::T.let(nil, ::T.untyped)
  TYPE_N = ::T.let(nil, ::T.untyped)
  TYPE_NA = ::T.let(nil, ::T.untyped)
  TYPE_W = ::T.let(nil, ::T.untyped)
end

module Representable
  def representable_attrs=(representable_attrs); end
  As = ::T.let(nil, ::T.untyped)
  AssignAs = ::T.let(nil, ::T.untyped)
  AssignFragment = ::T.let(nil, ::T.untyped)
  AssignName = ::T.let(nil, ::T.untyped)
  Decorate = ::T.let(nil, ::T.untyped)
  Default = ::T.let(nil, ::T.untyped)
  Deserialize = ::T.let(nil, ::T.untyped)
  Deserializer = ::T.let(nil, ::T.untyped)
  FindOrInstantiate = ::T.let(nil, ::T.untyped)
  GetValue = ::T.let(nil, ::T.untyped)
  Getter = ::T.let(nil, ::T.untyped)
  If = ::T.let(nil, ::T.untyped)
  OptionsForNested = ::T.let(nil, ::T.untyped)
  OverwriteOnNil = ::T.let(nil, ::T.untyped)
  ParseFilter = ::T.let(nil, ::T.untyped)
  Prepare = ::T.let(nil, ::T.untyped)
  ReadFragment = ::T.let(nil, ::T.untyped)
  Reader = ::T.let(nil, ::T.untyped)
  RenderDefault = ::T.let(nil, ::T.untyped)
  RenderFilter = ::T.let(nil, ::T.untyped)
  Serialize = ::T.let(nil, ::T.untyped)
  Serializer = ::T.let(nil, ::T.untyped)
  SetValue = ::T.let(nil, ::T.untyped)
  Setter = ::T.let(nil, ::T.untyped)
  SkipParse = ::T.let(nil, ::T.untyped)
  SkipRender = ::T.let(nil, ::T.untyped)
  Stop = ::T.let(nil, ::T.untyped)
  StopOnExcluded = ::T.let(nil, ::T.untyped)
  StopOnNil = ::T.let(nil, ::T.untyped)
  StopOnNotFound = ::T.let(nil, ::T.untyped)
  StopOnSkipable = ::T.let(nil, ::T.untyped)
  WriteFragment = ::T.let(nil, ::T.untyped)
  Writer = ::T.let(nil, ::T.untyped)
end

class Representable::Binding
  def [](name); end

  def cached_representer(); end

  def cached_representer=(cached_representer); end

  def default_for(value); end

  def getter(); end

  def initialize(definition); end

  def name(); end

  def setter(); end

  def skipable_empty_value?(value); end
end

module Representable::Binding::Collection
  def skipable_empty_value?(value); end
end

module Representable::Binding::Deprecatable
  def compile_fragment(options); end

  def uncompile_fragment(options); end
end

module Representable::Binding::EvaluateOption
  def evaluate_option(name, input, options); end
end

module Representable::Binding::Factories
  def collect_for(item_functions); end

  def default_parse_fragment_functions(); end

  def default_parse_init_functions(); end

  def default_post_functions(); end

  def default_render_fragment_functions(); end

  def default_render_init_functions(); end

  def parse_functions(); end

  def pipeline_for(name, input, options); end

  def render_functions(); end
end

class Representable::Binding::Map
  def <<(binding); end

  def call(method, options); end
end

class Representable::Binding
  def self.build(definition); end
end

module Representable::Cached
  def representable_map(*arg); end
end

module Representable::Cached
  def self.included(includer); end
end

module Representable::ClassMethods
  def prepare(represented); end
end

class Representable::Config
  def initialize(*arg); end

  def options(); end

  def remove(name); end

  def wrap=(value); end

  def wrap_for(represented, options=T.unsafe(nil), &block); end
end

module Representable::CreateObject
  Class = ::T.let(nil, ::T.untyped)
  Instance = ::T.let(nil, ::T.untyped)
  Populator = ::T.let(nil, ::T.untyped)
end

module Representable::Declarative
  def collection(name, options=T.unsafe(nil), &block); end

  def default_nested_class(); end

  def definitions(); end

  def hash(name=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def nested(name, options=T.unsafe(nil), &block); end

  def nested_builder(); end

  def representable_attrs(); end

  def representation_wrap=(name); end
  NestedBuilder = ::T.let(nil, ::T.untyped)
end

class Representable::Decorator
  def decorated(); end

  def initialize(represented); end
end

class Representable::Decorator
  extend ::Declarative::Heritage::Included
  extend ::Declarative::Heritage::Inherited
  def self.clone(); end

  def self.map(); end

  def self.map=(v); end
end

class Representable::Definition
  def array?(); end

  def create_binding(*args); end

  def delete!(name); end

  def getter(); end

  def has_default?(); end

  def hash?(); end

  def initialize(sym, options=T.unsafe(nil), &block); end

  def merge!(options, &block); end

  def name(); end

  def representable?(); end

  def representer_module(); end

  def setter(); end

  def typed?(); end
end

module Representable::ForCollection
  def for_collection(); end
end

class Representable::Function::Decorate
  def call(object, options); end

  def prepare_for(mod, object, binding); end
end

class Representable::Function::Prepare
  def call(input, options); end
end

module Representable::Hash
  def from_hash(data, options=T.unsafe(nil), binding_builder=T.unsafe(nil)); end

  def parse(data, options=T.unsafe(nil), binding_builder=T.unsafe(nil)); end

  def render(options=T.unsafe(nil), binding_builder=T.unsafe(nil)); end

  def to_hash(options=T.unsafe(nil), binding_builder=T.unsafe(nil)); end
end

class Representable::Hash::Binding
  def deserialize_method(); end

  def read(hash, as); end

  def serialize_method(); end

  def write(hash, fragment, as); end
end

class Representable::Hash::Binding
  def self.build_for(definition); end
end

module Representable::Hash
  def self.included(base); end
end

module Representable::HashMethods
  def create_representation_with(doc, options, format); end

  def update_properties_from(doc, options, format); end
end

module Representable::JSON
  def from_json(data, *args); end

  def parse(data, *args); end

  def render(*args); end

  def to_json(*args); end
end

module Representable::JSON
  extend ::Declarative::Heritage::Included
  extend ::Declarative::Heritage::Inherited
  def self.included(base); end
end

module Representable::ModuleExtensions
  def extended(object); end
end

module Representable::Object
  def from_object(data, options=T.unsafe(nil), binding_builder=T.unsafe(nil)); end

  def to_object(options=T.unsafe(nil), binding_builder=T.unsafe(nil)); end
end

class Representable::Object::Binding
  def deserialize_method(); end

  def read(hash, as); end

  def serialize_method(); end

  def write(hash, fragment, as); end
end

class Representable::Object::Binding::Collection
  include ::Representable::Binding::Collection
end

class Representable::Object::Binding::Collection
end

class Representable::Object::Binding
  def self.build_for(definition); end
end

module Representable::Object::ClassMethods
  def collection_representer_class(); end
end

module Representable::Object::ClassMethods
end

module Representable::Object
  def self.included(base); end
end

class Representable::Option
  def self.callable?(value); end
end

class Representable::Pipeline
  def call(input, options); end
  Insert = ::T.let(nil, ::T.untyped)
end

class Representable::Pipeline::Function::Insert
  def call(arr, func, options); end
end

module Representable::Pipeline::Macros
  def insert(functions, new_function, options); end
end

class Representable::Populator
  FindOrInstantiate = ::T.let(nil, ::T.untyped)
end

class Representable::Populator
  def self.apply!(options); end
end

module Representable::Represent
  def represent(represented, array_class=T.unsafe(nil)); end
end

module Representable::XML
  def from_node(node, options=T.unsafe(nil)); end

  def from_xml(doc, *args); end

  def parse(doc, *args); end

  def render(*args); end

  def to_node(options=T.unsafe(nil)); end

  def to_xml(*args); end
end

class Representable::XML::Binding
  def deserialize_from(nodes); end

  def deserialize_method(); end

  def read(node, as); end

  def serialize_for(value, parent, as); end

  def serialize_method(); end

  def serialize_node(node, value, as); end

  def write(parent, fragments, as); end
end

class Representable::XML::Binding::Attribute
  def write(parent, value, as); end
end

class Representable::XML::Binding::Attribute
end

class Representable::XML::Binding::AttributeHash
  def deserialize_from(node); end

  def write(parent, value, as); end
end

class Representable::XML::Binding::AttributeHash
end

class Representable::XML::Binding::Collection
  include ::Representable::Binding::Collection
end

class Representable::XML::Binding::Collection
end

class Representable::XML::Binding::Content
  def serialize_for(value, parent); end

  def write(parent, value, as); end
end

class Representable::XML::Binding::Content
end

class Representable::XML::Binding::Hash
end

class Representable::XML::Binding::Hash
end

class Representable::XML::Binding
  def self.build_for(definition); end
end

module Representable::XML::ClassMethods
  def collection_representer_class(); end

  def format_engine(); end

  def remove_namespaces!(); end
end

module Representable::XML::ClassMethods
end

module Representable::XML::Collection
end

module Representable::XML::Collection::Methods
  def create_representation_with(doc, options, format); end

  def update_properties_from(doc, *args); end
end

module Representable::XML::Collection::Methods
end

module Representable::XML::Collection
  def self.included(base); end
end

module Representable::XML::Namespace
  def add_namespace_definitions!(node, namespaces); end

  def from_node(node, options=T.unsafe(nil)); end

  def representable_map(options, format); end

  def to_node(options=T.unsafe(nil)); end
end

module Representable::XML::Namespace::AsWithNamespace
  def read(node, as); end

  def write(doc, fragment, as); end
end

module Representable::XML::Namespace::AsWithNamespace
end

module Representable::XML::Namespace::DSL
  def namespace(namespace); end

  def namespace_def(mapping); end

  def namespace_defs(); end

  def property(name, options=T.unsafe(nil)); end

  def update_namespace_defs!(namespace_defs); end
end

module Representable::XML::Namespace::DSL
end

module Representable::XML::Namespace
  def self.Namespaced(prefix, name); end

  def self.included(includer); end
end

module Representable::XML
  def self.Node(document, name, attributes=T.unsafe(nil)); end

  def self.included(base); end
end

module Representable::YAML
  include ::Representable::Hash
  include ::Representable
  def from_yaml(doc, options=T.unsafe(nil)); end

  def parse(doc, options=T.unsafe(nil)); end

  def render(*args); end

  def to_ast(options=T.unsafe(nil)); end

  def to_yaml(*args); end
end

class Representable::YAML::Binding
  def node_for(fragment); end

  def write(map, fragment, as); end

  def write_scalar(value); end
end

class Representable::YAML::Binding::Collection
  include ::Representable::Binding::Collection
  def node_for(fragments); end
end

class Representable::YAML::Binding::Collection
end

class Representable::YAML::Binding
end

module Representable::YAML::ClassMethods
  def format_engine(); end
end

module Representable::YAML::ClassMethods
end

module Representable::YAML
  extend ::Representable::Declarative
  extend ::Declarative::Schema::DSL
  extend ::Declarative::Schema::Feature
  extend ::Declarative::Heritage::DSL
  extend ::Declarative::Heritage::Included
  extend ::Declarative::Heritage::Inherited
  extend ::Representable::ModuleExtensions
  extend ::Representable::ClassMethods
  extend ::Representable::ForCollection
  extend ::Representable::Represent
  def self.included(base); end
end

module Representable
  def self.Option(value); end

  def self.included(base); end
end

module RequestStore
  VERSION = ::T.let(nil, ::T.untyped)
end

module Retriable
  VERSION = ::T.let(nil, ::T.untyped)
end

class Retriable::Config
  def base_interval(); end

  def base_interval=(base_interval); end

  def contexts(); end

  def contexts=(contexts); end

  def initialize(opts=T.unsafe(nil)); end

  def intervals(); end

  def intervals=(intervals); end

  def max_elapsed_time(); end

  def max_elapsed_time=(max_elapsed_time); end

  def max_interval(); end

  def max_interval=(max_interval); end

  def multiplier(); end

  def multiplier=(multiplier); end

  def on(); end

  def on=(on); end

  def on_retry(); end

  def on_retry=(on_retry); end

  def rand_factor(); end

  def rand_factor=(rand_factor); end

  def sleep_disabled(); end

  def sleep_disabled=(sleep_disabled); end

  def timeout(); end

  def timeout=(timeout); end

  def to_h(); end

  def tries(); end

  def tries=(tries); end
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Retriable::ExponentialBackoff
  def base_interval(); end

  def base_interval=(base_interval); end

  def initialize(opts=T.unsafe(nil)); end

  def intervals(); end

  def max_interval(); end

  def max_interval=(max_interval); end

  def multiplier(); end

  def multiplier=(multiplier); end

  def rand_factor(); end

  def rand_factor=(rand_factor); end

  def tries(); end

  def tries=(tries); end
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

module Retriable
  def self.config(); end

  def self.configure(); end

  def self.retriable(opts=T.unsafe(nil)); end

  def self.with_context(context_key, options=T.unsafe(nil), &block); end
end

class Ripper
  def column(); end

  def debug_output(); end

  def debug_output=(debug_output); end

  def encoding(); end

  def end_seen?(); end

  def error?(); end

  def filename(); end

  def initialize(*arg); end

  def lineno(); end

  def parse(); end

  def state(); end

  def token(); end

  def yydebug(); end

  def yydebug=(yydebug); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  PARSER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  SCANNER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Ripper::Filter
  def initialize(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end
end

class Ripper::Lexer
  def errors(); end

  def lex(**kw); end

  def parse(raise_errors: T.unsafe(nil)); end

  def scan(**kw); end

  def tokenize(**kw); end
end

class Ripper::Lexer::Elem
  def [](index); end

  def event(); end

  def event=(event); end

  def initialize(pos, event, tok, state, message=T.unsafe(nil)); end

  def message(); end

  def message=(message); end

  def pos(); end

  def pos=(pos); end

  def state(); end

  def state=(state); end

  def to_a(); end

  def tok(); end

  def tok=(tok); end
end

class Ripper::Lexer::Elem
end

class Ripper::Lexer::State
  def &(i); end

  def ==(i); end

  def [](index); end

  def allbits?(i); end

  def anybits?(i); end

  def initialize(i); end

  def nobits?(i); end

  def to_i(); end

  def to_int(); end

  def |(i); end
end

class Ripper::Lexer::State
end

class Ripper::Lexer
end

class Ripper::SexpBuilder
  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(*args); end

  def on_args_add_block(*args); end

  def on_args_add_star(*args); end

  def on_args_forward(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_aryptn(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_fndptn(*args); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_end(tok); end

  def on_hshptn(*args); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_in(*args); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(*args); end

  def on_method_add_block(*args); end

  def on_mlhs_add(*args); end

  def on_mlhs_add_post(*args); end

  def on_mlhs_add_star(*args); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(*args); end

  def on_mrhs_add_star(*args); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_nokw_param(*args); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(*args); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(*args); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(*args); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(*args); end

  def on_stmts_new(*args); end

  def on_string_add(*args); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(*args); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(*args); end

  def on_word_new(*args); end

  def on_words_add(*args); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(*args); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class Ripper::TokenPattern
  def initialize(pattern); end

  def match(str); end

  def match_list(tokens); end
  MAP = ::T.let(nil, ::T.untyped)
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::MatchData
  def initialize(tokens, match); end

  def string(n=T.unsafe(nil)); end
end

class Ripper::TokenPattern::MatchData
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern
  def self.compile(*arg, **arg1); end
end

class Ripper
  def self.dedent_string(arg, arg1); end

  def self.lex_state_name(arg); end

  def self.token_match(src, pattern); end
end

RspecJunitFormatter = RSpecJUnitFormatter

class RubyLex
  def check_code_block(code, tokens=T.unsafe(nil)); end

  def check_corresponding_token_depth(lines, line_index); end

  def check_newline_depth_difference(); end

  def check_state(code, tokens=T.unsafe(nil), context: T.unsafe(nil)); end

  def check_string_literal(tokens); end

  def check_termination_in_prev_line(code, context: T.unsafe(nil)); end

  def each_top_level_statement(); end

  def find_prev_spaces(line_index); end

  def initialize_input(); end

  def is_method_calling?(tokens, index); end

  def is_the_in_correspond_to_a_for(tokens, index); end

  def lex(); end

  def process_continue(tokens=T.unsafe(nil)); end

  def process_literal_type(tokens=T.unsafe(nil)); end

  def process_nesting_level(tokens=T.unsafe(nil)); end

  def prompt(); end

  def set_auto_indent(context); end

  def set_input(io, p=T.unsafe(nil), context: T.unsafe(nil), &block); end

  def set_prompt(p=T.unsafe(nil), &block); end

  def take_corresponding_syntax_to_kw_do(tokens, index); end
  ERROR_TOKENS = ::T.let(nil, ::T.untyped)
end

class RubyLex::TerminateLineInput
  def initialize(); end
end

class RubyLex::TerminateLineInput
end

class RubyLex
  def self.compile_with_errors_suppressed(code, line_no: T.unsafe(nil)); end

  def self.ripper_lex_without_warning(code, context: T.unsafe(nil)); end
end

module RubyNext
  LAST_MINOR_VERSIONS = ::T.let(nil, ::T.untyped)
  LATEST_VERSION = ::T.let(nil, ::T.untyped)
  MIN_SUPPORTED_VERSION = ::T.let(nil, ::T.untyped)
  NEXT_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_NEXT_DIR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class RubyVM::AbstractSyntaxTree::Node
  def node_id(); end

  def pretty_print_children(q, names=T.unsafe(nil)); end

  def script_lines(); end

  def source(); end
end

class RubyVM::InstructionSequence
  def script_lines(); end
end

class RubyVM::InstructionSequence
  extend ::Bootsnap::CompileCache::ISeq::InstructionSequenceMixin
end

module RubyVM::MJIT
end

module RubyVM::MJIT
  def self.enabled?(); end

  def self.pause(*arg); end

  def self.resume(); end
end

class RubyVM
  def self.keep_script_lines(); end

  def self.keep_script_lines=(keep_script_lines); end
end

ScanError = StringScanner::Error

module SecondLevelCache::ActiveRecord::Associations::Preloader::Association::Legacy
  RAILS6 = ::T.let(nil, ::T.untyped)
end

module SecondLevelCache::Adapter::Paranoia::Mixin
  def update_second_level_cache(); end

  def write_second_level_cache(); end
end

class SecondLevelCache::LogSubscriber
  def preload(event); end
end

module SecureRandom
  BASE36_ALPHABET = ::T.let(nil, ::T.untyped)
  BASE58_ALPHABET = ::T.let(nil, ::T.untyped)
end

module Sentry
  LOGGER_PROGNAME = ::T.let(nil, ::T.untyped)
  META = ::T.let(nil, ::T.untyped)
  SENTRY_TRACE_HEADER_NAME = ::T.let(nil, ::T.untyped)
  THREAD_LOCAL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sentry::Backtrace
  APP_DIRS_PATTERN = ::T.let(nil, ::T.untyped)
end

class Sentry::Backtrace::Line
  JAVA_INPUT_FORMAT = ::T.let(nil, ::T.untyped)
  RB_EXTENSION = ::T.let(nil, ::T.untyped)
  RUBY_INPUT_FORMAT = ::T.let(nil, ::T.untyped)
end

class Sentry::Breadcrumb
  DATA_SERIALIZATION_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
end

class Sentry::BreadcrumbBuffer
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
end

class Sentry::Configuration
  HEROKU_DYNO_METADATA_MESSAGE = ::T.let(nil, ::T.untyped)
  IGNORE_DEFAULT = ::T.let(nil, ::T.untyped)
  LOG_PREFIX = ::T.let(nil, ::T.untyped)
  MODULE_SEPARATOR = ::T.let(nil, ::T.untyped)
  RACK_ENV_WHITELIST_DEFAULT = ::T.let(nil, ::T.untyped)
  SKIP_INSPECTION_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Sentry::DSN
  PORT_MAP = ::T.let(nil, ::T.untyped)
  REQUIRED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Sentry::Event
  MAX_MESSAGE_SIZE_IN_BYTES = ::T.let(nil, ::T.untyped)
  SERIALIZEABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SKIP_INSPECTION_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  WRITER_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Sentry::HTTPTransport
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DEFAULT_DELAY = ::T.let(nil, ::T.untyped)
  GZIP_ENCODING = ::T.let(nil, ::T.untyped)
  GZIP_THRESHOLD = ::T.let(nil, ::T.untyped)
  RATE_LIMIT_HEADER = ::T.let(nil, ::T.untyped)
  RETRY_AFTER_HEADER = ::T.let(nil, ::T.untyped)
  USER_AGENT = ::T.let(nil, ::T.untyped)
end

class Sentry::Logger
  LOG_PREFIX = ::T.let(nil, ::T.untyped)
  PROGNAME = ::T.let(nil, ::T.untyped)
end

module Sentry::Net::HTTP
  OP_NAME = ::T.let(nil, ::T.untyped)
end

module Sentry::Rails
  IGNORE_DEFAULT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sentry::Rails::ActionCableExtensions::Channel::Subscriptions
  def self.included(base); end
end

class Sentry::Rails::ActionCableExtensions::ErrorHandler
  def self.capture(connection, transaction_name:, extra_context: T.unsafe(nil), &block); end

  def self.finish_transaction(transaction, status_code); end

  def self.start_transaction(env, transaction_name); end
end

module Sentry::Rails::ActiveJobExtensions
  def already_supported_by_sentry_integration?(); end

  def capture_and_reraise_with_sentry(scope, &block); end

  def finish_sentry_transaction(transaction, status); end

  def perform_now(); end

  def sentry_context(); end
end

class Sentry::Rails::BacktraceCleaner
  APP_DIRS_PATTERN = ::T.let(nil, ::T.untyped)
  RENDER_TEMPLATE_PATTERN = ::T.let(nil, ::T.untyped)
end

module Sentry::Rails::InstrumentPayloadCleanupHelper
  IGNORED_DATA_TYPES = ::T.let(nil, ::T.untyped)
end

module Sentry::Rails::Tracing
  START_TIMESTAMP_NAME = ::T.let(nil, ::T.untyped)
end

class Sentry::Rails::Tracing::ActionControllerSubscriber
  EVENT_NAMES = ::T.let(nil, ::T.untyped)
end

class Sentry::Rails::Tracing::ActionViewSubscriber
  EVENT_NAMES = ::T.let(nil, ::T.untyped)
end

class Sentry::Rails::Tracing::ActiveRecordSubscriber
  EVENT_NAMES = ::T.let(nil, ::T.untyped)
  EXCLUDED_EVENTS = ::T.let(nil, ::T.untyped)
end

class Sentry::Rails::Tracing::ActiveStorageSubscriber
  EVENT_NAMES = ::T.let(nil, ::T.untyped)
end

class Sentry::RequestInterface
  CONTENT_HEADERS = ::T.let(nil, ::T.untyped)
  IP_HEADERS = ::T.let(nil, ::T.untyped)
  MAX_BODY_LIMIT = ::T.let(nil, ::T.untyped)
  REQUEST_ID_HEADERS = ::T.let(nil, ::T.untyped)
end

class Sentry::Scope
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Sentry::SendEventJob
  def perform(event, hint=T.unsafe(nil)); end
end

class Sentry::SingleExceptionInterface
  MAX_LOCAL_BYTES = ::T.let(nil, ::T.untyped)
  OMISSION_MARK = ::T.let(nil, ::T.untyped)
  PROBLEMATIC_LOCAL_VALUE_REPLACEMENT = ::T.let(nil, ::T.untyped)
  SKIP_INSPECTION_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Sentry::Span
  STATUS_MAP = ::T.let(nil, ::T.untyped)
end

class Sentry::Transaction
  MESSAGE_PREFIX = ::T.let(nil, ::T.untyped)
  SENTRY_TRACE_REGEXP = ::T.let(nil, ::T.untyped)
  UNLABELD_NAME = ::T.let(nil, ::T.untyped)
end

class Sentry::TransactionEvent
  SERIALIZEABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
  WRITER_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Sentry::Transport
  CLIENT_REPORT_INTERVAL = ::T.let(nil, ::T.untyped)
  CLIENT_REPORT_REASONS = ::T.let(nil, ::T.untyped)
  PROTOCOL_VERSION = ::T.let(nil, ::T.untyped)
  USER_AGENT = ::T.let(nil, ::T.untyped)
end

class Sentry::Utils::RealIp
  LOCAL_ADDRESSES = ::T.let(nil, ::T.untyped)
end

module Sentry::Utils::RequestId
  REQUEST_ID_HEADERS = ::T.let(nil, ::T.untyped)
end

class Set
  def ==(other); end

  def ===(o); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers
  TERMINAL_MAX_WIDTH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::ActionController
  def filter_param(key); end

  def permit(*params); end

  def redirect_to(url_or_description, &block); end

  def render_template(options=T.unsafe(nil), message=T.unsafe(nil)); end

  def render_with_layout(expected_layout=T.unsafe(nil)); end

  def rescue_from(exception); end

  def respond_with(status); end

  def route(method, path, port: T.unsafe(nil)); end

  def set_flash(); end

  def set_session(); end

  def use_after_action(callback); end

  def use_around_action(callback); end

  def use_before_action(callback); end
end

class Shoulda::Matchers::ActionController::CallbackMatcher
  def callback_type(); end

  def callbacks(); end

  def controller(); end

  def controller_class(); end

  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(method_name, kind, callback_type); end

  def kind(); end

  def matches?(controller); end

  def method_name(); end
end

class Shoulda::Matchers::ActionController::FilterParamMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(key); end

  def matches?(_controller); end
end

class Shoulda::Matchers::ActionController::FlashStore
  def controller(); end

  def controller=(controller); end

  def empty?(*arg, **arg1, &arg2); end

  def has_key?(key); end

  def has_value?(expected_value); end

  def name(); end

  def use_now!(); end
end

class Shoulda::Matchers::ActionController::FlashStore
  def self.future(); end

  def self.now(); end
end

class Shoulda::Matchers::ActionController::PermitMatcher
  def action(); end

  def actual_permitted_parameter_names(); end

  def add_params(params); end

  def context(); end

  def controller(); end

  def default_verb(); end

  def description(); end

  def double_collections_by_parameter_name(); end

  def ensure_action_and_verb_present!(); end

  def expectation(); end

  def expected_permitted_parameter_names(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def for(action, options=T.unsafe(nil)); end

  def format_parameter_names(parameter_names); end

  def in_context(context); end

  def initialize(expected_permitted_parameter_names); end

  def matches?(controller); end

  def on(subparameter_name); end

  def parameter_names_as_sentence(); end

  def parameters_double_registry(); end

  def reality(); end

  def request_params(); end

  def stubbed_params=(stubbed_params); end

  def subparameter_name(); end

  def unpermitted_parameter_names(); end

  def verb(); end
end

class Shoulda::Matchers::ActionController::PermitMatcher::CompositeParametersDoubleRegistry
  def parameters_double_registries(); end

  def permitted_parameter_names(options=T.unsafe(nil)); end

  def register(); end
end

class Shoulda::Matchers::ActionController::PermitMatcher::ParametersDoubleRegistry
  def double_collections_by_parameter_name(); end

  def initialize(params); end

  def params(); end

  def permitted_parameter_names(args=T.unsafe(nil)); end

  def register(); end
  TOP_LEVEL = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActionController::PermitMatcher::ParametersDoubleRegistry
  def self.permitted_parameter_names_within(double_collection); end
end

class Shoulda::Matchers::ActionController::RedirectToMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def in_context(context); end

  def initialize(url_or_description, context, &block); end

  def matches?(controller); end
end

class Shoulda::Matchers::ActionController::RenderTemplateMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def in_context(context); end

  def initialize(options, message, context); end

  def matches?(controller); end
end

class Shoulda::Matchers::ActionController::RenderWithLayoutMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def in_context(context); end

  def initialize(expected_layout); end

  def matches?(controller); end
end

class Shoulda::Matchers::ActionController::RescueFromMatcher
  def controller(); end

  def description(); end

  def exception(); end

  def expectation(); end

  def expected_method(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def handler_exists?(); end

  def handlers(); end

  def initialize(exception); end

  def matches?(controller); end

  def method_name_matches?(); end

  def rescues_from_exception?(); end

  def with(method); end
end

class Shoulda::Matchers::ActionController::RespondWithMatcher
  def correct_status_code?(); end

  def correct_status_code_range?(); end

  def description(); end

  def expectation(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(status); end

  def matches?(controller); end

  def response_code(); end

  def symbol_to_status_code(potential_symbol); end
end

class Shoulda::Matchers::ActionController::RouteMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def in_context(context); end

  def initialize(context, method, path, port: T.unsafe(nil)); end

  def matches?(controller); end

  def to(*args); end
end

class Shoulda::Matchers::ActionController::RouteParams
  def args(); end

  def controller_and_action_given_as_string?(); end

  def extract_params_from_string(); end

  def initialize(args); end

  def normalize(); end

  def normalize_values(hash); end

  def stringify(value); end

  def stringify_params(); end

  def symbolize_or_stringify(key, value); end
  PARAMS_TO_SYMBOLIZE = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActionController::SessionStore
  def controller(); end

  def controller=(controller); end

  def empty?(); end

  def has_key?(key); end

  def has_value?(expected_value); end

  def name(); end
end

class Shoulda::Matchers::ActionController::SetFlashMatcher
  def [](key); end

  def description(*args, **arg, &block); end

  def expected_value(); end

  def failure_message(*args, **arg, &block); end

  def failure_message_for_should(*args, **arg, &block); end

  def failure_message_for_should_not(*args, **arg, &block); end

  def failure_message_when_negated(*args, **arg, &block); end

  def in_context(context); end

  def key(); end

  def matches?(*args, **arg, &block); end

  def now(); end

  def to(expected_value=T.unsafe(nil), &block); end

  def underlying_matcher(); end
end

class Shoulda::Matchers::ActionController::SetSessionMatcher
  def [](key); end

  def description(*args, **arg, &block); end

  def failure_message(*args, **arg, &block); end

  def failure_message_for_should(*args, **arg, &block); end

  def failure_message_for_should_not(*args, **arg, &block); end

  def failure_message_when_negated(*args, **arg, &block); end

  def in_context(context); end

  def matches?(*args, **arg, &block); end

  def to(expected_value=T.unsafe(nil), &block); end

  def underlying_matcher(); end
end

class Shoulda::Matchers::ActionController::SetSessionOrFlashMatcher
  def [](key); end

  def context(); end

  def controller(); end

  def description(); end

  def expected_value(); end

  def failure_message(); end

  def failure_message_for_should(); end

  def failure_message_for_should_not(); end

  def failure_message_when_negated(); end

  def in_context(context); end

  def initialize(store); end

  def key(); end

  def matches?(controller); end

  def store(); end

  def to(expected_value=T.unsafe(nil), &block); end
end

module Shoulda::Matchers::ActiveModel
  def allow_value(*values); end

  def allow_values(*values); end

  def have_secure_password(attr=T.unsafe(nil)); end

  def validate_absence_of(attr); end

  def validate_acceptance_of(attr); end

  def validate_confirmation_of(attr); end

  def validate_exclusion_of(attr); end

  def validate_inclusion_of(attr); end

  def validate_length_of(attr); end

  def validate_numericality_of(attr); end

  def validate_presence_of(attr); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher
  def _after_setting_value(&callback); end

  def after_setting_value_callback(); end

  def attribute_changed_value_message=(attribute_changed_value_message); end

  def attribute_to_check_message_against(); end

  def attribute_to_set(); end

  def context(); end

  def description(); end

  def does_not_match?(instance); end

  def expected_message(); end

  def expects_custom_validation_message?(); end

  def expects_strict?(); end

  def failure_message(); end

  def failure_message_preface=(failure_message_preface); end

  def failure_message_when_negated(); end

  def for(attribute_name); end

  def initialize(*values); end

  def instance(); end

  def last_attribute_setter_used(); end

  def last_value_set(); end

  def matches?(instance); end

  def model(); end

  def on(context); end

  def options(); end

  def result(); end

  def simple_description(); end

  def strict(expects_strict=T.unsafe(nil)); end

  def values_to_preset(); end

  def values_to_preset=(values_to_preset); end

  def values_to_set(); end

  def with_message(message, given_options=T.unsafe(nil)); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::AttributeChangedValueError
  def attribute_name(); end

  def attribute_name=(attribute_name); end

  def matcher_name(); end

  def matcher_name=(matcher_name); end

  def model(); end

  def model=(model); end

  def successful?(); end

  def value_read(); end

  def value_read=(value_read); end

  def value_written(); end

  def value_written=(value_written); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::AttributeDoesNotExistError
  def attribute_name(); end

  def attribute_name=(attribute_name); end

  def model(); end

  def model=(model); end

  def successful?(); end

  def value(); end

  def value=(value); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::AttributeSetter
  def after_set_callback(); end

  def args(); end

  def attribute_changed_value?(); end

  def attribute_name(); end

  def check(); end

  def checked?(); end

  def description(); end

  def failure_message(); end

  def initialize(args); end

  def matcher_name(); end

  def object(); end

  def result_of_checking(); end

  def result_of_setting(); end

  def run(); end

  def run!(); end

  def set(); end

  def set!(); end

  def set?(); end

  def successful?(); end

  def successfully_checked?(); end

  def successfully_set?(); end

  def unsuccessful?(); end

  def unsuccessfully_checked?(); end

  def value_read(); end

  def value_written(); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::AttributeSetter
  def self.set(args); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::AttributeSetterAndValidator
  def after_setting_value_callback(*args, **arg, &block); end

  def allow_value_matcher(); end

  def attribute_name(); end

  def attribute_setter(); end

  def attribute_setter_description(); end

  def attribute_to_check_message_against(*args, **arg, &block); end

  def context(*args, **arg, &block); end

  def expected_message(*args, **arg, &block); end

  def expects_strict?(*args, **arg, &block); end

  def ignore_interference_by_writer(*args, **arg, &block); end

  def initialize(allow_value_matcher, attribute_name, value); end

  def instance(*args, **arg, &block); end

  def validator(); end

  def value(); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::AttributeSetters
  def each(&block); end

  def first_failing(); end

  def initialize(allow_value_matcher, values); end

  def tuples(); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::AttributeSettersAndValidators
  def each(&block); end

  def first_failing(); end

  def first_passing(); end

  def initialize(allow_value_matcher, values); end

  def tuples(); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::SuccessfulCheck
  def successful?(); end
end

class Shoulda::Matchers::ActiveModel::AllowValueMatcher::SuccessfulSetting
  def successful?(); end
end

class Shoulda::Matchers::ActiveModel::CouldNotSetPasswordError
  def model(); end

  def model=(model); end
end

class Shoulda::Matchers::ActiveModel::CouldNotSetPasswordError
  def self.create(model); end
end

class Shoulda::Matchers::ActiveModel::DisallowValueMatcher
  def _after_setting_value(*args, **arg, &block); end

  def allow_matcher(); end

  def attribute_changed_value_message=(*args, **arg, &block); end

  def attribute_to_set(*args, **arg, &block); end

  def description(*args, **arg, &block); end

  def does_not_match?(subject); end

  def expects_strict?(*args, **arg, &block); end

  def failure_message(); end

  def failure_message_preface(*args, **arg, &block); end

  def failure_message_preface=(*args, **arg, &block); end

  def failure_message_when_negated(); end

  def for(attribute); end

  def ignore_interference_by_writer(*args, **arg, &block); end

  def ignoring_interference_by_writer(value=T.unsafe(nil)); end

  def initialize(value); end

  def last_attribute_setter_used(*args, **arg, &block); end

  def last_value_set(*args, **arg, &block); end

  def matches?(subject); end

  def model(*args, **arg, &block); end

  def on(context); end

  def simple_description(*args, **arg, &block); end

  def strict(strict=T.unsafe(nil)); end

  def values_to_preset=(*args, **arg, &block); end

  def with_message(message, options=T.unsafe(nil)); end
end

class Shoulda::Matchers::ActiveModel::HaveSecurePasswordMatcher
  def description(); end

  def failure_message(); end

  def initialize(attribute); end

  def matches?(subject); end

  def subject(); end

  def validate(); end
  CORRECT_PASSWORD = ::T.let(nil, ::T.untyped)
  INCORRECT_PASSWORD = ::T.let(nil, ::T.untyped)
  MESSAGES = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::ActiveModel::Helpers
  def default_error_message(type, options=T.unsafe(nil)); end

  def format_validation_errors(errors); end

  def pretty_error_messages(object); end
end

class Shoulda::Matchers::ActiveModel::NonNullableBooleanError
  def attribute(); end

  def attribute=(attribute); end
end

class Shoulda::Matchers::ActiveModel::NonNullableBooleanError
  def self.create(attribute); end
end

class Shoulda::Matchers::ActiveModel::NumericalityMatchers::ComparisonMatcher
  def comparison_description(); end

  def for(attribute); end

  def initialize(numericality_matcher, value, operator); end

  def simple_description(); end

  def with_message(message); end
  ERROR_MESSAGES = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveModel::NumericalityMatchers::EvenNumberMatcher
  def simple_description(); end

  def wrap_disallow_value_matcher(matcher); end
  NON_EVEN_NUMBER_VALUE = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveModel::NumericalityMatchers::NumericTypeMatcher
  def allowed_type_adjective(); end

  def allowed_type_name(); end

  def attribute(); end

  def diff_to_compare(); end

  def disallowed_value(); end

  def does_not_match?(*args, **arg, &block); end

  def expects_custom_validation_message?(*args, **arg, &block); end

  def expects_strict?(*args, **arg, &block); end

  def failure_message(*args, **arg, &block); end

  def failure_message_when_negated(*args, **arg, &block); end

  def ignore_interference_by_writer(*args, **arg, &block); end

  def ignoring_interference_by_writer(*args, **arg, &block); end

  def initialize(numeric_type_matcher, attribute); end

  def matches?(*args, **arg, &block); end

  def on(*args, **arg, &block); end

  def strict(*args, **arg, &block); end

  def with_message(*args, **arg, &block); end

  def wrap_disallow_value_matcher(_matcher); end
end

class Shoulda::Matchers::ActiveModel::NumericalityMatchers::OddNumberMatcher
  def simple_description(); end

  def wrap_disallow_value_matcher(matcher); end
  NON_ODD_NUMBER_VALUE = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveModel::NumericalityMatchers::OnlyIntegerMatcher
  def simple_description(); end

  def wrap_disallow_value_matcher(matcher); end
  NON_INTEGER_VALUE = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::ActiveModel::Qualifiers::AllowNil
  def allow_nil(); end

  def expects_to_allow_nil?(); end

  def initialize(*args); end
end

class Shoulda::Matchers::ActiveModel::Qualifiers::IgnoreInterferenceByWriter
  def always?(); end

  def changed?(); end

  def condition(); end

  def considering?(value); end

  def default_to(argument); end

  def initialize(argument=T.unsafe(nil)); end

  def never?(); end

  def set(argument); end

  def setting(); end
end

module Shoulda::Matchers::ActiveModel::Qualifiers::IgnoringInterferenceByWriter
  def ignore_interference_by_writer(); end

  def ignoring_interference_by_writer(value=T.unsafe(nil)); end

  def initialize(*arg); end
end

class Shoulda::Matchers::ActiveModel::ValidateAbsenceOfMatcher
  def simple_description(); end
end

class Shoulda::Matchers::ActiveModel::ValidateAcceptanceOfMatcher
  def simple_description(); end
end

class Shoulda::Matchers::ActiveModel::ValidateConfirmationOfMatcher
  def confirmation_attribute(); end

  def simple_description(); end
end

class Shoulda::Matchers::ActiveModel::ValidateExclusionOfMatcher
  def in_array(array); end

  def in_range(range); end

  def simple_description(); end
end

class Shoulda::Matchers::ActiveModel::ValidateInclusionOfMatcher
  def allow_nil(); end

  def expects_to_allow_nil?(); end

  def in_array(array); end

  def in_range(range); end

  def simple_description(); end

  def with_high_message(message); end

  def with_low_message(message); end

  def with_message(message); end
  ARBITRARY_OUTSIDE_DATE = ::T.let(nil, ::T.untyped)
  ARBITRARY_OUTSIDE_DATETIME = ::T.let(nil, ::T.untyped)
  ARBITRARY_OUTSIDE_DECIMAL = ::T.let(nil, ::T.untyped)
  ARBITRARY_OUTSIDE_INTEGER = ::T.let(nil, ::T.untyped)
  ARBITRARY_OUTSIDE_STRING = ::T.let(nil, ::T.untyped)
  ARBITRARY_OUTSIDE_TIME = ::T.let(nil, ::T.untyped)
  BLANK_VALUES = ::T.let(nil, ::T.untyped)
  BOOLEAN_ALLOWS_BOOLEAN_MESSAGE = ::T.let(nil, ::T.untyped)
  BOOLEAN_ALLOWS_NIL_MESSAGE = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveModel::ValidateLengthOfMatcher
  def allow_nil(); end

  def is_at_least(length); end

  def is_at_most(length); end

  def is_equal_to(length); end

  def simple_description(); end

  def with_long_message(message); end

  def with_message(message); end

  def with_short_message(message); end
end

class Shoulda::Matchers::ActiveModel::ValidateNumericalityOfMatcher
  def allow_nil(); end

  def description(); end

  def diff_to_compare(); end

  def does_not_match?(subject); end

  def even(); end

  def expects_custom_validation_message?(); end

  def expects_strict?(); end

  def expects_to_allow_nil?(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def given_numeric_column?(); end

  def initialize(attribute); end

  def is_equal_to(value); end

  def is_greater_than(value); end

  def is_greater_than_or_equal_to(value); end

  def is_less_than(value); end

  def is_less_than_or_equal_to(value); end

  def is_other_than(value); end

  def matches?(subject); end

  def odd(); end

  def on(context); end

  def only_integer(); end

  def simple_description(); end

  def strict(); end

  def with_message(message); end
  DEFAULT_DIFF_TO_COMPARE = ::T.let(nil, ::T.untyped)
  NUMERIC_NAME = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveModel::ValidatePresenceOfMatcher
  def initialize(attribute); end

  def simple_description(); end
end

class Shoulda::Matchers::ActiveModel::ValidationMatcher
  def allow_blank(); end

  def allow_blank_does_not_match?(); end

  def allow_blank_matches?(); end

  def allow_value_matcher(value, message=T.unsafe(nil), &block); end

  def allows_value_of(value, message=T.unsafe(nil), &block); end

  def attribute(); end

  def context(); end

  def description(); end

  def disallow_value_matcher(value, message=T.unsafe(nil), &block); end

  def disallows_value_of(value, message=T.unsafe(nil), &block); end

  def does_not_match?(subject); end

  def expects_custom_validation_message?(); end

  def expects_strict?(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(attribute); end

  def last_submatcher_run(); end

  def matches?(subject); end

  def model(); end

  def on(context); end

  def strict(); end

  def subject(); end

  def with_message(expected_message); end
end

class Shoulda::Matchers::ActiveModel::ValidationMatcher::BuildDescription
  def call(); end

  def initialize(matcher, main_description); end

  def main_description(); end

  def matcher(); end
end

class Shoulda::Matchers::ActiveModel::ValidationMatcher::BuildDescription
  def self.call(matcher, main_description); end
end

class Shoulda::Matchers::ActiveModel::Validator
  def all_formatted_validation_error_messages(); end

  def attribute(); end

  def call(); end

  def captured_validation_exception?(); end

  def context(); end

  def has_messages?(); end

  def initialize(record, attribute, options=T.unsafe(nil)); end

  def record(); end

  def type_of_message_matched?(); end

  def validation_exception_message(); end
end

module Shoulda::Matchers::ActiveRecord
  def accept_nested_attributes_for(name); end

  def belong_to(name); end

  def define_enum_for(attribute_name); end

  def have_and_belong_to_many(name); end

  def have_db_column(column); end

  def have_db_index(columns); end

  def have_implicit_order_column(column_name); end

  def have_many(name); end

  def have_many_attached(name); end

  def have_one(name); end

  def have_one_attached(name); end

  def have_readonly_attribute(value); end

  def have_rich_text(rich_text_attribute); end

  def have_secure_token(token_attribute=T.unsafe(nil)); end

  def serialize(name); end

  def validate_uniqueness_of(attr); end
end

class Shoulda::Matchers::ActiveRecord::AcceptNestedAttributesForMatcher
  def allow_destroy(allow_destroy); end

  def allow_destroy_correct?(); end

  def config(); end

  def description(); end

  def exists?(); end

  def expectation(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(name); end

  def limit(limit); end

  def limit_correct?(); end

  def matches?(subject); end

  def model_class(); end

  def model_config(); end

  def should_or_should_not(value); end

  def update_only(update_only); end

  def update_only_correct?(); end

  def verify_option_is_correct(option, failure_message); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatcher
  def actual_foreign_key(); end

  def add_submatcher(matcher_class, *args); end

  def associated_class(*arg, **arg1, &arg2); end

  def association_exists?(); end

  def autosave(autosave); end

  def autosave_correct?(); end

  def belongs_foreign_key_missing?(); end

  def belongs_to_required_by_default?(); end

  def class_exists?(); end

  def class_has_foreign_key?(klass); end

  def class_name(class_name); end

  def class_name_correct?(); end

  def column_names_for(klass); end

  def conditions(conditions); end

  def conditions_correct?(); end

  def counter_cache(counter_cache=T.unsafe(nil)); end

  def dependent(dependent); end

  def description(); end

  def expectation(); end

  def failing_submatchers(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def foreign_key_correct?(); end

  def foreign_key_exists?(); end

  def foreign_key_failure_message(klass, foreign_key); end

  def foreign_key_reflection(); end

  def has_column?(klass, column); end

  def has_foreign_key_missing?(); end

  def index_errors(index_errors); end

  def index_errors_correct?(); end

  def initialize(macro, name); end

  def inverse_of(inverse_of); end

  def join_table(join_table_name); end

  def join_table_correct?(); end

  def join_table_matcher(); end

  def join_table_name(); end

  def macro(); end

  def macro_correct?(); end

  def macro_description(); end

  def macro_supports_primary_key?(); end

  def matches?(subject); end

  def missing(); end

  def missing_options(); end

  def missing_options_for_failing_submatchers(); end

  def model_class(*arg, **arg1, &arg2); end

  def name(); end

  def option_verifier(); end

  def optional(optional=T.unsafe(nil)); end

  def options(); end

  def order(order); end

  def polymorphic?(*arg, **arg1, &arg2); end

  def primary_key_correct?(klass); end

  def primary_key_exists?(); end

  def reflection(*arg, **arg1, &arg2); end

  def reflector(); end

  def remove_submatcher(matcher_class); end

  def required(required=T.unsafe(nil)); end

  def source(source); end

  def subject(); end

  def submatchers(); end

  def submatchers_match?(); end

  def through(through); end

  def through?(*arg, **arg1, &arg2); end

  def touch(touch=T.unsafe(nil)); end

  def touch_correct?(); end

  def validate(validate=T.unsafe(nil)); end

  def validate_correct?(); end

  def validate_foreign_key(klass); end

  def validate_inverse_of_through_association(); end

  def with_foreign_key(foreign_key); end

  def with_primary_key(primary_key); end

  def without_validating_presence(); end
  MACROS = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::CounterCacheMatcher
  def counter_cache(); end

  def counter_cache=(counter_cache); end

  def description(); end

  def initialize(counter_cache, name); end

  def matches?(subject); end

  def missing_option(); end

  def missing_option=(missing_option); end

  def name(); end

  def name=(name); end

  def option_verifier(); end

  def subject(); end

  def subject=(subject); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::DependentMatcher
  def dependent(); end

  def dependent=(dependent); end

  def description(); end

  def initialize(dependent, name); end

  def matches?(subject); end

  def missing_option(); end

  def missing_option=(missing_option); end

  def name(); end

  def name=(name); end

  def subject(); end

  def subject=(subject); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::InverseOfMatcher
  def description(); end

  def initialize(inverse_of, name); end

  def inverse_of(); end

  def inverse_of=(inverse_of); end

  def matches?(subject); end

  def missing_option(); end

  def missing_option=(missing_option); end

  def name(); end

  def name=(name); end

  def option_verifier(); end

  def subject(); end

  def subject=(subject); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::JoinTableMatcher
  def associated_class(*arg, **arg1, &arg2); end

  def association_foreign_key(*arg, **arg1, &arg2); end

  def association_matcher(); end

  def connection(*arg, **arg1, &arg2); end

  def failure_message(); end

  def foreign_key(*arg, **arg1, &arg2); end

  def initialize(association_matcher, reflector); end

  def join_table_exists?(); end

  def join_table_has_correct_columns?(); end

  def join_table_name(*arg, **arg1, &arg2); end

  def join_table_option_correct?(); end

  def matches?(_subject); end

  def missing_option(); end

  def model_class(*arg, **arg1, &arg2); end

  def name(*arg, **arg1, &arg2); end

  def option_verifier(*arg, **arg1, &arg2); end

  def options(*arg, **arg1, &arg2); end

  def reflector(); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::ModelReflection
  def associated_class(); end

  def association_foreign_key(); end

  def association_relation(related_instance); end

  def foreign_key(); end

  def has_and_belongs_to_many_name(); end

  def initialize(reflection); end

  def join_table_name(); end

  def polymorphic?(); end

  def reflection(); end

  def subject(); end

  def through?(); end

  def validate_inverse_of_through_association!(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::ModelReflector
  def associated_class(*arg, **arg1, &arg2); end

  def association_foreign_key(*arg, **arg1, &arg2); end

  def association_relation(); end

  def build_relation_with_clause(name, value); end

  def extract_relation_clause_from(relation, name); end

  def foreign_key(*arg, **arg1, &arg2); end

  def has_and_belongs_to_many_name(*arg, **arg1, &arg2); end

  def initialize(subject, name); end

  def join_table_name(*arg, **arg1, &arg2); end

  def model_class(); end

  def name(); end

  def polymorphic?(*arg, **arg1, &arg2); end

  def reflect_on_association(name); end

  def reflection(); end

  def subject(); end

  def through?(*arg, **arg1, &arg2); end

  def validate_inverse_of_through_association!(*arg, **arg1, &arg2); end

  def value_as_sql(value); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::OptionVerifier
  def actual_value_for(name); end

  def actual_value_for_class_name(); end

  def actual_value_for_option(name); end

  def actual_value_for_relation_clause(name); end

  def correct_for?(*args); end

  def correct_for_boolean?(name, expected_value); end

  def correct_for_constant?(name, expected_unresolved_value); end

  def correct_for_hash?(name, expected_value); end

  def correct_for_relation_clause?(name, expected_value); end

  def correct_for_string?(name, expected_value); end

  def expected_value_for(type, name, value); end

  def expected_value_for_constant(name); end

  def expected_value_for_relation_clause(name, value); end

  def initialize(reflector); end

  def reflection(*arg, **arg1, &arg2); end

  def reflector(); end

  def type_cast(type, value); end
  DEFAULT_VALUE_OF_OPTIONS = ::T.let(nil, ::T.untyped)
  RELATION_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::OptionalMatcher
  def description(); end

  def initialize(attribute_name, optional); end

  def matches?(subject); end

  def missing_option(); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::OrderMatcher
  def description(); end

  def initialize(order, name); end

  def matches?(subject); end

  def missing_option(); end

  def missing_option=(missing_option); end

  def name(); end

  def name=(name); end

  def option_verifier(); end

  def order(); end

  def order=(order); end

  def subject(); end

  def subject=(subject); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::RequiredMatcher
  def description(); end

  def initialize(attribute_name, required); end

  def matches?(subject); end

  def missing_option(); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::SourceMatcher
  def description(); end

  def initialize(source, name); end

  def matches?(subject); end

  def missing_option(); end

  def missing_option=(missing_option); end

  def name(); end

  def name=(name); end

  def option_verifier(); end

  def source(); end

  def source=(source); end

  def subject(); end

  def subject=(subject); end
end

class Shoulda::Matchers::ActiveRecord::AssociationMatchers::ThroughMatcher
  def association_set_properly?(); end

  def description(); end

  def initialize(through, name); end

  def matches?(subject); end

  def missing_option(); end

  def missing_option=(missing_option); end

  def name(); end

  def name=(name); end

  def option_verifier(); end

  def subject(); end

  def subject=(subject); end

  def through(); end

  def through=(through); end

  def through_association_correct?(); end

  def through_association_exists?(); end

  def through_reflection(); end
end

class Shoulda::Matchers::ActiveRecord::DefineEnumForMatcher
  def backed_by_column_of_type(expected_column_type); end

  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(attribute_name); end

  def matches?(subject); end

  def with(expected_enum_values); end

  def with_prefix(expected_prefix=T.unsafe(nil)); end

  def with_suffix(expected_suffix=T.unsafe(nil)); end

  def with_values(expected_enum_values); end
end

class Shoulda::Matchers::ActiveRecord::HaveAttachedMatcher
  def description(); end

  def expectation(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(macro, name); end

  def matches?(subject); end

  def name(); end
end

class Shoulda::Matchers::ActiveRecord::HaveDbColumnMatcher
  def actual_primary?(); end

  def actual_scale(); end

  def column_exists?(); end

  def correct_array?(); end

  def correct_column_type?(); end

  def correct_default?(); end

  def correct_limit?(); end

  def correct_null?(); end

  def correct_precision?(); end

  def correct_primary?(); end

  def correct_scale?(); end

  def description(); end

  def expectation(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(column); end

  def matched_column(); end

  def matches?(subject); end

  def model_class(); end

  def of_type(column_type); end

  def validate_options(opts); end

  def with_options(opts=T.unsafe(nil)); end
  OPTIONS = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveRecord::HaveDbColumnMatcher::DecoratedColumn
  def initialize(model, column); end

  def model(); end

  def primary?(); end

  def type_cast_default(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::ActiveRecord::HaveDbIndexMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(columns); end

  def matches?(subject); end

  def unique(unique=T.unsafe(nil)); end
end

class Shoulda::Matchers::ActiveRecord::HaveImplicitOrderColumnMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(column_name); end

  def matches?(subject); end
end

class Shoulda::Matchers::ActiveRecord::HaveReadonlyAttributeMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(attribute); end

  def matches?(subject); end
end

class Shoulda::Matchers::ActiveRecord::HaveRichTextMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(rich_text_attribute); end

  def matches?(subject); end
end

class Shoulda::Matchers::ActiveRecord::HaveSecureTokenMatcher
  def description(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def ignoring_check_for_db_index(); end

  def initialize(token_attribute); end

  def matches?(subject); end

  def token_attribute(); end
end

class Shoulda::Matchers::ActiveRecord::SerializeMatcher
  def as(type); end

  def as_instance_of(type); end

  def attribute_is_serialized?(); end

  def class_valid?(); end

  def description(); end

  def expectation(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(name); end

  def instance_class_valid?(); end

  def matches?(subject); end

  def model(); end

  def model_class(); end

  def serialization_coder(); end

  def serialization_valid?(); end

  def type_valid?(); end
end

class Shoulda::Matchers::ActiveRecord::Uniqueness::Model
  def already_exists?(); end

  def initialize(name, namespace); end

  def name(); end

  def namespace(); end

  def next(); end

  def symlink_to(parent); end
end

class Shoulda::Matchers::ActiveRecord::Uniqueness::Model
  def self.next_unique_copy_of(model_name, namespace); end
end

class Shoulda::Matchers::ActiveRecord::Uniqueness::Namespace
  def clear(); end

  def constant(); end

  def has?(name); end

  def initialize(constant); end

  def set(name, value); end
end

class Shoulda::Matchers::ActiveRecord::Uniqueness::TestModelCreator
  def create(); end

  def initialize(model_name, namespace); end

  def model_name(); end

  def namespace(); end
end

class Shoulda::Matchers::ActiveRecord::Uniqueness::TestModelCreator
  def self.create(model_name, namespace); end
end

module Shoulda::Matchers::ActiveRecord::Uniqueness::TestModels
  def self.create(model_name); end

  def self.remove_all(); end

  def self.root_namespace(); end
end

class Shoulda::Matchers::ActiveRecord::ValidateUniquenessOfMatcher
  def allow_nil(); end

  def case_insensitive(); end

  def does_not_match?(given_record); end

  def expects_to_allow_nil?(); end

  def ignoring_case_sensitivity(); end

  def matches?(given_record); end

  def scoped_to(*scopes); end

  def simple_description(); end
end

class Shoulda::Matchers::ActiveRecord::ValidateUniquenessOfMatcher::AttributeSetters
  def +(other_attribute_setters); end

  def <<(given_attribute_setter); end

  def each(&block); end

  def last(); end
end

class Shoulda::Matchers::ActiveRecord::ValidateUniquenessOfMatcher::ExistingRecordInvalid
  def underlying_exception(); end

  def underlying_exception=(underlying_exception); end
end

class Shoulda::Matchers::ActiveRecord::ValidateUniquenessOfMatcher::NonCaseSwappableValueError
  def attribute(); end

  def attribute=(attribute); end

  def model(); end

  def model=(model); end

  def value(); end

  def value=(value); end
end

class Shoulda::Matchers::Configuration
  def integrate(&block); end

  def integrations(); end
end

class Shoulda::Matchers::Document
  def document(); end

  def indent(); end

  def initialize(document, indent: T.unsafe(nil)); end

  def wrap(); end
end

class Shoulda::Matchers::Doublespeak::Double
  def activate(); end

  def activated?(); end

  def call_original_method(call); end

  def calls(); end

  def deactivate(); end

  def implementation(); end

  def initialize(world, klass, method_name, implementation); end

  def klass(); end

  def method_name(); end

  def original_method(); end

  def record_call(call); end

  def replace_method_with_double(); end

  def restore_original_method(); end

  def store_original_method(); end

  def to_return(value=T.unsafe(nil), &block); end

  def world(); end
end

class Shoulda::Matchers::Doublespeak::DoubleCollection
  def activate(); end

  def calls_by_method_name(); end

  def calls_to(method_name); end

  def deactivate(); end

  def doubles_by_method_name(); end

  def initialize(world, klass); end

  def klass(); end

  def register_double(method_name, implementation_type); end

  def register_proxy(method_name); end

  def register_stub(method_name); end

  def world(); end
end

module Shoulda::Matchers::Doublespeak::DoubleImplementationRegistry
  def self.find(type); end

  def self.register(klass, type); end
end

class Shoulda::Matchers::Doublespeak::MethodCall
  def ==(other); end

  def args(); end

  def block(); end

  def caller(); end

  def double(); end

  def initialize(args); end

  def method_name(); end

  def object(); end

  def return_value(); end

  def return_value=(return_value); end

  def to_hash(); end

  def with_return_value(return_value); end
end

class Shoulda::Matchers::Doublespeak::ObjectDouble
  def calls(); end

  def calls_by_method_name(); end

  def calls_to(method_name); end

  def method_missing(method_name, *args, &block); end

  def respond_to?(_name, _include_private=T.unsafe(nil)); end
end

class Shoulda::Matchers::Doublespeak::ProxyImplementation
  def call(call); end

  def initialize(stub_implementation); end

  def returns(*args, **arg, &block); end

  def stub_implementation(); end
end

class Shoulda::Matchers::Doublespeak::ProxyImplementation
  def self.create(); end
end

class Shoulda::Matchers::Doublespeak::StubImplementation
  def call(call); end

  def implementation(); end

  def returns(value=T.unsafe(nil), &block); end
end

class Shoulda::Matchers::Doublespeak::StubImplementation
  def self.create(); end
end

class Shoulda::Matchers::Doublespeak::World
  def double_collection_for(klass); end

  def doubles_activated?(); end

  def original_method_for(klass, method_name); end

  def store_original_method_for(klass, method_name); end

  def with_doubles_activated(); end
end

module Shoulda::Matchers::Doublespeak
  def self.debug(&block); end

  def self.debugging_enabled?(); end

  def self.double_collection_for(*args, **arg, &block); end

  def self.with_doubles_activated(*args, **arg, &block); end

  def self.world(); end
end

class Shoulda::Matchers::Error
  def initialize(*args); end
end

class Shoulda::Matchers::Error
  def self.create(attributes); end
end

module Shoulda::Matchers::Independent
  def delegate_method(delegating_method); end
end

class Shoulda::Matchers::Independent::DelegateMethodMatcher
  def allow_nil(); end

  def as(delegate_method); end

  def build_delegating_method_prefix(prefix); end

  def call_delegating_method_with_delegate_method_returning(value); end

  def calls_on_delegate_object(); end

  def calls_to_delegate_method(); end

  def class_or_instance_method_indicator(); end

  def class_under_test(); end

  def context(); end

  def delegate_method(); end

  def delegate_object(); end

  def delegate_object_reader_method(); end

  def delegate_object_received_call?(); end

  def delegate_object_received_call_with_delegated_arguments?(); end

  def delegated_arguments(); end

  def delegating_method(); end

  def description(); end

  def ensure_delegate_object_has_been_specified!(); end

  def expects_to_allow_nil_delegate_object?(); end

  def failed_to_allow_nil_delegate_object?(); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def formatted_calls_on_delegate_object(); end

  def formatted_delegate_method(options=T.unsafe(nil)); end

  def formatted_delegate_object_reader_method_name(options=T.unsafe(nil)); end

  def formatted_delegating_method_name(options=T.unsafe(nil)); end

  def formatted_method_name_for(method_name, options); end

  def in_context(context); end

  def initialize(delegating_method); end

  def matches?(subject); end

  def method(); end

  def possible_class_under_test(options); end

  def register_subject_double_collection_to(returned_value); end

  def subject(); end

  def subject_delegates_to_delegate_object_correctly?(); end

  def subject_handles_nil_delegate_object?(); end

  def subject_has_delegate_object_reader_method?(); end

  def subject_has_delegating_method?(); end

  def subject_is_a_class?(); end

  def to(delegate_object_reader_method); end

  def with_arguments(*arguments); end

  def with_prefix(prefix=T.unsafe(nil)); end
end

class Shoulda::Matchers::Integrations::Configuration
  def apply(); end

  def initialize(&block); end

  def library(name); end

  def test_framework(name); end

  def test_frameworks(); end
end

class Shoulda::Matchers::Integrations::Configuration
  def self.apply(&block); end
end

module Shoulda::Matchers::Integrations::Inclusion
  def include_into(mod, *other_mods, &block); end
end

class Shoulda::Matchers::Integrations::Libraries::ActionController
  def integrate_with(test_framework); end
end

class Shoulda::Matchers::Integrations::Libraries::ActiveModel
  def integrate_with(test_framework); end
end

class Shoulda::Matchers::Integrations::Libraries::ActiveRecord
  def integrate_with(test_framework); end
end

class Shoulda::Matchers::Integrations::Libraries::MissingLibrary
  def integrate_with(test_framework); end

  def rails?(); end
end

class Shoulda::Matchers::Integrations::Libraries::Rails
  def integrate_with(test_framework); end
  SUB_LIBRARIES = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::Integrations::Libraries::Routing
  def integrate_with(test_framework); end
end

module Shoulda::Matchers::Integrations::Rails
  def rails?(); end
end

class Shoulda::Matchers::Integrations::Registry
  def find!(name); end

  def register(klass, name); end
end

class Shoulda::Matchers::Integrations::TestFrameworks::ActiveSupportTestCase
  def configuration(); end

  def include(*modules, **_options); end

  def n_unit?(); end

  def validate!(); end
end

class Shoulda::Matchers::Integrations::TestFrameworks::Minitest4
  def include(*modules, **_options); end

  def n_unit?(); end

  def validate!(); end
end

class Shoulda::Matchers::Integrations::TestFrameworks::Minitest5
  def include(*modules, **_options); end

  def n_unit?(); end

  def validate!(); end
end

class Shoulda::Matchers::Integrations::TestFrameworks::MissingTestFramework
  def include(*modules, **options); end

  def n_unit?(); end

  def validate!(); end
end

class Shoulda::Matchers::Integrations::TestFrameworks::Rspec
  def include(*modules, **options); end

  def n_unit?(); end

  def validate!(); end
end

class Shoulda::Matchers::Integrations::TestFrameworks::TestUnit
  def include(*modules, **_options); end

  def n_unit?(); end

  def validate!(); end
end

module Shoulda::Matchers::Integrations
  def self.find_library!(name); end

  def self.find_test_framework!(name); end

  def self.register_library(klass, name); end

  def self.register_test_framework(klass, name); end
end

class Shoulda::Matchers::Line
  def indent(); end

  def indentation(); end

  def initialize(line, indent: T.unsafe(nil)); end

  def line_to_wrap(); end

  def original_line(); end

  def previous_line_to_wrap(); end

  def wrap(); end
  OFFSETS = ::T.let(nil, ::T.untyped)
end

class Shoulda::Matchers::MatcherContext
  def context(); end

  def initialize(context); end

  def subject_is_a_class?(); end
end

class Shoulda::Matchers::Paragraph
  def indent(); end

  def initialize(paragraph, indent: T.unsafe(nil)); end

  def paragraph(); end

  def wrap(); end
end

module Shoulda::Matchers::RailsShim
  def self.action_pack_version(); end

  def self.active_record_gte_6?(); end

  def self.active_record_version(); end

  def self.attribute_serialization_coder_for(model, attribute_name); end

  def self.attribute_type_for(model, attribute_name); end

  def self.attribute_types_for(model); end

  def self.digestible_attributes_in(record); end

  def self.generate_validation_message(record, attribute, type, model_name, options); end

  def self.has_secure_password?(record, attribute_name); end

  def self.parent_of(mod); end

  def self.secure_password_module(); end

  def self.serialized_attributes_for(model); end

  def self.supports_full_attributes_api?(model); end

  def self.verb_for_update(); end
end

module Shoulda::Matchers::Routing
  def route(method, path, port: T.unsafe(nil)); end
end

class Shoulda::Matchers::Text
  def indented?(); end

  def list_item?(); end

  def match_as_list_item(); end
  LIST_ITEM_REGEXP = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::Util
  MAXIMUM_LENGTH_OF_VALUE_TO_DISPLAY = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers::Util
  def self.a_or_an(next_word); end

  def self.deconstantize(path); end

  def self.dummy_value_for(column_type, array: T.unsafe(nil)); end

  def self.indent(string, width); end

  def self.inspect_hash(hash); end

  def self.inspect_range(range); end

  def self.inspect_value(value); end

  def self.inspect_values(values); end

  def self.safe_constantize(camel_cased_word); end
end

module Shoulda::Matchers::WordWrap
  def word_wrap(document, options=T.unsafe(nil)); end
  TERMINAL_WIDTH = ::T.let(nil, ::T.untyped)
end

module Shoulda::Matchers
  def self.assertion_exception_class(); end

  def self.assertion_exception_class=(assertion_exception_class); end

  def self.configuration(); end

  def self.configure(); end

  def self.integrations(); end

  def self.warn(message); end

  def self.warn_about_deprecated_method(old_method, new_method); end
end

class SignedGlobalID
  def expires_at(); end

  def purpose(); end

  def to_h(); end

  def to_s(); end

  def verifier(); end
end

class SignedGlobalID
  def self.expires_in(); end

  def self.expires_in=(expires_in); end

  def self.parse(sgid, options=T.unsafe(nil)); end

  def self.pick_purpose(options); end

  def self.pick_verifier(options); end

  def self.verifier(); end

  def self.verifier=(verifier); end
end

module Signet
  VERSION = ::T.let(nil, ::T.untyped)
end

module Signet::OAuth2
  AUTH_METADATA_KEY = ::T.let(nil, ::T.untyped)
end

class Signet::OAuth2::Client
  OOB_MODES = ::T.let(nil, ::T.untyped)
end

class SimpleDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Singleton
  def _dump(depth=T.unsafe(nil)); end

  def clone(); end

  def dup(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

module Singleton::SingletonClassMethods
  def _load(str); end

  def clone(); end
end

module Singleton
  def self.__init__(klass); end
end

module Skiptrace
  VERSION = ::T.let(nil, ::T.untyped)
end

class Skiptrace::BindingLocations
  def initialize(locations, bindings); end
end

class Skiptrace::Location
  def absolute_path(); end

  def base_label(); end

  def initialize(location, binding); end

  def label(); end

  def lineno(); end
end

module Skiptrace
  def self.current_bindings(); end
end

class Socket
  AF_CCITT = ::T.let(nil, ::T.untyped)
  AF_CHAOS = ::T.let(nil, ::T.untyped)
  AF_CNT = ::T.let(nil, ::T.untyped)
  AF_COIP = ::T.let(nil, ::T.untyped)
  AF_DATAKIT = ::T.let(nil, ::T.untyped)
  AF_DECnet = ::T.let(nil, ::T.untyped)
  AF_DLI = ::T.let(nil, ::T.untyped)
  AF_E164 = ::T.let(nil, ::T.untyped)
  AF_ECMA = ::T.let(nil, ::T.untyped)
  AF_HYLINK = ::T.let(nil, ::T.untyped)
  AF_IMPLINK = ::T.let(nil, ::T.untyped)
  AF_ISO = ::T.let(nil, ::T.untyped)
  AF_LAT = ::T.let(nil, ::T.untyped)
  AF_LINK = ::T.let(nil, ::T.untyped)
  AF_NATM = ::T.let(nil, ::T.untyped)
  AF_NDRV = ::T.let(nil, ::T.untyped)
  AF_NETBIOS = ::T.let(nil, ::T.untyped)
  AF_NS = ::T.let(nil, ::T.untyped)
  AF_OSI = ::T.let(nil, ::T.untyped)
  AF_PPP = ::T.let(nil, ::T.untyped)
  AF_PUP = ::T.let(nil, ::T.untyped)
  AF_SIP = ::T.let(nil, ::T.untyped)
  AF_SYSTEM = ::T.let(nil, ::T.untyped)
  AF_VSOCK = ::T.let(nil, ::T.untyped)
  AI_DEFAULT = ::T.let(nil, ::T.untyped)
  AI_MASK = ::T.let(nil, ::T.untyped)
  AI_V4MAPPED_CFG = ::T.let(nil, ::T.untyped)
  EAI_BADHINTS = ::T.let(nil, ::T.untyped)
  EAI_MAX = ::T.let(nil, ::T.untyped)
  EAI_PROTOCOL = ::T.let(nil, ::T.untyped)
  IFF_ALTPHYS = ::T.let(nil, ::T.untyped)
  IFF_LINK0 = ::T.let(nil, ::T.untyped)
  IFF_LINK1 = ::T.let(nil, ::T.untyped)
  IFF_LINK2 = ::T.let(nil, ::T.untyped)
  IFF_OACTIVE = ::T.let(nil, ::T.untyped)
  IFF_SIMPLEX = ::T.let(nil, ::T.untyped)
  IPPROTO_EON = ::T.let(nil, ::T.untyped)
  IPPROTO_GGP = ::T.let(nil, ::T.untyped)
  IPPROTO_HELLO = ::T.let(nil, ::T.untyped)
  IPPROTO_MAX = ::T.let(nil, ::T.untyped)
  IPPROTO_ND = ::T.let(nil, ::T.untyped)
  IPPROTO_XTP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_USE_MIN_MTU = ::T.let(nil, ::T.untyped)
  IP_DONTFRAG = ::T.let(nil, ::T.untyped)
  IP_PORTRANGE = ::T.let(nil, ::T.untyped)
  IP_RECVDSTADDR = ::T.let(nil, ::T.untyped)
  IP_RECVIF = ::T.let(nil, ::T.untyped)
  LOCAL_PEERCRED = ::T.let(nil, ::T.untyped)
  MSG_EOF = ::T.let(nil, ::T.untyped)
  MSG_FLUSH = ::T.let(nil, ::T.untyped)
  MSG_HAVEMORE = ::T.let(nil, ::T.untyped)
  MSG_HOLD = ::T.let(nil, ::T.untyped)
  MSG_RCVMORE = ::T.let(nil, ::T.untyped)
  MSG_SEND = ::T.let(nil, ::T.untyped)
  PF_CCITT = ::T.let(nil, ::T.untyped)
  PF_CHAOS = ::T.let(nil, ::T.untyped)
  PF_CNT = ::T.let(nil, ::T.untyped)
  PF_COIP = ::T.let(nil, ::T.untyped)
  PF_DATAKIT = ::T.let(nil, ::T.untyped)
  PF_DECnet = ::T.let(nil, ::T.untyped)
  PF_DLI = ::T.let(nil, ::T.untyped)
  PF_ECMA = ::T.let(nil, ::T.untyped)
  PF_HYLINK = ::T.let(nil, ::T.untyped)
  PF_IMPLINK = ::T.let(nil, ::T.untyped)
  PF_ISO = ::T.let(nil, ::T.untyped)
  PF_LAT = ::T.let(nil, ::T.untyped)
  PF_LINK = ::T.let(nil, ::T.untyped)
  PF_NATM = ::T.let(nil, ::T.untyped)
  PF_NDRV = ::T.let(nil, ::T.untyped)
  PF_NETBIOS = ::T.let(nil, ::T.untyped)
  PF_NS = ::T.let(nil, ::T.untyped)
  PF_OSI = ::T.let(nil, ::T.untyped)
  PF_PIP = ::T.let(nil, ::T.untyped)
  PF_PPP = ::T.let(nil, ::T.untyped)
  PF_PUP = ::T.let(nil, ::T.untyped)
  PF_RTIP = ::T.let(nil, ::T.untyped)
  PF_SIP = ::T.let(nil, ::T.untyped)
  PF_SYSTEM = ::T.let(nil, ::T.untyped)
  PF_VSOCK = ::T.let(nil, ::T.untyped)
  PF_XTP = ::T.let(nil, ::T.untyped)
  SCM_CREDS = ::T.let(nil, ::T.untyped)
  SO_DONTTRUNC = ::T.let(nil, ::T.untyped)
  SO_NKE = ::T.let(nil, ::T.untyped)
  SO_NOSIGPIPE = ::T.let(nil, ::T.untyped)
  SO_NREAD = ::T.let(nil, ::T.untyped)
  SO_USELOOPBACK = ::T.let(nil, ::T.untyped)
  SO_WANTMORE = ::T.let(nil, ::T.untyped)
  SO_WANTOOBFLAG = ::T.let(nil, ::T.untyped)
  TCP_NOOPT = ::T.let(nil, ::T.untyped)
  TCP_NOPUSH = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  AF_CCITT = ::T.let(nil, ::T.untyped)
  AF_CHAOS = ::T.let(nil, ::T.untyped)
  AF_CNT = ::T.let(nil, ::T.untyped)
  AF_COIP = ::T.let(nil, ::T.untyped)
  AF_DATAKIT = ::T.let(nil, ::T.untyped)
  AF_DECnet = ::T.let(nil, ::T.untyped)
  AF_DLI = ::T.let(nil, ::T.untyped)
  AF_E164 = ::T.let(nil, ::T.untyped)
  AF_ECMA = ::T.let(nil, ::T.untyped)
  AF_HYLINK = ::T.let(nil, ::T.untyped)
  AF_IMPLINK = ::T.let(nil, ::T.untyped)
  AF_ISO = ::T.let(nil, ::T.untyped)
  AF_LAT = ::T.let(nil, ::T.untyped)
  AF_LINK = ::T.let(nil, ::T.untyped)
  AF_NATM = ::T.let(nil, ::T.untyped)
  AF_NDRV = ::T.let(nil, ::T.untyped)
  AF_NETBIOS = ::T.let(nil, ::T.untyped)
  AF_NS = ::T.let(nil, ::T.untyped)
  AF_OSI = ::T.let(nil, ::T.untyped)
  AF_PPP = ::T.let(nil, ::T.untyped)
  AF_PUP = ::T.let(nil, ::T.untyped)
  AF_SIP = ::T.let(nil, ::T.untyped)
  AF_SYSTEM = ::T.let(nil, ::T.untyped)
  AF_VSOCK = ::T.let(nil, ::T.untyped)
  AI_DEFAULT = ::T.let(nil, ::T.untyped)
  AI_MASK = ::T.let(nil, ::T.untyped)
  AI_V4MAPPED_CFG = ::T.let(nil, ::T.untyped)
  EAI_BADHINTS = ::T.let(nil, ::T.untyped)
  EAI_MAX = ::T.let(nil, ::T.untyped)
  EAI_PROTOCOL = ::T.let(nil, ::T.untyped)
  IFF_ALTPHYS = ::T.let(nil, ::T.untyped)
  IFF_LINK0 = ::T.let(nil, ::T.untyped)
  IFF_LINK1 = ::T.let(nil, ::T.untyped)
  IFF_LINK2 = ::T.let(nil, ::T.untyped)
  IFF_OACTIVE = ::T.let(nil, ::T.untyped)
  IFF_SIMPLEX = ::T.let(nil, ::T.untyped)
  IPPROTO_EON = ::T.let(nil, ::T.untyped)
  IPPROTO_GGP = ::T.let(nil, ::T.untyped)
  IPPROTO_HELLO = ::T.let(nil, ::T.untyped)
  IPPROTO_MAX = ::T.let(nil, ::T.untyped)
  IPPROTO_ND = ::T.let(nil, ::T.untyped)
  IPPROTO_XTP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_USE_MIN_MTU = ::T.let(nil, ::T.untyped)
  IP_DONTFRAG = ::T.let(nil, ::T.untyped)
  IP_PORTRANGE = ::T.let(nil, ::T.untyped)
  IP_RECVDSTADDR = ::T.let(nil, ::T.untyped)
  IP_RECVIF = ::T.let(nil, ::T.untyped)
  LOCAL_PEERCRED = ::T.let(nil, ::T.untyped)
  MSG_EOF = ::T.let(nil, ::T.untyped)
  MSG_FLUSH = ::T.let(nil, ::T.untyped)
  MSG_HAVEMORE = ::T.let(nil, ::T.untyped)
  MSG_HOLD = ::T.let(nil, ::T.untyped)
  MSG_RCVMORE = ::T.let(nil, ::T.untyped)
  MSG_SEND = ::T.let(nil, ::T.untyped)
  PF_CCITT = ::T.let(nil, ::T.untyped)
  PF_CHAOS = ::T.let(nil, ::T.untyped)
  PF_CNT = ::T.let(nil, ::T.untyped)
  PF_COIP = ::T.let(nil, ::T.untyped)
  PF_DATAKIT = ::T.let(nil, ::T.untyped)
  PF_DECnet = ::T.let(nil, ::T.untyped)
  PF_DLI = ::T.let(nil, ::T.untyped)
  PF_ECMA = ::T.let(nil, ::T.untyped)
  PF_HYLINK = ::T.let(nil, ::T.untyped)
  PF_IMPLINK = ::T.let(nil, ::T.untyped)
  PF_ISO = ::T.let(nil, ::T.untyped)
  PF_LAT = ::T.let(nil, ::T.untyped)
  PF_LINK = ::T.let(nil, ::T.untyped)
  PF_NATM = ::T.let(nil, ::T.untyped)
  PF_NDRV = ::T.let(nil, ::T.untyped)
  PF_NETBIOS = ::T.let(nil, ::T.untyped)
  PF_NS = ::T.let(nil, ::T.untyped)
  PF_OSI = ::T.let(nil, ::T.untyped)
  PF_PIP = ::T.let(nil, ::T.untyped)
  PF_PPP = ::T.let(nil, ::T.untyped)
  PF_PUP = ::T.let(nil, ::T.untyped)
  PF_RTIP = ::T.let(nil, ::T.untyped)
  PF_SIP = ::T.let(nil, ::T.untyped)
  PF_SYSTEM = ::T.let(nil, ::T.untyped)
  PF_VSOCK = ::T.let(nil, ::T.untyped)
  PF_XTP = ::T.let(nil, ::T.untyped)
  SCM_CREDS = ::T.let(nil, ::T.untyped)
  SO_DONTTRUNC = ::T.let(nil, ::T.untyped)
  SO_NKE = ::T.let(nil, ::T.untyped)
  SO_NOSIGPIPE = ::T.let(nil, ::T.untyped)
  SO_NREAD = ::T.let(nil, ::T.untyped)
  SO_USELOOPBACK = ::T.let(nil, ::T.untyped)
  SO_WANTMORE = ::T.let(nil, ::T.untyped)
  SO_WANTOOBFLAG = ::T.let(nil, ::T.untyped)
  TCP_NOOPT = ::T.let(nil, ::T.untyped)
  TCP_NOPUSH = ::T.let(nil, ::T.untyped)
end

class Space
  include ::Space::GeneratedAttributeMethods
  include ::Space::GeneratedAssociationMethods
  include ::Paranoia
  include ::DefaultValueFor::InstanceMethods
  def _default_attribute_values(); end

  def _default_attribute_values=(_default_attribute_values); end

  def _default_attribute_values?(); end

  def _default_attribute_values_not_allowing_nil(); end

  def _default_attribute_values_not_allowing_nil=(_default_attribute_values_not_allowing_nil); end

  def _default_attribute_values_not_allowing_nil?(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def autosave_associated_records_for_all_members(*args); end

  def autosave_associated_records_for_avatar_attachment(*args); end

  def autosave_associated_records_for_avatar_blob(*args); end

  def autosave_associated_records_for_blocks(*args); end

  def autosave_associated_records_for_members(*args); end

  def autosave_associated_records_for_owner(*args); end

  def autosave_associated_records_for_share_links(*args); end

  def autosave_associated_records_for_users(*args); end

  def destroy_without_paranoia(); end

  def paranoia_column=(paranoia_column); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(paranoia_sentinel_value); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end

  def validate_associated_records_for_all_members(*args); end

  def validate_associated_records_for_blocks(*args); end

  def validate_associated_records_for_members(*args); end

  def validate_associated_records_for_share_links(*args); end

  def validate_associated_records_for_users(*args); end
end

module Space::GeneratedAssociationMethods
  def all_member_ids(); end

  def all_member_ids=(ids); end

  def all_members(); end

  def all_members=(value); end

  def avatar(); end

  def avatar=(attachable); end

  def avatar_attachment(); end

  def avatar_attachment=(value); end

  def avatar_blob(); end

  def avatar_blob=(value); end

  def block_ids(); end

  def block_ids=(ids); end

  def blocks(); end

  def blocks=(value); end

  def build_avatar_attachment(*args, &block); end

  def build_avatar_blob(*args, &block); end

  def build_owner(*args, &block); end

  def create_avatar_attachment(*args, &block); end

  def create_avatar_attachment!(*args, &block); end

  def create_avatar_blob(*args, &block); end

  def create_avatar_blob!(*args, &block); end

  def create_owner(*args, &block); end

  def create_owner!(*args, &block); end

  def member_ids(); end

  def member_ids=(ids); end

  def members(); end

  def members=(value); end

  def owner(); end

  def owner=(value); end

  def owner_changed?(); end

  def owner_previously_changed?(); end

  def reload_avatar_attachment(); end

  def reload_avatar_blob(); end

  def reload_owner(); end

  def share_link_ids(); end

  def share_link_ids=(ids); end

  def share_links(); end

  def share_links=(value); end

  def user_ids(); end

  def user_ids=(ids); end

  def users(); end

  def users=(value); end
end

module Space::GeneratedAssociationMethods
end

module Space::GeneratedAttributeMethods
  def bio(); end

  def bio=(value); end

  def bio?(); end

  def bio_before_last_save(); end

  def bio_before_type_cast(); end

  def bio_came_from_user?(); end

  def bio_change(); end

  def bio_change_to_be_saved(); end

  def bio_changed?(**options); end

  def bio_for_database(); end

  def bio_in_database(); end

  def bio_previous_change(); end

  def bio_previously_changed?(**options); end

  def bio_previously_was(); end

  def bio_was(); end

  def bio_will_change!(); end

  def clear_bio_change(); end

  def clear_created_at_change(); end

  def clear_deleted_at_change(); end

  def clear_domain_change(); end

  def clear_id_change(); end

  def clear_invite_enable_change(); end

  def clear_invite_secret_change(); end

  def clear_name_change(); end

  def clear_owner_id_change(); end

  def clear_personal_change(); end

  def clear_updated_at_change(); end

  def created_at(); end

  def created_at=(value); end

  def created_at?(); end

  def created_at_before_last_save(); end

  def created_at_before_type_cast(); end

  def created_at_came_from_user?(); end

  def created_at_change(); end

  def created_at_change_to_be_saved(); end

  def created_at_changed?(**options); end

  def created_at_for_database(); end

  def created_at_in_database(); end

  def created_at_previous_change(); end

  def created_at_previously_changed?(**options); end

  def created_at_previously_was(); end

  def created_at_was(); end

  def created_at_will_change!(); end

  def deleted_at(); end

  def deleted_at=(value); end

  def deleted_at?(); end

  def deleted_at_before_last_save(); end

  def deleted_at_before_type_cast(); end

  def deleted_at_came_from_user?(); end

  def deleted_at_change(); end

  def deleted_at_change_to_be_saved(); end

  def deleted_at_changed?(**options); end

  def deleted_at_for_database(); end

  def deleted_at_in_database(); end

  def deleted_at_previous_change(); end

  def deleted_at_previously_changed?(**options); end

  def deleted_at_previously_was(); end

  def deleted_at_was(); end

  def deleted_at_will_change!(); end

  def domain(); end

  def domain=(value); end

  def domain?(); end

  def domain_before_last_save(); end

  def domain_before_type_cast(); end

  def domain_came_from_user?(); end

  def domain_change(); end

  def domain_change_to_be_saved(); end

  def domain_changed?(**options); end

  def domain_for_database(); end

  def domain_in_database(); end

  def domain_previous_change(); end

  def domain_previously_changed?(**options); end

  def domain_previously_was(); end

  def domain_was(); end

  def domain_will_change!(); end

  def id_before_last_save(); end

  def id_came_from_user?(); end

  def id_change(); end

  def id_change_to_be_saved(); end

  def id_changed?(**options); end

  def id_previous_change(); end

  def id_previously_changed?(**options); end

  def id_previously_was(); end

  def id_will_change!(); end

  def invite_enable(); end

  def invite_enable=(value); end

  def invite_enable?(); end

  def invite_enable_before_last_save(); end

  def invite_enable_before_type_cast(); end

  def invite_enable_came_from_user?(); end

  def invite_enable_change(); end

  def invite_enable_change_to_be_saved(); end

  def invite_enable_changed?(**options); end

  def invite_enable_for_database(); end

  def invite_enable_in_database(); end

  def invite_enable_previous_change(); end

  def invite_enable_previously_changed?(**options); end

  def invite_enable_previously_was(); end

  def invite_enable_was(); end

  def invite_enable_will_change!(); end

  def invite_secret(); end

  def invite_secret=(value); end

  def invite_secret?(); end

  def invite_secret_before_last_save(); end

  def invite_secret_before_type_cast(); end

  def invite_secret_came_from_user?(); end

  def invite_secret_change(); end

  def invite_secret_change_to_be_saved(); end

  def invite_secret_changed?(**options); end

  def invite_secret_for_database(); end

  def invite_secret_in_database(); end

  def invite_secret_previous_change(); end

  def invite_secret_previously_changed?(**options); end

  def invite_secret_previously_was(); end

  def invite_secret_was(); end

  def invite_secret_will_change!(); end

  def name(); end

  def name=(value); end

  def name?(); end

  def name_before_last_save(); end

  def name_before_type_cast(); end

  def name_came_from_user?(); end

  def name_change(); end

  def name_change_to_be_saved(); end

  def name_changed?(**options); end

  def name_for_database(); end

  def name_in_database(); end

  def name_previous_change(); end

  def name_previously_changed?(**options); end

  def name_previously_was(); end

  def name_was(); end

  def name_will_change!(); end

  def owner_id(); end

  def owner_id=(value); end

  def owner_id?(); end

  def owner_id_before_last_save(); end

  def owner_id_before_type_cast(); end

  def owner_id_came_from_user?(); end

  def owner_id_change(); end

  def owner_id_change_to_be_saved(); end

  def owner_id_changed?(**options); end

  def owner_id_for_database(); end

  def owner_id_in_database(); end

  def owner_id_previous_change(); end

  def owner_id_previously_changed?(**options); end

  def owner_id_previously_was(); end

  def owner_id_was(); end

  def owner_id_will_change!(); end

  def personal(); end

  def personal=(value); end

  def personal?(); end

  def personal_before_last_save(); end

  def personal_before_type_cast(); end

  def personal_came_from_user?(); end

  def personal_change(); end

  def personal_change_to_be_saved(); end

  def personal_changed?(**options); end

  def personal_for_database(); end

  def personal_in_database(); end

  def personal_previous_change(); end

  def personal_previously_changed?(**options); end

  def personal_previously_was(); end

  def personal_was(); end

  def personal_will_change!(); end

  def restore_bio!(); end

  def restore_created_at!(); end

  def restore_deleted_at!(); end

  def restore_domain!(); end

  def restore_id!(); end

  def restore_invite_enable!(); end

  def restore_invite_secret!(); end

  def restore_name!(); end

  def restore_owner_id!(); end

  def restore_personal!(); end

  def restore_updated_at!(); end

  def saved_change_to_bio(); end

  def saved_change_to_bio?(**options); end

  def saved_change_to_created_at(); end

  def saved_change_to_created_at?(**options); end

  def saved_change_to_deleted_at(); end

  def saved_change_to_deleted_at?(**options); end

  def saved_change_to_domain(); end

  def saved_change_to_domain?(**options); end

  def saved_change_to_id(); end

  def saved_change_to_id?(**options); end

  def saved_change_to_invite_enable(); end

  def saved_change_to_invite_enable?(**options); end

  def saved_change_to_invite_secret(); end

  def saved_change_to_invite_secret?(**options); end

  def saved_change_to_name(); end

  def saved_change_to_name?(**options); end

  def saved_change_to_owner_id(); end

  def saved_change_to_owner_id?(**options); end

  def saved_change_to_personal(); end

  def saved_change_to_personal?(**options); end

  def saved_change_to_updated_at(); end

  def saved_change_to_updated_at?(**options); end

  def updated_at(); end

  def updated_at=(value); end

  def updated_at?(); end

  def updated_at_before_last_save(); end

  def updated_at_before_type_cast(); end

  def updated_at_came_from_user?(); end

  def updated_at_change(); end

  def updated_at_change_to_be_saved(); end

  def updated_at_changed?(**options); end

  def updated_at_for_database(); end

  def updated_at_in_database(); end

  def updated_at_previous_change(); end

  def updated_at_previously_changed?(**options); end

  def updated_at_previously_was(); end

  def updated_at_was(); end

  def updated_at_will_change!(); end

  def will_save_change_to_bio?(**options); end

  def will_save_change_to_created_at?(**options); end

  def will_save_change_to_deleted_at?(**options); end

  def will_save_change_to_domain?(**options); end

  def will_save_change_to_id?(**options); end

  def will_save_change_to_invite_enable?(**options); end

  def will_save_change_to_invite_secret?(**options); end

  def will_save_change_to_name?(**options); end

  def will_save_change_to_owner_id?(**options); end

  def will_save_change_to_personal?(**options); end

  def will_save_change_to_updated_at?(**options); end
end

module Space::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Space
  extend ::Paranoia::Query
  extend ::DefaultValueFor::DelayedClassMethods
  def self._default_attribute_values(); end

  def self._default_attribute_values=(value); end

  def self._default_attribute_values?(); end

  def self._default_attribute_values_not_allowing_nil(); end

  def self._default_attribute_values_not_allowing_nil=(value); end

  def self._default_attribute_values_not_allowing_nil?(); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_restore(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_restore(*args, **options, &block); end

  def self.paranoia_column(); end

  def self.paranoia_column=(value); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(value); end

  def self.paranoia_sentinel_value?(); end

  def self.with_attached_avatar(*args, **arg); end

  def self.without_deleted(); end
end

class SqlPatches
  def self.all_patch_files(); end

  def self.correct_version?(required_version, klass); end

  def self.elapsed_time(start_time); end

  def self.other_patches(); end

  def self.patch(patch_files=T.unsafe(nil)); end

  def self.patch_rails?(); end

  def self.record_sql(statement, parameters=T.unsafe(nil), &block); end

  def self.should_measure?(); end

  def self.sql_patches(); end
end

class Stafftools::Role
  include ::Stafftools::Role::GeneratedAttributeMethods
  include ::Stafftools::Role::GeneratedAssociationMethods
  def autosave_associated_records_for_accounts_users(*args); end

  def autosave_associated_records_for_stafftools_role_assignments(*args); end

  def validate_associated_records_for_accounts_users(*args); end

  def validate_associated_records_for_stafftools_role_assignments(*args); end
end

module Stafftools::Role::GeneratedAssociationMethods
  def accounts_user_ids(); end

  def accounts_user_ids=(ids); end

  def accounts_users(); end

  def accounts_users=(value); end

  def stafftools_role_assignment_ids(); end

  def stafftools_role_assignment_ids=(ids); end

  def stafftools_role_assignments(); end

  def stafftools_role_assignments=(value); end
end

module Stafftools::Role::GeneratedAssociationMethods
end

module Stafftools::Role::GeneratedAttributeMethods
end

module Stafftools::Role::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Stafftools::RoleAssignment
  include ::Stafftools::RoleAssignment::GeneratedAttributeMethods
  include ::Stafftools::RoleAssignment::GeneratedAssociationMethods
  def autosave_associated_records_for_accounts_user(*args); end

  def autosave_associated_records_for_stafftools_role(*args); end
end

module Stafftools::RoleAssignment::GeneratedAssociationMethods
  def accounts_user(); end

  def accounts_user=(value); end

  def accounts_user_changed?(); end

  def accounts_user_previously_changed?(); end

  def build_accounts_user(*args, &block); end

  def build_stafftools_role(*args, &block); end

  def create_accounts_user(*args, &block); end

  def create_accounts_user!(*args, &block); end

  def create_stafftools_role(*args, &block); end

  def create_stafftools_role!(*args, &block); end

  def reload_accounts_user(); end

  def reload_stafftools_role(); end

  def stafftools_role(); end

  def stafftools_role=(value); end

  def stafftools_role_changed?(); end

  def stafftools_role_previously_changed?(); end
end

module Stafftools::RoleAssignment::GeneratedAssociationMethods
end

module Stafftools::RoleAssignment::GeneratedAttributeMethods
end

module Stafftools::RoleAssignment::GeneratedAttributeMethods
  extend ::Mutex_m
end

class StoragesController
  include ::Apiable
  include ::ActiveStorage::SetCurrent
  include ::ActiveStorage::FileServer
  include ::ActiveStorage::Streaming
  include ::ActionController::Live
  def blob_proxy(); end

  def blob_redirect(); end

  def disk(); end

  def representation_proxy(); end

  def representation_redirect(); end
end

class StoragesController
end

class String
  include ::JSON::Ext::Generator::GeneratorMethods::String
  include ::FastUnderscore::ActiveSupportStringPatch
  include ::Patches::String
  def black(); end

  def blink(); end

  def blue(); end

  def bold(); end

  def cyan(); end

  def green(); end

  def hide(); end

  def italic(); end

  def light_black(); end

  def light_blue(); end

  def light_cyan(); end

  def light_green(); end

  def light_magenta(); end

  def light_red(); end

  def light_white(); end

  def light_yellow(); end

  def magenta(); end

  def on_black(); end

  def on_blue(); end

  def on_cyan(); end

  def on_green(); end

  def on_light_black(); end

  def on_light_blue(); end

  def on_light_cyan(); end

  def on_light_green(); end

  def on_light_magenta(); end

  def on_light_red(); end

  def on_light_white(); end

  def on_light_yellow(); end

  def on_magenta(); end

  def on_red(); end

  def on_white(); end

  def on_yellow(); end

  def parse_csv(**options); end

  def red(); end

  def shellescape(); end

  def shellsplit(); end

  def swap(); end

  def underline(); end

  def white(); end

  def yellow(); end
  BLANK_RE = ::T.let(nil, ::T.untyped)
  ENCODED_BLANKS = ::T.let(nil, ::T.untyped)
end

class StringIO
  def set_encoding_by_bom(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class StringIO
  def self.new(*arg); end
end

class StringScanner
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Struct
  def deconstruct(); end

  def deconstruct_keys(arg); end

  def filter(*arg); end
end

Struct::Group = Etc::Group

Struct::Passwd = Etc::Passwd

class Struct
  def self.new(*arg); end
end

class StubSocket
  def close(); end

  def closed?(); end

  def continue_timeout(); end

  def continue_timeout=(continue_timeout); end

  def initialize(*args); end

  def io(); end

  def read_timeout(); end

  def read_timeout=(read_timeout); end

  def readuntil(*args); end

  def write_timeout(); end

  def write_timeout=(write_timeout); end
end

class StubSocket::StubIO
  def setsockopt(*args); end
end

class SubstitutionContext
  def match(matches, attribute, matcher); end

  def substitute!(selector, values, format_for_presentation=T.unsafe(nil)); end
end

class Symbol
  def name(); end
end

class System::Enums::Locale::UnresolvedValueError
end

class System::Enums::Locale::UnresolvedValueError
end

class System::Enums::MemberRole::UnresolvedValueError
end

class System::Enums::MemberRole::UnresolvedValueError
end

class System::Enums::MemberState::UnresolvedValueError
end

class System::Enums::MemberState::UnresolvedValueError
end

class System::Enums::SpaceOperationType::UnresolvedValueError
end

class System::Enums::SpaceOperationType::UnresolvedValueError
end

class System::Enums::UploadType::UnresolvedValueError
end

class System::Enums::UploadType::UnresolvedValueError
end

class System::Inputs::DirectUploadInput
  def byte_size(); end

  def checksum(); end

  def content_type(); end

  def filename(); end

  def metadata(); end
end

class System::Inputs::DirectUploadInput
  def self.load_byte_size(value, _context=T.unsafe(nil)); end

  def self.load_checksum(value, _context=T.unsafe(nil)); end

  def self.load_content_type(value, _context=T.unsafe(nil)); end

  def self.load_filename(value, _context=T.unsafe(nil)); end

  def self.load_metadata(value, _context=T.unsafe(nil)); end
end

class System::Mutations::CreateDirectUpload
  def load_block_id(value, _context=T.unsafe(nil)); end

  def load_input(value, _context=T.unsafe(nil)); end

  def load_type(value, _context=T.unsafe(nil)); end
end

class System::Mutations::CreateOrUpdateSpace
  def load_avatar_signed_id(value, _context=T.unsafe(nil)); end

  def load_bio(value, _context=T.unsafe(nil)); end

  def load_domain(value, _context=T.unsafe(nil)); end

  def load_invite_enable(value, _context=T.unsafe(nil)); end

  def load_invite_secret(value, _context=T.unsafe(nil)); end

  def load_name(value, _context=T.unsafe(nil)); end

  def load_type(value, _context=T.unsafe(nil)); end
end

class System::Mutations::JoinSpace
  def load_invite_secret(value, _context=T.unsafe(nil)); end
end

class System::Mutations::SpaceDestroy
  def load_domain(value, _context=T.unsafe(nil)); end
end

class System::Mutations::SpaceLeave
  def load_domain(value, _context=T.unsafe(nil)); end

  def load_user_domain(value, _context=T.unsafe(nil)); end
end

class System::Mutations::UpdateDomain
  def load_domain(value, _context=T.unsafe(nil)); end

  def load_new_domain(value, _context=T.unsafe(nil)); end
end

class System::Mutations::UpdateMember
  def load_domain(value, _context=T.unsafe(nil)); end

  def load_role(value, _context=T.unsafe(nil)); end

  def load_state(value, _context=T.unsafe(nil)); end
end

class System::Queries::DomainAvailable
  def load_domain(value, _context=T.unsafe(nil)); end
end

class System::Queries::EmailAvailable
  def load_email(value, _context=T.unsafe(nil)); end
end

class System::Queries::PasswordAvailable
  def load_password(value, _context=T.unsafe(nil)); end
end

class System::Queries::PreviewBox
  def load_url(value, _context=T.unsafe(nil)); end
end

class System::Queries::Space
  def load_domain(value, _context=T.unsafe(nil)); end
end

class System::Queries::SpaceSearch
  def load_input(value, _context=T.unsafe(nil)); end
end

class System::Queries::UnsplashImage
  def load_page(value, _context=T.unsafe(nil)); end

  def load_per_page(value, _context=T.unsafe(nil)); end

  def load_query(value, _context=T.unsafe(nil)); end
end

module TZInfo
  VERSION = ::T.let(nil, ::T.untyped)
end

module TZInfo::Data
  VERSION = ::T.let(nil, ::T.untyped)
end

module TZInfo::Data::Version
  FORMAT = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TZDATA = ::T.let(nil, ::T.untyped)
end

module Tasks
end

module Tasks
end

class Tempfile
  def _close(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Tempfile::Remover
  def call(*args); end

  def initialize(tmpfile); end
end

class Tempfile::Remover
end

class Thread
  def native_thread_id(); end
end

class Thread::Backtrace
  def self.limit(); end
end

class Thread::Queue
  def initialize(*arg); end
end

class Thread
  def self.ignore_deadlock(); end

  def self.ignore_deadlock=(ignore_deadlock); end

  def self.new(*arg); end
end

class Time
  COMMON_YEAR_DAYS_IN_MONTH = ::T.let(nil, ::T.untyped)
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
  NOT_SET = ::T.let(nil, ::T.untyped)
end

module Timeout
  VERSION = ::T.let(nil, ::T.untyped)
end

class TracePoint
  def eval_script(); end

  def instruction_sequence(); end

  def parameters(); end
end

class TracePoint
  def self.allow_reentry(); end

  def self.new(*events); end
end

class Trailblazer::Option
  def self.build(value); end

  def self.call!(value, *args, signal: T.unsafe(nil), keyword_arguments: T.unsafe(nil), **arg, &block); end

  def self.evaluate_callable(value, *args, **options, &block); end

  def self.evaluate_method(value, *args, exec_context: T.unsafe(nil), **options, &block); end

  def self.evaluate_proc(value, *args, signal: T.unsafe(nil), exec_context: T.unsafe(nil), **options); end
end

module Trailblazer
  def self.Option(value); end
end

class TrueClass
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
end

module URI
  include ::URI::RFC2396_REGEXP
end

class URI::FTP
  def buffer_open(buf, proxy, options); end
end

class URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::File
end

class URI::GID
  COMPONENT = ::T.let(nil, ::T.untyped)
  PATH_REGEXP = ::T.let(nil, ::T.untyped)
end

class URI::HTTP
  def authority(); end

  def buffer_open(buf, proxy, options); end

  def origin(); end
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::MailTo
  def initialize(*arg); end
end

URI::Parser = URI::RFC2396_Parser

URI::REGEXP = URI::RFC2396_REGEXP

class URI::RFC2396_Parser
  def initialize(opts=T.unsafe(nil)); end
end

class URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

module URI::Util
  def self.make_components_hash(klass, array_hash); end
end

class URI::WS
  def request_uri(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::WS
end

module URI
  def self.for(scheme, *arguments, default: T.unsafe(nil)); end

  def self.get_encoding(label); end

  def self.open(name, *rest, &block); end

  def self.register_scheme(scheme, klass); end
end

module Uber::Delegates
  def delegates(model, *names); end
end

module Uber::InheritableAttr
  def inheritable_attr(name, options=T.unsafe(nil)); end
end

class Uber::InheritableAttr::Clone
  def self.call(value, uncloneable=T.unsafe(nil)); end

  def self.uncloneable(); end
end

module Uber::InheritableAttr
  def self.inherit_for(klass, name, options=T.unsafe(nil)); end
end

Uber::InheritableAttribute = Uber::InheritableAttr

class UnboundMethod
  def private?(); end

  def protected?(); end

  def public?(); end
end

module UnicodeNormalize
end

module UnicodeNormalize
end

module Unparser::AST
  ASSIGN_NODES = ::T.let(nil, ::T.untyped)
  CLOSE_NODES = ::T.let(nil, ::T.untyped)
  FIRST_CHILD = ::T.let(nil, ::T.untyped)
  INHERIT_NODES = ::T.let(nil, ::T.untyped)
  RESET_NODES = ::T.let(nil, ::T.untyped)
  TAUTOLOGY = ::T.let(nil, ::T.untyped)
end

class Unparser::AST::Enumerator
  include ::Enumerable
  include ::Unparser::Equalizer::Methods
end

class Unparser::AST::LocalVariableScope
  include ::Unparser::Equalizer::Methods
  include ::Unparser::Adamantium
end

class Unparser::Buffer
  INDENT_SPACE = ::T.let(nil, ::T.untyped)
  NL = ::T.let(nil, ::T.untyped)
end

class Unparser::Color
  include ::Unparser::Equalizer::Methods
  GREEN = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
end

class Unparser::Concord
  MAX_NR_OF_OBJECTS = ::T.let(nil, ::T.untyped)
end

module Unparser::Constants
  BINARY_OPERATORS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  K_ALIAS = ::T.let(nil, ::T.untyped)
  K_AND = ::T.let(nil, ::T.untyped)
  K_BEGIN = ::T.let(nil, ::T.untyped)
  K_BREAK = ::T.let(nil, ::T.untyped)
  K_CASE = ::T.let(nil, ::T.untyped)
  K_CLASS = ::T.let(nil, ::T.untyped)
  K_DEF = ::T.let(nil, ::T.untyped)
  K_DEFINE = ::T.let(nil, ::T.untyped)
  K_DEFINED = ::T.let(nil, ::T.untyped)
  K_DO = ::T.let(nil, ::T.untyped)
  K_EEND = ::T.let(nil, ::T.untyped)
  K_ELSE = ::T.let(nil, ::T.untyped)
  K_ELSIF = ::T.let(nil, ::T.untyped)
  K_ENCODING = ::T.let(nil, ::T.untyped)
  K_END = ::T.let(nil, ::T.untyped)
  K_ENSURE = ::T.let(nil, ::T.untyped)
  K_FALSE = ::T.let(nil, ::T.untyped)
  K_FILE = ::T.let(nil, ::T.untyped)
  K_FOR = ::T.let(nil, ::T.untyped)
  K_IF = ::T.let(nil, ::T.untyped)
  K_IN = ::T.let(nil, ::T.untyped)
  K_MODULE = ::T.let(nil, ::T.untyped)
  K_NEXT = ::T.let(nil, ::T.untyped)
  K_NIL = ::T.let(nil, ::T.untyped)
  K_NOT = ::T.let(nil, ::T.untyped)
  K_OR = ::T.let(nil, ::T.untyped)
  K_POSTEXE = ::T.let(nil, ::T.untyped)
  K_PREEXE = ::T.let(nil, ::T.untyped)
  K_REDO = ::T.let(nil, ::T.untyped)
  K_RESCUE = ::T.let(nil, ::T.untyped)
  K_RETRY = ::T.let(nil, ::T.untyped)
  K_RETURN = ::T.let(nil, ::T.untyped)
  K_SELF = ::T.let(nil, ::T.untyped)
  K_SUPER = ::T.let(nil, ::T.untyped)
  K_THEN = ::T.let(nil, ::T.untyped)
  K_TRUE = ::T.let(nil, ::T.untyped)
  K_UNDEF = ::T.let(nil, ::T.untyped)
  K_UNLESS = ::T.let(nil, ::T.untyped)
  K_UNTIL = ::T.let(nil, ::T.untyped)
  K_WHEN = ::T.let(nil, ::T.untyped)
  K_WHILE = ::T.let(nil, ::T.untyped)
  K_YIELD = ::T.let(nil, ::T.untyped)
  UNARY_OPERATORS = ::T.let(nil, ::T.untyped)
end

class Unparser::Diff
  include ::Unparser::Equalizer::Methods
  ADDITION = ::T.let(nil, ::T.untyped)
  DELETION = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
end

class Unparser::Either
  include ::Unparser::RequireBlock
  include ::Unparser::Equalizer::Methods
end

class Unparser::Emitter
  include ::Unparser::NodeHelpers
  include ::Unparser::Generation
  include ::Unparser::Constants
  include ::Unparser::AbstractType
  NO_INDENT = ::T.let(nil, ::T.untyped)
  REGISTRY = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Assignment
  BINARY_OPERATOR = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::BinaryAssign
  MAP = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::CaseGuard
  MAP = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::FlipFlop
  MAP = ::T.let(nil, ::T.untyped)
  SYMBOLS = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Float
  INFINITY = ::T.let(nil, ::T.untyped)
  NEG_INFINITY = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Hookexe
  MAP = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::MatchPattern
  SYMBOL = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Morearg
  MAP = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::NthRef
  PREFIX = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Post
  MAP = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Primitive::Complex
  MAP = ::T.let(nil, ::T.untyped)
  RATIONAL_FORMAT = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Primitive::Rational
  RATIONAL_FORMAT = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Procarg
  PARENS = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Range
  SYMBOLS = ::T.let(nil, ::T.untyped)
  TOKENS = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Repetition
  MAP = ::T.let(nil, ::T.untyped)
end

class Unparser::Emitter::Simple
  MAP = ::T.let(nil, ::T.untyped)
end

module Unparser::NodeDetails
  include ::Unparser::NodeHelpers
end

class Unparser::NodeDetails::Send
  include ::Unparser::NodeHelpers
  include ::Unparser::Equalizer::Methods
end

module Unparser::Writer
  include ::Unparser::NodeHelpers
end

class Unparser::Writer::Binary
  include ::Unparser::Adamantium
  include ::Unparser::NodeHelpers
end

class Unparser::Writer::DynamicString
  include ::Unparser::Adamantium
  include ::Unparser::NodeHelpers
end

class Unparser::Writer::Resbody
  include ::Unparser::NodeHelpers
end

class Unparser::Writer::Rescue
  include ::Unparser::Adamantium
  include ::Unparser::NodeHelpers
end

class Unparser::Writer::Send
  include ::Unparser::Constants
  include ::Unparser::Adamantium
  include ::Unparser::NodeHelpers
end

module Unsplash
  VERSION = ::T.let(nil, ::T.untyped)
end

class Unsplash::Connection
  DEFAULT_API_BASE_URI = ::T.let(nil, ::T.untyped)
  DEFAULT_OAUTH_BASE_URI = ::T.let(nil, ::T.untyped)
  DEFAULT_VERSION = ::T.let(nil, ::T.untyped)
end

class Unsplash::SearchResult
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module VCR
  include ::VCR::VariableArgsBlockCaller
  include ::VCR::Errors
  def cassette_persisters(); end

  def cassette_serializers(); end

  def cassettes(context=T.unsafe(nil)); end

  def config(); end

  def configuration(); end

  def configure(); end

  def cucumber_tags(&block); end

  def current_cassette(); end

  def eject_cassette(options=T.unsafe(nil)); end

  def fibers_available?(); end

  def http_interactions(); end

  def insert_cassette(name, options=T.unsafe(nil)); end

  def library_hooks(); end

  def link_context(from_thread, to_key); end

  def real_http_connections_allowed?(); end

  def record_http_interaction(interaction); end

  def request_ignorer(); end

  def request_matchers(); end

  def turn_off!(options=T.unsafe(nil)); end

  def turn_on!(); end

  def turned_off(options=T.unsafe(nil)); end

  def turned_on(options=T.unsafe(nil)); end

  def turned_on?(); end

  def unlink_context(key); end

  def use_cassette(name, options=T.unsafe(nil), &block); end

  def use_cassettes(cassettes, &block); end

  def version(); end
  CassetteMutex = ::T.let(nil, ::T.untyped)
  MainThread = ::T.let(nil, ::T.untyped)
end

class VCR::Cassette
  include ::VCR::Logger::Mixin
  def clean_outdated_http_interactions(); end

  def eject(options=T.unsafe(nil)); end

  def erb(); end

  def file(); end

  def http_interactions(); end

  def initialize(name, options=T.unsafe(nil)); end

  def linked?(); end

  def match_requests_on(); end

  def name(); end

  def new_recorded_interactions(); end

  def originally_recorded_at(); end

  def re_record_interval(); end

  def record_http_interaction(interaction); end

  def record_mode(); end

  def record_on_error(); end

  def recording?(); end

  def run_failed!(); end

  def run_failed?(); end

  def serializable_hash(); end

  def should_write_recorded_interactions_to_disk?(); end

  def tags(); end
  VALID_RECORD_MODES = ::T.let(nil, ::T.untyped)
end

class VCR::Cassette::ERBRenderer
  def initialize(raw_template, erb, cassette_name=T.unsafe(nil)); end

  def render(); end
end

class VCR::Cassette::ERBRenderer
end

module VCR::Cassette::EncodingErrorHandling
  def handle_encoding_errors(); end
end

module VCR::Cassette::EncodingErrorHandling
end

class VCR::Cassette::HTTPInteractionList
  include ::VCR::Logger::Mixin
  def allow_playback_repeats(); end

  def assert_no_unused_interactions!(); end

  def has_interaction_matching?(request); end

  def has_used_interaction_matching?(request); end

  def initialize(interactions, request_matchers, allow_playback_repeats=T.unsafe(nil), parent_list=T.unsafe(nil), log_prefix=T.unsafe(nil)); end

  def interactions(); end

  def parent_list(); end

  def remaining_unused_interaction_count(); end

  def request_matchers(); end

  def response_for(request); end
end

module VCR::Cassette::HTTPInteractionList::NullList
  def has_interaction_matching?(*a); end

  def has_used_interaction_matching?(*a); end

  def remaining_unused_interaction_count(*a); end

  def response_for(*a); end
end

module VCR::Cassette::HTTPInteractionList::NullList
  extend ::VCR::Cassette::HTTPInteractionList::NullList
end

class VCR::Cassette::HTTPInteractionList
end

class VCR::Cassette::Persisters
  def [](name); end

  def []=(name, value); end
end

module VCR::Cassette::Persisters::FileSystem
  def [](file_name); end

  def []=(file_name, content); end

  def absolute_path_to_file(file_name); end

  def storage_location(); end

  def storage_location=(dir); end
end

module VCR::Cassette::Persisters::FileSystem
  extend ::VCR::Cassette::Persisters::FileSystem
end

class VCR::Cassette::Persisters
end

class VCR::Cassette::Serializers
  def [](name); end

  def []=(name, value); end
end

module VCR::Cassette::Serializers::Compressed
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
end

module VCR::Cassette::Serializers::Compressed
  extend ::VCR::Cassette::Serializers::Compressed
end

module VCR::Cassette::Serializers::JSON
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
  SYNTAX_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::JSON
  extend ::VCR::Cassette::Serializers::JSON
  extend ::VCR::Cassette::EncodingErrorHandling
  extend ::VCR::Cassette::SyntaxErrorHandling
end

module VCR::Cassette::Serializers::Psych
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
  SYNTAX_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::Psych
  extend ::VCR::Cassette::Serializers::Psych
  extend ::VCR::Cassette::EncodingErrorHandling
  extend ::VCR::Cassette::SyntaxErrorHandling
end

module VCR::Cassette::Serializers::Syck
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
  SYNTAX_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::Syck
  extend ::VCR::Cassette::Serializers::Syck
  extend ::VCR::Cassette::EncodingErrorHandling
  extend ::VCR::Cassette::SyntaxErrorHandling
end

module VCR::Cassette::Serializers::YAML
  def deserialize(string); end

  def file_extension(); end

  def serialize(hash); end
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
  SYNTAX_ERRORS = ::T.let(nil, ::T.untyped)
end

module VCR::Cassette::Serializers::YAML
  extend ::VCR::Cassette::Serializers::YAML
  extend ::VCR::Cassette::EncodingErrorHandling
  extend ::VCR::Cassette::SyntaxErrorHandling
end

class VCR::Cassette::Serializers
end

module VCR::Cassette::SyntaxErrorHandling
  def handle_syntax_errors(); end
end

module VCR::Cassette::SyntaxErrorHandling
end

class VCR::Cassette
  def self.const_missing(const); end
end

class VCR::Configuration
  include ::VCR::Hooks
  include ::VCR::VariableArgsBlockCaller
  include ::VCR::Configuration::DefinedHooks
  include ::VCR::Logger::Mixin
  def after_http_request(*filters); end

  def allow_http_connections_when_no_cassette=(allow_http_connections_when_no_cassette); end

  def allow_http_connections_when_no_cassette?(); end

  def around_http_request(*filters, &block); end

  def before_playback(tag=T.unsafe(nil), &block); end

  def before_record(tag=T.unsafe(nil), &block); end

  def cassette_library_dir(); end

  def cassette_library_dir=(dir); end

  def cassette_persisters(); end

  def cassette_serializers(); end

  def configure_rspec_metadata!(); end

  def debug_logger(); end

  def debug_logger=(value); end

  def default_cassette_options(); end

  def default_cassette_options=(overrides); end

  def define_cassette_placeholder(placeholder, tag=T.unsafe(nil), &block); end

  def filter_sensitive_data(placeholder, tag=T.unsafe(nil), &block); end

  def hook_into(*hooks); end

  def ignore_host(*hosts); end

  def ignore_hosts(*hosts); end

  def ignore_localhost=(value); end

  def ignore_request(&block); end

  def logger(); end

  def preserve_exact_body_bytes_for?(http_message); end

  def query_parser(); end

  def query_parser=(query_parser); end

  def register_request_matcher(name, &block); end

  def stub_with(*adapters); end

  def unignore_host(*hosts); end

  def unignore_hosts(*hosts); end

  def uri_parser(); end

  def uri_parser=(uri_parser); end
end

module VCR::Configuration::DefinedHooks
  def after_http_request(*filters, &hook); end

  def after_library_hooks_loaded(*filters, &hook); end

  def before_http_request(*filters, &hook); end

  def before_playback(*filters, &hook); end

  def before_record(*filters, &hook); end

  def preserve_exact_body_bytes(*filters, &hook); end
end

module VCR::Configuration::DefinedHooks
end

class VCR::Configuration
  extend ::VCR::Hooks::ClassMethods
end

class VCR::CucumberTags
  def initialize(main_object); end

  def tag(*tag_names); end

  def tags(*tag_names); end
end

class VCR::CucumberTags::ScenarioNameBuilder
  def cassette_name(); end

  def examples_table(*arg); end

  def examples_table_row(row); end

  def feature(feature); end

  def initialize(test_case); end

  def scenario(*arg); end

  def scenario_outline(feature); end
end

class VCR::CucumberTags::ScenarioNameBuilder
end

class VCR::CucumberTags
  def self.add_tag(tag); end

  def self.tags(); end
end

module VCR::Deprecations
end

module VCR::Deprecations::Middleware
end

module VCR::Deprecations::Middleware::Faraday
  def initialize(*args); end
end

module VCR::Deprecations::Middleware::Faraday
end

module VCR::Deprecations::Middleware
end

module VCR::Deprecations
end

module VCR::Errors
end

class VCR::Errors::AroundHTTPRequestHookError
end

class VCR::Errors::AroundHTTPRequestHookError
end

class VCR::Errors::CassetteInUseError
end

class VCR::Errors::CassetteInUseError
end

class VCR::Errors::EjectLinkedCassetteError
end

class VCR::Errors::EjectLinkedCassetteError
end

class VCR::Errors::Error
end

class VCR::Errors::Error
end

class VCR::Errors::InvalidCassetteFormatError
end

class VCR::Errors::InvalidCassetteFormatError
end

class VCR::Errors::LibraryVersionTooLowError
end

class VCR::Errors::LibraryVersionTooLowError
end

class VCR::Errors::MissingERBVariableError
end

class VCR::Errors::MissingERBVariableError
end

class VCR::Errors::NotSupportedError
end

class VCR::Errors::NotSupportedError
end

class VCR::Errors::TurnedOffError
end

class VCR::Errors::TurnedOffError
end

class VCR::Errors::UnhandledHTTPRequestError
  def initialize(request); end

  def request(); end
  ALL_SUGGESTIONS = ::T.let(nil, ::T.untyped)
end

class VCR::Errors::UnhandledHTTPRequestError
end

class VCR::Errors::UnknownContentEncodingError
end

class VCR::Errors::UnknownContentEncodingError
end

class VCR::Errors::UnregisteredMatcherError
end

class VCR::Errors::UnregisteredMatcherError
end

class VCR::Errors::UnusedHTTPInteractionError
end

class VCR::Errors::UnusedHTTPInteractionError
end

module VCR::Errors
end

class VCR::HTTPInteraction
  def hook_aware(); end

  def initialize(*args); end

  def to_hash(); end
end

class VCR::HTTPInteraction::HookAware
  def filter!(text, replacement_text); end

  def ignore!(); end

  def ignored?(); end

  def initialize(http_interaction); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class VCR::HTTPInteraction::HookAware
end

class VCR::HTTPInteraction
  def self.from_hash(hash); end
end

module VCR::Hooks
  include ::VCR::VariableArgsBlockCaller
  def clear_hooks(); end

  def has_hooks_for?(hook_type); end

  def hooks(); end

  def invoke_hook(hook_type, *args); end
end

module VCR::Hooks::ClassMethods
  def define_hook(hook_type, prepend=T.unsafe(nil)); end
end

module VCR::Hooks::ClassMethods
end

class VCR::Hooks::FilteredHook
  include ::VCR::VariableArgsBlockCaller
  def conditionally_invoke(*args); end

  def filters(); end

  def filters=(_); end

  def hook(); end

  def hook=(_); end
end

class VCR::Hooks::FilteredHook
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module VCR::Hooks
  def self.included(klass); end
end

module VCR::InternetConnection
  def available?(); end
  EXAMPLE_HOST = ::T.let(nil, ::T.untyped)
end

module VCR::InternetConnection
  extend ::VCR::InternetConnection
end

class VCR::LibraryHooks
  def disabled?(hook); end

  def exclusive_hook(); end

  def exclusive_hook=(exclusive_hook); end

  def exclusively_enabled(hook); end
end

module VCR::LibraryHooks::WebMock
  def global_hook_disabled?(request); end

  def global_hook_disabled_requests(); end

  def with_global_hook_disabled(request); end
end

module VCR::LibraryHooks::WebMock::Helpers
  def request_headers_for(webmock_request); end

  def typed_request_for(webmock_request, remove=T.unsafe(nil)); end

  def vcr_request_for(webmock_request); end

  def vcr_response_for(webmock_response); end
end

module VCR::LibraryHooks::WebMock::Helpers
end

class VCR::LibraryHooks::WebMock::RequestHandler
  include ::VCR::LibraryHooks::WebMock::Helpers
  def initialize(request); end

  def request(); end
end

class VCR::LibraryHooks::WebMock::RequestHandler
end

module VCR::LibraryHooks::WebMock
  extend ::VCR::LibraryHooks::WebMock
  extend ::VCR::LibraryHooks::WebMock::Helpers
end

class VCR::LibraryHooks
end

class VCR::LinkedCassette
  def eject(*args); end

  def linked?(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class VCR::LinkedCassette::CassetteList
  include ::Enumerable
  def each(&blk); end

  def initialize(cassettes, linked_cassettes); end

  def last(); end

  def size(); end

  def wrap(cassette); end
end

class VCR::LinkedCassette::CassetteList
end

class VCR::LinkedCassette
  def self.list(cassettes, linked_cassettes); end
end

class VCR::Logger
  def initialize(stream); end

  def log(message, log_prefix, indentation_level=T.unsafe(nil)); end

  def request_summary(request, request_matchers); end

  def response_summary(response); end
end

module VCR::Logger::Mixin
  def log(message, indentation_level=T.unsafe(nil)); end

  def request_summary(*args); end

  def response_summary(*args); end
end

module VCR::Logger::Mixin
end

module VCR::Logger::Null
end

module VCR::Logger::Null
  def self.log(*arg); end

  def self.request_summary(*arg); end

  def self.response_summary(*arg); end
end

class VCR::Logger
end

module VCR::Middleware
end

class VCR::Middleware::Faraday
  include ::VCR::Deprecations::Middleware::Faraday
  def call(env); end

  def close(); end

  def initialize(app); end
end

class VCR::Middleware::Faraday::RequestHandler
  def app(); end

  def env(); end

  def initialize(app, env); end
end

class VCR::Middleware::Faraday::RequestHandler
end

class VCR::Middleware::Faraday
end

class VCR::Middleware::Rack
  include ::VCR::VariableArgsBlockCaller
  def call(env); end

  def initialize(app, &block); end
end

class VCR::Middleware::Rack
end

module VCR::Middleware
end

module VCR::Normalizers
end

module VCR::Normalizers::Body
  def initialize(*args); end
end

module VCR::Normalizers::Body::ClassMethods
  def body_from(hash_or_string); end

  def force_encode_string(string, encoding); end

  def try_encode_string(string, encoding); end
end

module VCR::Normalizers::Body::ClassMethods
end

module VCR::Normalizers::Body
  def self.included(klass); end
end

module VCR::Normalizers::Header
  def initialize(*args); end
end

module VCR::Normalizers::Header
end

module VCR::Normalizers
end

module VCR::RSpec
end

module VCR::RSpec::Metadata
  def configure!(); end

  def vcr_cassette_name_for(metadata); end
end

module VCR::RSpec::Metadata
  extend ::VCR::RSpec::Metadata
end

module VCR::RSpec
end

class VCR::Request
  include ::VCR::Normalizers::Header
  include ::VCR::Normalizers::Body
  def method(*args); end

  def parsed_uri(); end

  def to_hash(); end
end

class VCR::Request::FiberAware
  def proceed(); end

  def to_proc(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class VCR::Request::FiberAware
end

class VCR::Request::Typed
  def externally_stubbed?(); end

  def ignored?(); end

  def initialize(request, type); end

  def real?(); end

  def recordable?(); end

  def stubbed?(); end

  def stubbed_by_vcr?(); end

  def type(); end

  def unhandled?(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class VCR::Request::Typed
end

class VCR::Request
  extend ::VCR::Normalizers::Body::ClassMethods
  def self.from_hash(hash); end
end

class VCR::RequestHandler
  include ::VCR::Logger::Mixin
  def handle(); end
end

class VCR::RequestHandler
end

class VCR::RequestIgnorer
  include ::VCR::Hooks
  include ::VCR::VariableArgsBlockCaller
  include ::VCR::RequestIgnorer::DefinedHooks
  def ignore?(request); end

  def ignore_hosts(*hosts); end

  def ignore_localhost=(value); end

  def localhost_ignored?(); end

  def unignore_hosts(*hosts); end
  LOCALHOST_ALIASES = ::T.let(nil, ::T.untyped)
end

module VCR::RequestIgnorer::DefinedHooks
  def ignore_request(*filters, &hook); end
end

module VCR::RequestIgnorer::DefinedHooks
end

class VCR::RequestIgnorer
  extend ::VCR::Hooks::ClassMethods
end

class VCR::RequestMatcherRegistry
  def [](matcher); end

  def register(name, &block); end

  def uri_without_param(*ignores); end

  def uri_without_params(*ignores); end
  DEFAULT_MATCHERS = ::T.let(nil, ::T.untyped)
end

class VCR::RequestMatcherRegistry::Matcher
  def matches?(request_1, request_2); end
end

class VCR::RequestMatcherRegistry::Matcher
end

class VCR::RequestMatcherRegistry::URIWithoutParamsMatcher
  def call(request_1, request_2); end

  def partial_uri_from(request); end

  def to_proc(); end
end

class VCR::RequestMatcherRegistry::URIWithoutParamsMatcher
end

class VCR::RequestMatcherRegistry
end

class VCR::Response
  include ::VCR::Normalizers::Header
  include ::VCR::Normalizers::Body
  def compressed?(); end

  def content_encoding(); end

  def decompress(); end

  def recompress(); end

  def to_hash(); end

  def update_content_length_header(); end

  def vcr_decompressed?(); end
  HAVE_ZLIB = ::T.let(nil, ::T.untyped)
end

class VCR::Response
  extend ::VCR::Normalizers::Body::ClassMethods
  def self.decompress(body, type); end

  def self.from_hash(hash); end
end

class VCR::ResponseStatus
  def to_hash(); end
end

class VCR::ResponseStatus
  def self.from_hash(hash); end
end

module VCR::VariableArgsBlockCaller
  def call_block(block, *args); end
end

module VCR::VariableArgsBlockCaller
end

class VCR::VersionChecker
  def check_version!(); end

  def initialize(library_name, library_version, min_version); end
end

class VCR::VersionChecker
end

module VCR
  extend ::VCR
  extend ::VCR::VariableArgsBlockCaller
  extend ::VCR::Errors
  def self.const_missing(const); end
end

module ViteRails
  VERSION = ::T.let(nil, ::T.untyped)
end

module ViteRails::Installation
  def install_sample_files(); end

  def setup_app_files(); end

  def setup_content_security_policy(csp_file); end
  RAILS_TEMPLATES = ::T.let(nil, ::T.untyped)
end

module ViteRails::Installation
end

class ViteRuby
  COMPANION_LIBRARIES = ::T.let(nil, ::T.untyped)
  DEFAULT_PLUGIN_VERSION = ::T.let(nil, ::T.untyped)
  DEFAULT_VITE_VERSION = ::T.let(nil, ::T.untyped)
  ENV_PREFIX = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class ViteRuby::Build
  def current_digest(); end

  def current_digest=(_); end

  def digest(); end

  def digest=(_); end

  def fresh?(); end

  def last_build_path(); end

  def last_build_path=(_); end

  def retry_failed?(); end

  def stale?(); end

  def success(); end

  def success=(_); end

  def timestamp(); end

  def timestamp=(_); end

  def to_json(*_args); end

  def vite_ruby(); end

  def vite_ruby=(_); end

  def with_result(success); end

  def write_to_cache(); end
end

class ViteRuby::Build
  def self.[](*arg); end

  def self.from_previous(last_build_path, current_digest); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ViteRuby::Builder
  def build(*args); end

  def config(*args, **arg, &block); end

  def initialize(vite_ruby); end

  def last_build_metadata(ssr: T.unsafe(nil)); end

  def logger(*args, **arg, &block); end

  def run(*args, **arg, &block); end
end

class ViteRuby::Builder
  extend ::Forwardable
end

class ViteRuby::CLI
end

class ViteRuby::CLI::Build
  def call(**options); end
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ViteRuby::CLI::Build
end

class ViteRuby::CLI::Clobber
  def call(mode:, **arg); end
end

class ViteRuby::CLI::Clobber
end

class ViteRuby::CLI::Dev
  def call(**options); end
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ViteRuby::CLI::Dev
end

module ViteRuby::CLI::FileUtils
end

module ViteRuby::CLI::FileUtils
  def self.append(path, contents); end

  def self.cp(source, destination); end

  def self.inject_line_after(path, target, contents); end

  def self.inject_line_after_last(path, target, contents); end

  def self.inject_line_before(path, target, contents); end

  def self.replace_first_line(path, target, replacement); end

  def self.write(path, *content); end
end

class ViteRuby::CLI::Install
  include ::ViteRails::Installation
  def call(**arg); end

  def config(*args, **arg, &block); end

  def js_dependencies(); end
  TEMPLATES_PATH = ::T.let(nil, ::T.untyped)
end

class ViteRuby::CLI::Install
end

class ViteRuby::CLI::SSR
  def call(mode:, inspect: T.unsafe(nil), trace_deprecation: T.unsafe(nil)); end
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ViteRuby::CLI::SSR
end

class ViteRuby::CLI::Upgrade
  def upgrade_npm_packages(); end

  def upgrade_ruby_gems(); end
end

class ViteRuby::CLI::Upgrade
end

class ViteRuby::CLI::UpgradePackages
end

class ViteRuby::CLI::UpgradePackages
end

class ViteRuby::CLI::Version
  def call(**arg); end
end

class ViteRuby::CLI::Version
end

class ViteRuby::CLI::Vite
  def call(mode:, args: T.unsafe(nil), clobber: T.unsafe(nil), **boolean_opts); end
  CURRENT_ENV = ::T.let(nil, ::T.untyped)
end

class ViteRuby::CLI::Vite
  def self.executable_options(); end

  def self.shared_options(); end
end

class ViteRuby::CLI
end

class ViteRuby::Commands
  def build(*args); end

  def build_from_task(*args); end

  def builder(*args, **arg, &block); end

  def clean(keep_up_to: T.unsafe(nil), age_in_seconds: T.unsafe(nil)); end

  def clean_from_task(args); end

  def clobber(); end

  def config(*args, **arg, &block); end

  def initialize(vite_ruby); end

  def install_binstubs(); end

  def logger(*args, **arg, &block); end

  def logger=(*args, **arg, &block); end

  def manifest(*args, **arg, &block); end

  def print_info(); end

  def verify_install(); end
end

class ViteRuby::Commands
  extend ::Forwardable
end

module ViteRuby::CompatibilityCheck
  def self.compatible_plugin?(npm_req, ruby_req); end

  def self.raise_unless_satisfied(npm_req, ruby_req); end

  def self.verify_plugin_version(root); end
end

class ViteRuby::Config
  CONFIGURABLE_WITH_ENV = ::T.let(nil, ::T.untyped)
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  DEFAULT_WATCHED_PATHS = ::T.let(nil, ::T.untyped)
  NOT_CONFIGURABLE_WITH_ENV = ::T.let(nil, ::T.untyped)
end

class ViteRuby::Config
  extend ::ViteRails::Config
end

class ViteRuby::DevServerProxy
  def config(*args, **arg, &block); end

  def dev_server_running?(*args, **arg, &block); end

  def initialize(app=T.unsafe(nil), options=T.unsafe(nil)); end
  HOST_WITH_PORT_REGEX = ::T.let(nil, ::T.untyped)
  VITE_DEPENDENCY_PREFIX = ::T.let(nil, ::T.untyped)
end

class ViteRuby::Error
end

class ViteRuby::Error
end

module ViteRuby::IO
end

module ViteRuby::IO
  def self.capture(*cmd, with_output: T.unsafe(nil), stdin_data: T.unsafe(nil), **opts); end

  def self.read_lines(io); end
end

class ViteRuby::Manifest
  def builder(*args, **arg, &block); end

  def config(*args, **arg, &block); end

  def dev_server_running?(*args, **arg, &block); end

  def initialize(vite_ruby); end

  def lookup(name, **options); end

  def lookup!(name, **options); end

  def path_for(name, **options); end

  def react_refresh_preamble(); end

  def refresh(); end

  def resolve_entries(*names, **options); end

  def vite_client_src(); end
  FS_PREFIX = ::T.let(nil, ::T.untyped)
end

class ViteRuby::Manifest
  extend ::Forwardable
end

class ViteRuby::MissingEntrypointError
  def config(*args, **arg, &block); end

  def file_name(*args, **arg, &block); end

  def initialize(info); end

  def last_build(*args, **arg, &block); end

  def manifest(*args, **arg, &block); end

  def possible_causes(last_build); end
  DEFAULT_CAUSES = ::T.let(nil, ::T.untyped)
  FAILED_BUILD_CAUSES = ::T.let(nil, ::T.untyped)
  NO_AUTO_BUILD_CAUSES = ::T.let(nil, ::T.untyped)
end

class ViteRuby::MissingEntrypointError
  extend ::Forwardable
end

class ViteRuby::MissingExecutableError
  def initialize(error=T.unsafe(nil)); end
end

class ViteRuby::MissingExecutableError
end

class ViteRuby::Runner
  def config(*args, **arg, &block); end

  def initialize(vite_ruby); end

  def logger(*args, **arg, &block); end

  def run(argv, exec: T.unsafe(nil)); end
end

class ViteRuby::Runner
  extend ::Forwardable
end

class Warden::Proxy
  ENV_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  ENV_WARDEN_ERRORS = ::T.let(nil, ::T.untyped)
end

class Warden::SessionSerializer
  def user_deserialize(args); end

  def user_serialize(record); end
end

module Warden::Test::Helpers
  def login_as(user, opts=T.unsafe(nil)); end

  def logout(*scopes); end
end

module Warden::Test::Helpers
  def self.included(_base); end
end

module Warden::Test::Mock
  def warden(); end
end

class Warden::Test::Mock::Session
  def app(); end

  def app=(app); end

  def call(e); end

  def initialize(app, _configs=T.unsafe(nil)); end
end

class Warden::Test::Mock::Session
end

module Warden::Test::Mock
  def self.included(_base); end
end

module Warden::Test::WardenHelpers
  def _on_next_request(); end

  def asset_paths(); end

  def asset_paths=(*vals); end

  def on_next_request(&blk); end

  def test_reset!(); end
end

module Warden::Test::WardenHelpers
end

module Warning
  extend ::Warning
end

class WeakRef
  def initialize(orig); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebAgent::Cookie
  DISCARD = ::T.let(nil, ::T.untyped)
  DOMAIN = ::T.let(nil, ::T.untyped)
  HTTP_ONLY = ::T.let(nil, ::T.untyped)
  OVERRIDE = ::T.let(nil, ::T.untyped)
  OVERRIDE_OK = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  SECURE = ::T.let(nil, ::T.untyped)
  USE = ::T.let(nil, ::T.untyped)
end

class WebAgent::CookieManager
  SPECIAL_DOMAIN = ::T.let(nil, ::T.untyped)
end

class WebConsole::Context
  def extract(input=T.unsafe(nil)); end

  def initialize(binding); end
  GLOBAL_OBJECTS = ::T.let(nil, ::T.untyped)
end

class WebConsole::Context
end

class WebConsole::DoubleRenderError
end

class WebConsole::DoubleRenderError
end

class WebConsole::Error
end

class WebConsole::Error
end

class WebConsole::Evaluator
  def cleaner(); end

  def eval(input); end

  def initialize(binding=T.unsafe(nil)); end
end

class WebConsole::Evaluator
  def self.cleaner(); end
end

class WebConsole::ExceptionMapper
  def [](index); end

  def exc(); end

  def first(); end

  def initialize(exception); end
end

class WebConsole::ExceptionMapper
  def self.find_binding(mappers, exception_object_id); end

  def self.follow(exc); end
end

class WebConsole::Injector
  def initialize(body, headers); end

  def inject(content); end
end

class WebConsole::Injector
end

module WebConsole::Interceptor
  def self.call(request, exception); end
end

class WebConsole::Middleware
  def call(env); end

  def initialize(app); end

  def mount_point(); end

  def mount_point=(val); end

  def whiny_requests(); end

  def whiny_requests=(val); end
  TEMPLATES_PATH = ::T.let(nil, ::T.untyped)
end

class WebConsole::Middleware
  def self.mount_point(); end

  def self.mount_point=(val); end

  def self.whiny_requests(); end

  def self.whiny_requests=(val); end
end

class WebConsole::Permissions
  def include?(network); end

  def initialize(networks=T.unsafe(nil)); end
  ALWAYS_PERMITTED_NETWORKS = ::T.let(nil, ::T.untyped)
end

class WebConsole::Railtie
  def web_console_permissions(); end
end

class WebConsole::Request
  def permissions(); end

  def permissions=(val); end

  def permitted?(); end

  def strict_remote_ip(); end
end

class WebConsole::Request::GetSecureIp
  def initialize(req, proxies); end
end

class WebConsole::Request
  def self.permissions(); end

  def self.permissions=(val); end
end

class WebConsole::Session
  def context(objpath); end

  def eval(input); end

  def id(); end

  def initialize(exception_mappers); end

  def inmemory_storage(); end

  def switch_binding_to(index, exception_object_id); end
end

class WebConsole::Session
  def self.find(id); end

  def self.from(storage); end

  def self.inmemory_storage(); end
end

class WebConsole::Template
  def initialize(env, session); end

  def render(template); end

  def template_paths(); end

  def template_paths=(val); end
end

class WebConsole::Template
  def self.template_paths(); end

  def self.template_paths=(val); end
end

class WebConsole::View
  def only_on_error_page(*args); end

  def only_on_regular_page(*args); end

  def render(*arg); end

  def render_inlined_string(template); end

  def render_javascript(template); end

  def t(key, options=T.unsafe(nil)); end
end

class WebConsole::View
end

class WebConsole::WhinyRequest
  def permitted?(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class WebConsole::WhinyRequest
end

module WebConsole
  def self.logger(); end
end

module WebMock
  def after_request(*args, &block); end

  def allow_net_connect!(*args, &block); end

  def disable_net_connect!(*args, &block); end

  def net_connect_allowed?(*args, &block); end

  def registered_request?(*args, &block); end

  def reset_callbacks(*args, &block); end

  def reset_webmock(*args, &block); end
  VERSION = ::T.let(nil, ::T.untyped)
end

module WebMock::API
  def a_request(method, uri); end

  def assert_not_requested(*args, &block); end

  def assert_requested(*args, &block); end

  def hash_excluding(*args); end

  def hash_including(*args); end

  def refute_requested(*args, &block); end

  def remove_request_stub(stub); end

  def reset_executed_requests!(); end

  def stub_http_request(method, uri); end

  def stub_request(method, uri); end
end

module WebMock::API
  def self.request(method, uri); end
end

class WebMock::AssertionFailure
  def self.error_class(); end

  def self.error_class=(error_class); end

  def self.failure(message); end
end

class WebMock::BodyPattern
  def initialize(pattern); end

  def matches?(body, content_type=T.unsafe(nil)); end

  def pattern(); end
  BODY_FORMATS = ::T.let(nil, ::T.untyped)
end

class WebMock::CallbackRegistry
  def self.add_callback(options, block); end

  def self.any_callbacks?(); end

  def self.callbacks(); end

  def self.invoke_callbacks(options, request_signature, response); end

  def self.reset(); end
end

class WebMock::Config
  def allow(); end

  def allow=(allow); end

  def allow_localhost(); end

  def allow_localhost=(allow_localhost); end

  def allow_net_connect(); end

  def allow_net_connect=(allow_net_connect); end

  def net_http_connect_on_start(); end

  def net_http_connect_on_start=(net_http_connect_on_start); end

  def query_values_notation(); end

  def query_values_notation=(query_values_notation); end

  def show_body_diff(); end

  def show_body_diff=(show_body_diff); end

  def show_stubbing_instructions(); end

  def show_stubbing_instructions=(show_stubbing_instructions); end
end

class WebMock::Deprecation
  def self.warning(message); end
end

class WebMock::DynamicResponse
  def initialize(responder); end

  def responder(); end

  def responder=(responder); end
end

class WebMock::HashValidator
  def initialize(hash); end

  def validate_keys(*valid_keys); end
end

class WebMock::HeadersPattern
  def initialize(pattern); end

  def matches?(headers); end

  def pp_to_s(); end
end

class WebMock::HttpLibAdapter
  def self.adapter_for(lib); end
end

class WebMock::HttpLibAdapterRegistry
  def each_adapter(&block); end

  def http_lib_adapters(); end

  def http_lib_adapters=(http_lib_adapters); end

  def register(lib, adapter); end
end

WebMock::HttpLibAdapters::HTTPClientAdapter::OriginalHttpClient = HTTPClient

WebMock::HttpLibAdapters::HTTPClientAdapter::OriginalJsonClient = JSONClient

class WebMock::HttpLibAdapters::HTTPClientAdapter
  def self.disable!(); end

  def self.enable!(); end
end

WebMock::HttpLibAdapters::NetHttpAdapter::OriginalNetBufferedIO = Net::BufferedIO

WebMock::HttpLibAdapters::NetHttpAdapter::OriginalNetHTTP = Net::HTTP

class WebMock::HttpLibAdapters::NetHttpAdapter
  def self.disable!(); end

  def self.enable!(); end
end

class WebMock::Matchers::AnyArgMatcher
  def ==(other); end

  def initialize(ignore); end
end

class WebMock::Matchers::HashArgumentMatcher
  def ==(_actual, &block); end

  def initialize(expected); end
end

class WebMock::Matchers::HashArgumentMatcher
  def self.from_rspec_matcher(matcher); end
end

class WebMock::Matchers::HashExcludingMatcher
  def ==(actual); end
end

class WebMock::Matchers::HashIncludingMatcher
  def ==(actual); end
end

class WebMock::MethodPattern
  def initialize(pattern); end

  def matches?(method); end
end

class WebMock::NetConnectNotAllowedError
  def initialize(request_signature); end
end

module WebMock::NetHTTPUtility
  def self.check_right_http_connection(); end

  def self.get_uri(net_http, path); end

  def self.puts_warning_for_right_http_if_needed(); end

  def self.request_signature_from_request(net_http, request, body=T.unsafe(nil)); end

  def self.validate_headers(headers); end
end

module WebMock::RSpecMatcherDetector
  def rSpecHashExcludingMatcher?(matcher); end

  def rSpecHashIncludingMatcher?(matcher); end
end

class WebMock::RackResponse
  def body_from_rack_response(response); end

  def build_rack_env(request); end

  def evaluate(request); end

  def initialize(app); end

  def session(); end

  def session_options(); end
end

class WebMock::RequestBodyDiff
  def body_diff(); end

  def initialize(request_signature, request_stub); end
end

class WebMock::RequestExecutionVerifier
  def at_least_times_executed(); end

  def at_least_times_executed=(at_least_times_executed); end

  def at_most_times_executed(); end

  def at_most_times_executed=(at_most_times_executed); end

  def description(); end

  def does_not_match?(); end

  def expected_times_executed(); end

  def expected_times_executed=(expected_times_executed); end

  def failure_message(); end

  def failure_message_when_negated(); end

  def initialize(request_pattern=T.unsafe(nil), expected_times_executed=T.unsafe(nil), at_least_times_executed=T.unsafe(nil), at_most_times_executed=T.unsafe(nil)); end

  def matches?(); end

  def request_pattern(); end

  def request_pattern=(request_pattern); end

  def times_executed(); end

  def times_executed=(times_executed); end
end

class WebMock::RequestExecutionVerifier
  def self.executed_requests_message(); end
end

class WebMock::RequestPattern
  def body_pattern(); end

  def headers_pattern(); end

  def initialize(method, uri, options=T.unsafe(nil)); end

  def matches?(request_signature); end

  def method_pattern(); end

  def uri_pattern(); end

  def with(options=T.unsafe(nil), &block); end
end

class WebMock::RequestRegistry
  def requested_signatures(); end

  def requested_signatures=(requested_signatures); end

  def reset!(); end

  def times_executed(request_pattern); end
end

class WebMock::RequestSignature
  def ==(other); end

  def body(); end

  def body=(body); end

  def eql?(other); end

  def headers(); end

  def headers=(headers); end

  def initialize(method, uri, options=T.unsafe(nil)); end

  def json_headers?(); end

  def method(); end

  def method=(method); end

  def uri(); end

  def uri=(uri); end

  def url_encoded?(); end
end

class WebMock::RequestSignatureSnippet
  def initialize(request_signature); end

  def request_signature(); end

  def request_stub(); end

  def request_stubs(); end

  def stubbing_instructions(); end
end

class WebMock::RequestStub
  def and_raise(*exceptions); end

  def and_return(*response_hashes, &block); end

  def and_timeout(); end

  def has_responses?(); end

  def initialize(method, uri); end

  def matches?(request_signature); end

  def request_pattern(); end

  def request_pattern=(request_pattern); end

  def response(); end

  def times(number); end

  def to_rack(app, options=T.unsafe(nil)); end

  def to_raise(*exceptions); end

  def to_return(*response_hashes, &block); end

  def to_timeout(); end

  def with(params=T.unsafe(nil), &block); end
end

class WebMock::RequestStub
  def self.from_request_signature(signature); end
end

class WebMock::Response
  def ==(other); end

  def body(); end

  def body=(body); end

  def evaluate(request_signature); end

  def exception(); end

  def exception=(exception); end

  def headers(); end

  def headers=(headers); end

  def initialize(options=T.unsafe(nil)); end

  def options=(options); end

  def raise_error_if_any(); end

  def should_timeout(); end

  def status(); end

  def status=(status); end
end

class WebMock::ResponseFactory
  def self.response_for(options); end
end

class WebMock::ResponsesSequence
  def end?(); end

  def initialize(responses); end

  def next_response(); end

  def times_to_repeat(); end

  def times_to_repeat=(times_to_repeat); end
end

class WebMock::StubRegistry
  def global_stubs(); end

  def register_global_stub(order=T.unsafe(nil), &block); end

  def register_request_stub(stub); end

  def registered_request?(request_signature); end

  def remove_request_stub(stub); end

  def request_stubs(); end

  def request_stubs=(request_stubs); end

  def reset!(); end

  def response_for_request(request_signature); end
end

class WebMock::StubRequestSnippet
  def body_pattern(); end

  def initialize(request_stub); end

  def to_s(with_response=T.unsafe(nil)); end
end

class WebMock::URIPattern
  def add_query_params(query_params); end

  def initialize(pattern); end

  def matches?(uri); end
end

class WebMock::Util::HashCounter
  def each(&block); end

  def get(key); end

  def hash=(hash); end

  def put(key, num=T.unsafe(nil)); end

  def select(&block); end
end

class WebMock::Util::HashKeysStringifier
  def self.stringify_keys!(arg, options=T.unsafe(nil)); end
end

class WebMock::Util::Headers
  def self.basic_auth_header(*credentials); end

  def self.decode_userinfo_from_header(header); end

  def self.normalize_headers(headers); end

  def self.pp_headers_string(headers); end

  def self.sorted_headers_string(headers); end
end

class WebMock::Util::JSON
  def self.convert_json_to_yaml(json); end

  def self.parse(json); end

  def self.unescape(str); end
end

class WebMock::Util::QueryMapper
  def self.collect_query_hash(query_array, empty_accumulator, options); end

  def self.collect_query_parts(query); end

  def self.dehash(hash); end

  def self.fill_accumulator_for_dot(accumulator, key, value); end

  def self.fill_accumulator_for_flat(accumulator, key, value); end

  def self.fill_accumulator_for_flat_array(accumulator, key, value); end

  def self.fill_accumulator_for_subscript(accumulator, key, value); end

  def self.normalize_query_hash(query_hash, empty_accumulator, options); end

  def self.query_to_values(query, options=T.unsafe(nil)); end

  def self.to_query(parent, value, options=T.unsafe(nil)); end

  def self.values_to_query(new_query_values, options=T.unsafe(nil)); end
end

class WebMock::Util::URI
  ADDRESSABLE_URIS = ::T.let(nil, ::T.untyped)
  NORMALIZED_URIS = ::T.let(nil, ::T.untyped)
end

module WebMock::Util::URI::CharacterClasses
  USERINFO = ::T.let(nil, ::T.untyped)
end

class WebMock::Util::URI
  def self.encode_unsafe_chars_in_userinfo(userinfo); end

  def self.heuristic_parse(uri); end

  def self.is_uri_localhost?(uri); end

  def self.normalize_uri(uri); end

  def self.sort_query_values(query_values); end

  def self.strip_default_port_from_uri_string(uri_string); end

  def self.uris_encoded_and_unencoded(uris); end

  def self.uris_with_inferred_port_and_without(uris); end

  def self.uris_with_scheme_and_without(uris); end

  def self.uris_with_trailing_slash_and_without(uris); end

  def self.variations_of_uri_as_strings(uri_object, only_with_scheme: T.unsafe(nil)); end
end

class WebMock::Util::ValuesStringifier
  def self.stringify_values(value); end
end

class WebMock::VersionChecker
  def check_version!(); end

  def initialize(library_name, library_version, min_patch_level, max_minor_version=T.unsafe(nil), unsupported_versions=T.unsafe(nil)); end
end

module WebMock
  def self.after_request(options=T.unsafe(nil), &block); end

  def self.allow_net_connect!(options=T.unsafe(nil)); end

  def self.disable!(options=T.unsafe(nil)); end

  def self.disable_net_connect!(options=T.unsafe(nil)); end

  def self.disallow_net_connect!(options=T.unsafe(nil)); end

  def self.enable!(); end

  def self.enable_net_connect!(options=T.unsafe(nil)); end

  def self.globally_stub_request(order=T.unsafe(nil), &block); end

  def self.hide_body_diff!(); end

  def self.hide_stubbing_instructions!(); end

  def self.included(clazz); end

  def self.net_connect_allowed?(*args); end

  def self.net_connect_allowed_with_vcr?(*args); end

  def self.net_connect_allowed_without_vcr?(uri=T.unsafe(nil)); end

  def self.net_connect_explicit_allowed?(allowed, uri=T.unsafe(nil)); end

  def self.print_executed_requests(); end

  def self.registered_request?(request_signature); end

  def self.request(method, uri); end

  def self.reset!(); end

  def self.reset_callbacks(); end

  def self.reset_webmock(); end

  def self.show_body_diff!(); end

  def self.show_body_diff?(); end

  def self.show_stubbing_instructions!(); end

  def self.show_stubbing_instructions?(); end

  def self.version(); end
end

module WebMockHTTPClients
  def build_httpclient_response(webmock_response, stream=T.unsafe(nil), req_header=T.unsafe(nil), &block); end

  def build_request_signature(req, reuse_existing=T.unsafe(nil)); end

  def build_webmock_response(httpclient_response, body=T.unsafe(nil)); end

  def do_get(req, proxy, conn, stream=T.unsafe(nil), &block); end

  def do_get_block(req, proxy, conn, &block); end

  def do_get_stream(req, proxy, conn, &block); end

  def do_request_async(method, uri, query, body, extheader); end

  def previous_signature_for(signature); end

  def webmock_request_signatures(); end

  def webmock_responses(); end
  REQUEST_RESPONSE_LOCK = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver
  def add_extension(extension); end

  def binary(message); end

  def close(reason=T.unsafe(nil), code=T.unsafe(nil)); end

  def initialize(socket, options=T.unsafe(nil)); end

  def ping(*args); end

  def pong(*args); end

  def protocol(); end

  def ready_state(); end

  def set_header(name, value); end

  def start(); end

  def state(); end

  def text(message); end
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  STATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def headers(); end

  def proxy(origin, options=T.unsafe(nil)); end

  def status(); end
  VALID_SCHEMES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def self.generate_key(); end
end

class WebSocket::Driver::CloseEvent
  def code(); end

  def code=(_); end

  def reason(); end

  def reason=(_); end
end

class WebSocket::Driver::CloseEvent
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class WebSocket::Driver::ConnectEvent
end

class WebSocket::Driver::ConnectEvent
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class WebSocket::Driver::Draft75
  def frame(buffer, type=T.unsafe(nil), error_type=T.unsafe(nil)); end

  def parse(chunk); end

  def version(); end
end

class WebSocket::Driver::Draft75
end

class WebSocket::Driver::Draft76
  BODY_SIZE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Draft76
end

module WebSocket::Driver::EventEmitter
  def add_listener(event, callable=T.unsafe(nil), &block); end

  def emit(event, *args); end

  def initialize(); end

  def listener_count(event); end

  def listeners(event); end

  def on(event, callable=T.unsafe(nil), &block); end

  def remove_all_listeners(event=T.unsafe(nil)); end

  def remove_listener(event, callable=T.unsafe(nil), &block); end
end

class WebSocket::Driver::Headers
  def [](name); end

  def []=(name, value); end

  def clear(); end

  def initialize(received=T.unsafe(nil)); end

  def to_h(); end
  ALLOWED_DUPLICATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Headers
end

class WebSocket::Driver::Hybi
  def frame(buffer, type=T.unsafe(nil), code=T.unsafe(nil)); end

  def parse(chunk); end

  def ping(message=T.unsafe(nil), &callback); end

  def pong(message=T.unsafe(nil)); end

  def version(); end
  BYTE = ::T.let(nil, ::T.untyped)
  DEFAULT_ERROR_CODE = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
  ERROR_CODES = ::T.let(nil, ::T.untyped)
  FIN = ::T.let(nil, ::T.untyped)
  GUID = ::T.let(nil, ::T.untyped)
  LENGTH = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  MAX_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
  MIN_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  OPCODE = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OPCODE_CODES = ::T.let(nil, ::T.untyped)
  OPENING_OPCODES = ::T.let(nil, ::T.untyped)
  PACK_FORMATS = ::T.let(nil, ::T.untyped)
  RSV1 = ::T.let(nil, ::T.untyped)
  RSV2 = ::T.let(nil, ::T.untyped)
  RSV3 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Hybi::Frame
  def final(); end

  def final=(final); end

  def length(); end

  def length=(length); end

  def length_bytes(); end

  def length_bytes=(length_bytes); end

  def masked(); end

  def masked=(masked); end

  def masking_key(); end

  def masking_key=(masking_key); end

  def opcode(); end

  def opcode=(opcode); end

  def payload(); end

  def payload=(payload); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Frame
end

class WebSocket::Driver::Hybi::Message
  def <<(frame); end

  def data(); end

  def data=(data); end

  def opcode(); end

  def opcode=(opcode); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Message
end

class WebSocket::Driver::Hybi
  def self.generate_accept(key); end
end

class WebSocket::Driver::MessageEvent
  def data(); end

  def data=(_); end
end

class WebSocket::Driver::MessageEvent
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class WebSocket::Driver::OpenEvent
end

class WebSocket::Driver::OpenEvent
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class WebSocket::Driver::PingEvent
  def data(); end

  def data=(_); end
end

class WebSocket::Driver::PingEvent
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class WebSocket::Driver::PongEvent
  def data(); end

  def data=(_); end
end

class WebSocket::Driver::PongEvent
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class WebSocket::Driver::Proxy
  include ::WebSocket::Driver::EventEmitter
  def headers(); end

  def initialize(client, origin, options); end

  def parse(chunk); end

  def set_header(name, value); end

  def start(); end

  def status(); end
  PORTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Proxy
end

class WebSocket::Driver::Server
  def add_extension(*args, &block); end

  def binary(*args, &block); end

  def close(*args, &block); end

  def env(); end

  def frame(*args, &block); end

  def parse(chunk); end

  def ping(*args, &block); end

  def set_header(*args, &block); end

  def start(*args, &block); end

  def text(*args, &block); end

  def url(); end

  def version(); end

  def write(buffer); end
  EVENTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Server
end

class WebSocket::Driver::StreamReader
  def each_byte(); end

  def put(chunk); end

  def read(length); end
  MINIMUM_AUTOMATIC_PRUNE_OFFSET = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::StreamReader
end

class WebSocket::Driver
  def self.client(socket, options=T.unsafe(nil)); end

  def self.encode(data, encoding=T.unsafe(nil)); end

  def self.rack(socket, options=T.unsafe(nil)); end

  def self.server(socket, options=T.unsafe(nil)); end

  def self.validate_options(options, valid_keys); end

  def self.websocket?(env); end
end

class WebSocket::Extensions
  def activate(header); end

  def add(ext); end

  def close(); end

  def generate_offer(); end

  def generate_response(header); end

  def process_incoming_message(message); end

  def process_outgoing_message(message); end

  def valid_frame_rsv(frame); end

  def valid_frame_rsv?(frame); end
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser
  EXT = ::T.let(nil, ::T.untyped)
  EXT_LIST = ::T.let(nil, ::T.untyped)
  NOTOKEN = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  PARAM = ::T.let(nil, ::T.untyped)
  QUOTED = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser
  def self.parse_header(header); end

  def self.serialize_params(name, params); end
end

module WebSocket::HTTP
end

module WebSocket::HTTP::Headers
  def complete?(); end

  def error?(); end

  def headers(); end

  def initialize(); end

  def parse(chunk); end
  CR = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  MAX_LINE_LENGTH = ::T.let(nil, ::T.untyped)
end

module WebSocket::HTTP::Headers
end

class WebSocket::HTTP::Request
  include ::WebSocket::HTTP::Headers
  def env(); end
  REQUEST_LINE = ::T.let(nil, ::T.untyped)
  REQUEST_TARGET = ::T.let(nil, ::T.untyped)
  RESERVED_HEADERS = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Request
end

class WebSocket::HTTP::Response
  include ::WebSocket::HTTP::Headers
  def [](name); end

  def body(); end

  def code(); end
  STATUS_LINE = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Response
end

module WebSocket::HTTP
  def self.normalize_header(name); end
end

module WebSocket::Mask
end

module WebSocket::Mask
  def self.mask(arg, arg1); end
end

module Zeitwerk
  VERSION = ::T.let(nil, ::T.untyped)
end

module Zeitwerk::ExplicitNamespace
  extend ::Zeitwerk::RealModName
end

class Zlib::Deflate
  def initialize(*arg); end
end

class Zlib::GzipReader
  def initialize(*arg); end
end

class Zlib::GzipReader
  def self.zcat(*arg); end
end

class Zlib::GzipWriter
  def initialize(*arg); end
end

class Zlib::InProgressError
end

class Zlib::InProgressError
end

class Zlib::Inflate
  def initialize(*arg); end
end
