# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/paranoia/all/paranoia.rbi
#
# paranoia-2.6.0

module HandleParanoiaDestroyedInBelongsToAssociation
  def handle_dependency; end
end
module HandleParanoiaDestroyedInHasOneAssociation
  def delete(method = nil); end
end
module Paranoia
  def delete; end
  def deleted?; end
  def destroy; end
  def each_counter_cached_associations; end
  def get_recovery_window_range(opts); end
  def paranoia_delete; end
  def paranoia_destroy!; end
  def paranoia_destroy; end
  def paranoia_destroy_attributes; end
  def paranoia_destroyed?; end
  def paranoia_restore_attributes; end
  def really_destroy!; end
  def restore!(opts = nil); end
  def restore(opts = nil); end
  def restore_associated_records(recovery_window_range = nil); end
  def self.default_sentinel_value; end
  def self.default_sentinel_value=(val); end
  def self.included(klazz); end
  def timestamp_attributes_with_current_time; end
  def trigger_transactional_callbacks?; end
  def within_recovery_window?(recovery_window_range); end
end
module Paranoia::Query
  def deleted; end
  def only_deleted; end
  def paranoid?; end
  def restore(id_or_ids, opts = nil); end
  def with_deleted; end
end
module ActiveRecord
end
module ActiveRecord::Validations
end
module ActiveRecord::Validations::UniquenessParanoiaValidator
  def build_relation(klass, *args); end
end
class ActiveRecord::Validations::UniquenessValidator < ActiveModel::EachValidator
end
class ActiveRecord::Validations::AssociationNotSoftDestroyedValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value); end
end
