#!/usr/bin/env node

const { IconCompiler } = require('@icon-park/compiler')
const fs = require('fs')
const p = require('path')
const mkdirp = require('mkdirp')
const glob = require('glob')

const BUILD_CONFIG = {
  author: 'Brickdoc',
  useType: true,
  fixedSize: true,
  cssPrefix: 'i',
  colors: [
    {
      type: 'color',
      color: '#3E3E3E'
    },
    {
      type: 'color',
      color: '#2C5BFF'
    },
    {
      type: 'color',
      color: '#FFF'
    },
    {
      type: 'color',
      color: '#43CCF8' // TODO: change to a meaningful color
    }
  ],
  theme: [
    {
      name: 'outline',
      fill: [
        {
          type: 'color',
          color: '#333',
          name: 'fill',
          currentColor: true
        },
        {
          type: 'color',
          color: 'transparent',
          fixed: true,
          name: 'background'
        }
      ],
      order: [0, 1, 0, 1]
    },
    {
      name: 'filled',
      fill: [
        {
          type: 'color',
          color: '#333',
          name: 'fill',
          currentColor: true
        },
        {
          type: 'color',
          color: '#FFF',
          fixed: true,
          name: 'background'
        }
      ],
      order: [0, 0, 1, 1]
    },
    {
      name: 'two-tone',
      fill: [
        {
          type: 'color',
          color: '#333',
          name: 'fill',
          currentColor: true
        },
        {
          type: 'color',
          color: '#2F88FF',
          name: 'twoTone'
        }
      ],
      order: [0, 1, 0, 1]
    },
    {
      name: 'multi-color',
      fill: [
        {
          type: 'color',
          color: '#333',
          name: 'outStrokeColor',
          currentColor: true
        },
        {
          type: 'color',
          color: '#2C5BFF',
          name: 'outFillColor'
        },
        {
          type: 'color',
          color: '#FFF',
          name: 'innerStrokeColor'
        },
        {
          type: 'color',
          color: '#43CCF8', // TODO: change to a meaningful color
          name: 'innerFillColor'
        }
      ],
      order: [0, 1, 2, 3]
    }
  ]
}

const compiler = IconCompiler.instance({
  ...BUILD_CONFIG,
  type: 'react'
})

const sourceDirPath = p.join(__dirname, '../assets')
glob.sync('**/*.svg', { cwd: sourceDirPath }).forEach(item => {
  compiler.appendIcon({
    name: p.basename(item, '.svg'),
    description: item,
    content: fs.readFileSync(p.join(sourceDirPath, item), 'utf-8'),
    rtl: false
  })
})

const files = compiler.getIconFiles()

const outputDirPath = p.join(__dirname, '../src/icons')
fs.rmSync(outputDirPath, { recursive: true, force: true })
mkdirp.sync(outputDirPath)

let entrypointContent = ''

files.forEach(({ path, content }) => {
  if (!path.startsWith('icons/')) return
  const iconPath = p.join(outputDirPath, p.basename(path))
  const iconName = p.basename(path).split('.').slice(0, -1).join('.')
  fs.writeFileSync(
    iconPath,
    `// Auto Generated by @brickdoc/design-icons, don't change it manually.
/* eslint-disable import/no-default-export, prefer-template, @typescript-eslint/no-unused-vars */

${content.replace('../runtime', '../icon')}`,
    'utf-8'
  )
  entrypointContent = `${entrypointContent}
  export { default as ${iconName} } from './icons/${iconName}'`
})

const entrypoint = p.join(__dirname, '../src/index.ts')
fs.rmSync(entrypoint, { force: true })
fs.writeFileSync(
  entrypoint,
  `// Auto Generated by @brickdoc/design-icons, don't change it manually.
export { IconProvider, DEFAULT_ICON_CONFIGS } from './icon'
export type { IIconConfig } from './icon'
${entrypointContent}  
  `,
  'utf-8'
)

console.log('Successfully generated.')
