# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/inertia-rails/all/inertia-rails.rbi
#
# inertia-rails-7b62df0923ba

module InertiaRails
  def self.configure; end
  def self.evaluated_blocks(controller, blocks); end
  def self.html_headers; end
  def self.html_headers=(headers); end
  def self.layout; end
  def self.lazy(value = nil, &block); end
  def self.reset!; end
  def self.share(**args); end
  def self.share_block(block); end
  def self.shared_blocks; end
  def self.shared_blocks=(val); end
  def self.shared_data(controller); end
  def self.shared_plain_data; end
  def self.shared_plain_data=(val); end
  def self.ssr_enabled?; end
  def self.ssr_url; end
  def self.threadsafe_html_headers; end
  def self.threadsafe_html_headers=(obj); end
  def self.threadsafe_shared_blocks; end
  def self.threadsafe_shared_blocks=(obj); end
  def self.threadsafe_shared_plain_data; end
  def self.threadsafe_shared_plain_data=(obj); end
  def self.version; end
  def threadsafe_html_headers; end
  def threadsafe_html_headers=(obj); end
  def threadsafe_shared_blocks; end
  def threadsafe_shared_blocks=(obj); end
  def threadsafe_shared_plain_data; end
  def threadsafe_shared_plain_data=(obj); end
end
class InertiaRails::Lazy
  def call; end
  def initialize(value = nil, &block); end
  def to_proc; end
end
module InertiaRails::Configuration
  def layout; end
  def layout=(val); end
  def self.evaluated_version; end
  def self.layout; end
  def self.layout=(val); end
  def self.ssr_enabled; end
  def self.ssr_enabled=(val); end
  def self.ssr_url; end
  def self.ssr_url=(val); end
  def self.version; end
  def self.version=(val); end
  def ssr_enabled; end
  def ssr_enabled=(val); end
  def ssr_url; end
  def ssr_url=(val); end
  def version; end
  def version=(val); end
end
class InertiaRails::Renderer
  def component; end
  def deep_transform_values(hash, proc); end
  def initialize(component, controller, request, response, render_method, props:, view_data:); end
  def page; end
  def partial_keys; end
  def props; end
  def render; end
  def render_ssr; end
  def rendering_partial_component?; end
  def view_data; end
end
class InertiaRails::Middleware
  def call(env); end
  def initialize(app); end
end
class InertiaRails::Middleware::InertiaRailsRequest
  def force_refresh(request); end
  def get?; end
  def inertia_non_post_redirect?(status); end
  def inertia_request?; end
  def inertia_version; end
  def initialize(app, env); end
  def keep_inertia_errors?(status); end
  def non_get_redirectable_method?; end
  def redirect_status?(status); end
  def request_method; end
  def response; end
  def saved_version; end
  def sent_version; end
  def stale_inertia_get?; end
  def stale_inertia_request?; end
  def version_stale?; end
end
module InertiaRails::Helper
  def inertia_headers; end
end
module InertiaRails::Controller
  def capture_inertia_errors(options); end
  def inertia_location(url); end
  def redirect_back(fallback_location:, allow_other_host: nil, **options); end
  def redirect_to(options = nil, response_options = nil); end
  extend ActiveSupport::Concern
end
module InertiaRails::Controller::ClassMethods
  def inertia_share(**args, &block); end
end
class InertiaRails::Engine < Rails::Engine
end
module InertiaDebugExceptions
  def render_for_browser_request(request, wrapper); end
end
class ActionDispatch::Request
  def inertia?; end
  def inertia_partial?; end
end
class ActionDispatch::Routing::Mapper
  def inertia(args, &block); end
end
module ActionController::Renderers
  def _render_with_renderer_inertia(component, options); end
end
class InertiaRails::Error < StandardError
end
class InertiaRails::StaticController < ApplicationController
  include Anonymous_Module_22
end
