#!/usr/bin/env node

const { IconCompiler } = require('@icon-park/compiler')
const fs = require('fs')
const p = require('path')
const mkdirp = require('mkdirp')
const glob = require('glob')

const BUILD_CONFIG = {
  author: 'MashCard',
  useType: true,
  fixedSize: true,
  cssPrefix: 'mc',
  colors: [
    {
      type: 'color',
      // theme.colors.iconPrimary
      color: '#34313c'
    },
    {
      type: 'color',
      color: '#2C5BFF'
    },
    {
      type: 'color',
      color: '#FFF'
    },
    {
      type: 'color',
      color: '#43CCF8' // TODO: change to a meaningful color
    }
  ],
  theme: [
    {
      name: 'outline',
      fill: [
        {
          type: 'color',
          color: '#333',
          name: 'fill',
          currentColor: true
        },
        {
          type: 'color',
          color: 'transparent',
          fixed: true,
          name: 'background'
        }
      ],
      order: [0, 1, 0, 1]
    },
    {
      name: 'filled',
      fill: [
        {
          type: 'color',
          color: '#333',
          name: 'fill',
          currentColor: true
        },
        {
          type: 'color',
          color: '#FFF',
          fixed: true,
          name: 'background'
        }
      ],
      order: [0, 0, 1, 1]
    },
    {
      name: 'two-tone',
      fill: [
        {
          type: 'color',
          color: '#333',
          name: 'fill',
          currentColor: true
        },
        {
          type: 'color',
          color: '#2F88FF',
          name: 'twoTone'
        }
      ],
      order: [0, 1, 0, 1]
    },
    {
      name: 'multi-color',
      fill: [
        {
          type: 'color',
          color: '#333',
          name: 'outStrokeColor',
          currentColor: true
        },
        {
          type: 'color',
          color: '#2C5BFF',
          name: 'outFillColor'
        },
        {
          type: 'color',
          color: '#FFF',
          name: 'innerStrokeColor'
        },
        {
          type: 'color',
          color: '#43CCF8', // TODO: change to a meaningful color
          name: 'innerFillColor'
        }
      ],
      order: [0, 1, 2, 3]
    }
  ]
}

const compiler = IconCompiler.instance({
  ...BUILD_CONFIG,
  type: 'react'
})

// read file list from argv, if empty, glob match all files under assets
let sourceFiles = process.argv.slice(2)
let deleteExisting = false
const sourceDirPath = p.join(__dirname, '../assets')
if (sourceFiles.length === 0) {
  sourceFiles = glob.sync('**/*.svg', { cwd: sourceDirPath }).map(file => p.join(sourceDirPath, file))
  deleteExisting = true
}

sourceFiles.forEach(path => {
  const relativePath = p.relative(sourceDirPath, path)
  try {
    compiler.appendIcon({
      name: p.basename(relativePath, '.svg'),
      description: relativePath,
      content: fs.readFileSync(path, 'utf-8'),
      rtl: false
    })
  } catch (e) {
    console.error(`compiler failed for ${relativePath}`, e)
    process.exit(1)
  }
})

const files = compiler.getIconFiles()

const outputDirPath = p.join(__dirname, '../src/icons')
if (deleteExisting) {
  fs.rmSync(outputDirPath, { recursive: true, force: true })
}
mkdirp.sync(outputDirPath)

const entrypoint = p.join(__dirname, '../src/index.ts')
const existingEntrypointContent = fs.readFileSync(entrypoint, 'utf-8')
let entrypointContent = ''

files.forEach(({ path, content }) => {
  if (!path.startsWith('icons/')) return
  const iconPath = p.join(outputDirPath, p.basename(path))
  const iconName = p.basename(path).split('.').slice(0, -1).join('.')
  fs.writeFileSync(
    iconPath,
    `// Auto Generated by @mashcard/design-icons, don't change it manually.
/* eslint-disable import/no-default-export, prefer-template, @typescript-eslint/no-unused-vars */

${content.replace('../runtime', '../icon')}`,
    'utf-8'
  )

  const exportStmt = `export { default as ${iconName} } from './icons/${iconName}'\n`
  if (deleteExisting || !existingEntrypointContent.includes(exportStmt)) {
    entrypointContent += exportStmt
  }
})

if (deleteExisting) {
  fs.writeFileSync(
    entrypoint,
    `// Auto Generated by @mashcard/design-icons, don't change it manually.
export { IconProvider, DEFAULT_ICON_CONFIGS, ImageIcon } from './icon'
export type { IIconConfig, IIconProps as IconProps } from './icon'
${entrypointContent}`,
    'utf-8'
  )
} else {
  fs.appendFileSync(entrypoint, entrypointContent, 'utf-8')
}

console.log('Successfully generated.')
