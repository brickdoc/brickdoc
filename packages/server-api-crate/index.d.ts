/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * Generate a password hash and salt using Argon2id.
 * @param password - password string to hash
 * @returns password hash
 */
export function passwordHash(password: string, abortSignal?: AbortSignal | undefined | null): Promise<string>
/**
 * Verifies a password hash generated by `passwordHash()`
 * @param hashed - password hash
 * @param password - password string to verify
 * @returns true if the password is correct
 */
export function passwordHashVerify(
  hashed: string,
  password: string,
  abortSignal?: AbortSignal | undefined | null
): Promise<boolean>
/**
 * Computes a fixed-length fingerprint of a string.
 * Suitable for most use cases other than hashing passwords.
 * @param data Message String or Buffer to hash.
 * @param salt 32 bytes hex string. (string length must be 64)
 * @returns hex string
 */
export function genericHash(data: string | Buffer, salt?: string): string
/**
 * Derive a new key from a master key.
 * @param keySeed - master key
 * @param subKeyId - sub key id
 * @param context - It don't have to be secret and can have a low entropy
 */
export function deriveKey(keySeed: string | Buffer, subKeyId: number, context?: string): string
/**
 * Generate a new master key.
 * @returns hex encoded string
 */
export function generateKey(): string
/**
 * Encrypt plain integer with key
 * That is safer alternative to hashids
 * @param {Number} data
 * @param {String} key
 * @return {String} base58 encoded ciphertext
 */
export function intEncrypt(data: number, keyStr: string): string
/**
 * Decrypt plain integer with key
 * That is safer alternative to hashids
 * @param {Number} base58 encoded ciphertext
 * @param {String} key
 * @return {String} original integer
 */
export function intDecrypt(dataStr: string, keyStr: string): number
/**
 * Encrypts a message using XChaCha20-Poly1305-IETF
 * @param plain - plaintext
 * @param key - 32bytes encryption key
 * @returns ciphertext - base64 url-safe encoded ciphertext with nonce
 */
export function aeadEncrypt(plain: string | Buffer, key: string): string
/**
 * Decrypts a message using XChaCha20-Poly1305-IETF
 * @param cipher - base64 url-safe encoded ciphertext with nonce
 * @param key - 32bytes encryption key
 * @returns plaintext buffer
 */
export function aeadDecrypt(cipher: string, key: string): Buffer
/**
 * AnyAscii provides ASCII-only replacement strings for practically
 * all Unicode characters.
 * @param input Any unicode string
 * @returns ASCII-only string
 */
export function anyAscii(input: string): string
/**
 * Base58 encoding (Bitcoin style)
 * @param input string or buffer
 * @returns base58 encoded string
 */
export function base58Encode(input: string | Buffer): string
/**
 * Base58 decoding (Bitcoin style)
 * @param input base58 encoded string
 * @returns decoded buffer
 */
export function base58Decode(input: string): Buffer
/**
 * Make UUID v4 string shorted
 * @param uuid_v4 UUID v4 string
 * @returns shorted UUID v4 string
 *
 */
export function UUIDShorten(uuidV4: string): string
/**
 * Generate shorted UUID v4 string
 * @returns shorted UUID v4 string
 */
export function shortUUIDGen(): string
/**
 * Expand shorted UUID v4 string
 * @param shorted_uuid shorted UUID v4 string
 * @returns standard UUID v4 string
 */
export function shortUUIDExpand(shortUuid: string): string
/**
 * Z85 encoding
 * @param input string or buffer
 * @returns z85 encoded string
 */
export function z85Encode(input: string | Buffer): string
/**
 * Z85 decoding
 * @param input z85 encoded string
 * @returns decoded buffer
 */
export function z85Decode(input: string): Buffer
/**
 * Base64 encoding (url safe)
 * @param input string or buffer
 * @returns base64 encoded string
 */
export function base64UrlSafeEncode(input: string | Buffer): string
/**
 * Base64 decoding (url safe)
 * @param input base64 encoded string
 * @returns decoded buffer
 */
export function base64UrlSafeDecode(input: string): Buffer
/**
 * Generate a slug based on the User Name
 * @param input UserName
 * @returns slugs
 */
export function genSlug(name: string): [preferred: string, alternative: string]
