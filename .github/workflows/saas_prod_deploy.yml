name: Deploy SaaS Prod on BAE
concurrency:
  group: sass-prod-deploy
on:
  workflow_run:
    workflows: ['Monolith Application CI']
    tags: ['v**-saas']
    types:
      - completed
env:
  image: ghcr.io/brickdoc/brickdoc-saas
  domain: brickdoc.app
jobs:
  build:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the codebase
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn
      - run: yarn install --immutable
        env:
          CYPRESS_INSTALL_BINARY: '0'
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.2
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: brickdocCE-saas-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            brickdocCE-saas-${{ runner.os }}-buildx-
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: |
            "RAILS_ENV=production"
          tags: ${{ env.image }}:${{ steps.get_version.outputs.VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  deploy:
    name: 'Deployment to BAE'
    environment:
      name: production
      url: ${{ env.domain }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the codebase
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Deployment to App Engine
        uses: brickdoc/app-engine@v1.2
        with:
          name: brickdoc-saas-prod
          namespace: saas
          image: ${{ env.image }}:${{ steps.get_version.outputs.VERSION }}
          host: ${{ env.domain }}
          chart: ${{ github.workspace }}/templates/helm-charts/brickdoc
          extraArgs: '--timeout 15m --cleanup-on-fail'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GLOBAL_PROD_AK }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GLOBAL_PROD_SECRET }}
          AWS_DEFAULT_REGION: us-west-2
          AWS_EKS_CLUSTER: prod-kube
          APP_ENV_SECRET_KEY_SEED_DECODER: aws_kms
          APP_SECRET_SECRET_KEY_SEED: ${{ secrets.SAAS_PROD_SECRET_KEY_SEED }}
          APP_SECRET_BRICKDOC_DATABASE_URL: ${{ secrets.SAAS_PROD_POSTGRE_URL }}
          APP_SECRET_REDIS_URL: ${{ secrets.SAAS_PROD_REDIS_URL }}
          APP_SECRET_UNSPLASH_API_ACCESS_KEY: ${{ secrets.UNSPLASH_API_ACCESS_KEY }}
          APP_SECRET_UNSPLASH_API_SECRET: ${{ secrets.UNSPLASH_API_SECRET }}
          APP_SECRET_IFRAMELY_API_ACCESS_KEY: ${{ secrets.IFRAMELY_API_ACCESS_KEY }}
          APP_SECRET_SECURITY_REVERSIBLE_INT_INVERSE: ${{ secrets.SAAS_PROD_SECURITY_REVERSIBLE_INT_INVERSE }}
          APP_SECRET_SECURITY_REVERSIBLE_INT_RANDOM: ${{ secrets.SAAS_PROD_SECURITY_REVERSIBLE_INT_RANDOM }}
          APP_SECRET_SECURITY_REVERSIBLE_INT_PRIME: ${{ secrets.SAAS_PROD_SECURITY_REVERSIBLE_INT_PRIME }}
          APP_ENV_SMTP_FROM: saas-no-reply@push-service.brickdoc.com
          APP_ENV_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          APP_SECRET_SMTP_URL: ${{ secrets.SAAS_PROD_SMTP_URL }}
          APP_ENV_HOST: ${{ env.domain }}
          APP_ENV_ASSET_HOST: https://s3.brickapis.com/globalcdn/brickdoc-saas-prod
          APP_ENV_BRICKDOC_BUILD: ${{ github.sha }}.saas-prod
          APP_ENV_AWS_REGION: us-west-2
          APP_ENV_AWS_PUBLIC_BUCKET: brickdoc-prod-public
          APP_ENV_AWS_PRIVATE_BUCKET: brickdoc-prod-private
