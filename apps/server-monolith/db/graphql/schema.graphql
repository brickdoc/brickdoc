schema {
  query: query
  mutation: Mutation
  subscription: subscription
}

"""
Available authentication authentication.
"""
enum AuthMethod {
  """
  Email and Password Authentication
  """
  email_password

  """
   Federated Authentication
  """
  github

  """
   Federated Authentication
  """
  google_oauth2
}

type AuthorizationResult {
  """
  Human-readable error message
  """
  message: String

  """
  Reasons of check failure
  """
  reasons: FailureReasons

  """
  Result of applying a policy rule
  """
  value: Boolean!
}

"""
AutoIncrement Primary Key
"""
scalar AutoIncrementID

type Avatar {
  """
  download url
  """
  downloadUrl: String!

  """
  signed id
  """
  signedId: String!

  """
  url
  """
  url: String!
}

"""
Autogenerated return type of Awareness
"""
type AwarenessPayload {
  operatorId: UUID
  updates: String!
}

"""
InputObject type of Class
"""
input AwarenessUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  doc id
  """
  docId: UUID!

  """
  operator id
  """
  operatorId: String!

  """
  updates
  """
  updates: String!
}

"""
Autogenerated return type of AwarenessUpdate
"""
type AwarenessUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""
ActiveStorage blobs
"""
type Blob {
  """
  Blob key
  """
  blobKey: String!

  """
  Blob url
  """
  downloadUrl: String!

  """
  Blob url
  """
  url: String!
}

"""
Brickdoc Docs::Block
"""
type Block {
  """
  blobs
  """
  blobs: [Blob!]

  """
  collaborators
  """
  collaborators: [BigInt!]!

  """
  content
  """
  content: [JSON!]!
  data: JSON!

  """
  deleted_at
  """
  deletedAt: ISO8601DateTime

  """
  block first child sort
  """
  firstChildSort: BigInt!

  """
  object unique id
  """
  id: UUID!
  meta: BlockMeta!

  """
  block next sort
  """
  nextSort: BigInt!

  """
  parent uuid
  """
  parentId: UUID

  """
  path
  """
  pathArray: [BlockPath!]!
  permissions: blockBaseObjectPermissions!

  """
  root uuid
  """
  rootId: UUID!

  """
  block sort
  """
  sort: BigInt!

  """
  text
  """
  text: String!

  """
  block type
  """
  type: String!
}

type BlockAlias {
  key: String!
  payload: JSON!
}

type BlockAttachment {
  """
  display name
  """
  displayName: String

  """
  height
  """
  height: Int

  """
  url or blob key
  """
  key: String

  """
  mode
  """
  mode: String

  """
  name
  """
  name: String

  """
  size
  """
  size: Int

  """
  source
  """
  source: FileSource

  """
  type
  """
  type: BlockType!

  """
  view url
  """
  viewUrl: String

  """
  width
  """
  width: Int
}

type BlockColor {
  """
  string
  """
  color: String!

  """
  type
  """
  type: BlockType
}

"""
InputObject type of Class
"""
input BlockCommitInput {
  """
  block id
  """
  blockId: UUID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  document id
  """
  documentId: UUID!

  """
  operator id
  """
  operatorId: String!

  """
  previous state id
  """
  prevStateId: UUID

  """
  full or update state
  """
  state: String!

  """
  state id
  """
  stateId: UUID!

  """
  state type
  """
  stateType: Statetype!

  """
  states count
  """
  statesCount: Int!
}

"""
Autogenerated return type of BlockCommit
"""
type BlockCommitPayload {
  block: BlockNew

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Differ Block States with current state
  """
  diffStates: [BlockState!]

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  requireFull: Boolean
}

union BlockCover = BlockColor | BlockImage

"""
InputObject type of Class
"""
input BlockCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  parent id
  """
  parentId: UUID

  """
  title
  """
  title: String!
}

"""
Autogenerated return type of BlockCreate
"""
type BlockCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  id: UUID!
}

"""
InputObject type of Class
"""
input BlockCreateShareLinkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block id
  """
  id: UUID!

  """
  share link target
  """
  target: [ShareLinkInput!]!
}

"""
Autogenerated return type of BlockCreateShareLink
"""
type BlockCreateShareLinkPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input BlockDuplicateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block unique id
  """
  id: UUID!
}

"""
Autogenerated return type of BlockDuplicate
"""
type BlockDuplicatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  formulaIds: [UUID!]!
  id: UUID!
}

type BlockEmbedMeta {
  """
  display name
  """
  displayName: String

  """
  embedType
  """
  embedType: EmbedType

  """
  height
  """
  height: Int

  """
  url or blob key
  """
  key: String

  """
  mode
  """
  mode: String

  """
  name
  """
  name: String

  """
  size
  """
  size: Int

  """
  source
  """
  source: FileSource

  """
  type
  """
  type: String

  """
  view url
  """
  viewUrl: String

  """
  width
  """
  width: Int
}

type BlockEmoji {
  """
  emoji
  """
  emoji: String!

  """
  name
  """
  name: String!

  """
  type
  """
  type: BlockType
}

"""
InputObject type of Class
"""
input BlockHardDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block unique id
  """
  ids: [UUID!]!
}

"""
Autogenerated return type of BlockHardDelete
"""
type BlockHardDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

union BlockIcon = BlockEmoji | BlockImage

type BlockImage {
  """
  align
  """
  align: String

  """
  display name
  """
  displayName: String

  """
  height
  """
  height: Int

  """
  key
  """
  key: String

  """
  mode
  """
  mode: String

  """
  name
  """
  name: String

  """
  aspect ratio
  """
  ratio: Float

  """
  size
  """
  size: Int

  """
  type
  """
  source: FileSource

  """
  type
  """
  type: BlockType

  """
  view url
  """
  viewUrl: String

  """
  width
  """
  width: Int
}

type BlockInfo {
  """
  pod
  """
  collaborators: [Pod!]!

  """
  alias
  """
  enabledAlias: BlockAlias

  """
  icon
  """
  icon: BlockIcon

  """
  id
  """
  id: UUID!

  """
  is deleted
  """
  isDeleted: Boolean!

  """
  is master
  """
  isMaster: Boolean!

  """
  path
  """
  pathArray: [BlockPath!]!

  """
  permission
  """
  permission: ShareLink

  """
  pin
  """
  pin: Boolean!

  """
  title
  """
  title: String!
}

"""
InputObject type of Class
"""
input BlockInput {
  """
  attachments
  """
  attachments: [String!]

  """
  content
  """
  content: [JSON!]!

  """
  data
  """
  data: JSON

  """
  block unique id
  """
  id: UUID!

  """
  meta
  """
  meta: JSON

  """
  parent uuid
  """
  parentId: UUID

  """
  block sort
  """
  sort: BigInt

  """
  text
  """
  text: String!

  """
  block type
  """
  type: String!
}

type BlockLink {
  """
  cover
  """
  cover: String

  """
  description
  """
  description: String

  """
  display name
  """
  displayName: String

  """
  height
  """
  height: Int

  """
  icon
  """
  icon: String

  """
  key
  """
  key: String

  """
  mode
  """
  mode: String

  """
  name
  """
  name: String

  """
  size
  """
  size: Int

  """
  source
  """
  source: FileSource

  """
  title
  """
  title: String

  """
  type
  """
  type: String!

  """
  view url
  """
  viewUrl: String

  """
  width
  """
  width: Int
}

type BlockMeta {
  """
  attachment
  """
  attachment: BlockAttachment

  """
  code auto wrap
  """
  autoWrap: Boolean

  """
  cover
  """
  cover: BlockCover

  """
  embedMeta
  """
  embedMeta: BlockEmbedMeta

  """
  icon
  """
  icon: BlockIcon

  """
  image
  """
  image: BlockImage

  """
  Prosemirror builtin language
  """
  language: String

  """
  Prosemirror builtin level
  """
  level: Int

  """
  link
  """
  link: BlockLink

  """
  page
  """
  page: BlockPage

  """
  people
  """
  people: BlockPeople

  """
  Prosemirror builtin start
  """
  start: String

  """
  title
  """
  title: String
}

"""
InputObject type of Class
"""
input BlockMoveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block unique id
  """
  id: UUID!

  """
  block sort
  """
  sort: BigInt!

  """
  target parent id
  """
  targetParentId: UUID
}

"""
Autogenerated return type of BlockMove
"""
type BlockMovePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Brickdoc Docs::Block New Scheme
"""
type BlockNew {
  """
  Block Type
  """
  blockType: String

  """
  object unique id
  """
  id: UUID!

  """
  Latest State Id
  """
  stateId: String

  """
  Block States
  """
  states: [BlockState!]
  statesCount: Int
}

type BlockPage {
  """
  display name
  """
  displayName: String

  """
  height
  """
  height: Int

  """
  icon
  """
  icon: String

  """
  key
  """
  key: String!

  """
  link
  """
  link: String!

  """
  mode
  """
  mode: String

  """
  name
  """
  name: String

  """
  size
  """
  size: Int

  """
  source
  """
  source: FileSource

  """
  title
  """
  title: String

  """
  type
  """
  type: BlockType

  """
  view url
  """
  viewUrl: String

  """
  width
  """
  width: Int
}

type BlockPath {
  """
  icon
  """
  icon: BlockIcon

  """
  icon
  """
  id: UUID!

  """
  cover
  """
  text: String!
}

type BlockPeople {
  """
  avatar
  """
  avatarUrl: String

  """
  display name
  """
  displayName: String

  """
  key
  """
  domain: String!

  """
  height
  """
  height: Int

  """
  url or blob key
  """
  key: String

  """
  mode
  """
  mode: String

  """
  name
  """
  name: String

  """
  size
  """
  size: Int

  """
  source
  """
  source: FileSource

  """
  type
  """
  type: BlockType

  """
  view url
  """
  viewUrl: String

  """
  width
  """
  width: Int
}

"""
InputObject type of Class
"""
input BlockPinOrUnpinInput {
  """
  block id
  """
  blockId: UUID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  pin
  """
  pin: Boolean!
}

"""
Autogenerated return type of BlockPinOrUnpin
"""
type BlockPinOrUnpinPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input BlockRenameInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block id
  """
  id: UUID!

  """
  New title
  """
  title: String!
}

"""
Autogenerated return type of BlockRename
"""
type BlockRenamePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input BlockRestoreInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block unique id
  """
  ids: [UUID!]!
}

"""
Autogenerated return type of BlockRestore
"""
type BlockRestorePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type BlockSnapshot {
  """
  created at
  """
  createdAt: ISO8601DateTime!

  """
  object unique id
  """
  id: AutoIncrementID!

  """
  Snapshot name
  """
  name: String!

  """
  relative time
  """
  relativeTime: String!

  """
  Snapshot version
  """
  snapshotVersion: Int!
}

"""
InputObject type of Class
"""
input BlockSoftDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  hard delete
  """
  hardDelete: Boolean!

  """
  block unique id
  """
  id: UUID!
}

"""
Autogenerated return type of BlockSoftDelete
"""
type BlockSoftDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Brickdoc Docs::BlockState
"""
type BlockState {
  blockId: UUID

  """
  Created at
  """
  createdAt: ISO8601DateTime!

  """
  object unique id
  """
  id: UUID!
  prevStateId: UUID
  state: String

  """
  State Type
  """
  stateType: Statetype
}

"""
InputObject type of Class
"""
input BlockSyncBatchInput {
  blocks: [BlockInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  deleted ids
  """
  deletedIds: [UUID!]!

  """
  operator id
  """
  operatorId: String!

  """
  block root id
  """
  rootId: UUID!
}

"""
Autogenerated return type of BlockSyncBatch
"""
type BlockSyncBatchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

enum BlockType {
  """
  ATTACHMENT
  """
  ATTACHMENT

  """
  COLOR
  """
  COLOR

  """
  EMOJI
  """
  EMOJI

  """
  IMAGE
  """
  IMAGE

  """
  PAGE
  """
  PAGE

  """
  PEOPLE
  """
  PEOPLE
}

"""
Brickdoc Docs::Comment
"""
type Comment {
  """
  content
  """
  content: JSON!

  """
  created at
  """
  createdAt: ISO8601DateTime!

  """
  creator
  """
  creator: ThinUser!
  id: String!

  """
  status
  """
  status: CommentStatus!

  """
  updated at
  """
  updatedAt: ISO8601DateTime!
}

enum CommentStatus {
  """
  DELETED
  """
  deleted

  """
  NORMAL
  """
  normal
}

"""
Brickdoc Global Configuration
"""
type Config {
  """
  Enable email and password authentication
  """
  accountsEmailPasswordAuth: Boolean!

  """
  Enabled federated identity providers
  """
  accountsFederatedProviders: [FederatedProvider!]

  """
  Preferred Authentication authentication
  """
  accountsPreferredAuthMethod: AuthMethod!

  """
  User agreement link
  """
  userAgreementLink: HttpUrl!
}

"""
Brickdoc Docs::Conversation
"""
type Conversation {
  """
  blockIds
  """
  blockIds: [UUID!]!
  comments: [Comment!]!

  """
  created at
  """
  createdAt: ISO8601DateTime!
  docId: UUID!
  id: String!

  """
  latestReplyAt
  """
  latestReplyAt: ISO8601DateTime

  """
  markIds
  """
  markIds: [UUID!]!

  """
  status
  """
  status: ConversationStatus!

  """
  updated at
  """
  updatedAt: ISO8601DateTime!
}

"""
InputObject type of Class
"""
input ConversationCommentAppendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: JSON!

  """
  Conversation id
  """
  conversationId: String!
}

"""
Autogenerated return type of ConversationCommentAppend
"""
type ConversationCommentAppendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: Comment!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input ConversationCommentCreateInput {
  blockIds: [UUID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: JSON!

  """
  comment doc id
  """
  docId: UUID!
  markIds: [UUID!]
}

"""
Autogenerated return type of ConversationCommentCreate
"""
type ConversationCommentCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  conversation: Conversation!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

enum ConversationStatus {
  """
  DELETED
  """
  deleted

  """
  OPENED
  """
  opened

  """
  RESOLVED
  """
  resolved
}

"""
InputObject type of Class
"""
input CreateDirectUploadInput {
  """
  block id
  """
  blockId: UUID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  input: DirectUploadInput!
  type: Upload!
}

"""
Autogenerated return type of CreateDirectUpload
"""
type CreateDirectUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  directUpload: DirectUpload!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input CreateOrUpdatePodInput {
  """
  Avatar signed id
  """
  avatarSignedId: String

  """
  bio
  """
  bio: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  domain
  """
  domain: String!

  """
  invite enable
  """
  inviteEnable: Boolean

  """
  invite secret
  """
  inviteSecret: String

  """
  pod name
  """
  name: String
  type: PodOperation!
}

"""
Autogenerated return type of CreateOrUpdatePod
"""
type CreateOrUpdatePodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  pod: Pod
}

"""
Represents direct upload credentials
"""
type DirectUpload {
  """
  Created blob record key
  """
  blobKey: String!

  """
  Download url
  """
  downloadUrl: String!

  """
  HTTP request headers (JSON-encoded)
  """
  headers: JSON!

  """
  Blob signed id
  """
  signedId: String!

  """
  Upload URL
  """
  uploadUrl: String!

  """
  View url
  """
  viewUrl: String!
}

"""
File information required to prepare a direct upload
"""
input DirectUploadInput {
  """
  File size (bytes)
  """
  byteSize: Int!

  """
  MD5 file checksum as base64
  """
  checksum: String!

  """
  File content type
  """
  contentType: String!

  """
  Original file name
  """
  filename: String!

  """
  metadata
  """
  metadata: JSON
}

type DocumentHistories {
  """
  History States
  """
  histories: [DocumentHistory!]

  """
  History Users
  """
  users: [ThinUser!]
}

type DocumentHistory {
  """
  Created at
  """
  createdAt: ISO8601DateTime!

  """
  object unique id
  """
  id: UUID!

  """
  Username
  """
  username: String!
}

"""
Autogenerated return type of Document
"""
type DocumentPayload {
  blocks: [BlockNew!]
  histories: [DocumentHistory!]
  operatorId: UUID
  states: [BlockState!]
  users: [ThinUser!]
}

"""
Email Address
"""
scalar Email

enum EmbedType {
  """
  GALLERY
  """
  GALLERY

  """
  LINK
  """
  LINK

  """
  UPLOAD
  """
  UPLOAD
}

type FailureReasons {
  """
  JSON-encoded map of reasons
  """
  details: String!

  """
  Human-readable errors
  """
  fullMessages: [String!]!
}

"""
Accounts Federated Identity Provide Configuration
"""
type FederatedProvider {
  """
  Provider Logo URI
  """
  logo: HttpUrl!

  """
  Provider Name
  """
  name: String!
}

enum FileSource {
  """
  EXTERNAL
  """
  EXTERNAL

  """
  ORIGIN
  """
  ORIGIN
}

type Formula {
  """
  block id
  """
  blockId: UUID!

  """
  dump value
  """
  cacheValue: JSON!

  """
  created at
  """
  createdAt: Int!

  """
  formula definition
  """
  definition: String!

  """
  object unique id
  """
  id: UUID!

  """
  meta
  """
  meta: JSON!

  """
  formula name
  """
  name: String!

  """
  type
  """
  type: String!

  """
  updated at
  """
  updatedAt: ISO8601DateTime!

  """
  version
  """
  version: Int!
}

"""
InputObject type of Class
"""
input FormulaCommitInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  commitFormulas: [FormulaModifyInput!]!
  deleteFormulas: [FormulaDeleteInput!]!
}

"""
Autogenerated return type of FormulaCommit
"""
type FormulaCommitPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input FormulaDeleteInput {
  """
  block id
  """
  blockId: UUID!

  """
  id
  """
  id: UUID!
}

"""
InputObject type of Class
"""
input FormulaModifyInput {
  """
  block id
  """
  blockId: UUID!

  """
  dump value
  """
  cacheValue: JSON!

  """
  definition
  """
  definition: String!

  """
  id
  """
  id: UUID!

  """
  meta
  """
  meta: JSON!

  """
  name
  """
  name: String!

  """
  type
  """
  type: String!

  """
  version
  """
  version: Int!
}

"""
A valid http/https url or image uri
"""
scalar HttpUrl

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Represents untyped JSON
"""
scalar JSON

"""
InputObject type of Class
"""
input JoinPodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  invite secret
  """
  inviteSecret: String
}

"""
Autogenerated return type of JoinPod
"""
type JoinPodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

enum MemberRole {
  """
  ADMIN
  """
  admin

  """
  MEMBER
  """
  member
}

enum MemberState {
  """
  DISABLED
  """
  disabled

  """
  ENABLED
  """
  enabled
}

"""
Represents information about the Brickdoc Server Instance.
"""
type Metadata {
  """
  Current available locales.
  """
  availableLocales: [SelectOption!]!
  availableTimezones: [String!]!

  """
  Brickdoc Global Config
  """
  config: Config!

  """
  object unique id
  """
  id: AutoIncrementID!
}

type Mutation {
  awarenessUpdate(
    """
    Parameters for AwarenessUpdate
    """
    input: AwarenessUpdateInput!
  ): AwarenessUpdatePayload
  blockCommit(
    """
    Parameters for BlockCommit
    """
    input: BlockCommitInput!
  ): BlockCommitPayload
  blockCreate(
    """
    Parameters for BlockCreate
    """
    input: BlockCreateInput!
  ): BlockCreatePayload
  blockCreateShareLink(
    """
    Parameters for BlockCreateShareLink
    """
    input: BlockCreateShareLinkInput!
  ): BlockCreateShareLinkPayload
  blockDuplicate(
    """
    Parameters for BlockDuplicate
    """
    input: BlockDuplicateInput!
  ): BlockDuplicatePayload
  blockHardDelete(
    """
    Parameters for BlockHardDelete
    """
    input: BlockHardDeleteInput!
  ): BlockHardDeletePayload
  blockMove(
    """
    Parameters for BlockMove
    """
    input: BlockMoveInput!
  ): BlockMovePayload
  blockPinOrUnpin(
    """
    Parameters for BlockPinOrUnpin
    """
    input: BlockPinOrUnpinInput!
  ): BlockPinOrUnpinPayload
  blockRename(
    """
    Parameters for BlockRename
    """
    input: BlockRenameInput!
  ): BlockRenamePayload
  blockRestore(
    """
    Parameters for BlockRestore
    """
    input: BlockRestoreInput!
  ): BlockRestorePayload
  blockSoftDelete(
    """
    Parameters for BlockSoftDelete
    """
    input: BlockSoftDeleteInput!
  ): BlockSoftDeletePayload
  blockSyncBatch(
    """
    Parameters for BlockSyncBatch
    """
    input: BlockSyncBatchInput!
  ): BlockSyncBatchPayload
  conversationCommentAppend(
    """
    Parameters for ConversationCommentAppend
    """
    input: ConversationCommentAppendInput!
  ): ConversationCommentAppendPayload
  conversationCommentCreate(
    """
    Parameters for ConversationCommentCreate
    """
    input: ConversationCommentCreateInput!
  ): ConversationCommentCreatePayload
  createDirectUpload(
    """
    Parameters for CreateDirectUpload
    """
    input: CreateDirectUploadInput!
  ): CreateDirectUploadPayload
  createOrUpdatePod(
    """
    Parameters for CreateOrUpdatePod
    """
    input: CreateOrUpdatePodInput!
  ): CreateOrUpdatePodPayload
  formulaCommit(
    """
    Parameters for FormulaCommit
    """
    input: FormulaCommitInput!
  ): FormulaCommitPayload
  joinPod(
    """
    Parameters for JoinPod
    """
    input: JoinPodInput!
  ): JoinPodPayload
  podDestroy(
    """
    Parameters for PodDestroy
    """
    input: PodDestroyInput!
  ): PodDestroyPayload
  podLeave(
    """
    Parameters for PodLeave
    """
    input: PodLeaveInput!
  ): PodLeavePayload
  updateDomain(
    """
    Parameters for UpdateDomain
    """
    input: UpdateDomainInput!
  ): UpdateDomainPayload
  updateMember(
    """
    Parameters for UpdateMember
    """
    input: UpdateMemberInput!
  ): UpdateMemberPayload
  userAppearanceUpdate(
    """
    Parameters for UserAppearanceUpdate
    """
    input: UserAppearanceUpdateInput!
  ): UserAppearanceUpdatePayload
  userConfirmationEmailResend(
    """
    Parameters for UserConfirmationEmailResend
    """
    input: UserConfirmationEmailResendInput!
  ): UserConfirmationEmailResendPayload
  userCreate(
    """
    Parameters for UserCreate
    """
    input: UserCreateInput!
  ): UserCreatePayload
  userDestroy(
    """
    Parameters for UserDestroy
    """
    input: UserDestroyInput!
  ): UserDestroyPayload
  userEmailPasswordSignIn(
    """
    Parameters for UserEmailPasswordSignIn
    """
    input: UserEmailPasswordSignInInput!
  ): UserEmailPasswordSignInPayload
  userForgetPasswordMailSend(
    """
    Parameters for UserForgetPasswordMailSend
    """
    input: UserForgetPasswordMailSendInput!
  ): UserForgetPasswordMailSendPayload
  userPasswordReset(
    """
    Parameters for UserPasswordReset
    """
    input: UserPasswordResetInput!
  ): UserPasswordResetPayload
  userSignOut(
    """
    Parameters for UserSignOut
    """
    input: UserSignOutInput!
  ): UserSignOutPayload
}

"""
Autogenerated return type of NewPatch
"""
type NewPatchPayload {
  patches: [PatchBaseObject!]!
  seq: Int!
  state: Patchstate!
}

"""
session[:omniauth]
"""
type OmniauthSession {
  """
  Like a username, Unique within this instance of Brickdoc.
  """
  domain: String
  hasSession: Boolean!

  """
  Human-readable name of the user
  """
  name: String

  """
  Provider Name
  """
  provider: String
}

type PatchBaseObject {
  id: UUID!
  operatorId: String!
  patchType: Patchtype!
  path: [UUID!]!
  payload: JSON!
}

enum Patchstate {
  """
  ACTIVE
  """
  ACTIVE

  """
  DELETED
  """
  DELETED

  """
  SUBSCRIBED
  """
  SUBSCRIBED
}

enum Patchtype {
  """
  ADD
  """
  ADD

  """
  DELETE
  """
  DELETE

  """
  UPDATE
  """
  UPDATE
}

"""
Brickdoc Docs::Pin
"""
type Pin {
  """
  root uuid
  """
  blockId: UUID!
  meta: BlockMeta!

  """
  text
  """
  text: String!
}

"""
Brickdoc Pod.
"""
type Pod {
  """
  Pod Avatar
  """
  avatarData: Avatar

  """
  public profile bio
  """
  bio: String

  """
  Like a username, Unique within this instance of Brickdoc
  """
  domain: String!

  """
  owner email
  """
  email: String

  """
  object unique id
  """
  id: AutoIncrementID!

  """
  enable invite feature
  """
  inviteEnable: Boolean!

  """
  invite secret
  """
  inviteSecret: String

  """
  Pod Name
  """
  name: String

  """
  owner is current user
  """
  owned: Boolean!

  """
  personal
  """
  personal: Boolean!
}

"""
InputObject type of Class
"""
input PodDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  domain
  """
  domain: String!
}

"""
Autogenerated return type of PodDestroy
"""
type PodDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input PodLeaveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Pod domain
  """
  domain: String!

  """
  User domain
  """
  userDomain: String!
}

"""
Autogenerated return type of PodLeave
"""
type PodLeavePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type PodMember {
  """
  Pod Avatar
  """
  avatarData: Avatar

  """
  Like a username, Unique within this instance of Brickdoc
  """
  domain: String!

  """
  owner email
  """
  email: String

  """
  object unique id
  """
  id: AutoIncrementID!

  """
  Pod Name
  """
  name: String!

  """
  role
  """
  role: MemberRole!

  """
  state
  """
  state: MemberState!
}

"""
Pod operation types
"""
enum PodOperation {
  """
  CREATE
  """
  CREATE

  """
  UPDATE
  """
  UPDATE
}

enum Policytype {
  """
  EDIT
  """
  edit

  """
  VIEW
  """
  view
}

type PreviewBox {
  """
  preview cover
  """
  cover: String

  """
  preview description
  """
  description: String

  """
  preview icon
  """
  icon: String

  """
  preview conetent size
  """
  size: String

  """
  preview title
  """
  title: String!

  """
  preview conetent type
  """
  type: String

  """
  preview url
  """
  url: String!
}

"""
Option Object for BrickDesign Select Component.
"""
type SelectOption {
  """
  option label
  """
  label: String!

  """
  option value
  """
  value: String!
}

type ShareLink {
  key: String!
  policy: Policytype!
  sharePodData: Pod!
  state: ShareLinkState!
}

"""
InputObject type of Class
"""
input ShareLinkInput {
  """
  block unique id
  """
  domain: String!

  """
  policy
  """
  policy: Policytype!

  """
  state type
  """
  state: ShareLinkState!
}

enum ShareLinkState {
  """
  DISABLED
  """
  disabled

  """
  ENABLED
  """
  enabled
}

type SpreadsheetChildren {
  """
  blocks
  """
  blocks: [Block!]
}

enum Statetype {
  """
  full
  """
  full

  """
  update
  """
  update
}

"""
Like podMember but thin
"""
type ThinUser {
  """
  Pod Avatar
  """
  avatarData: Avatar

  """
  Like a username, Unique within this instance of Brickdoc
  """
  domain: String!

  """
  owner email
  """
  email: String

  """
  Pod Name
  """
  name: String!
}

"""
UUID V4
"""
scalar UUID

"""
Unspash image.
"""
type UnsplashImage {
  """
  Blur hash for this image (see https://blurha.sh/)
  """
  blurHash: String

  """
  url for full size image
  """
  fullUrl: String!

  """
  Image height
  """
  height: Int

  """
  Unsplash image id
  """
  id: String!

  """
  url for small size image
  """
  smallUrl: String!

  """
  username
  """
  username: String

  """
  Image width
  """
  width: Int
}

"""
InputObject type of Class
"""
input UpdateDomainInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  current domain
  """
  domain: String!

  """
  new domain
  """
  newDomain: String!
}

"""
Autogenerated return type of UpdateDomain
"""
type UpdateDomainPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input UpdateMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  domain
  """
  domain: String!

  """
  role
  """
  role: MemberRole!

  """
  state
  """
  state: MemberState!
}

"""
Autogenerated return type of UpdateMember
"""
type UpdateMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Upload types
"""
enum Upload {
  """
  Account avatar
  """
  AVATAR

  """
  Page block
  """
  DOC

  """
  Third
  """
  THIRD
}

"""
InputObject type of Class
"""
input UserAppearanceUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's preferred language
  """
  locale: String

  """
  User's preferred timezone
  """
  timezone: String
}

"""
Autogenerated return type of UserAppearanceUpdate
"""
type UserAppearanceUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input UserConfirmationEmailResendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!
}

"""
Autogenerated return type of UserConfirmationEmailResend
"""
type UserConfirmationEmailResendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input UserCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Like a username, Unique within this instance of Brickdoc.
  """
  domain: String!

  """
  User's email address
  """
  email: Email

  """
  User's preferred language
  """
  locale: String!

  """
  Human-readable name of the user
  """
  name: String!

  """
  user password
  """
  password: String

  """
  User's preferred timezone
  """
  timezone: String!
}

"""
Autogenerated return type of UserCreate
"""
type UserCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  isUserActive: Boolean

  """
  redirect url path when sig up successful
  """
  redirectPath: String
}

"""
InputObject type of Class
"""
input UserDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UserDestroy
"""
type UserDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input UserEmailPasswordSignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!

  """
  user password
  """
  password: String!

  """
  remember authentication session
  """
  remember: Boolean!
}

"""
Autogenerated return type of UserEmailPasswordSignIn
"""
type UserEmailPasswordSignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  redirect url path when sign in successful
  """
  redirectPath: String
}

"""
InputObject type of Class
"""
input UserForgetPasswordMailSendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!
}

"""
Autogenerated return type of UserForgetPasswordMailSend
"""
type UserForgetPasswordMailSendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input UserPasswordResetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Reset password
  """
  password: String!

  """
  Reset password token by Devise
  """
  token: String!
}

"""
Autogenerated return type of UserPasswordReset
"""
type UserPasswordResetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
InputObject type of Class
"""
input UserSignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UserSignOut
"""
type UserSignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type ValidateResult {
  """
  error message
  """
  message: String!

  """
  Validate success
  """
  success: Boolean!
}

type blockBaseObjectPermissions {
  canShow: AuthorizationResult!
}

type query {
  """
  return single block by id.
  """
  block(id: String!): Block
  blockInfo(
    """
    domain
    """
    domain: String!

    """
    id
    """
    id: String!
  ): BlockInfo
  blockNew(
    """
    history id
    """
    historyId: String

    """
    block id
    """
    id: String!
  ): BlockNew

  """
  return all pins
  """
  blockPins: [Pin!]
  blockSearch(
    """
    domain
    """
    domain: String!

    """
    input
    """
    input: String!
  ): [Block!]

  """
  return share links by block id.
  """
  blockShareLinks(id: String!): [ShareLink!]!

  """
  return snapshots by block id.
  """
  blockSnapshots(id: String!): [BlockSnapshot!]
  childrenBlocks(
    """
    List all children from root id
    """
    rootId: String!

    """
    Snapshot version
    """
    snapshotVersion: Int!
  ): [Block!]
  conversationComments(pageIds: [UUID!]!): [Conversation!]
  documentHistories(
    """
    doc id
    """
    id: String!
  ): DocumentHistories

  """
  Check domain available.
  """
  domainAvailable(domain: String!): ValidateResult!

  """
  Check email available.
  """
  emailAvailable(email: String!): ValidateResult!

  """
  provides a federated identity session data
  """
  federatedIdentitySession: OmniauthSession!
  formulas(
    """
    List all formulas for pod domain
    """
    domain: String!
    ids: String
  ): [Formula!]

  """
  Return information about current Brickdoc server instance.
  """
  metadata: Metadata!
  pageBlocks(
    """
    List all pages for pod domain
    """
    domain: String!
  ): [Block!]

  """
  Check password available.
  """
  passwordAvailable(password: String!): ValidateResult!

  """
  return current pod for user.
  """
  pod(domain: String!): Pod!

  """
  return all pod users
  """
  podMembers: [PodMember!]

  """
  search pods
  """
  podSearch(input: String!): [Pod!]!

  """
  return all pods for user.
  """
  pods: [Pod!]!

  """
  return preview box data of url
  """
  previewBox(url: String!): PreviewBox!
  spreadsheetChildren(
    """
    List all children from parent id
    """
    parentId: String!
  ): SpreadsheetChildren
  trashBlocks(blockId: UUID, domain: String!, search: String): [Block!]

  """
  return images from unsplash by search
  """
  unsplashImage(page: Int, perPage: Int, query: String): [UnsplashImage!]
}

type subscription {
  awareness(docId: UUID!): AwarenessPayload!
  document(docId: UUID!): DocumentPayload!
  newPatch(docId: UUID!): NewPatchPayload!
}
