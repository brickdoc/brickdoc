# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/action_policy-graphql/all/action_policy-graphql.rbi
#
# action_policy-graphql-0.5.3

module ActionPolicy
end
module ActionPolicy::GraphQL
  def self.authorize_raise_exception; end
  def self.authorize_raise_exception=(arg0); end
  def self.default_authorization_field_prefix; end
  def self.default_authorization_field_prefix=(arg0); end
  def self.default_authorize_rule; end
  def self.default_authorize_rule=(arg0); end
  def self.default_preauthorize_list_rule; end
  def self.default_preauthorize_list_rule=(arg0); end
  def self.default_preauthorize_node_rule; end
  def self.default_preauthorize_node_rule=(arg0); end
  def self.preauthorize_mutation_raise_exception; end
  def self.preauthorize_mutation_raise_exception=(arg0); end
  def self.preauthorize_raise_exception; end
  def self.preauthorize_raise_exception=(arg0); end
end
module ActionPolicy::GraphQL::Types
end
class ActionPolicy::GraphQL::Types::FailureReasons < GraphQL::Schema::Object
  def details; end
end
class ActionPolicy::GraphQL::Types::AuthorizationResult < GraphQL::Schema::Object
  def message; end
  def reasons; end
end
module ActionPolicy::GraphQL::Fields
  def self.included(base); end
end
module ActionPolicy::GraphQL::Fields::ClassMethods
  def expose_authorization_rules(*rules, field_name: nil, prefix: nil, field_options: nil, **options); end
end
module ActionPolicy::GraphQL::AuthorizedField
  def add_extension!(extensions, extension_class, options); end
  def initialize(*args, preauthorize: nil, authorize: nil, authorized_scope: nil, authorize_field: nil, **kwargs, &block); end
end
class ActionPolicy::GraphQL::AuthorizedField::Extension < GraphQL::Schema::FieldExtension
  def extract_option(key, &default); end
end
class ActionPolicy::GraphQL::AuthorizedField::AuthorizeExtension < ActionPolicy::GraphQL::AuthorizedField::Extension
  def after_resolve(value:, context:, object:, **_rest); end
  def apply; end
  def self.show_authorize_mutation_deprecation; end
end
class ActionPolicy::GraphQL::AuthorizedField::PreauthorizeExtension < ActionPolicy::GraphQL::AuthorizedField::Extension
  def apply; end
  def resolve(context:, object:, arguments:, **_rest); end
end
class ActionPolicy::GraphQL::AuthorizedField::AuthorizeFieldExtension < ActionPolicy::GraphQL::AuthorizedField::Extension
  def apply; end
  def resolve(context:, object:, arguments:, **_rest); end
  def underscored_field_name; end
end
class ActionPolicy::GraphQL::AuthorizedField::ScopeExtension < ActionPolicy::GraphQL::AuthorizedField::Extension
  def resolve(context:, object:, arguments:, **_rest); end
end
module ActionPolicy::GraphQL::Behaviour
  def current_user; end
  def self.extended(base); end
  def self.included(base); end
end
