import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
const defaultOptions = {} as const
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** AutoIncrement Primary Key */
  AutoIncrementID: string
  /** Represents non-fractional signed whole numeric values. Since the value may exceed the size of a 32-bit integer, it's encoded as a string. */
  BigInt: any
  /** Email Address */
  Email: string
  /** A valid http/https url or image uri */
  HttpUrl: string
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any
  /** Represents untyped JSON */
  JSON: any
  /** UUID V4 */
  UUID: string
}

/** Available authentication authentication. */
export enum AuthMethod {
  /** Email and Password Authentication */
  EmailPassword = 'email_password',
  /**  Federated Authentication */
  Github = 'github',
  /**  Federated Authentication */
  GoogleOauth2 = 'google_oauth2'
}

export type AuthorizationResult = {
  __typename?: 'AuthorizationResult'
  /** Human-readable error message */
  message?: Maybe<Scalars['String']>
  /** Reasons of check failure */
  reasons?: Maybe<FailureReasons>
  /** Result of applying a policy rule */
  value: Scalars['Boolean']
}

export type BlockAlias = {
  __typename?: 'BlockAlias'
  key: Scalars['String']
  payload: Scalars['JSON']
}

export type BlockAttachment = {
  __typename?: 'BlockAttachment'
  /** height */
  height?: Maybe<Scalars['Int']>
  /** url or blob key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** type */
  type: Blocktype
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockBaseObjectPermissions = {
  __typename?: 'BlockBaseObjectPermissions'
  canShow: AuthorizationResult
}

export type BlockColor = {
  __typename?: 'BlockColor'
  /** string */
  color: Scalars['String']
  /** type */
  type?: Maybe<Blocktype>
}

/** GraphQL */
export type BlockCover = BlockColor | BlockImage

/** Autogenerated input type of BlockCreate */
export type BlockCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** parent id */
  parentId?: InputMaybe<Scalars['UUID']>
  /** title */
  title: Scalars['String']
}

/** Autogenerated return type of BlockCreate */
export type BlockCreatePayload = {
  __typename?: 'BlockCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  id: Scalars['UUID']
}

/** Autogenerated input type of BlockCreateShareLink */
export type BlockCreateShareLinkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block id */
  id: Scalars['UUID']
  /** share link target */
  target: Array<ShareLinkInput>
}

/** Autogenerated return type of BlockCreateShareLink */
export type BlockCreateShareLinkPayload = {
  __typename?: 'BlockCreateShareLinkPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of BlockCreateSnapshot */
export type BlockCreateSnapshotInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  id: Scalars['UUID']
}

/** Autogenerated return type of BlockCreateSnapshot */
export type BlockCreateSnapshotPayload = {
  __typename?: 'BlockCreateSnapshotPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of BlockDuplicate */
export type BlockDuplicateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  id: Scalars['UUID']
}

/** Autogenerated return type of BlockDuplicate */
export type BlockDuplicatePayload = {
  __typename?: 'BlockDuplicatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  formulaIds: Array<Scalars['UUID']>
  id: Scalars['UUID']
}

export type BlockEmbedMeta = {
  __typename?: 'BlockEmbedMeta'
  /** embedType */
  embedType?: Maybe<Embedtype>
  /** height */
  height?: Maybe<Scalars['Int']>
  /** url or blob key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** type */
  type?: Maybe<Scalars['String']>
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockEmoji = {
  __typename?: 'BlockEmoji'
  /** emoji */
  emoji: Scalars['String']
  /** name */
  name: Scalars['String']
  /** type */
  type?: Maybe<Blocktype>
}

/** Autogenerated input type of BlockHardDelete */
export type BlockHardDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  ids: Array<Scalars['UUID']>
}

/** Autogenerated return type of BlockHardDelete */
export type BlockHardDeletePayload = {
  __typename?: 'BlockHardDeletePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** GraphQL */
export type BlockIcon = BlockEmoji | BlockImage

export type BlockImage = {
  __typename?: 'BlockImage'
  /** height */
  height?: Maybe<Scalars['Int']>
  /** key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** aspect ratio */
  ratio?: Maybe<Scalars['Float']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** type */
  source?: Maybe<Filesourcetype>
  /** type */
  type?: Maybe<Blocktype>
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockInfo = {
  __typename?: 'BlockInfo'
  /** space */
  collaborators: Array<Space>
  /** alias */
  enabledAlias?: Maybe<BlockAlias>
  /** icon */
  icon?: Maybe<BlockIcon>
  /** id */
  id: Scalars['UUID']
  /** is deleted */
  isDeleted: Scalars['Boolean']
  /** is master */
  isMaster: Scalars['Boolean']
  /** path */
  pathArray: Array<BlockPath>
  /** permission */
  permission?: Maybe<ShareLink>
  /** pin */
  pin: Scalars['Boolean']
  /** title */
  title: Scalars['String']
}

/** InputObject type of Class */
export type BlockInput = {
  /** attachments */
  attachments?: InputMaybe<Array<Scalars['String']>>
  /** content */
  content: Array<Scalars['JSON']>
  /** data */
  data?: InputMaybe<Scalars['JSON']>
  /** block unique id */
  id: Scalars['UUID']
  /** meta */
  meta?: InputMaybe<Scalars['JSON']>
  /** parent uuid */
  parentId?: InputMaybe<Scalars['UUID']>
  /** block sort */
  sort?: InputMaybe<Scalars['BigInt']>
  /** text */
  text: Scalars['String']
  /** block type */
  type: Scalars['String']
}

export type BlockLink = {
  __typename?: 'BlockLink'
  /** cover */
  cover?: Maybe<Scalars['String']>
  /** description */
  description?: Maybe<Scalars['String']>
  /** height */
  height?: Maybe<Scalars['Int']>
  /** key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** title */
  title?: Maybe<Scalars['String']>
  /** type */
  type: Scalars['String']
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockMeta = {
  __typename?: 'BlockMeta'
  /** attachment */
  attachment?: Maybe<BlockAttachment>
  /** cover */
  cover?: Maybe<BlockCover>
  /** embedMeta */
  embedMeta?: Maybe<BlockEmbedMeta>
  /** icon */
  icon?: Maybe<BlockIcon>
  /** image */
  image?: Maybe<BlockImage>
  /** Prosemirror builtin language */
  language?: Maybe<Scalars['String']>
  /** Prosemirror builtin level */
  level?: Maybe<Scalars['Int']>
  /** link */
  link?: Maybe<BlockLink>
  /** page */
  page?: Maybe<BlockPage>
  /** people */
  people?: Maybe<BlockPeople>
  /** Prosemirror builtin start */
  start?: Maybe<Scalars['String']>
  /** title */
  title?: Maybe<Scalars['String']>
}

/** Autogenerated input type of BlockMove */
export type BlockMoveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  id: Scalars['UUID']
  /** block sort */
  sort: Scalars['BigInt']
  /** target parent id */
  targetParentId?: InputMaybe<Scalars['UUID']>
}

/** Autogenerated return type of BlockMove */
export type BlockMovePayload = {
  __typename?: 'BlockMovePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export type BlockPage = {
  __typename?: 'BlockPage'
  /** height */
  height?: Maybe<Scalars['Int']>
  /** icon */
  icon?: Maybe<Scalars['String']>
  /** key */
  key: Scalars['String']
  /** link */
  link: Scalars['String']
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** title */
  title?: Maybe<Scalars['String']>
  /** type */
  type?: Maybe<Blocktype>
  /** width */
  width?: Maybe<Scalars['Int']>
}

export type BlockPath = {
  __typename?: 'BlockPath'
  /** icon */
  icon?: Maybe<BlockIcon>
  /** icon */
  id: Scalars['UUID']
  /** cover */
  text: Scalars['String']
}

export type BlockPeople = {
  __typename?: 'BlockPeople'
  /** avatar */
  avatarUrl?: Maybe<Scalars['String']>
  /** key */
  domain: Scalars['String']
  /** height */
  height?: Maybe<Scalars['Int']>
  /** url or blob key */
  key?: Maybe<Scalars['String']>
  /** mode */
  mode?: Maybe<Scalars['String']>
  /** name */
  name?: Maybe<Scalars['String']>
  /** size */
  size?: Maybe<Scalars['Int']>
  /** source */
  source?: Maybe<Filesourcetype>
  /** type */
  type?: Maybe<Blocktype>
  /** width */
  width?: Maybe<Scalars['Int']>
}

/** Autogenerated input type of BlockPinOrUnpin */
export type BlockPinOrUnpinInput = {
  /** block id */
  blockId: Scalars['UUID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** pin */
  pin: Scalars['Boolean']
}

/** Autogenerated return type of BlockPinOrUnpin */
export type BlockPinOrUnpinPayload = {
  __typename?: 'BlockPinOrUnpinPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of BlockRename */
export type BlockRenameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block id */
  id: Scalars['UUID']
  /** New title */
  title: Scalars['String']
}

/** Autogenerated return type of BlockRename */
export type BlockRenamePayload = {
  __typename?: 'BlockRenamePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of BlockRestore */
export type BlockRestoreInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** block unique id */
  ids: Array<Scalars['UUID']>
}

/** Autogenerated return type of BlockRestore */
export type BlockRestorePayload = {
  __typename?: 'BlockRestorePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export type BlockSnapshot = {
  __typename?: 'BlockSnapshot'
  /** created at */
  createdAt: Scalars['ISO8601DateTime']
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** Snapshot name */
  name: Scalars['String']
  /** relative time */
  relativeTime: Scalars['String']
  /** Snapshot version */
  snapshotVersion: Scalars['Int']
}

/** Autogenerated input type of BlockSoftDelete */
export type BlockSoftDeleteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** hard delete */
  hardDelete: Scalars['Boolean']
  /** block unique id */
  id: Scalars['UUID']
}

/** Autogenerated return type of BlockSoftDelete */
export type BlockSoftDeletePayload = {
  __typename?: 'BlockSoftDeletePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of BlockSyncBatch */
export type BlockSyncBatchInput = {
  blocks: Array<BlockInput>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** deleted ids */
  deletedIds: Array<Scalars['UUID']>
  /** operator id */
  operatorId: Scalars['String']
  /** block root id */
  rootId: Scalars['UUID']
}

/** Autogenerated return type of BlockSyncBatch */
export type BlockSyncBatchPayload = {
  __typename?: 'BlockSyncBatchPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export enum Blocktype {
  /** ATTACHMENT */
  Attachment = 'ATTACHMENT',
  /** COLOR */
  Color = 'COLOR',
  /** EMOJI */
  Emoji = 'EMOJI',
  /** IMAGE */
  Image = 'IMAGE',
  /** PAGE */
  Page = 'PAGE',
  /** PEOPLE */
  People = 'PEOPLE'
}

/** Autogenerated input type of CreateDirectUpload */
export type CreateDirectUploadInput = {
  /** block id */
  blockId?: InputMaybe<Scalars['UUID']>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  input: DirectUploadInput
  type: Upload
}

/** Autogenerated return type of CreateDirectUpload */
export type CreateDirectUploadPayload = {
  __typename?: 'CreateDirectUploadPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  directUpload: DirectUpload
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of CreateOrUpdateSpace */
export type CreateOrUpdateSpaceInput = {
  /** Avatar signed id */
  avatarSignedId?: InputMaybe<Scalars['String']>
  /** bio */
  bio?: InputMaybe<Scalars['String']>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** domain */
  domain: Scalars['String']
  /** invite enable */
  inviteEnable?: InputMaybe<Scalars['Boolean']>
  /** invite secret */
  inviteSecret?: InputMaybe<Scalars['String']>
  /** space name */
  name?: InputMaybe<Scalars['String']>
  type: SpaceOperation
}

/** Autogenerated return type of CreateOrUpdateSpace */
export type CreateOrUpdateSpacePayload = {
  __typename?: 'CreateOrUpdateSpacePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  space?: Maybe<Space>
}

/** Represents direct upload credentials */
export type DirectUpload = {
  __typename?: 'DirectUpload'
  /** Created blob record key */
  blobKey: Scalars['String']
  /** Download url */
  downloadUrl: Scalars['String']
  /** HTTP request headers (JSON-encoded) */
  headers: Scalars['JSON']
  /** Blob signed id */
  signedId: Scalars['String']
  /** Upload URL */
  uploadUrl: Scalars['String']
  /** View url */
  viewUrl: Scalars['String']
}

/** File information required to prepare a direct upload */
export type DirectUploadInput = {
  /** File size (bytes) */
  byteSize: Scalars['Int']
  /** MD5 file checksum as base64 */
  checksum: Scalars['String']
  /** File content type */
  contentType: Scalars['String']
  /** Original file name */
  filename: Scalars['String']
  /** metadata */
  metadata?: InputMaybe<Scalars['JSON']>
}

/** Brickdoc Docs::Document */
export type Document = {
  __typename?: 'Document'
  /** object unique id */
  id: Scalars['UUID']
  state?: Maybe<Scalars['String']>
  stateId?: Maybe<Scalars['UUID']>
}

export enum Embedtype {
  /** GALLERY */
  Gallery = 'GALLERY',
  /** LINK */
  Link = 'LINK',
  /** UPLOAD */
  Upload = 'UPLOAD'
}

export type FailureReasons = {
  __typename?: 'FailureReasons'
  /** JSON-encoded map of reasons */
  details: Scalars['String']
  /** Human-readable errors */
  fullMessages: Array<Scalars['String']>
}

export enum Filesourcetype {
  /** EXTERNAL */
  External = 'EXTERNAL',
  /** ORIGIN */
  Origin = 'ORIGIN'
}

export type Formula = {
  __typename?: 'Formula'
  /** block id */
  blockId: Scalars['UUID']
  /** dump value */
  cacheValue: Scalars['JSON']
  /** created at */
  createdAt: Scalars['Int']
  /** formula definition */
  definition: Scalars['String']
  /** object unique id */
  id: Scalars['UUID']
  /** meta */
  meta: Scalars['JSON']
  /** formula name */
  name: Scalars['String']
  /** type */
  type: Scalars['String']
  /** updated at */
  updatedAt: Scalars['ISO8601DateTime']
  /** version */
  version: Scalars['Int']
}

/** Autogenerated input type of FormulaCommit */
export type FormulaCommitInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  commitFormulas: Array<FormulaModifyInput>
  deleteFormulas: Array<FormulaDeleteInput>
}

/** Autogenerated return type of FormulaCommit */
export type FormulaCommitPayload = {
  __typename?: 'FormulaCommitPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** InputObject type of Class */
export type FormulaDeleteInput = {
  /** block id */
  blockId: Scalars['UUID']
  /** id */
  id: Scalars['UUID']
}

/** InputObject type of Class */
export type FormulaModifyInput = {
  /** block id */
  blockId: Scalars['UUID']
  /** dump value */
  cacheValue: Scalars['JSON']
  /** definition */
  definition: Scalars['String']
  /** id */
  id: Scalars['UUID']
  /** meta */
  meta: Scalars['JSON']
  /** name */
  name: Scalars['String']
  /** type */
  type: Scalars['String']
  /** version */
  version: Scalars['Int']
}

/** Autogenerated input type of JoinSpace */
export type JoinSpaceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** invite secret */
  inviteSecret?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of JoinSpace */
export type JoinSpacePayload = {
  __typename?: 'JoinSpacePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

export enum MemberRole {
  /** ADMIN */
  Admin = 'admin',
  /** MEMBER */
  Member = 'member'
}

export enum MemberState {
  /** DISABLED */
  Disabled = 'disabled',
  /** ENABLED */
  Enabled = 'enabled'
}

/** Autogenerated return type of NewPatch */
export type NewPatchPayload = {
  __typename?: 'NewPatchPayload'
  patches: Array<PatchBaseObject>
  seq: Scalars['Int']
  state: Patchstate
}

export type PatchBaseObject = {
  __typename?: 'PatchBaseObject'
  id: Scalars['UUID']
  operatorId: Scalars['String']
  patchType: Patchtype
  path: Array<Scalars['UUID']>
  payload: Scalars['JSON']
}

export enum Patchstate {
  /** ACTIVE */
  Active = 'ACTIVE',
  /** DELETED */
  Deleted = 'DELETED',
  /** SUBSCRIBED */
  Subscribed = 'SUBSCRIBED'
}

export enum Patchtype {
  /** ADD */
  Add = 'ADD',
  /** DELETE */
  Delete = 'DELETE',
  /** UPDATE */
  Update = 'UPDATE'
}

export enum Policytype {
  /** EDIT */
  Edit = 'edit',
  /** VIEW */
  View = 'view'
}

export type RootMutation = {
  __typename?: 'RootMutation'
  blockCreate?: Maybe<BlockCreatePayload>
  blockCreateShareLink?: Maybe<BlockCreateShareLinkPayload>
  blockCreateSnapshot?: Maybe<BlockCreateSnapshotPayload>
  blockDuplicate?: Maybe<BlockDuplicatePayload>
  blockHardDelete?: Maybe<BlockHardDeletePayload>
  blockMove?: Maybe<BlockMovePayload>
  blockPinOrUnpin?: Maybe<BlockPinOrUnpinPayload>
  blockRename?: Maybe<BlockRenamePayload>
  blockRestore?: Maybe<BlockRestorePayload>
  blockSoftDelete?: Maybe<BlockSoftDeletePayload>
  blockSyncBatch?: Maybe<BlockSyncBatchPayload>
  createDirectUpload?: Maybe<CreateDirectUploadPayload>
  createOrUpdateSpace?: Maybe<CreateOrUpdateSpacePayload>
  formulaCommit?: Maybe<FormulaCommitPayload>
  joinSpace?: Maybe<JoinSpacePayload>
  snapshotRestore?: Maybe<SnapshotRestorePayload>
  spaceDestroy?: Maybe<SpaceDestroyPayload>
  spaceLeave?: Maybe<SpaceLeavePayload>
  syncDocument?: Maybe<SyncDocumentPayload>
  updateDomain?: Maybe<UpdateDomainPayload>
  updateMember?: Maybe<UpdateMemberPayload>
  userAppearanceUpdate?: Maybe<UserAppearanceUpdatePayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userConfirmationEmailResend?: Maybe<UserConfirmationEmailResendPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userCreate?: Maybe<UserCreatePayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userDestroy?: Maybe<UserDestroyPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userEmailPasswordSignIn?: Maybe<UserEmailPasswordSignInPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userForgetPasswordMailSend?: Maybe<UserForgetPasswordMailSendPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userPasswordReset?: Maybe<UserPasswordResetPayload>
  /**
   *
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  userSignOut?: Maybe<UserSignOutPayload>
}

export type RootMutationBlockCreateArgs = {
  input: BlockCreateInput
}

export type RootMutationBlockCreateShareLinkArgs = {
  input: BlockCreateShareLinkInput
}

export type RootMutationBlockCreateSnapshotArgs = {
  input: BlockCreateSnapshotInput
}

export type RootMutationBlockDuplicateArgs = {
  input: BlockDuplicateInput
}

export type RootMutationBlockHardDeleteArgs = {
  input: BlockHardDeleteInput
}

export type RootMutationBlockMoveArgs = {
  input: BlockMoveInput
}

export type RootMutationBlockPinOrUnpinArgs = {
  input: BlockPinOrUnpinInput
}

export type RootMutationBlockRenameArgs = {
  input: BlockRenameInput
}

export type RootMutationBlockRestoreArgs = {
  input: BlockRestoreInput
}

export type RootMutationBlockSoftDeleteArgs = {
  input: BlockSoftDeleteInput
}

export type RootMutationBlockSyncBatchArgs = {
  input: BlockSyncBatchInput
}

export type RootMutationCreateDirectUploadArgs = {
  input: CreateDirectUploadInput
}

export type RootMutationCreateOrUpdateSpaceArgs = {
  input: CreateOrUpdateSpaceInput
}

export type RootMutationFormulaCommitArgs = {
  input: FormulaCommitInput
}

export type RootMutationJoinSpaceArgs = {
  input: JoinSpaceInput
}

export type RootMutationSnapshotRestoreArgs = {
  input: SnapshotRestoreInput
}

export type RootMutationSpaceDestroyArgs = {
  input: SpaceDestroyInput
}

export type RootMutationSpaceLeaveArgs = {
  input: SpaceLeaveInput
}

export type RootMutationSyncDocumentArgs = {
  input: SyncDocumentInput
}

export type RootMutationUpdateDomainArgs = {
  input: UpdateDomainInput
}

export type RootMutationUpdateMemberArgs = {
  input: UpdateMemberInput
}

export type RootMutationUserAppearanceUpdateArgs = {
  input: UserAppearanceUpdateInput
}

export type RootMutationUserConfirmationEmailResendArgs = {
  input: UserConfirmationEmailResendInput
}

export type RootMutationUserCreateArgs = {
  input: UserCreateInput
}

export type RootMutationUserDestroyArgs = {
  input: UserDestroyInput
}

export type RootMutationUserEmailPasswordSignInArgs = {
  input: UserEmailPasswordSignInInput
}

export type RootMutationUserForgetPasswordMailSendArgs = {
  input: UserForgetPasswordMailSendInput
}

export type RootMutationUserPasswordResetArgs = {
  input: UserPasswordResetInput
}

export type RootMutationUserSignOutArgs = {
  input: UserSignOutInput
}

export type RootQuery = {
  __typename?: 'RootQuery'
  /** return single block by id. */
  block?: Maybe<Block>
  blockInfo?: Maybe<BlockInfo>
  /** return all pins */
  blockPins?: Maybe<Array<Pin>>
  blockSearch?: Maybe<Array<Block>>
  /** return share links by block id. */
  blockShareLinks: Array<ShareLink>
  /** return snapshots by block id. */
  blockSnapshots?: Maybe<Array<BlockSnapshot>>
  childrenBlocks?: Maybe<Array<Block>>
  currentSpaceDomain: Scalars['String']
  document?: Maybe<Document>
  /**
   * Check domain available.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  domainAvailable: Validate_Result
  /**
   * Check email available.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  emailAvailable: Validate_Result
  /**
   * provides a federated identity session data
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  federatedIdentitySession: OmniauthSession
  formulas?: Maybe<Array<Formula>>
  /** Return information about current Brickdoc server instance. */
  metadata: Metadata
  pageBlocks?: Maybe<Array<Block>>
  /**
   * Check password available.
   * Required `context[:entrypoints]` is `[:internal]`.
   * Required `context[:entrypoints]` is `[:internal]`.
   */
  passwordAvailable: Validate_Result
  /** return all plugins for space. */
  plugins: Array<Plugin>
  /** return preview box data of url */
  previewBox: Preview_Box
  /** return current space for user. */
  space: Space
  /** return all space users */
  spaceMembers?: Maybe<Array<Space_Member>>
  /** search spaces */
  spaceSearch: Array<Space>
  /** return all spaces for user. */
  spaces: Array<Space>
  spreadsheetChildren?: Maybe<SpreadsheetChildren>
  trashBlocks?: Maybe<Array<Block>>
  /** return images from unsplash by search */
  unsplashImage?: Maybe<Array<Unsplash_Image>>
}

export type RootQueryBlockArgs = {
  id: Scalars['String']
}

export type RootQueryBlockInfoArgs = {
  domain: Scalars['String']
  id: Scalars['String']
}

export type RootQueryBlockSearchArgs = {
  domain: Scalars['String']
  input: Scalars['String']
}

export type RootQueryBlockShareLinksArgs = {
  id: Scalars['String']
}

export type RootQueryBlockSnapshotsArgs = {
  id: Scalars['String']
}

export type RootQueryChildrenBlocksArgs = {
  rootId: Scalars['String']
  snapshotVersion: Scalars['Int']
}

export type RootQueryDocumentArgs = {
  docId: Scalars['String']
}

export type RootQueryDomainAvailableArgs = {
  domain: Scalars['String']
}

export type RootQueryEmailAvailableArgs = {
  email: Scalars['String']
}

export type RootQueryFormulasArgs = {
  domain: Scalars['String']
  ids?: InputMaybe<Scalars['String']>
}

export type RootQueryPageBlocksArgs = {
  domain: Scalars['String']
}

export type RootQueryPasswordAvailableArgs = {
  password: Scalars['String']
}

export type RootQueryPreviewBoxArgs = {
  url: Scalars['String']
}

export type RootQuerySpaceArgs = {
  domain: Scalars['String']
}

export type RootQuerySpaceSearchArgs = {
  input: Scalars['String']
}

export type RootQuerySpreadsheetChildrenArgs = {
  parentId: Scalars['String']
}

export type RootQueryTrashBlocksArgs = {
  blockId?: InputMaybe<Scalars['UUID']>
  domain: Scalars['String']
  search?: InputMaybe<Scalars['String']>
}

export type RootQueryUnsplashImageArgs = {
  page?: InputMaybe<Scalars['Int']>
  perPage?: InputMaybe<Scalars['Int']>
  query?: InputMaybe<Scalars['String']>
}

export type RootSubscription = {
  __typename?: 'RootSubscription'
  newPatch: NewPatchPayload
  ydoc: YdocPayload
}

export type RootSubscriptionNewPatchArgs = {
  docId: Scalars['UUID']
}

export type RootSubscriptionYdocArgs = {
  docId: Scalars['UUID']
}

export type ShareLink = {
  __typename?: 'ShareLink'
  key: Scalars['String']
  policy: Policytype
  shareSpaceData: Space
  state: ShareLinkState
}

/** InputObject type of Class */
export type ShareLinkInput = {
  /** block unique id */
  domain: Scalars['String']
  /** policy */
  policy: Policytype
  /** state type */
  state: ShareLinkState
}

export enum ShareLinkState {
  /** DISABLED */
  Disabled = 'disabled',
  /** ENABLED */
  Enabled = 'enabled'
}

/** Autogenerated input type of SnapshotRestore */
export type SnapshotRestoreInput = {
  /** block id */
  blockId: Scalars['UUID']
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** integer */
  snapshotVersion: Scalars['Int']
}

/** Autogenerated return type of SnapshotRestore */
export type SnapshotRestorePayload = {
  __typename?: 'SnapshotRestorePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of SpaceDestroy */
export type SpaceDestroyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** domain */
  domain: Scalars['String']
}

/** Autogenerated return type of SpaceDestroy */
export type SpaceDestroyPayload = {
  __typename?: 'SpaceDestroyPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of SpaceLeave */
export type SpaceLeaveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** Space domain */
  domain: Scalars['String']
  /** User domain */
  userDomain: Scalars['String']
}

/** Autogenerated return type of SpaceLeave */
export type SpaceLeavePayload = {
  __typename?: 'SpaceLeavePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Space operation types */
export enum SpaceOperation {
  /** CREATE */
  Create = 'CREATE',
  /** UPDATE */
  Update = 'UPDATE'
}

export type SpreadsheetChildren = {
  __typename?: 'SpreadsheetChildren'
  /** blocks */
  blocks?: Maybe<Array<Block>>
}

/** Autogenerated input type of SyncDocument */
export type SyncDocumentInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** doc id */
  docId: Scalars['UUID']
  /** operator id */
  operatorId: Scalars['String']
  /** previous state id */
  previousStateId?: InputMaybe<Scalars['UUID']>
  /** full state */
  state: Scalars['String']
  /** state id */
  stateId: Scalars['UUID']
  /** updates */
  updates?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of SyncDocument */
export type SyncDocumentPayload = {
  __typename?: 'SyncDocumentPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  document?: Maybe<Document>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UpdateDomain */
export type UpdateDomainInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** current domain */
  domain: Scalars['String']
  /** new domain */
  newDomain: Scalars['String']
}

/** Autogenerated return type of UpdateDomain */
export type UpdateDomainPayload = {
  __typename?: 'UpdateDomainPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UpdateMember */
export type UpdateMemberInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** domain */
  domain: Scalars['String']
  /** role */
  role: MemberRole
  /** state */
  state: MemberState
}

/** Autogenerated return type of UpdateMember */
export type UpdateMemberPayload = {
  __typename?: 'UpdateMemberPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Upload types */
export enum Upload {
  /** Account avatar */
  Avatar = 'AVATAR',
  /** Page block */
  Doc = 'DOC',
  /** Third */
  Third = 'THIRD'
}

/** Autogenerated input type of UserAppearanceUpdate */
export type UserAppearanceUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** User's preferred language */
  locale?: InputMaybe<Scalars['String']>
  /** User's preferred timezone */
  timezone?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of UserAppearanceUpdate */
export type UserAppearanceUpdatePayload = {
  __typename?: 'UserAppearanceUpdatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UserConfirmationEmailResend */
export type UserConfirmationEmailResendInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** User's email address */
  email: Scalars['Email']
}

/** Autogenerated return type of UserConfirmationEmailResend */
export type UserConfirmationEmailResendPayload = {
  __typename?: 'UserConfirmationEmailResendPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UserCreate */
export type UserCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** Like a username, Unique within this instance of Brickdoc. */
  domain: Scalars['String']
  /** User's email address */
  email?: InputMaybe<Scalars['Email']>
  /** User's preferred language */
  locale: Scalars['String']
  /** Human-readable name of the user */
  name: Scalars['String']
  /** user password */
  password?: InputMaybe<Scalars['String']>
  /** User's preferred timezone */
  timezone: Scalars['String']
}

/** Autogenerated return type of UserCreate */
export type UserCreatePayload = {
  __typename?: 'UserCreatePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  isUserActive?: Maybe<Scalars['Boolean']>
  /** redirect url path when sig up successful */
  redirectPath?: Maybe<Scalars['String']>
}

/** Autogenerated input type of UserDestroy */
export type UserDestroyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of UserDestroy */
export type UserDestroyPayload = {
  __typename?: 'UserDestroyPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UserEmailPasswordSignIn */
export type UserEmailPasswordSignInInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** User's email address */
  email: Scalars['Email']
  /** user password */
  password: Scalars['String']
  /** remember authentication session */
  remember: Scalars['Boolean']
}

/** Autogenerated return type of UserEmailPasswordSignIn */
export type UserEmailPasswordSignInPayload = {
  __typename?: 'UserEmailPasswordSignInPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
  /** redirect url path when sign in successful */
  redirectPath?: Maybe<Scalars['String']>
}

/** Autogenerated input type of UserForgetPasswordMailSend */
export type UserForgetPasswordMailSendInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** User's email address */
  email: Scalars['Email']
}

/** Autogenerated return type of UserForgetPasswordMailSend */
export type UserForgetPasswordMailSendPayload = {
  __typename?: 'UserForgetPasswordMailSendPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UserPasswordReset */
export type UserPasswordResetInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** Reset password */
  password: Scalars['String']
  /** Reset password token by Devise */
  token: Scalars['String']
}

/** Autogenerated return type of UserPasswordReset */
export type UserPasswordResetPayload = {
  __typename?: 'UserPasswordResetPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated input type of UserSignOut */
export type UserSignOutInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
}

/** Autogenerated return type of UserSignOut */
export type UserSignOutPayload = {
  __typename?: 'UserSignOutPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Errors encountered during execution of the mutation. */
  errors: Array<Scalars['String']>
}

/** Autogenerated return type of Ydoc */
export type YdocPayload = {
  __typename?: 'YdocPayload'
  operatorId?: Maybe<Scalars['UUID']>
  stateId?: Maybe<Scalars['UUID']>
  updates: Scalars['String']
}

export type Avatar = {
  __typename?: 'avatar'
  /** download url */
  downloadUrl: Scalars['String']
  /** signed id */
  signedId: Scalars['String']
  /** url */
  url: Scalars['String']
}

/** ActiveStorage blobs */
export type Blob = {
  __typename?: 'blob'
  /** Blob key */
  blobKey: Scalars['String']
  /** Blob url */
  downloadUrl: Scalars['String']
  /** Blob url */
  url: Scalars['String']
}

/** Brickdoc Docs::Block */
export type Block = {
  __typename?: 'block'
  /** blobs */
  blobs?: Maybe<Array<Blob>>
  /** collaborators */
  collaborators: Array<Scalars['BigInt']>
  /** content */
  content: Array<Scalars['JSON']>
  data: Scalars['JSON']
  /** deleted_at */
  deletedAt?: Maybe<Scalars['ISO8601DateTime']>
  /** block first child sort */
  firstChildSort: Scalars['BigInt']
  /** object unique id */
  id: Scalars['UUID']
  meta: BlockMeta
  /** block next sort */
  nextSort: Scalars['BigInt']
  /** parent uuid */
  parentId?: Maybe<Scalars['UUID']>
  /** path */
  pathArray: Array<BlockPath>
  permissions: BlockBaseObjectPermissions
  /** root uuid */
  rootId: Scalars['UUID']
  /** block sort */
  sort: Scalars['BigInt']
  /** text */
  text: Scalars['String']
  /** block type */
  type: Scalars['String']
}

/** Brickdoc Global Configuration */
export type Config = {
  __typename?: 'config'
  /** Enable email and password authentication */
  accountsEmailPasswordAuth: Scalars['Boolean']
  /** Enabled federated identity providers */
  accountsFederatedProviders?: Maybe<Array<FederatedProvider>>
  /** Preferred Authentication authentication */
  accountsPreferredAuthMethod: AuthMethod
  /** User agreement link */
  userAgreementLink: Scalars['HttpUrl']
}

/** Accounts Federated Identity Provide Configuration */
export type FederatedProvider = {
  __typename?: 'federatedProvider'
  /** Provider Logo URI */
  logo: Scalars['HttpUrl']
  /** Provider Name */
  name: Scalars['String']
}

/** Represents information about the Brickdoc Server Instance. */
export type Metadata = {
  __typename?: 'metadata'
  /** Current available locales. */
  availableLocales: Array<Select_Option>
  availableTimezones: Array<Scalars['String']>
  /** Brickdoc Global Config */
  config: Config
  /** object unique id */
  id: Scalars['AutoIncrementID']
}

/** session[:omniauth] */
export type OmniauthSession = {
  __typename?: 'omniauthSession'
  /** Like a username, Unique within this instance of Brickdoc. */
  domain?: Maybe<Scalars['String']>
  hasSession: Scalars['Boolean']
  /** Human-readable name of the user */
  name?: Maybe<Scalars['String']>
  /** Provider Name */
  provider?: Maybe<Scalars['String']>
}

/** Brickdoc Docs::Pin */
export type Pin = {
  __typename?: 'pin'
  /** root uuid */
  blockId: Scalars['UUID']
  meta: BlockMeta
  /** text */
  text: Scalars['String']
}

/** Brickdoc Plugin. */
export type Plugin = {
  __typename?: 'plugin'
  /** Enabled */
  enabled: Scalars['Boolean']
  /** logo */
  logo: Scalars['String']
  /** metadata */
  metadata: Scalars['JSON']
  /** Plugin Name */
  name: Scalars['String']
  /** version */
  version: Scalars['String']
}

export type Preview_Box = {
  __typename?: 'preview_box'
  /** preview cover */
  cover?: Maybe<Scalars['String']>
  /** preview description */
  description?: Maybe<Scalars['String']>
  /** preview icon */
  icon?: Maybe<Scalars['String']>
  /** preview conetent size */
  size?: Maybe<Scalars['String']>
  /** preview title */
  title: Scalars['String']
  /** preview conetent type */
  type?: Maybe<Scalars['String']>
  /** preview url */
  url: Scalars['String']
}

/** Option Object for BrickDesign Select Component. */
export type Select_Option = {
  __typename?: 'select_option'
  /** option label */
  label: Scalars['String']
  /** option value */
  value: Scalars['String']
}

/** Brickdoc Space. */
export type Space = {
  __typename?: 'space'
  /** Space Avatar */
  avatarData?: Maybe<Avatar>
  /** public profile bio */
  bio?: Maybe<Scalars['String']>
  /** Like a username, Unique within this instance of Brickdoc */
  domain: Scalars['String']
  /** owner email */
  email?: Maybe<Scalars['String']>
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** enable invite feature */
  inviteEnable: Scalars['Boolean']
  /** invite secret */
  inviteSecret?: Maybe<Scalars['String']>
  /** Space Name */
  name?: Maybe<Scalars['String']>
  /** owner is current user */
  owned: Scalars['Boolean']
  /** personal */
  personal: Scalars['Boolean']
}

export type Space_Member = {
  __typename?: 'space_member'
  /** Space Avatar */
  avatarData?: Maybe<Avatar>
  /** Like a username, Unique within this instance of Brickdoc */
  domain: Scalars['String']
  /** owner email */
  email?: Maybe<Scalars['String']>
  /** object unique id */
  id: Scalars['AutoIncrementID']
  /** Space Name */
  name: Scalars['String']
  /** role */
  role: MemberRole
  /** state */
  state: MemberState
}

/** Unspash image. */
export type Unsplash_Image = {
  __typename?: 'unsplash_image'
  /** url for full size image */
  fullUrl: Scalars['String']
  /** Image height */
  height?: Maybe<Scalars['Int']>
  /** Unsplash image id */
  id: Scalars['String']
  /** url for small size image */
  smallUrl: Scalars['String']
  /** username */
  username?: Maybe<Scalars['String']>
  /** Image width */
  width?: Maybe<Scalars['Int']>
}

export type Validate_Result = {
  __typename?: 'validate_result'
  /** error message */
  message: Scalars['String']
  /** Validate success */
  success: Scalars['Boolean']
}

export type QueryEmailAvailableFromWsQueryVariables = Exact<{
  email: Scalars['String']
}>

export type QueryEmailAvailableFromWsQuery = {
  __typename?: 'RootQuery'
  emailAvailable: { __typename?: 'validate_result'; success: boolean; message: string }
}

export type QueryPasswordAvailableFromWsQueryVariables = Exact<{
  password: Scalars['String']
}>

export type QueryPasswordAvailableFromWsQuery = {
  __typename?: 'RootQuery'
  passwordAvailable: { __typename?: 'validate_result'; success: boolean; message: string }
}

export type UserSignOutMutationVariables = Exact<{
  input: UserSignOutInput
}>

export type UserSignOutMutation = {
  __typename?: 'RootMutation'
  userSignOut?: { __typename?: 'UserSignOutPayload'; errors: Array<string> } | null
}

export type GetAccountsConfigFromWsQueryVariables = Exact<{ [key: string]: never }>

export type GetAccountsConfigFromWsQuery = {
  __typename?: 'RootQuery'
  metadata: {
    __typename?: 'metadata'
    id: string
    config: {
      __typename?: 'config'
      userAgreementLink: string
      accountsPreferredAuthMethod: AuthMethod
      accountsEmailPasswordAuth: boolean
      accountsFederatedProviders?: Array<{ __typename?: 'federatedProvider'; name: string; logo: string }> | null
    }
  }
}

export type UserForgetPasswordMailSendMutationVariables = Exact<{
  input: UserForgetPasswordMailSendInput
}>

export type UserForgetPasswordMailSendMutation = {
  __typename?: 'RootMutation'
  userForgetPasswordMailSend?: { __typename?: 'UserForgetPasswordMailSendPayload'; errors: Array<string> } | null
}

export type UserPasswordResetMutationVariables = Exact<{
  input: UserPasswordResetInput
}>

export type UserPasswordResetMutation = {
  __typename?: 'RootMutation'
  userPasswordReset?: { __typename?: 'UserPasswordResetPayload'; errors: Array<string> } | null
}

export type UserEmailPasswordSignInMutationVariables = Exact<{
  input: UserEmailPasswordSignInInput
}>

export type UserEmailPasswordSignInMutation = {
  __typename?: 'RootMutation'
  userEmailPasswordSignIn?: {
    __typename?: 'UserEmailPasswordSignInPayload'
    errors: Array<string>
    redirectPath?: string | null
  } | null
}

export type GetFederatedIdentitySessionQueryVariables = Exact<{ [key: string]: never }>

export type GetFederatedIdentitySessionQuery = {
  __typename?: 'RootQuery'
  federatedIdentitySession: {
    __typename?: 'omniauthSession'
    hasSession: boolean
    domain?: string | null
    name?: string | null
    provider?: string | null
  }
}

export type UserCreateMutationVariables = Exact<{
  input: UserCreateInput
}>

export type UserCreateMutation = {
  __typename?: 'RootMutation'
  userCreate?: {
    __typename?: 'UserCreatePayload'
    errors: Array<string>
    redirectPath?: string | null
    isUserActive?: boolean | null
  } | null
}

export type UserConfirmationEmailResendMutationVariables = Exact<{
  input: UserConfirmationEmailResendInput
}>

export type UserConfirmationEmailResendMutation = {
  __typename?: 'RootMutation'
  userConfirmationEmailResend?: { __typename?: 'UserConfirmationEmailResendPayload'; errors: Array<string> } | null
}

export type QueryDomainAvailableFromWsQueryVariables = Exact<{
  domain: Scalars['String']
}>

export type QueryDomainAvailableFromWsQuery = {
  __typename?: 'RootQuery'
  domainAvailable: { __typename?: 'validate_result'; success: boolean; message: string }
}

export type GetMetadataFromWsQueryVariables = Exact<{ [key: string]: never }>

export type GetMetadataFromWsQuery = {
  __typename?: 'RootQuery'
  metadata: {
    __typename?: 'metadata'
    id: string
    availableTimezones: Array<string>
    availableLocales: Array<{ __typename?: 'select_option'; label: string; value: string }>
  }
}

export type CreateDirectUploadMutationVariables = Exact<{
  input: CreateDirectUploadInput
}>

export type CreateDirectUploadMutation = {
  __typename?: 'RootMutation'
  createDirectUpload?: {
    __typename?: 'CreateDirectUploadPayload'
    directUpload: {
      __typename?: 'DirectUpload'
      uploadUrl: string
      headers: any
      blobKey: string
      viewUrl: string
      downloadUrl: string
      signedId: string
    }
  } | null
}

export type GetSpacesQueryVariables = Exact<{ [key: string]: never }>

export type GetSpacesQuery = {
  __typename?: 'RootQuery'
  spaces: Array<{
    __typename?: 'space'
    id: string
    domain: string
    name?: string | null
    email?: string | null
    personal: boolean
    inviteEnable: boolean
    owned: boolean
    bio?: string | null
    avatarData?: { __typename?: 'avatar'; url: string; downloadUrl: string; signedId: string } | null
  }>
}

export type GetSpaceQueryVariables = Exact<{
  domain: Scalars['String']
}>

export type GetSpaceQuery = {
  __typename?: 'RootQuery'
  space: {
    __typename?: 'space'
    id: string
    domain: string
    name?: string | null
    personal: boolean
    inviteEnable: boolean
    inviteSecret?: string | null
    bio?: string | null
    avatarData?: { __typename?: 'avatar'; url: string; downloadUrl: string; signedId: string } | null
  }
}

export type GetCurrentSpaceQueryVariables = Exact<{
  domain: Scalars['String']
}>

export type GetCurrentSpaceQuery = {
  __typename?: 'RootQuery'
  currentSpaceDomain: string
  space: {
    __typename?: 'space'
    id: string
    domain: string
    name?: string | null
    personal: boolean
    owned: boolean
    inviteEnable: boolean
    inviteSecret?: string | null
    bio?: string | null
    avatarData?: { __typename?: 'avatar'; url: string; downloadUrl: string; signedId: string } | null
  }
}

export type GetSpaceMembersQueryVariables = Exact<{ [key: string]: never }>

export type GetSpaceMembersQuery = {
  __typename?: 'RootQuery'
  spaceMembers?: Array<{
    __typename?: 'space_member'
    domain: string
    email?: string | null
    name: string
    role: MemberRole
    state: MemberState
    avatarData?: { __typename?: 'avatar'; url: string; downloadUrl: string; signedId: string } | null
  }> | null
}

export type GetBlockPinsQueryVariables = Exact<{ [key: string]: never }>

export type GetBlockPinsQuery = {
  __typename?: 'RootQuery'
  blockPins?: Array<{
    __typename?: 'pin'
    blockId: string
    text: string
    meta: {
      __typename?: 'BlockMeta'
      icon?:
        | { __typename?: 'BlockEmoji'; type?: Blocktype | null; name: string; emoji: string }
        | { __typename?: 'BlockImage'; type?: Blocktype | null; source?: Filesourcetype | null; key?: string | null }
        | null
    }
  }> | null
}

export type QueryUnsplashImageQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['Int']>
  perPage?: InputMaybe<Scalars['Int']>
}>

export type QueryUnsplashImageQuery = {
  __typename?: 'RootQuery'
  unsplashImage?: Array<{
    __typename?: 'unsplash_image'
    id: string
    width?: number | null
    height?: number | null
    fullUrl: string
    smallUrl: string
    username?: string | null
  }> | null
}

export type QueryPreviewBoxQueryVariables = Exact<{
  url: Scalars['String']
}>

export type QueryPreviewBoxQuery = {
  __typename?: 'RootQuery'
  previewBox: {
    __typename?: 'preview_box'
    url: string
    title: string
    description?: string | null
    cover?: string | null
    icon?: string | null
    type?: string | null
    size?: string | null
  }
}

export type QuerySpaceSearchQueryVariables = Exact<{
  input: Scalars['String']
}>

export type QuerySpaceSearchQuery = {
  __typename?: 'RootQuery'
  spaceSearch: Array<{
    __typename?: 'space'
    domain: string
    email?: string | null
    name?: string | null
    avatarData?: { __typename?: 'avatar'; url: string } | null
  }>
}

export type CreateOrUpdateSpaceMutationVariables = Exact<{
  input: CreateOrUpdateSpaceInput
}>

export type CreateOrUpdateSpaceMutation = {
  __typename?: 'RootMutation'
  createOrUpdateSpace?: {
    __typename?: 'CreateOrUpdateSpacePayload'
    errors: Array<string>
    space?: {
      __typename?: 'space'
      domain: string
      name?: string | null
      inviteEnable: boolean
      inviteSecret?: string | null
    } | null
  } | null
}

export type JoinSpaceMutationVariables = Exact<{
  input: JoinSpaceInput
}>

export type JoinSpaceMutation = {
  __typename?: 'RootMutation'
  joinSpace?: { __typename?: 'JoinSpacePayload'; errors: Array<string> } | null
}

export type UpdateMemberMutationVariables = Exact<{
  input: UpdateMemberInput
}>

export type UpdateMemberMutation = {
  __typename?: 'RootMutation'
  updateMember?: { __typename?: 'UpdateMemberPayload'; errors: Array<string> } | null
}

export type GetBlockSearchQueryVariables = Exact<{
  domain: Scalars['String']
  input: Scalars['String']
}>

export type GetBlockSearchQuery = {
  __typename?: 'RootQuery'
  blockSearch?: Array<{ __typename?: 'block'; id: string; type: string; text: string; rootId: string }> | null
}

export type GetPageBlocksQueryVariables = Exact<{
  domain: Scalars['String']
}>

export type GetPageBlocksQuery = {
  __typename?: 'RootQuery'
  pageBlocks?: Array<{
    __typename?: 'block'
    id: string
    sort: any
    nextSort: any
    firstChildSort: any
    rootId: string
    parentId?: string | null
    type: string
    text: string
    content: Array<any>
    data: any
    meta: {
      __typename?: 'BlockMeta'
      cover?:
        | { __typename?: 'BlockColor'; type?: Blocktype | null; color: string }
        | { __typename?: 'BlockImage'; type?: Blocktype | null; source?: Filesourcetype | null; key?: string | null }
        | null
      icon?:
        | { __typename?: 'BlockEmoji'; type?: Blocktype | null; name: string; emoji: string }
        | { __typename?: 'BlockImage'; type?: Blocktype | null; source?: Filesourcetype | null; key?: string | null }
        | null
    }
  }> | null
}

export type GetTrashBlocksQueryVariables = Exact<{
  domain: Scalars['String']
  blockId?: InputMaybe<Scalars['UUID']>
  search?: InputMaybe<Scalars['String']>
}>

export type GetTrashBlocksQuery = {
  __typename?: 'RootQuery'
  trashBlocks?: Array<{
    __typename?: 'block'
    id: string
    deletedAt?: any | null
    rootId: string
    parentId?: string | null
    type: string
    text: string
    pathArray: Array<{
      __typename?: 'BlockPath'
      id: string
      text: string
      icon?:
        | { __typename?: 'BlockEmoji'; type?: Blocktype | null; name: string; emoji: string }
        | { __typename?: 'BlockImage'; type?: Blocktype | null; source?: Filesourcetype | null; key?: string | null }
        | null
    }>
    meta: {
      __typename?: 'BlockMeta'
      people?: {
        __typename?: 'BlockPeople'
        type?: Blocktype | null
        domain: string
        name?: string | null
        avatarUrl?: string | null
      } | null
      cover?:
        | { __typename?: 'BlockColor'; type?: Blocktype | null; color: string }
        | { __typename?: 'BlockImage'; type?: Blocktype | null; source?: Filesourcetype | null; key?: string | null }
        | null
      icon?:
        | { __typename?: 'BlockEmoji'; type?: Blocktype | null; name: string; emoji: string }
        | { __typename?: 'BlockImage'; type?: Blocktype | null; source?: Filesourcetype | null; key?: string | null }
        | null
    }
  }> | null
}

export type GetBlockSnapshotsQueryVariables = Exact<{
  id: Scalars['String']
}>

export type GetBlockSnapshotsQuery = {
  __typename?: 'RootQuery'
  blockSnapshots?: Array<{
    __typename?: 'BlockSnapshot'
    id: string
    snapshotVersion: number
    name: string
    createdAt: any
    relativeTime: string
  }> | null
}

export type GetBlockShareLinksQueryVariables = Exact<{
  id: Scalars['String']
}>

export type GetBlockShareLinksQuery = {
  __typename?: 'RootQuery'
  blockShareLinks: Array<{
    __typename?: 'ShareLink'
    key: string
    policy: Policytype
    state: ShareLinkState
    shareSpaceData: {
      __typename?: 'space'
      name?: string | null
      domain: string
      email?: string | null
      avatarData?: { __typename?: 'avatar'; url: string } | null
    }
  }>
}

export type BlockDuplicateMutationVariables = Exact<{
  input: BlockDuplicateInput
}>

export type BlockDuplicateMutation = {
  __typename?: 'RootMutation'
  blockDuplicate?: {
    __typename?: 'BlockDuplicatePayload'
    id: string
    formulaIds: Array<string>
    errors: Array<string>
  } | null
}

export type BlockSoftDeleteMutationVariables = Exact<{
  input: BlockSoftDeleteInput
}>

export type BlockSoftDeleteMutation = {
  __typename?: 'RootMutation'
  blockSoftDelete?: { __typename?: 'BlockSoftDeletePayload'; errors: Array<string> } | null
}

export type BlockHardDeleteMutationVariables = Exact<{
  input: BlockHardDeleteInput
}>

export type BlockHardDeleteMutation = {
  __typename?: 'RootMutation'
  blockHardDelete?: { __typename?: 'BlockHardDeletePayload'; errors: Array<string> } | null
}

export type BlockRestoreMutationVariables = Exact<{
  input: BlockRestoreInput
}>

export type BlockRestoreMutation = {
  __typename?: 'RootMutation'
  blockRestore?: { __typename?: 'BlockRestorePayload'; errors: Array<string> } | null
}

export type BlockPinOrUnpinMutationVariables = Exact<{
  input: BlockPinOrUnpinInput
}>

export type BlockPinOrUnpinMutation = {
  __typename?: 'RootMutation'
  blockPinOrUnpin?: { __typename?: 'BlockPinOrUnpinPayload'; errors: Array<string> } | null
}

export type BlockCreateMutationVariables = Exact<{
  input: BlockCreateInput
}>

export type BlockCreateMutation = {
  __typename?: 'RootMutation'
  blockCreate?: { __typename?: 'BlockCreatePayload'; id: string; errors: Array<string> } | null
}

export type BlockCreateShareLinkMutationVariables = Exact<{
  input: BlockCreateShareLinkInput
}>

export type BlockCreateShareLinkMutation = {
  __typename?: 'RootMutation'
  blockCreateShareLink?: { __typename?: 'BlockCreateShareLinkPayload'; errors: Array<string> } | null
}

export type BlockMoveMutationVariables = Exact<{
  input: BlockMoveInput
}>

export type BlockMoveMutation = {
  __typename?: 'RootMutation'
  blockMove?: { __typename?: 'BlockMovePayload'; errors: Array<string> } | null
}

export type BlockRenameMutationVariables = Exact<{
  input: BlockRenameInput
}>

export type BlockRenameMutation = {
  __typename?: 'RootMutation'
  blockRename?: { __typename?: 'BlockRenamePayload'; errors: Array<string> } | null
}

export type SnapshotRestoreMutationVariables = Exact<{
  input: SnapshotRestoreInput
}>

export type SnapshotRestoreMutation = {
  __typename?: 'RootMutation'
  snapshotRestore?: { __typename?: 'SnapshotRestorePayload'; errors: Array<string> } | null
}

export type BlockCreateSnapshotMutationVariables = Exact<{
  input: BlockCreateSnapshotInput
}>

export type BlockCreateSnapshotMutation = {
  __typename?: 'RootMutation'
  blockCreateSnapshot?: { __typename?: 'BlockCreateSnapshotPayload'; errors: Array<string> } | null
}

export type GetPluginQueryVariables = Exact<{ [key: string]: never }>

export type GetPluginQuery = {
  __typename?: 'RootQuery'
  plugins: Array<{
    __typename?: 'plugin'
    name: string
    version: string
    logo: string
    enabled: boolean
    metadata: any
  }>
}

export type BlockSyncBatchMutationVariables = Exact<{
  input: BlockSyncBatchInput
}>

export type BlockSyncBatchMutation = {
  __typename?: 'RootMutation'
  blockSyncBatch?: { __typename?: 'BlockSyncBatchPayload'; errors: Array<string> } | null
}

export type FormulaCommitMutationVariables = Exact<{
  input: FormulaCommitInput
}>

export type FormulaCommitMutation = {
  __typename?: 'RootMutation'
  formulaCommit?: { __typename?: 'FormulaCommitPayload'; errors: Array<string> } | null
}

export type GetFormulasQueryVariables = Exact<{
  domain: Scalars['String']
  ids?: InputMaybe<Scalars['String']>
}>

export type GetFormulasQuery = {
  __typename?: 'RootQuery'
  formulas?: Array<{
    __typename?: 'Formula'
    id: string
    name: string
    cacheValue: any
    blockId: string
    definition: string
    updatedAt: any
    createdAt: number
    version: number
    type: string
    meta: any
  }> | null
}

export type NewPatchSubscriptionVariables = Exact<{
  docId: Scalars['UUID']
}>

export type NewPatchSubscription = {
  __typename?: 'RootSubscription'
  newPatch: {
    __typename?: 'NewPatchPayload'
    state: Patchstate
    seq: number
    patches: Array<{
      __typename?: 'PatchBaseObject'
      id: string
      path: Array<string>
      patchType: Patchtype
      payload: any
      operatorId: string
    }>
  }
}

export type YdocSubscriptionVariables = Exact<{
  docId: Scalars['UUID']
}>

export type YdocSubscription = {
  __typename?: 'RootSubscription'
  ydoc: { __typename?: 'YdocPayload'; operatorId?: string | null; stateId?: string | null; updates: string }
}

export type GetBlockInfoQueryVariables = Exact<{
  id: Scalars['String']
  domain: Scalars['String']
}>

export type GetBlockInfoQuery = {
  __typename?: 'RootQuery'
  blockInfo?: {
    __typename?: 'BlockInfo'
    title: string
    id: string
    isDeleted: boolean
    isMaster: boolean
    pin: boolean
    enabledAlias?: { __typename?: 'BlockAlias'; key: string; payload: any } | null
    icon?:
      | { __typename?: 'BlockEmoji'; type?: Blocktype | null; name: string; emoji: string }
      | {
          __typename?: 'BlockImage'
          type?: Blocktype | null
          source?: Filesourcetype | null
          key?: string | null
          height?: number | null
          width?: number | null
        }
      | null
    pathArray: Array<{
      __typename?: 'BlockPath'
      id: string
      text: string
      icon?:
        | { __typename?: 'BlockEmoji'; type?: Blocktype | null; name: string; emoji: string }
        | {
            __typename?: 'BlockImage'
            type?: Blocktype | null
            source?: Filesourcetype | null
            key?: string | null
            height?: number | null
            width?: number | null
          }
        | null
    }>
    permission?: { __typename?: 'ShareLink'; key: string; policy: Policytype; state: ShareLinkState } | null
    collaborators: Array<{
      __typename?: 'space'
      name?: string | null
      domain: string
      email?: string | null
      avatarData?: { __typename?: 'avatar'; url: string } | null
    }>
  } | null
}

export type GetChildrenBlocksQueryVariables = Exact<{
  rootId: Scalars['String']
  snapshotVersion: Scalars['Int']
}>

export type GetChildrenBlocksQuery = {
  __typename?: 'RootQuery'
  childrenBlocks?: Array<{
    __typename?: 'block'
    id: string
    sort: any
    parentId?: string | null
    deletedAt?: any | null
    rootId: string
    type: string
    text: string
    content: Array<any>
    data: any
    blobs?: Array<{ __typename?: 'blob'; blobKey: string; downloadUrl: string; url: string }> | null
    meta: {
      __typename?: 'BlockMeta'
      title?: string | null
      level?: number | null
      language?: string | null
      start?: string | null
      image?: {
        __typename?: 'BlockImage'
        type?: Blocktype | null
        source?: Filesourcetype | null
        key?: string | null
        height?: number | null
        width?: number | null
        ratio?: number | null
      } | null
      page?: {
        __typename?: 'BlockPage'
        type?: Blocktype | null
        key: string
        title?: string | null
        icon?: string | null
        link: string
      } | null
      people?: {
        __typename?: 'BlockPeople'
        type?: Blocktype | null
        domain: string
        name?: string | null
        avatarUrl?: string | null
      } | null
      embedMeta?: { __typename?: 'BlockEmbedMeta'; type?: string | null; embedType?: Embedtype | null } | null
      attachment?: {
        __typename?: 'BlockAttachment'
        type: Blocktype
        source?: Filesourcetype | null
        key?: string | null
        height?: number | null
        width?: number | null
        name?: string | null
        size?: number | null
        mode?: string | null
      } | null
      cover?:
        | { __typename?: 'BlockColor'; type?: Blocktype | null; color: string }
        | {
            __typename?: 'BlockImage'
            type?: Blocktype | null
            source?: Filesourcetype | null
            key?: string | null
            height?: number | null
            width?: number | null
          }
        | null
      icon?:
        | { __typename?: 'BlockEmoji'; type?: Blocktype | null; name: string; emoji: string }
        | {
            __typename?: 'BlockImage'
            type?: Blocktype | null
            source?: Filesourcetype | null
            key?: string | null
            height?: number | null
            width?: number | null
          }
        | null
      link?: {
        __typename?: 'BlockLink'
        key?: string | null
        type: string
        source?: Filesourcetype | null
        cover?: string | null
        description?: string | null
        title?: string | null
      } | null
    }
  }> | null
}

export type GetSpreadsheetChildrenQueryVariables = Exact<{
  parentId: Scalars['String']
}>

export type GetSpreadsheetChildrenQuery = {
  __typename?: 'RootQuery'
  spreadsheetChildren?: {
    __typename?: 'SpreadsheetChildren'
    blocks?: Array<{
      __typename?: 'block'
      id: string
      sort: any
      parentId?: string | null
      type: string
      text: string
      content: Array<any>
      data: any
    }> | null
  } | null
}

export type GetDocumentQueryVariables = Exact<{
  docId: Scalars['String']
}>

export type GetDocumentQuery = {
  __typename?: 'RootQuery'
  document?: { __typename?: 'Document'; id: string; stateId?: string | null; state?: string | null } | null
}

export type SyncDocumentMutationVariables = Exact<{
  input: SyncDocumentInput
}>

export type SyncDocumentMutation = {
  __typename?: 'RootMutation'
  syncDocument?: {
    __typename?: 'SyncDocumentPayload'
    errors: Array<string>
    document?: { __typename?: 'Document'; state?: string | null; stateId?: string | null } | null
  } | null
}

export type UpdateDomainMutationVariables = Exact<{
  input: UpdateDomainInput
}>

export type UpdateDomainMutation = {
  __typename?: 'RootMutation'
  updateDomain?: { __typename?: 'UpdateDomainPayload'; errors: Array<string> } | null
}

export type UserAppearanceUpdateMutationVariables = Exact<{
  input: UserAppearanceUpdateInput
}>

export type UserAppearanceUpdateMutation = {
  __typename?: 'RootMutation'
  userAppearanceUpdate?: { __typename?: 'UserAppearanceUpdatePayload'; errors: Array<string> } | null
}

export type UserDestroyMutationVariables = Exact<{
  input: UserDestroyInput
}>

export type UserDestroyMutation = {
  __typename?: 'RootMutation'
  userDestroy?: { __typename?: 'UserDestroyPayload'; errors: Array<string> } | null
}

export type SpaceDestroyMutationVariables = Exact<{
  input: SpaceDestroyInput
}>

export type SpaceDestroyMutation = {
  __typename?: 'RootMutation'
  spaceDestroy?: { __typename?: 'SpaceDestroyPayload'; errors: Array<string> } | null
}

export type SpaceLeaveMutationVariables = Exact<{
  input: SpaceLeaveInput
}>

export type SpaceLeaveMutation = {
  __typename?: 'RootMutation'
  spaceLeave?: { __typename?: 'SpaceLeavePayload'; errors: Array<string> } | null
}

export const QueryEmailAvailableFromWsDocument = gql`
  query QueryEmailAvailableFromWS($email: String!) {
    emailAvailable(email: $email) {
      success
      message
    }
  }
`

/**
 * __useQueryEmailAvailableFromWsQuery__
 *
 * To run a query within a React component, call `useQueryEmailAvailableFromWsQuery` and pass it any options that fit your needs.
 * When your component renders, `useQueryEmailAvailableFromWsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQueryEmailAvailableFromWsQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useQueryEmailAvailableFromWsQuery(
  baseOptions: Apollo.QueryHookOptions<QueryEmailAvailableFromWsQuery, QueryEmailAvailableFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QueryEmailAvailableFromWsQuery, QueryEmailAvailableFromWsQueryVariables>(
    QueryEmailAvailableFromWsDocument,
    options
  )
}
export function useQueryEmailAvailableFromWsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<QueryEmailAvailableFromWsQuery, QueryEmailAvailableFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QueryEmailAvailableFromWsQuery, QueryEmailAvailableFromWsQueryVariables>(
    QueryEmailAvailableFromWsDocument,
    options
  )
}
export type QueryEmailAvailableFromWsQueryHookResult = ReturnType<typeof useQueryEmailAvailableFromWsQuery>
export type QueryEmailAvailableFromWsLazyQueryHookResult = ReturnType<typeof useQueryEmailAvailableFromWsLazyQuery>
export type QueryEmailAvailableFromWsQueryResult = Apollo.QueryResult<
  QueryEmailAvailableFromWsQuery,
  QueryEmailAvailableFromWsQueryVariables
>
export const QueryPasswordAvailableFromWsDocument = gql`
  query QueryPasswordAvailableFromWS($password: String!) {
    passwordAvailable(password: $password) {
      success
      message
    }
  }
`

/**
 * __useQueryPasswordAvailableFromWsQuery__
 *
 * To run a query within a React component, call `useQueryPasswordAvailableFromWsQuery` and pass it any options that fit your needs.
 * When your component renders, `useQueryPasswordAvailableFromWsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQueryPasswordAvailableFromWsQuery({
 *   variables: {
 *      password: // value for 'password'
 *   },
 * });
 */
export function useQueryPasswordAvailableFromWsQuery(
  baseOptions: Apollo.QueryHookOptions<QueryPasswordAvailableFromWsQuery, QueryPasswordAvailableFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QueryPasswordAvailableFromWsQuery, QueryPasswordAvailableFromWsQueryVariables>(
    QueryPasswordAvailableFromWsDocument,
    options
  )
}
export function useQueryPasswordAvailableFromWsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    QueryPasswordAvailableFromWsQuery,
    QueryPasswordAvailableFromWsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QueryPasswordAvailableFromWsQuery, QueryPasswordAvailableFromWsQueryVariables>(
    QueryPasswordAvailableFromWsDocument,
    options
  )
}
export type QueryPasswordAvailableFromWsQueryHookResult = ReturnType<typeof useQueryPasswordAvailableFromWsQuery>
export type QueryPasswordAvailableFromWsLazyQueryHookResult = ReturnType<
  typeof useQueryPasswordAvailableFromWsLazyQuery
>
export type QueryPasswordAvailableFromWsQueryResult = Apollo.QueryResult<
  QueryPasswordAvailableFromWsQuery,
  QueryPasswordAvailableFromWsQueryVariables
>
export const UserSignOutDocument = gql`
  mutation userSignOut($input: UserSignOutInput!) {
    userSignOut(input: $input) {
      errors
    }
  }
`
export type UserSignOutMutationFn = Apollo.MutationFunction<UserSignOutMutation, UserSignOutMutationVariables>

/**
 * __useUserSignOutMutation__
 *
 * To run a mutation, you first call `useUserSignOutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserSignOutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userSignOutMutation, { data, loading, error }] = useUserSignOutMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserSignOutMutation(
  baseOptions?: Apollo.MutationHookOptions<UserSignOutMutation, UserSignOutMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserSignOutMutation, UserSignOutMutationVariables>(UserSignOutDocument, options)
}
export type UserSignOutMutationHookResult = ReturnType<typeof useUserSignOutMutation>
export type UserSignOutMutationResult = Apollo.MutationResult<UserSignOutMutation>
export type UserSignOutMutationOptions = Apollo.BaseMutationOptions<UserSignOutMutation, UserSignOutMutationVariables>
export const GetAccountsConfigFromWsDocument = gql`
  query GetAccountsConfigFromWS {
    metadata {
      id
      config {
        userAgreementLink
        accountsPreferredAuthMethod
        accountsEmailPasswordAuth
        accountsFederatedProviders {
          name
          logo
        }
      }
    }
  }
`

/**
 * __useGetAccountsConfigFromWsQuery__
 *
 * To run a query within a React component, call `useGetAccountsConfigFromWsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountsConfigFromWsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountsConfigFromWsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAccountsConfigFromWsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>(
    GetAccountsConfigFromWsDocument,
    options
  )
}
export function useGetAccountsConfigFromWsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAccountsConfigFromWsQuery, GetAccountsConfigFromWsQueryVariables>(
    GetAccountsConfigFromWsDocument,
    options
  )
}
export type GetAccountsConfigFromWsQueryHookResult = ReturnType<typeof useGetAccountsConfigFromWsQuery>
export type GetAccountsConfigFromWsLazyQueryHookResult = ReturnType<typeof useGetAccountsConfigFromWsLazyQuery>
export type GetAccountsConfigFromWsQueryResult = Apollo.QueryResult<
  GetAccountsConfigFromWsQuery,
  GetAccountsConfigFromWsQueryVariables
>
export const UserForgetPasswordMailSendDocument = gql`
  mutation userForgetPasswordMailSend($input: UserForgetPasswordMailSendInput!) {
    userForgetPasswordMailSend(input: $input) {
      errors
    }
  }
`
export type UserForgetPasswordMailSendMutationFn = Apollo.MutationFunction<
  UserForgetPasswordMailSendMutation,
  UserForgetPasswordMailSendMutationVariables
>

/**
 * __useUserForgetPasswordMailSendMutation__
 *
 * To run a mutation, you first call `useUserForgetPasswordMailSendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserForgetPasswordMailSendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userForgetPasswordMailSendMutation, { data, loading, error }] = useUserForgetPasswordMailSendMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserForgetPasswordMailSendMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UserForgetPasswordMailSendMutation,
    UserForgetPasswordMailSendMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserForgetPasswordMailSendMutation, UserForgetPasswordMailSendMutationVariables>(
    UserForgetPasswordMailSendDocument,
    options
  )
}
export type UserForgetPasswordMailSendMutationHookResult = ReturnType<typeof useUserForgetPasswordMailSendMutation>
export type UserForgetPasswordMailSendMutationResult = Apollo.MutationResult<UserForgetPasswordMailSendMutation>
export type UserForgetPasswordMailSendMutationOptions = Apollo.BaseMutationOptions<
  UserForgetPasswordMailSendMutation,
  UserForgetPasswordMailSendMutationVariables
>
export const UserPasswordResetDocument = gql`
  mutation userPasswordReset($input: UserPasswordResetInput!) {
    userPasswordReset(input: $input) {
      errors
    }
  }
`
export type UserPasswordResetMutationFn = Apollo.MutationFunction<
  UserPasswordResetMutation,
  UserPasswordResetMutationVariables
>

/**
 * __useUserPasswordResetMutation__
 *
 * To run a mutation, you first call `useUserPasswordResetMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserPasswordResetMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userPasswordResetMutation, { data, loading, error }] = useUserPasswordResetMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserPasswordResetMutation(
  baseOptions?: Apollo.MutationHookOptions<UserPasswordResetMutation, UserPasswordResetMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserPasswordResetMutation, UserPasswordResetMutationVariables>(
    UserPasswordResetDocument,
    options
  )
}
export type UserPasswordResetMutationHookResult = ReturnType<typeof useUserPasswordResetMutation>
export type UserPasswordResetMutationResult = Apollo.MutationResult<UserPasswordResetMutation>
export type UserPasswordResetMutationOptions = Apollo.BaseMutationOptions<
  UserPasswordResetMutation,
  UserPasswordResetMutationVariables
>
export const UserEmailPasswordSignInDocument = gql`
  mutation userEmailPasswordSignIn($input: UserEmailPasswordSignInInput!) {
    userEmailPasswordSignIn(input: $input) {
      errors
      redirectPath
    }
  }
`
export type UserEmailPasswordSignInMutationFn = Apollo.MutationFunction<
  UserEmailPasswordSignInMutation,
  UserEmailPasswordSignInMutationVariables
>

/**
 * __useUserEmailPasswordSignInMutation__
 *
 * To run a mutation, you first call `useUserEmailPasswordSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserEmailPasswordSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userEmailPasswordSignInMutation, { data, loading, error }] = useUserEmailPasswordSignInMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserEmailPasswordSignInMutation(
  baseOptions?: Apollo.MutationHookOptions<UserEmailPasswordSignInMutation, UserEmailPasswordSignInMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserEmailPasswordSignInMutation, UserEmailPasswordSignInMutationVariables>(
    UserEmailPasswordSignInDocument,
    options
  )
}
export type UserEmailPasswordSignInMutationHookResult = ReturnType<typeof useUserEmailPasswordSignInMutation>
export type UserEmailPasswordSignInMutationResult = Apollo.MutationResult<UserEmailPasswordSignInMutation>
export type UserEmailPasswordSignInMutationOptions = Apollo.BaseMutationOptions<
  UserEmailPasswordSignInMutation,
  UserEmailPasswordSignInMutationVariables
>
export const GetFederatedIdentitySessionDocument = gql`
  query GetFederatedIdentitySession {
    federatedIdentitySession {
      hasSession
      domain
      name
      provider
    }
  }
`

/**
 * __useGetFederatedIdentitySessionQuery__
 *
 * To run a query within a React component, call `useGetFederatedIdentitySessionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFederatedIdentitySessionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFederatedIdentitySessionQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetFederatedIdentitySessionQuery(
  baseOptions?: Apollo.QueryHookOptions<GetFederatedIdentitySessionQuery, GetFederatedIdentitySessionQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetFederatedIdentitySessionQuery, GetFederatedIdentitySessionQueryVariables>(
    GetFederatedIdentitySessionDocument,
    options
  )
}
export function useGetFederatedIdentitySessionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetFederatedIdentitySessionQuery, GetFederatedIdentitySessionQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetFederatedIdentitySessionQuery, GetFederatedIdentitySessionQueryVariables>(
    GetFederatedIdentitySessionDocument,
    options
  )
}
export type GetFederatedIdentitySessionQueryHookResult = ReturnType<typeof useGetFederatedIdentitySessionQuery>
export type GetFederatedIdentitySessionLazyQueryHookResult = ReturnType<typeof useGetFederatedIdentitySessionLazyQuery>
export type GetFederatedIdentitySessionQueryResult = Apollo.QueryResult<
  GetFederatedIdentitySessionQuery,
  GetFederatedIdentitySessionQueryVariables
>
export const UserCreateDocument = gql`
  mutation userCreate($input: UserCreateInput!) {
    userCreate(input: $input) {
      errors
      redirectPath
      isUserActive
    }
  }
`
export type UserCreateMutationFn = Apollo.MutationFunction<UserCreateMutation, UserCreateMutationVariables>

/**
 * __useUserCreateMutation__
 *
 * To run a mutation, you first call `useUserCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userCreateMutation, { data, loading, error }] = useUserCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserCreateMutation(
  baseOptions?: Apollo.MutationHookOptions<UserCreateMutation, UserCreateMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserCreateMutation, UserCreateMutationVariables>(UserCreateDocument, options)
}
export type UserCreateMutationHookResult = ReturnType<typeof useUserCreateMutation>
export type UserCreateMutationResult = Apollo.MutationResult<UserCreateMutation>
export type UserCreateMutationOptions = Apollo.BaseMutationOptions<UserCreateMutation, UserCreateMutationVariables>
export const UserConfirmationEmailResendDocument = gql`
  mutation userConfirmationEmailResend($input: UserConfirmationEmailResendInput!) {
    userConfirmationEmailResend(input: $input) {
      errors
    }
  }
`
export type UserConfirmationEmailResendMutationFn = Apollo.MutationFunction<
  UserConfirmationEmailResendMutation,
  UserConfirmationEmailResendMutationVariables
>

/**
 * __useUserConfirmationEmailResendMutation__
 *
 * To run a mutation, you first call `useUserConfirmationEmailResendMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserConfirmationEmailResendMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userConfirmationEmailResendMutation, { data, loading, error }] = useUserConfirmationEmailResendMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserConfirmationEmailResendMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UserConfirmationEmailResendMutation,
    UserConfirmationEmailResendMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserConfirmationEmailResendMutation, UserConfirmationEmailResendMutationVariables>(
    UserConfirmationEmailResendDocument,
    options
  )
}
export type UserConfirmationEmailResendMutationHookResult = ReturnType<typeof useUserConfirmationEmailResendMutation>
export type UserConfirmationEmailResendMutationResult = Apollo.MutationResult<UserConfirmationEmailResendMutation>
export type UserConfirmationEmailResendMutationOptions = Apollo.BaseMutationOptions<
  UserConfirmationEmailResendMutation,
  UserConfirmationEmailResendMutationVariables
>
export const QueryDomainAvailableFromWsDocument = gql`
  query QueryDomainAvailableFromWS($domain: String!) {
    domainAvailable(domain: $domain) {
      success
      message
    }
  }
`

/**
 * __useQueryDomainAvailableFromWsQuery__
 *
 * To run a query within a React component, call `useQueryDomainAvailableFromWsQuery` and pass it any options that fit your needs.
 * When your component renders, `useQueryDomainAvailableFromWsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQueryDomainAvailableFromWsQuery({
 *   variables: {
 *      domain: // value for 'domain'
 *   },
 * });
 */
export function useQueryDomainAvailableFromWsQuery(
  baseOptions: Apollo.QueryHookOptions<QueryDomainAvailableFromWsQuery, QueryDomainAvailableFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QueryDomainAvailableFromWsQuery, QueryDomainAvailableFromWsQueryVariables>(
    QueryDomainAvailableFromWsDocument,
    options
  )
}
export function useQueryDomainAvailableFromWsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<QueryDomainAvailableFromWsQuery, QueryDomainAvailableFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QueryDomainAvailableFromWsQuery, QueryDomainAvailableFromWsQueryVariables>(
    QueryDomainAvailableFromWsDocument,
    options
  )
}
export type QueryDomainAvailableFromWsQueryHookResult = ReturnType<typeof useQueryDomainAvailableFromWsQuery>
export type QueryDomainAvailableFromWsLazyQueryHookResult = ReturnType<typeof useQueryDomainAvailableFromWsLazyQuery>
export type QueryDomainAvailableFromWsQueryResult = Apollo.QueryResult<
  QueryDomainAvailableFromWsQuery,
  QueryDomainAvailableFromWsQueryVariables
>
export const GetMetadataFromWsDocument = gql`
  query GetMetadataFromWS {
    metadata {
      id
      availableLocales {
        label
        value
      }
      availableTimezones
    }
  }
`

/**
 * __useGetMetadataFromWsQuery__
 *
 * To run a query within a React component, call `useGetMetadataFromWsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMetadataFromWsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMetadataFromWsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMetadataFromWsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetMetadataFromWsQuery, GetMetadataFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetMetadataFromWsQuery, GetMetadataFromWsQueryVariables>(GetMetadataFromWsDocument, options)
}
export function useGetMetadataFromWsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetMetadataFromWsQuery, GetMetadataFromWsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetMetadataFromWsQuery, GetMetadataFromWsQueryVariables>(
    GetMetadataFromWsDocument,
    options
  )
}
export type GetMetadataFromWsQueryHookResult = ReturnType<typeof useGetMetadataFromWsQuery>
export type GetMetadataFromWsLazyQueryHookResult = ReturnType<typeof useGetMetadataFromWsLazyQuery>
export type GetMetadataFromWsQueryResult = Apollo.QueryResult<GetMetadataFromWsQuery, GetMetadataFromWsQueryVariables>
export const CreateDirectUploadDocument = gql`
  mutation createDirectUpload($input: CreateDirectUploadInput!) {
    createDirectUpload(input: $input) {
      directUpload {
        uploadUrl
        headers
        blobKey
        viewUrl
        downloadUrl
        signedId
      }
    }
  }
`
export type CreateDirectUploadMutationFn = Apollo.MutationFunction<
  CreateDirectUploadMutation,
  CreateDirectUploadMutationVariables
>

/**
 * __useCreateDirectUploadMutation__
 *
 * To run a mutation, you first call `useCreateDirectUploadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDirectUploadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDirectUploadMutation, { data, loading, error }] = useCreateDirectUploadMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateDirectUploadMutation(
  baseOptions?: Apollo.MutationHookOptions<CreateDirectUploadMutation, CreateDirectUploadMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateDirectUploadMutation, CreateDirectUploadMutationVariables>(
    CreateDirectUploadDocument,
    options
  )
}
export type CreateDirectUploadMutationHookResult = ReturnType<typeof useCreateDirectUploadMutation>
export type CreateDirectUploadMutationResult = Apollo.MutationResult<CreateDirectUploadMutation>
export type CreateDirectUploadMutationOptions = Apollo.BaseMutationOptions<
  CreateDirectUploadMutation,
  CreateDirectUploadMutationVariables
>
export const GetSpacesDocument = gql`
  query GetSpaces {
    spaces {
      id
      domain
      name
      email
      personal
      inviteEnable
      owned
      avatarData {
        url
        downloadUrl
        signedId
      }
      bio
    }
  }
`

/**
 * __useGetSpacesQuery__
 *
 * To run a query within a React component, call `useGetSpacesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSpacesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSpacesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSpacesQuery(baseOptions?: Apollo.QueryHookOptions<GetSpacesQuery, GetSpacesQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetSpacesQuery, GetSpacesQueryVariables>(GetSpacesDocument, options)
}
export function useGetSpacesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetSpacesQuery, GetSpacesQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetSpacesQuery, GetSpacesQueryVariables>(GetSpacesDocument, options)
}
export type GetSpacesQueryHookResult = ReturnType<typeof useGetSpacesQuery>
export type GetSpacesLazyQueryHookResult = ReturnType<typeof useGetSpacesLazyQuery>
export type GetSpacesQueryResult = Apollo.QueryResult<GetSpacesQuery, GetSpacesQueryVariables>
export const GetSpaceDocument = gql`
  query GetSpace($domain: String!) {
    space(domain: $domain) {
      id
      domain
      name
      personal
      inviteEnable
      inviteSecret
      avatarData {
        url
        downloadUrl
        signedId
      }
      bio
    }
  }
`

/**
 * __useGetSpaceQuery__
 *
 * To run a query within a React component, call `useGetSpaceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSpaceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSpaceQuery({
 *   variables: {
 *      domain: // value for 'domain'
 *   },
 * });
 */
export function useGetSpaceQuery(baseOptions: Apollo.QueryHookOptions<GetSpaceQuery, GetSpaceQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetSpaceQuery, GetSpaceQueryVariables>(GetSpaceDocument, options)
}
export function useGetSpaceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSpaceQuery, GetSpaceQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetSpaceQuery, GetSpaceQueryVariables>(GetSpaceDocument, options)
}
export type GetSpaceQueryHookResult = ReturnType<typeof useGetSpaceQuery>
export type GetSpaceLazyQueryHookResult = ReturnType<typeof useGetSpaceLazyQuery>
export type GetSpaceQueryResult = Apollo.QueryResult<GetSpaceQuery, GetSpaceQueryVariables>
export const GetCurrentSpaceDocument = gql`
  query GetCurrentSpace($domain: String!) {
    currentSpaceDomain @client @export(as: "domain")
    space(domain: $domain) {
      id
      domain
      name
      personal
      owned
      inviteEnable
      inviteSecret
      avatarData {
        url
        downloadUrl
        signedId
      }
      bio
    }
  }
`

/**
 * __useGetCurrentSpaceQuery__
 *
 * To run a query within a React component, call `useGetCurrentSpaceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentSpaceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentSpaceQuery({
 *   variables: {
 *      domain: // value for 'domain'
 *   },
 * });
 */
export function useGetCurrentSpaceQuery(
  baseOptions: Apollo.QueryHookOptions<GetCurrentSpaceQuery, GetCurrentSpaceQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetCurrentSpaceQuery, GetCurrentSpaceQueryVariables>(GetCurrentSpaceDocument, options)
}
export function useGetCurrentSpaceLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetCurrentSpaceQuery, GetCurrentSpaceQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetCurrentSpaceQuery, GetCurrentSpaceQueryVariables>(GetCurrentSpaceDocument, options)
}
export type GetCurrentSpaceQueryHookResult = ReturnType<typeof useGetCurrentSpaceQuery>
export type GetCurrentSpaceLazyQueryHookResult = ReturnType<typeof useGetCurrentSpaceLazyQuery>
export type GetCurrentSpaceQueryResult = Apollo.QueryResult<GetCurrentSpaceQuery, GetCurrentSpaceQueryVariables>
export const GetSpaceMembersDocument = gql`
  query GetSpaceMembers {
    spaceMembers {
      domain
      email
      name
      role
      state
      avatarData {
        url
        downloadUrl
        signedId
      }
    }
  }
`

/**
 * __useGetSpaceMembersQuery__
 *
 * To run a query within a React component, call `useGetSpaceMembersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSpaceMembersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSpaceMembersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSpaceMembersQuery(
  baseOptions?: Apollo.QueryHookOptions<GetSpaceMembersQuery, GetSpaceMembersQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetSpaceMembersQuery, GetSpaceMembersQueryVariables>(GetSpaceMembersDocument, options)
}
export function useGetSpaceMembersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetSpaceMembersQuery, GetSpaceMembersQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetSpaceMembersQuery, GetSpaceMembersQueryVariables>(GetSpaceMembersDocument, options)
}
export type GetSpaceMembersQueryHookResult = ReturnType<typeof useGetSpaceMembersQuery>
export type GetSpaceMembersLazyQueryHookResult = ReturnType<typeof useGetSpaceMembersLazyQuery>
export type GetSpaceMembersQueryResult = Apollo.QueryResult<GetSpaceMembersQuery, GetSpaceMembersQueryVariables>
export const GetBlockPinsDocument = gql`
  query GetBlockPins {
    blockPins {
      blockId
      text
      meta {
        icon {
          ... on BlockImage {
            type
            source
            key
          }
          ... on BlockEmoji {
            type
            name
            emoji
          }
        }
      }
    }
  }
`

/**
 * __useGetBlockPinsQuery__
 *
 * To run a query within a React component, call `useGetBlockPinsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBlockPinsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBlockPinsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetBlockPinsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetBlockPinsQuery, GetBlockPinsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetBlockPinsQuery, GetBlockPinsQueryVariables>(GetBlockPinsDocument, options)
}
export function useGetBlockPinsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBlockPinsQuery, GetBlockPinsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetBlockPinsQuery, GetBlockPinsQueryVariables>(GetBlockPinsDocument, options)
}
export type GetBlockPinsQueryHookResult = ReturnType<typeof useGetBlockPinsQuery>
export type GetBlockPinsLazyQueryHookResult = ReturnType<typeof useGetBlockPinsLazyQuery>
export type GetBlockPinsQueryResult = Apollo.QueryResult<GetBlockPinsQuery, GetBlockPinsQueryVariables>
export const QueryUnsplashImageDocument = gql`
  query QueryUnsplashImage($query: String, $page: Int, $perPage: Int) {
    unsplashImage(query: $query, page: $page, perPage: $perPage) {
      id
      width
      height
      fullUrl
      smallUrl
      username
    }
  }
`

/**
 * __useQueryUnsplashImageQuery__
 *
 * To run a query within a React component, call `useQueryUnsplashImageQuery` and pass it any options that fit your needs.
 * When your component renders, `useQueryUnsplashImageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQueryUnsplashImageQuery({
 *   variables: {
 *      query: // value for 'query'
 *      page: // value for 'page'
 *      perPage: // value for 'perPage'
 *   },
 * });
 */
export function useQueryUnsplashImageQuery(
  baseOptions?: Apollo.QueryHookOptions<QueryUnsplashImageQuery, QueryUnsplashImageQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QueryUnsplashImageQuery, QueryUnsplashImageQueryVariables>(QueryUnsplashImageDocument, options)
}
export function useQueryUnsplashImageLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<QueryUnsplashImageQuery, QueryUnsplashImageQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QueryUnsplashImageQuery, QueryUnsplashImageQueryVariables>(
    QueryUnsplashImageDocument,
    options
  )
}
export type QueryUnsplashImageQueryHookResult = ReturnType<typeof useQueryUnsplashImageQuery>
export type QueryUnsplashImageLazyQueryHookResult = ReturnType<typeof useQueryUnsplashImageLazyQuery>
export type QueryUnsplashImageQueryResult = Apollo.QueryResult<
  QueryUnsplashImageQuery,
  QueryUnsplashImageQueryVariables
>
export const QueryPreviewBoxDocument = gql`
  query QueryPreviewBox($url: String!) {
    previewBox(url: $url) {
      url
      title
      description
      cover
      icon
      type
      size
    }
  }
`

/**
 * __useQueryPreviewBoxQuery__
 *
 * To run a query within a React component, call `useQueryPreviewBoxQuery` and pass it any options that fit your needs.
 * When your component renders, `useQueryPreviewBoxQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQueryPreviewBoxQuery({
 *   variables: {
 *      url: // value for 'url'
 *   },
 * });
 */
export function useQueryPreviewBoxQuery(
  baseOptions: Apollo.QueryHookOptions<QueryPreviewBoxQuery, QueryPreviewBoxQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QueryPreviewBoxQuery, QueryPreviewBoxQueryVariables>(QueryPreviewBoxDocument, options)
}
export function useQueryPreviewBoxLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<QueryPreviewBoxQuery, QueryPreviewBoxQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QueryPreviewBoxQuery, QueryPreviewBoxQueryVariables>(QueryPreviewBoxDocument, options)
}
export type QueryPreviewBoxQueryHookResult = ReturnType<typeof useQueryPreviewBoxQuery>
export type QueryPreviewBoxLazyQueryHookResult = ReturnType<typeof useQueryPreviewBoxLazyQuery>
export type QueryPreviewBoxQueryResult = Apollo.QueryResult<QueryPreviewBoxQuery, QueryPreviewBoxQueryVariables>
export const QuerySpaceSearchDocument = gql`
  query QuerySpaceSearch($input: String!) {
    spaceSearch(input: $input) {
      domain
      email
      name
      avatarData {
        url
      }
    }
  }
`

/**
 * __useQuerySpaceSearchQuery__
 *
 * To run a query within a React component, call `useQuerySpaceSearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuerySpaceSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuerySpaceSearchQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useQuerySpaceSearchQuery(
  baseOptions: Apollo.QueryHookOptions<QuerySpaceSearchQuery, QuerySpaceSearchQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QuerySpaceSearchQuery, QuerySpaceSearchQueryVariables>(QuerySpaceSearchDocument, options)
}
export function useQuerySpaceSearchLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<QuerySpaceSearchQuery, QuerySpaceSearchQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QuerySpaceSearchQuery, QuerySpaceSearchQueryVariables>(QuerySpaceSearchDocument, options)
}
export type QuerySpaceSearchQueryHookResult = ReturnType<typeof useQuerySpaceSearchQuery>
export type QuerySpaceSearchLazyQueryHookResult = ReturnType<typeof useQuerySpaceSearchLazyQuery>
export type QuerySpaceSearchQueryResult = Apollo.QueryResult<QuerySpaceSearchQuery, QuerySpaceSearchQueryVariables>
export const CreateOrUpdateSpaceDocument = gql`
  mutation createOrUpdateSpace($input: CreateOrUpdateSpaceInput!) {
    createOrUpdateSpace(input: $input) {
      errors
      space {
        domain
        name
        inviteEnable
        inviteSecret
      }
    }
  }
`
export type CreateOrUpdateSpaceMutationFn = Apollo.MutationFunction<
  CreateOrUpdateSpaceMutation,
  CreateOrUpdateSpaceMutationVariables
>

/**
 * __useCreateOrUpdateSpaceMutation__
 *
 * To run a mutation, you first call `useCreateOrUpdateSpaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrUpdateSpaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrUpdateSpaceMutation, { data, loading, error }] = useCreateOrUpdateSpaceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrUpdateSpaceMutation(
  baseOptions?: Apollo.MutationHookOptions<CreateOrUpdateSpaceMutation, CreateOrUpdateSpaceMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateOrUpdateSpaceMutation, CreateOrUpdateSpaceMutationVariables>(
    CreateOrUpdateSpaceDocument,
    options
  )
}
export type CreateOrUpdateSpaceMutationHookResult = ReturnType<typeof useCreateOrUpdateSpaceMutation>
export type CreateOrUpdateSpaceMutationResult = Apollo.MutationResult<CreateOrUpdateSpaceMutation>
export type CreateOrUpdateSpaceMutationOptions = Apollo.BaseMutationOptions<
  CreateOrUpdateSpaceMutation,
  CreateOrUpdateSpaceMutationVariables
>
export const JoinSpaceDocument = gql`
  mutation joinSpace($input: JoinSpaceInput!) {
    joinSpace(input: $input) {
      errors
    }
  }
`
export type JoinSpaceMutationFn = Apollo.MutationFunction<JoinSpaceMutation, JoinSpaceMutationVariables>

/**
 * __useJoinSpaceMutation__
 *
 * To run a mutation, you first call `useJoinSpaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useJoinSpaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [joinSpaceMutation, { data, loading, error }] = useJoinSpaceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useJoinSpaceMutation(
  baseOptions?: Apollo.MutationHookOptions<JoinSpaceMutation, JoinSpaceMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<JoinSpaceMutation, JoinSpaceMutationVariables>(JoinSpaceDocument, options)
}
export type JoinSpaceMutationHookResult = ReturnType<typeof useJoinSpaceMutation>
export type JoinSpaceMutationResult = Apollo.MutationResult<JoinSpaceMutation>
export type JoinSpaceMutationOptions = Apollo.BaseMutationOptions<JoinSpaceMutation, JoinSpaceMutationVariables>
export const UpdateMemberDocument = gql`
  mutation updateMember($input: UpdateMemberInput!) {
    updateMember(input: $input) {
      errors
    }
  }
`
export type UpdateMemberMutationFn = Apollo.MutationFunction<UpdateMemberMutation, UpdateMemberMutationVariables>

/**
 * __useUpdateMemberMutation__
 *
 * To run a mutation, you first call `useUpdateMemberMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMemberMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMemberMutation, { data, loading, error }] = useUpdateMemberMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateMemberMutation(
  baseOptions?: Apollo.MutationHookOptions<UpdateMemberMutation, UpdateMemberMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdateMemberMutation, UpdateMemberMutationVariables>(UpdateMemberDocument, options)
}
export type UpdateMemberMutationHookResult = ReturnType<typeof useUpdateMemberMutation>
export type UpdateMemberMutationResult = Apollo.MutationResult<UpdateMemberMutation>
export type UpdateMemberMutationOptions = Apollo.BaseMutationOptions<
  UpdateMemberMutation,
  UpdateMemberMutationVariables
>
export const GetBlockSearchDocument = gql`
  query GetBlockSearch($domain: String!, $input: String!) {
    blockSearch(domain: $domain, input: $input) {
      id
      type
      text
      rootId
    }
  }
`

/**
 * __useGetBlockSearchQuery__
 *
 * To run a query within a React component, call `useGetBlockSearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBlockSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBlockSearchQuery({
 *   variables: {
 *      domain: // value for 'domain'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetBlockSearchQuery(
  baseOptions: Apollo.QueryHookOptions<GetBlockSearchQuery, GetBlockSearchQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetBlockSearchQuery, GetBlockSearchQueryVariables>(GetBlockSearchDocument, options)
}
export function useGetBlockSearchLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBlockSearchQuery, GetBlockSearchQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetBlockSearchQuery, GetBlockSearchQueryVariables>(GetBlockSearchDocument, options)
}
export type GetBlockSearchQueryHookResult = ReturnType<typeof useGetBlockSearchQuery>
export type GetBlockSearchLazyQueryHookResult = ReturnType<typeof useGetBlockSearchLazyQuery>
export type GetBlockSearchQueryResult = Apollo.QueryResult<GetBlockSearchQuery, GetBlockSearchQueryVariables>
export const GetPageBlocksDocument = gql`
  query GetPageBlocks($domain: String!) {
    pageBlocks(domain: $domain) {
      id
      sort
      nextSort
      firstChildSort
      rootId
      parentId
      type
      text
      content
      data
      meta {
        cover {
          ... on BlockImage {
            type
            source
            key
          }
          ... on BlockColor {
            type
            color
          }
        }
        icon {
          ... on BlockImage {
            type
            source
            key
          }
          ... on BlockEmoji {
            type
            name
            emoji
          }
        }
      }
    }
  }
`

/**
 * __useGetPageBlocksQuery__
 *
 * To run a query within a React component, call `useGetPageBlocksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPageBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPageBlocksQuery({
 *   variables: {
 *      domain: // value for 'domain'
 *   },
 * });
 */
export function useGetPageBlocksQuery(
  baseOptions: Apollo.QueryHookOptions<GetPageBlocksQuery, GetPageBlocksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetPageBlocksQuery, GetPageBlocksQueryVariables>(GetPageBlocksDocument, options)
}
export function useGetPageBlocksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetPageBlocksQuery, GetPageBlocksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetPageBlocksQuery, GetPageBlocksQueryVariables>(GetPageBlocksDocument, options)
}
export type GetPageBlocksQueryHookResult = ReturnType<typeof useGetPageBlocksQuery>
export type GetPageBlocksLazyQueryHookResult = ReturnType<typeof useGetPageBlocksLazyQuery>
export type GetPageBlocksQueryResult = Apollo.QueryResult<GetPageBlocksQuery, GetPageBlocksQueryVariables>
export const GetTrashBlocksDocument = gql`
  query GetTrashBlocks($domain: String!, $blockId: UUID, $search: String) {
    trashBlocks(domain: $domain, blockId: $blockId, search: $search) {
      id
      deletedAt
      pathArray {
        id
        text
        icon {
          ... on BlockImage {
            type
            source
            key
          }
          ... on BlockEmoji {
            type
            name
            emoji
          }
        }
      }
      rootId
      parentId
      type
      text
      meta {
        people {
          type
          domain
          name
          avatarUrl
        }
        cover {
          ... on BlockImage {
            type
            source
            key
          }
          ... on BlockColor {
            type
            color
          }
        }
        icon {
          ... on BlockImage {
            type
            source
            key
          }
          ... on BlockEmoji {
            type
            name
            emoji
          }
        }
      }
    }
  }
`

/**
 * __useGetTrashBlocksQuery__
 *
 * To run a query within a React component, call `useGetTrashBlocksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTrashBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTrashBlocksQuery({
 *   variables: {
 *      domain: // value for 'domain'
 *      blockId: // value for 'blockId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetTrashBlocksQuery(
  baseOptions: Apollo.QueryHookOptions<GetTrashBlocksQuery, GetTrashBlocksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetTrashBlocksQuery, GetTrashBlocksQueryVariables>(GetTrashBlocksDocument, options)
}
export function useGetTrashBlocksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetTrashBlocksQuery, GetTrashBlocksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetTrashBlocksQuery, GetTrashBlocksQueryVariables>(GetTrashBlocksDocument, options)
}
export type GetTrashBlocksQueryHookResult = ReturnType<typeof useGetTrashBlocksQuery>
export type GetTrashBlocksLazyQueryHookResult = ReturnType<typeof useGetTrashBlocksLazyQuery>
export type GetTrashBlocksQueryResult = Apollo.QueryResult<GetTrashBlocksQuery, GetTrashBlocksQueryVariables>
export const GetBlockSnapshotsDocument = gql`
  query GetBlockSnapshots($id: String!) {
    blockSnapshots(id: $id) {
      id
      snapshotVersion
      name
      createdAt
      relativeTime
    }
  }
`

/**
 * __useGetBlockSnapshotsQuery__
 *
 * To run a query within a React component, call `useGetBlockSnapshotsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBlockSnapshotsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBlockSnapshotsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBlockSnapshotsQuery(
  baseOptions: Apollo.QueryHookOptions<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>(GetBlockSnapshotsDocument, options)
}
export function useGetBlockSnapshotsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>(
    GetBlockSnapshotsDocument,
    options
  )
}
export type GetBlockSnapshotsQueryHookResult = ReturnType<typeof useGetBlockSnapshotsQuery>
export type GetBlockSnapshotsLazyQueryHookResult = ReturnType<typeof useGetBlockSnapshotsLazyQuery>
export type GetBlockSnapshotsQueryResult = Apollo.QueryResult<GetBlockSnapshotsQuery, GetBlockSnapshotsQueryVariables>
export const GetBlockShareLinksDocument = gql`
  query GetBlockShareLinks($id: String!) {
    blockShareLinks(id: $id) {
      key
      policy
      state
      shareSpaceData {
        name
        domain
        email
        avatarData {
          url
        }
      }
    }
  }
`

/**
 * __useGetBlockShareLinksQuery__
 *
 * To run a query within a React component, call `useGetBlockShareLinksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBlockShareLinksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBlockShareLinksQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBlockShareLinksQuery(
  baseOptions: Apollo.QueryHookOptions<GetBlockShareLinksQuery, GetBlockShareLinksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetBlockShareLinksQuery, GetBlockShareLinksQueryVariables>(GetBlockShareLinksDocument, options)
}
export function useGetBlockShareLinksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBlockShareLinksQuery, GetBlockShareLinksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetBlockShareLinksQuery, GetBlockShareLinksQueryVariables>(
    GetBlockShareLinksDocument,
    options
  )
}
export type GetBlockShareLinksQueryHookResult = ReturnType<typeof useGetBlockShareLinksQuery>
export type GetBlockShareLinksLazyQueryHookResult = ReturnType<typeof useGetBlockShareLinksLazyQuery>
export type GetBlockShareLinksQueryResult = Apollo.QueryResult<
  GetBlockShareLinksQuery,
  GetBlockShareLinksQueryVariables
>
export const BlockDuplicateDocument = gql`
  mutation blockDuplicate($input: BlockDuplicateInput!) {
    blockDuplicate(input: $input) {
      id
      formulaIds
      errors
    }
  }
`
export type BlockDuplicateMutationFn = Apollo.MutationFunction<BlockDuplicateMutation, BlockDuplicateMutationVariables>

/**
 * __useBlockDuplicateMutation__
 *
 * To run a mutation, you first call `useBlockDuplicateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockDuplicateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockDuplicateMutation, { data, loading, error }] = useBlockDuplicateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockDuplicateMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockDuplicateMutation, BlockDuplicateMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockDuplicateMutation, BlockDuplicateMutationVariables>(BlockDuplicateDocument, options)
}
export type BlockDuplicateMutationHookResult = ReturnType<typeof useBlockDuplicateMutation>
export type BlockDuplicateMutationResult = Apollo.MutationResult<BlockDuplicateMutation>
export type BlockDuplicateMutationOptions = Apollo.BaseMutationOptions<
  BlockDuplicateMutation,
  BlockDuplicateMutationVariables
>
export const BlockSoftDeleteDocument = gql`
  mutation blockSoftDelete($input: BlockSoftDeleteInput!) {
    blockSoftDelete(input: $input) {
      errors
    }
  }
`
export type BlockSoftDeleteMutationFn = Apollo.MutationFunction<
  BlockSoftDeleteMutation,
  BlockSoftDeleteMutationVariables
>

/**
 * __useBlockSoftDeleteMutation__
 *
 * To run a mutation, you first call `useBlockSoftDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockSoftDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockSoftDeleteMutation, { data, loading, error }] = useBlockSoftDeleteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockSoftDeleteMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockSoftDeleteMutation, BlockSoftDeleteMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockSoftDeleteMutation, BlockSoftDeleteMutationVariables>(BlockSoftDeleteDocument, options)
}
export type BlockSoftDeleteMutationHookResult = ReturnType<typeof useBlockSoftDeleteMutation>
export type BlockSoftDeleteMutationResult = Apollo.MutationResult<BlockSoftDeleteMutation>
export type BlockSoftDeleteMutationOptions = Apollo.BaseMutationOptions<
  BlockSoftDeleteMutation,
  BlockSoftDeleteMutationVariables
>
export const BlockHardDeleteDocument = gql`
  mutation blockHardDelete($input: BlockHardDeleteInput!) {
    blockHardDelete(input: $input) {
      errors
    }
  }
`
export type BlockHardDeleteMutationFn = Apollo.MutationFunction<
  BlockHardDeleteMutation,
  BlockHardDeleteMutationVariables
>

/**
 * __useBlockHardDeleteMutation__
 *
 * To run a mutation, you first call `useBlockHardDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockHardDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockHardDeleteMutation, { data, loading, error }] = useBlockHardDeleteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockHardDeleteMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockHardDeleteMutation, BlockHardDeleteMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockHardDeleteMutation, BlockHardDeleteMutationVariables>(BlockHardDeleteDocument, options)
}
export type BlockHardDeleteMutationHookResult = ReturnType<typeof useBlockHardDeleteMutation>
export type BlockHardDeleteMutationResult = Apollo.MutationResult<BlockHardDeleteMutation>
export type BlockHardDeleteMutationOptions = Apollo.BaseMutationOptions<
  BlockHardDeleteMutation,
  BlockHardDeleteMutationVariables
>
export const BlockRestoreDocument = gql`
  mutation blockRestore($input: BlockRestoreInput!) {
    blockRestore(input: $input) {
      errors
    }
  }
`
export type BlockRestoreMutationFn = Apollo.MutationFunction<BlockRestoreMutation, BlockRestoreMutationVariables>

/**
 * __useBlockRestoreMutation__
 *
 * To run a mutation, you first call `useBlockRestoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockRestoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockRestoreMutation, { data, loading, error }] = useBlockRestoreMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockRestoreMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockRestoreMutation, BlockRestoreMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockRestoreMutation, BlockRestoreMutationVariables>(BlockRestoreDocument, options)
}
export type BlockRestoreMutationHookResult = ReturnType<typeof useBlockRestoreMutation>
export type BlockRestoreMutationResult = Apollo.MutationResult<BlockRestoreMutation>
export type BlockRestoreMutationOptions = Apollo.BaseMutationOptions<
  BlockRestoreMutation,
  BlockRestoreMutationVariables
>
export const BlockPinOrUnpinDocument = gql`
  mutation blockPinOrUnpin($input: BlockPinOrUnpinInput!) {
    blockPinOrUnpin(input: $input) {
      errors
    }
  }
`
export type BlockPinOrUnpinMutationFn = Apollo.MutationFunction<
  BlockPinOrUnpinMutation,
  BlockPinOrUnpinMutationVariables
>

/**
 * __useBlockPinOrUnpinMutation__
 *
 * To run a mutation, you first call `useBlockPinOrUnpinMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockPinOrUnpinMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockPinOrUnpinMutation, { data, loading, error }] = useBlockPinOrUnpinMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockPinOrUnpinMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockPinOrUnpinMutation, BlockPinOrUnpinMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockPinOrUnpinMutation, BlockPinOrUnpinMutationVariables>(BlockPinOrUnpinDocument, options)
}
export type BlockPinOrUnpinMutationHookResult = ReturnType<typeof useBlockPinOrUnpinMutation>
export type BlockPinOrUnpinMutationResult = Apollo.MutationResult<BlockPinOrUnpinMutation>
export type BlockPinOrUnpinMutationOptions = Apollo.BaseMutationOptions<
  BlockPinOrUnpinMutation,
  BlockPinOrUnpinMutationVariables
>
export const BlockCreateDocument = gql`
  mutation blockCreate($input: BlockCreateInput!) {
    blockCreate(input: $input) {
      id
      errors
    }
  }
`
export type BlockCreateMutationFn = Apollo.MutationFunction<BlockCreateMutation, BlockCreateMutationVariables>

/**
 * __useBlockCreateMutation__
 *
 * To run a mutation, you first call `useBlockCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockCreateMutation, { data, loading, error }] = useBlockCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockCreateMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockCreateMutation, BlockCreateMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockCreateMutation, BlockCreateMutationVariables>(BlockCreateDocument, options)
}
export type BlockCreateMutationHookResult = ReturnType<typeof useBlockCreateMutation>
export type BlockCreateMutationResult = Apollo.MutationResult<BlockCreateMutation>
export type BlockCreateMutationOptions = Apollo.BaseMutationOptions<BlockCreateMutation, BlockCreateMutationVariables>
export const BlockCreateShareLinkDocument = gql`
  mutation blockCreateShareLink($input: BlockCreateShareLinkInput!) {
    blockCreateShareLink(input: $input) {
      errors
    }
  }
`
export type BlockCreateShareLinkMutationFn = Apollo.MutationFunction<
  BlockCreateShareLinkMutation,
  BlockCreateShareLinkMutationVariables
>

/**
 * __useBlockCreateShareLinkMutation__
 *
 * To run a mutation, you first call `useBlockCreateShareLinkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockCreateShareLinkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockCreateShareLinkMutation, { data, loading, error }] = useBlockCreateShareLinkMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockCreateShareLinkMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockCreateShareLinkMutation, BlockCreateShareLinkMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockCreateShareLinkMutation, BlockCreateShareLinkMutationVariables>(
    BlockCreateShareLinkDocument,
    options
  )
}
export type BlockCreateShareLinkMutationHookResult = ReturnType<typeof useBlockCreateShareLinkMutation>
export type BlockCreateShareLinkMutationResult = Apollo.MutationResult<BlockCreateShareLinkMutation>
export type BlockCreateShareLinkMutationOptions = Apollo.BaseMutationOptions<
  BlockCreateShareLinkMutation,
  BlockCreateShareLinkMutationVariables
>
export const BlockMoveDocument = gql`
  mutation blockMove($input: BlockMoveInput!) {
    blockMove(input: $input) {
      errors
    }
  }
`
export type BlockMoveMutationFn = Apollo.MutationFunction<BlockMoveMutation, BlockMoveMutationVariables>

/**
 * __useBlockMoveMutation__
 *
 * To run a mutation, you first call `useBlockMoveMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockMoveMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockMoveMutation, { data, loading, error }] = useBlockMoveMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockMoveMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockMoveMutation, BlockMoveMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockMoveMutation, BlockMoveMutationVariables>(BlockMoveDocument, options)
}
export type BlockMoveMutationHookResult = ReturnType<typeof useBlockMoveMutation>
export type BlockMoveMutationResult = Apollo.MutationResult<BlockMoveMutation>
export type BlockMoveMutationOptions = Apollo.BaseMutationOptions<BlockMoveMutation, BlockMoveMutationVariables>
export const BlockRenameDocument = gql`
  mutation blockRename($input: BlockRenameInput!) {
    blockRename(input: $input) {
      errors
    }
  }
`
export type BlockRenameMutationFn = Apollo.MutationFunction<BlockRenameMutation, BlockRenameMutationVariables>

/**
 * __useBlockRenameMutation__
 *
 * To run a mutation, you first call `useBlockRenameMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockRenameMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockRenameMutation, { data, loading, error }] = useBlockRenameMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockRenameMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockRenameMutation, BlockRenameMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockRenameMutation, BlockRenameMutationVariables>(BlockRenameDocument, options)
}
export type BlockRenameMutationHookResult = ReturnType<typeof useBlockRenameMutation>
export type BlockRenameMutationResult = Apollo.MutationResult<BlockRenameMutation>
export type BlockRenameMutationOptions = Apollo.BaseMutationOptions<BlockRenameMutation, BlockRenameMutationVariables>
export const SnapshotRestoreDocument = gql`
  mutation snapshotRestore($input: SnapshotRestoreInput!) {
    snapshotRestore(input: $input) {
      errors
    }
  }
`
export type SnapshotRestoreMutationFn = Apollo.MutationFunction<
  SnapshotRestoreMutation,
  SnapshotRestoreMutationVariables
>

/**
 * __useSnapshotRestoreMutation__
 *
 * To run a mutation, you first call `useSnapshotRestoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSnapshotRestoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [snapshotRestoreMutation, { data, loading, error }] = useSnapshotRestoreMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSnapshotRestoreMutation(
  baseOptions?: Apollo.MutationHookOptions<SnapshotRestoreMutation, SnapshotRestoreMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SnapshotRestoreMutation, SnapshotRestoreMutationVariables>(SnapshotRestoreDocument, options)
}
export type SnapshotRestoreMutationHookResult = ReturnType<typeof useSnapshotRestoreMutation>
export type SnapshotRestoreMutationResult = Apollo.MutationResult<SnapshotRestoreMutation>
export type SnapshotRestoreMutationOptions = Apollo.BaseMutationOptions<
  SnapshotRestoreMutation,
  SnapshotRestoreMutationVariables
>
export const BlockCreateSnapshotDocument = gql`
  mutation blockCreateSnapshot($input: BlockCreateSnapshotInput!) {
    blockCreateSnapshot(input: $input) {
      errors
    }
  }
`
export type BlockCreateSnapshotMutationFn = Apollo.MutationFunction<
  BlockCreateSnapshotMutation,
  BlockCreateSnapshotMutationVariables
>

/**
 * __useBlockCreateSnapshotMutation__
 *
 * To run a mutation, you first call `useBlockCreateSnapshotMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockCreateSnapshotMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockCreateSnapshotMutation, { data, loading, error }] = useBlockCreateSnapshotMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockCreateSnapshotMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockCreateSnapshotMutation, BlockCreateSnapshotMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockCreateSnapshotMutation, BlockCreateSnapshotMutationVariables>(
    BlockCreateSnapshotDocument,
    options
  )
}
export type BlockCreateSnapshotMutationHookResult = ReturnType<typeof useBlockCreateSnapshotMutation>
export type BlockCreateSnapshotMutationResult = Apollo.MutationResult<BlockCreateSnapshotMutation>
export type BlockCreateSnapshotMutationOptions = Apollo.BaseMutationOptions<
  BlockCreateSnapshotMutation,
  BlockCreateSnapshotMutationVariables
>
export const GetPluginDocument = gql`
  query GetPlugin {
    plugins {
      name
      version
      logo
      enabled
      metadata
    }
  }
`

/**
 * __useGetPluginQuery__
 *
 * To run a query within a React component, call `useGetPluginQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPluginQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPluginQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPluginQuery(baseOptions?: Apollo.QueryHookOptions<GetPluginQuery, GetPluginQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetPluginQuery, GetPluginQueryVariables>(GetPluginDocument, options)
}
export function useGetPluginLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetPluginQuery, GetPluginQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetPluginQuery, GetPluginQueryVariables>(GetPluginDocument, options)
}
export type GetPluginQueryHookResult = ReturnType<typeof useGetPluginQuery>
export type GetPluginLazyQueryHookResult = ReturnType<typeof useGetPluginLazyQuery>
export type GetPluginQueryResult = Apollo.QueryResult<GetPluginQuery, GetPluginQueryVariables>
export const BlockSyncBatchDocument = gql`
  mutation blockSyncBatch($input: BlockSyncBatchInput!) {
    blockSyncBatch(input: $input) {
      errors
    }
  }
`
export type BlockSyncBatchMutationFn = Apollo.MutationFunction<BlockSyncBatchMutation, BlockSyncBatchMutationVariables>

/**
 * __useBlockSyncBatchMutation__
 *
 * To run a mutation, you first call `useBlockSyncBatchMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBlockSyncBatchMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [blockSyncBatchMutation, { data, loading, error }] = useBlockSyncBatchMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBlockSyncBatchMutation(
  baseOptions?: Apollo.MutationHookOptions<BlockSyncBatchMutation, BlockSyncBatchMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<BlockSyncBatchMutation, BlockSyncBatchMutationVariables>(BlockSyncBatchDocument, options)
}
export type BlockSyncBatchMutationHookResult = ReturnType<typeof useBlockSyncBatchMutation>
export type BlockSyncBatchMutationResult = Apollo.MutationResult<BlockSyncBatchMutation>
export type BlockSyncBatchMutationOptions = Apollo.BaseMutationOptions<
  BlockSyncBatchMutation,
  BlockSyncBatchMutationVariables
>
export const FormulaCommitDocument = gql`
  mutation formulaCommit($input: FormulaCommitInput!) {
    formulaCommit(input: $input) {
      errors
    }
  }
`
export type FormulaCommitMutationFn = Apollo.MutationFunction<FormulaCommitMutation, FormulaCommitMutationVariables>

/**
 * __useFormulaCommitMutation__
 *
 * To run a mutation, you first call `useFormulaCommitMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFormulaCommitMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [formulaCommitMutation, { data, loading, error }] = useFormulaCommitMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useFormulaCommitMutation(
  baseOptions?: Apollo.MutationHookOptions<FormulaCommitMutation, FormulaCommitMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<FormulaCommitMutation, FormulaCommitMutationVariables>(FormulaCommitDocument, options)
}
export type FormulaCommitMutationHookResult = ReturnType<typeof useFormulaCommitMutation>
export type FormulaCommitMutationResult = Apollo.MutationResult<FormulaCommitMutation>
export type FormulaCommitMutationOptions = Apollo.BaseMutationOptions<
  FormulaCommitMutation,
  FormulaCommitMutationVariables
>
export const GetFormulasDocument = gql`
  query GetFormulas($domain: String!, $ids: String) {
    formulas(domain: $domain, ids: $ids) {
      id
      name
      cacheValue
      blockId
      definition
      updatedAt
      createdAt
      version
      type
      meta
    }
  }
`

/**
 * __useGetFormulasQuery__
 *
 * To run a query within a React component, call `useGetFormulasQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFormulasQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFormulasQuery({
 *   variables: {
 *      domain: // value for 'domain'
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useGetFormulasQuery(baseOptions: Apollo.QueryHookOptions<GetFormulasQuery, GetFormulasQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetFormulasQuery, GetFormulasQueryVariables>(GetFormulasDocument, options)
}
export function useGetFormulasLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetFormulasQuery, GetFormulasQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetFormulasQuery, GetFormulasQueryVariables>(GetFormulasDocument, options)
}
export type GetFormulasQueryHookResult = ReturnType<typeof useGetFormulasQuery>
export type GetFormulasLazyQueryHookResult = ReturnType<typeof useGetFormulasLazyQuery>
export type GetFormulasQueryResult = Apollo.QueryResult<GetFormulasQuery, GetFormulasQueryVariables>
export const NewPatchDocument = gql`
  subscription newPatch($docId: UUID!) {
    newPatch(docId: $docId) {
      state
      seq
      patches {
        id
        path
        patchType
        payload
        operatorId
      }
    }
  }
`

/**
 * __useNewPatchSubscription__
 *
 * To run a query within a React component, call `useNewPatchSubscription` and pass it any options that fit your needs.
 * When your component renders, `useNewPatchSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useNewPatchSubscription({
 *   variables: {
 *      docId: // value for 'docId'
 *   },
 * });
 */
export function useNewPatchSubscription(
  baseOptions: Apollo.SubscriptionHookOptions<NewPatchSubscription, NewPatchSubscriptionVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useSubscription<NewPatchSubscription, NewPatchSubscriptionVariables>(NewPatchDocument, options)
}
export type NewPatchSubscriptionHookResult = ReturnType<typeof useNewPatchSubscription>
export type NewPatchSubscriptionResult = Apollo.SubscriptionResult<NewPatchSubscription>
export const YdocDocument = gql`
  subscription ydoc($docId: UUID!) {
    ydoc(docId: $docId) {
      operatorId
      stateId
      updates
    }
  }
`

/**
 * __useYdocSubscription__
 *
 * To run a query within a React component, call `useYdocSubscription` and pass it any options that fit your needs.
 * When your component renders, `useYdocSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useYdocSubscription({
 *   variables: {
 *      docId: // value for 'docId'
 *   },
 * });
 */
export function useYdocSubscription(
  baseOptions: Apollo.SubscriptionHookOptions<YdocSubscription, YdocSubscriptionVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useSubscription<YdocSubscription, YdocSubscriptionVariables>(YdocDocument, options)
}
export type YdocSubscriptionHookResult = ReturnType<typeof useYdocSubscription>
export type YdocSubscriptionResult = Apollo.SubscriptionResult<YdocSubscription>
export const GetBlockInfoDocument = gql`
  query GetBlockInfo($id: String!, $domain: String!) {
    blockInfo(id: $id, domain: $domain) {
      title
      id
      enabledAlias {
        key
        payload
      }
      icon {
        ... on BlockImage {
          type
          source
          key
          height
          width
        }
        ... on BlockEmoji {
          type
          name
          emoji
        }
      }
      isDeleted
      isMaster
      pin
      pathArray {
        id
        text
        icon {
          ... on BlockImage {
            type
            source
            key
            height
            width
          }
          ... on BlockEmoji {
            type
            name
            emoji
          }
        }
      }
      permission {
        key
        policy
        state
      }
      collaborators {
        name
        domain
        email
        avatarData {
          url
        }
      }
    }
  }
`

/**
 * __useGetBlockInfoQuery__
 *
 * To run a query within a React component, call `useGetBlockInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBlockInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBlockInfoQuery({
 *   variables: {
 *      id: // value for 'id'
 *      domain: // value for 'domain'
 *   },
 * });
 */
export function useGetBlockInfoQuery(
  baseOptions: Apollo.QueryHookOptions<GetBlockInfoQuery, GetBlockInfoQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetBlockInfoQuery, GetBlockInfoQueryVariables>(GetBlockInfoDocument, options)
}
export function useGetBlockInfoLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetBlockInfoQuery, GetBlockInfoQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetBlockInfoQuery, GetBlockInfoQueryVariables>(GetBlockInfoDocument, options)
}
export type GetBlockInfoQueryHookResult = ReturnType<typeof useGetBlockInfoQuery>
export type GetBlockInfoLazyQueryHookResult = ReturnType<typeof useGetBlockInfoLazyQuery>
export type GetBlockInfoQueryResult = Apollo.QueryResult<GetBlockInfoQuery, GetBlockInfoQueryVariables>
export const GetChildrenBlocksDocument = gql`
  query GetChildrenBlocks($rootId: String!, $snapshotVersion: Int!) {
    childrenBlocks(rootId: $rootId, snapshotVersion: $snapshotVersion) {
      id
      sort
      parentId
      deletedAt
      rootId
      blobs {
        blobKey
        downloadUrl
        url
      }
      type
      text
      content
      data
      meta {
        title
        level
        language
        start
        image {
          type
          source
          key
          height
          width
          ratio
        }
        page {
          type
          key
          title
          icon
          link
        }
        people {
          type
          domain
          name
          avatarUrl
        }
        embedMeta {
          type
          embedType
        }
        attachment {
          type
          source
          key
          height
          width
          name
          size
          mode
        }
        cover {
          ... on BlockImage {
            type
            source
            key
            height
            width
          }
          ... on BlockColor {
            type
            color
          }
        }
        icon {
          ... on BlockImage {
            type
            source
            key
            height
            width
          }
          ... on BlockEmoji {
            type
            name
            emoji
          }
        }
        link {
          key
          type
          source
          cover
          icon
          description
          title
        }
      }
    }
  }
`

/**
 * __useGetChildrenBlocksQuery__
 *
 * To run a query within a React component, call `useGetChildrenBlocksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChildrenBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChildrenBlocksQuery({
 *   variables: {
 *      rootId: // value for 'rootId'
 *      snapshotVersion: // value for 'snapshotVersion'
 *   },
 * });
 */
export function useGetChildrenBlocksQuery(
  baseOptions: Apollo.QueryHookOptions<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>(GetChildrenBlocksDocument, options)
}
export function useGetChildrenBlocksLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>(
    GetChildrenBlocksDocument,
    options
  )
}
export type GetChildrenBlocksQueryHookResult = ReturnType<typeof useGetChildrenBlocksQuery>
export type GetChildrenBlocksLazyQueryHookResult = ReturnType<typeof useGetChildrenBlocksLazyQuery>
export type GetChildrenBlocksQueryResult = Apollo.QueryResult<GetChildrenBlocksQuery, GetChildrenBlocksQueryVariables>
export const GetSpreadsheetChildrenDocument = gql`
  query GetSpreadsheetChildren($parentId: String!) {
    spreadsheetChildren(parentId: $parentId) {
      blocks {
        id
        sort
        parentId
        type
        text
        content
        data
      }
    }
  }
`

/**
 * __useGetSpreadsheetChildrenQuery__
 *
 * To run a query within a React component, call `useGetSpreadsheetChildrenQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSpreadsheetChildrenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSpreadsheetChildrenQuery({
 *   variables: {
 *      parentId: // value for 'parentId'
 *   },
 * });
 */
export function useGetSpreadsheetChildrenQuery(
  baseOptions: Apollo.QueryHookOptions<GetSpreadsheetChildrenQuery, GetSpreadsheetChildrenQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetSpreadsheetChildrenQuery, GetSpreadsheetChildrenQueryVariables>(
    GetSpreadsheetChildrenDocument,
    options
  )
}
export function useGetSpreadsheetChildrenLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetSpreadsheetChildrenQuery, GetSpreadsheetChildrenQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetSpreadsheetChildrenQuery, GetSpreadsheetChildrenQueryVariables>(
    GetSpreadsheetChildrenDocument,
    options
  )
}
export type GetSpreadsheetChildrenQueryHookResult = ReturnType<typeof useGetSpreadsheetChildrenQuery>
export type GetSpreadsheetChildrenLazyQueryHookResult = ReturnType<typeof useGetSpreadsheetChildrenLazyQuery>
export type GetSpreadsheetChildrenQueryResult = Apollo.QueryResult<
  GetSpreadsheetChildrenQuery,
  GetSpreadsheetChildrenQueryVariables
>
export const GetDocumentDocument = gql`
  query GetDocument($docId: String!) {
    document(docId: $docId) {
      id
      stateId
      state
    }
  }
`

/**
 * __useGetDocumentQuery__
 *
 * To run a query within a React component, call `useGetDocumentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDocumentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDocumentQuery({
 *   variables: {
 *      docId: // value for 'docId'
 *   },
 * });
 */
export function useGetDocumentQuery(baseOptions: Apollo.QueryHookOptions<GetDocumentQuery, GetDocumentQueryVariables>) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetDocumentQuery, GetDocumentQueryVariables>(GetDocumentDocument, options)
}
export function useGetDocumentLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetDocumentQuery, GetDocumentQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetDocumentQuery, GetDocumentQueryVariables>(GetDocumentDocument, options)
}
export type GetDocumentQueryHookResult = ReturnType<typeof useGetDocumentQuery>
export type GetDocumentLazyQueryHookResult = ReturnType<typeof useGetDocumentLazyQuery>
export type GetDocumentQueryResult = Apollo.QueryResult<GetDocumentQuery, GetDocumentQueryVariables>
export const SyncDocumentDocument = gql`
  mutation SyncDocument($input: SyncDocumentInput!) {
    syncDocument(input: $input) {
      errors
      document {
        state
        stateId
      }
    }
  }
`
export type SyncDocumentMutationFn = Apollo.MutationFunction<SyncDocumentMutation, SyncDocumentMutationVariables>

/**
 * __useSyncDocumentMutation__
 *
 * To run a mutation, you first call `useSyncDocumentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSyncDocumentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [syncDocumentMutation, { data, loading, error }] = useSyncDocumentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSyncDocumentMutation(
  baseOptions?: Apollo.MutationHookOptions<SyncDocumentMutation, SyncDocumentMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SyncDocumentMutation, SyncDocumentMutationVariables>(SyncDocumentDocument, options)
}
export type SyncDocumentMutationHookResult = ReturnType<typeof useSyncDocumentMutation>
export type SyncDocumentMutationResult = Apollo.MutationResult<SyncDocumentMutation>
export type SyncDocumentMutationOptions = Apollo.BaseMutationOptions<
  SyncDocumentMutation,
  SyncDocumentMutationVariables
>
export const UpdateDomainDocument = gql`
  mutation updateDomain($input: UpdateDomainInput!) {
    updateDomain(input: $input) {
      errors
    }
  }
`
export type UpdateDomainMutationFn = Apollo.MutationFunction<UpdateDomainMutation, UpdateDomainMutationVariables>

/**
 * __useUpdateDomainMutation__
 *
 * To run a mutation, you first call `useUpdateDomainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDomainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDomainMutation, { data, loading, error }] = useUpdateDomainMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateDomainMutation(
  baseOptions?: Apollo.MutationHookOptions<UpdateDomainMutation, UpdateDomainMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdateDomainMutation, UpdateDomainMutationVariables>(UpdateDomainDocument, options)
}
export type UpdateDomainMutationHookResult = ReturnType<typeof useUpdateDomainMutation>
export type UpdateDomainMutationResult = Apollo.MutationResult<UpdateDomainMutation>
export type UpdateDomainMutationOptions = Apollo.BaseMutationOptions<
  UpdateDomainMutation,
  UpdateDomainMutationVariables
>
export const UserAppearanceUpdateDocument = gql`
  mutation UserAppearanceUpdate($input: UserAppearanceUpdateInput!) {
    userAppearanceUpdate(input: $input) {
      errors
    }
  }
`
export type UserAppearanceUpdateMutationFn = Apollo.MutationFunction<
  UserAppearanceUpdateMutation,
  UserAppearanceUpdateMutationVariables
>

/**
 * __useUserAppearanceUpdateMutation__
 *
 * To run a mutation, you first call `useUserAppearanceUpdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserAppearanceUpdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userAppearanceUpdateMutation, { data, loading, error }] = useUserAppearanceUpdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserAppearanceUpdateMutation(
  baseOptions?: Apollo.MutationHookOptions<UserAppearanceUpdateMutation, UserAppearanceUpdateMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserAppearanceUpdateMutation, UserAppearanceUpdateMutationVariables>(
    UserAppearanceUpdateDocument,
    options
  )
}
export type UserAppearanceUpdateMutationHookResult = ReturnType<typeof useUserAppearanceUpdateMutation>
export type UserAppearanceUpdateMutationResult = Apollo.MutationResult<UserAppearanceUpdateMutation>
export type UserAppearanceUpdateMutationOptions = Apollo.BaseMutationOptions<
  UserAppearanceUpdateMutation,
  UserAppearanceUpdateMutationVariables
>
export const UserDestroyDocument = gql`
  mutation UserDestroy($input: UserDestroyInput!) {
    userDestroy(input: $input) {
      errors
    }
  }
`
export type UserDestroyMutationFn = Apollo.MutationFunction<UserDestroyMutation, UserDestroyMutationVariables>

/**
 * __useUserDestroyMutation__
 *
 * To run a mutation, you first call `useUserDestroyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserDestroyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userDestroyMutation, { data, loading, error }] = useUserDestroyMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserDestroyMutation(
  baseOptions?: Apollo.MutationHookOptions<UserDestroyMutation, UserDestroyMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UserDestroyMutation, UserDestroyMutationVariables>(UserDestroyDocument, options)
}
export type UserDestroyMutationHookResult = ReturnType<typeof useUserDestroyMutation>
export type UserDestroyMutationResult = Apollo.MutationResult<UserDestroyMutation>
export type UserDestroyMutationOptions = Apollo.BaseMutationOptions<UserDestroyMutation, UserDestroyMutationVariables>
export const SpaceDestroyDocument = gql`
  mutation SpaceDestroy($input: SpaceDestroyInput!) {
    spaceDestroy(input: $input) {
      errors
    }
  }
`
export type SpaceDestroyMutationFn = Apollo.MutationFunction<SpaceDestroyMutation, SpaceDestroyMutationVariables>

/**
 * __useSpaceDestroyMutation__
 *
 * To run a mutation, you first call `useSpaceDestroyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSpaceDestroyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [spaceDestroyMutation, { data, loading, error }] = useSpaceDestroyMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSpaceDestroyMutation(
  baseOptions?: Apollo.MutationHookOptions<SpaceDestroyMutation, SpaceDestroyMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SpaceDestroyMutation, SpaceDestroyMutationVariables>(SpaceDestroyDocument, options)
}
export type SpaceDestroyMutationHookResult = ReturnType<typeof useSpaceDestroyMutation>
export type SpaceDestroyMutationResult = Apollo.MutationResult<SpaceDestroyMutation>
export type SpaceDestroyMutationOptions = Apollo.BaseMutationOptions<
  SpaceDestroyMutation,
  SpaceDestroyMutationVariables
>
export const SpaceLeaveDocument = gql`
  mutation SpaceLeave($input: SpaceLeaveInput!) {
    spaceLeave(input: $input) {
      errors
    }
  }
`
export type SpaceLeaveMutationFn = Apollo.MutationFunction<SpaceLeaveMutation, SpaceLeaveMutationVariables>

/**
 * __useSpaceLeaveMutation__
 *
 * To run a mutation, you first call `useSpaceLeaveMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSpaceLeaveMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [spaceLeaveMutation, { data, loading, error }] = useSpaceLeaveMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSpaceLeaveMutation(
  baseOptions?: Apollo.MutationHookOptions<SpaceLeaveMutation, SpaceLeaveMutationVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SpaceLeaveMutation, SpaceLeaveMutationVariables>(SpaceLeaveDocument, options)
}
export type SpaceLeaveMutationHookResult = ReturnType<typeof useSpaceLeaveMutation>
export type SpaceLeaveMutationResult = Apollo.MutationResult<SpaceLeaveMutation>
export type SpaceLeaveMutationOptions = Apollo.BaseMutationOptions<SpaceLeaveMutation, SpaceLeaveMutationVariables>
