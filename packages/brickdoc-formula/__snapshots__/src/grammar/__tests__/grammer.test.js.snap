// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Simple test case [Missing closing parenthesis1] =(1 // => ✗ 1`] = `
Array [
  Object {
    "code": "LParen",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [Missing closing parenthesis1] =(1 // => ✗ 2`] = `
Array [
  Object {
    "code": "LParen",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [Missing closing parenthesis2] =ABS( // => ✗ 1`] = `
Array [
  Object {
    "code": "Function",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
      Object {
        "message": "Miss argument",
        "type": "deps",
      },
    ],
    "meta": undefined,
    "name": "ABS",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [Missing closing parenthesis3] =ABS(1 // => ✗ 1`] = `
Array [
  Object {
    "code": "Function",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "ABS",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [Missing closing parenthesis4] =POWER(1, // => ✗ 1`] = `
Array [
  Object {
    "code": "Function",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "POWER",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Comma",
    "errors": Array [],
    "meta": undefined,
    "name": ",",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [Missing closing parenthesis5] =POWER(1,2 // => ✗ 1`] = `
Array [
  Object {
    "code": "Function",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "POWER",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [
      Object {
        "message": "Missing closing parenthesis",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Comma",
    "errors": Array [],
    "meta": undefined,
    "name": ",",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [Predicate check type] =>=true // => ✗ 1`] = `
Array [
  Object {
    "code": "GreaterThanEqual",
    "errors": Array [],
    "meta": undefined,
    "name": ">=",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "BooleanLiteral",
    "errors": Array [
      Object {
        "message": "Expected number but got boolean",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "true",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "boolean",
  },
]
`;

exports[`Simple test case [Predicate check type] =>=true // => ✗ 2`] = `
Object {
  "children": Object {
    "Equal": Array [
      Object {
        "endColumn": 1,
        "endLine": 1,
        "endOffset": 0,
        "image": "=",
        "startColumn": 1,
        "startLine": 1,
        "startOffset": 0,
        "tokenType": Object {
          "CATEGORIES": Array [
            Object {
              "CATEGORIES": Array [],
              "PATTERN": /NOT_APPLICABLE/,
              "categoryMatches": Array [
                12,
                13,
                15,
                16,
              ],
              "categoryMatchesMap": Object {
                "12": true,
                "13": true,
                "15": true,
                "16": true,
              },
              "isParent": true,
              "name": "EqualCompareOperator",
              "tokenTypeIdx": 3,
            },
          ],
          "PATTERN": /=/,
          "categoryMatches": Array [],
          "categoryMatchesMap": Object {},
          "isParent": false,
          "name": "Equal",
          "tokenTypeIdx": 12,
        },
        "tokenTypeIdx": 12,
      },
    ],
    "expression": Array [
      Object {
        "children": Object {
          "combineExpression": Array [
            Object {
              "children": Object {
                "lhs": Array [
                  Object {
                    "children": Object {
                      "rhs": Array [
                        Object {
                          "children": Object {
                            "lhs": Array [
                              Object {
                                "children": Object {
                                  "lhs": Array [
                                    Object {
                                      "children": Object {
                                        "lhs": Array [
                                          Object {
                                            "children": Object {
                                              "lhs": Array [
                                                Object {
                                                  "children": Object {
                                                    "lhs": Array [
                                                      Object {
                                                        "children": Object {
                                                          "lhs": Array [
                                                            Object {
                                                              "children": Object {
                                                                "predicateExpression": Array [
                                                                  Object {
                                                                    "children": Object {
                                                                      "CompareOperator": Array [
                                                                        Object {
                                                                          "endColumn": 3,
                                                                          "endLine": 1,
                                                                          "endOffset": 2,
                                                                          "image": ">=",
                                                                          "startColumn": 2,
                                                                          "startLine": 1,
                                                                          "startOffset": 1,
                                                                          "tokenType": Object {
                                                                            "CATEGORIES": Array [
                                                                              Object {
                                                                                "CATEGORIES": Array [],
                                                                                "PATTERN": /NOT_APPLICABLE/,
                                                                                "categoryMatches": Array [
                                                                                  11,
                                                                                  14,
                                                                                  17,
                                                                                  18,
                                                                                ],
                                                                                "categoryMatchesMap": Object {
                                                                                  "11": true,
                                                                                  "14": true,
                                                                                  "17": true,
                                                                                  "18": true,
                                                                                },
                                                                                "isParent": true,
                                                                                "name": "CompareOperator",
                                                                                "tokenTypeIdx": 4,
                                                                              },
                                                                            ],
                                                                            "PATTERN": />=/,
                                                                            "categoryMatches": Array [],
                                                                            "categoryMatchesMap": Object {},
                                                                            "isParent": false,
                                                                            "name": "GreaterThanEqual",
                                                                            "tokenTypeIdx": 17,
                                                                          },
                                                                          "tokenTypeIdx": 17,
                                                                        },
                                                                      ],
                                                                      "atomicExpression": Array [
                                                                        Object {
                                                                          "children": Object {
                                                                            "constantExpression": Array [
                                                                              Object {
                                                                                "children": Object {
                                                                                  "BooleanLiteralExpression": Array [
                                                                                    Object {
                                                                                      "children": Object {
                                                                                        "BooleanLiteral": Array [
                                                                                          Object {
                                                                                            "endColumn": 7,
                                                                                            "endLine": 1,
                                                                                            "endOffset": 6,
                                                                                            "image": "true",
                                                                                            "startColumn": 4,
                                                                                            "startLine": 1,
                                                                                            "startOffset": 3,
                                                                                            "tokenType": Object {
                                                                                              "CATEGORIES": Array [],
                                                                                              "PATTERN": /true\\|false/,
                                                                                              "categoryMatches": Array [],
                                                                                              "categoryMatchesMap": Object {},
                                                                                              "isParent": false,
                                                                                              "name": "BooleanLiteral",
                                                                                              "tokenTypeIdx": 34,
                                                                                            },
                                                                                            "tokenTypeIdx": 34,
                                                                                          },
                                                                                        ],
                                                                                      },
                                                                                      "name": "BooleanLiteralExpression",
                                                                                    },
                                                                                  ],
                                                                                },
                                                                                "name": "constantExpression",
                                                                              },
                                                                            ],
                                                                          },
                                                                          "name": "atomicExpression",
                                                                        },
                                                                      ],
                                                                    },
                                                                    "name": "predicateExpression",
                                                                  },
                                                                ],
                                                              },
                                                              "name": "atomicExpression",
                                                            },
                                                          ],
                                                        },
                                                        "name": "chainExpression",
                                                      },
                                                    ],
                                                  },
                                                  "name": "multiplicationExpression",
                                                },
                                              ],
                                            },
                                            "name": "additionExpression",
                                          },
                                        ],
                                      },
                                      "name": "concatExpression",
                                    },
                                  ],
                                },
                                "name": "compareExpression",
                              },
                            ],
                          },
                          "name": "equalCompareExpression",
                        },
                      ],
                    },
                    "name": "notExpression",
                  },
                ],
              },
              "name": "combineExpression",
            },
          ],
        },
        "name": "expression",
      },
    ],
  },
  "name": "startExpression",
}
`;

exports[`Simple test case [Predicate check type] =>=true // => ✗ 3`] = `
Object {
  "input": "=>=true",
  "inputImage": "=>=true",
  "newInput": "=>=true",
  "parseImage": "=>=true",
}
`;

exports[`Simple test case [Semicolon 1] = 1; // => ✗ 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "other",
    "errors": Array [
      Object {
        "message": "TODO build not all input parsed :3",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": ";",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [Semicolon 2] = 1; 2 // => ✗ 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "other",
    "errors": Array [
      Object {
        "message": "TODO build not all input parsed :3",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": ";2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [Single quote => parseError] = 'hello' // => ✗ 1`] = `
Array [
  Object {
    "code": "other",
    "errors": Array [
      Object {
        "message": "Expecting: one of these possible Token sequences:
  1. [LParen]
  2. [Minus]
  3. [NumberLiteral]
  4. [BooleanLiteral]
  5. [StringLiteral]
  6. [Dollar, UUID, At]
  7. [Dollar, UUID, Sharp]
  8. [Dollar, UUID]
  9. [FunctionName]
  10. [EqualCompareOperator]
  11. [CompareOperator]
but found: ''hello''",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "'hello'",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [Spread operator with no argument] =AVERAGE() // => ✗ 1`] = `
Array [
  Object {
    "code": "Function",
    "errors": Array [
      Object {
        "message": "Miss argument",
        "type": "deps",
      },
    ],
    "meta": undefined,
    "name": "AVERAGE",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [TODO &&&] ="foo" &&& 123 // => ✗ 1`] = `
Array [
  Object {
    "code": "StringLiteral",
    "errors": Array [
      Object {
        "message": "Expected boolean but got string",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "\\"foo\\"",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "string",
  },
  Object {
    "code": "And",
    "errors": Array [],
    "meta": undefined,
    "name": "&&",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "boolean",
  },
  Object {
    "code": "Ampersand",
    "errors": Array [
      Object {
        "message": "Expected boolean but got string",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "&",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [
      Object {
        "message": "Expected boolean but got string",
        "type": "type",
      },
      Object {
        "message": "Expected string but got number",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "123",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [TODO chain type 2] =true.START_WITH("123") // => ✗ 1`] = `
Array [
  Object {
    "code": "BooleanLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "true",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "boolean",
  },
  Object {
    "code": "Dot",
    "errors": Array [],
    "meta": undefined,
    "name": ".",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "Function",
    "errors": Array [
      Object {
        "message": "Expected string but got boolean",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "START_WITH",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "StringLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "\\"123\\"",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "string",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [TODO chain type 3] =1.START_WITH("123") // => ✗ 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1.",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "other",
    "errors": Array [
      Object {
        "message": "TODO build not all input parsed :3",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "START_WITH(\\"123\\")",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [TODO chinese] = 中文 // => ✗ 1`] = `
Array [
  Object {
    "code": "other",
    "errors": Array [
      Object {
        "message": "Expecting: one of these possible Token sequences:
  1. [LParen]
  2. [Minus]
  3. [NumberLiteral]
  4. [BooleanLiteral]
  5. [StringLiteral]
  6. [Dollar, UUID, At]
  7. [Dollar, UUID, Sharp]
  8. [Dollar, UUID]
  9. [FunctionName]
  10. [EqualCompareOperator]
  11. [CompareOperator]
but found: '中文'",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "中文",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [TODO chinese2] =varvarabc中文var // => ✗ 1`] = `
Array [
  Object {
    "code": "other",
    "errors": Array [
      Object {
        "message": "TODO mismatch token FunctionCall",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "varvarabc中文var",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [TODO missing suffix expression] =1+ // => ✗ 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Plus",
    "errors": Array [],
    "meta": undefined,
    "name": "+",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "number",
  },
]
`;

exports[`Simple test case [TODO not is a operator] = nottrue // => false 1`] = `
Array [
  Object {
    "code": "Not",
    "errors": Array [],
    "meta": undefined,
    "name": "not",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "boolean",
  },
  Object {
    "code": "BooleanLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "true",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "boolean",
  },
]
`;

exports[`Simple test case [TODO predicate ==1] ==1 // => ✗ 1`] = `
Array [
  Object {
    "code": "Equal2",
    "errors": Array [],
    "meta": undefined,
    "name": "==",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [Without number] = - // => ✗ 1`] = `
Array [
  Object {
    "code": "Minus",
    "errors": Array [
      Object {
        "message": "Missing number",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "-",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [caret and sign] = -0.123% // => -0.00123 1`] = `
Array [
  Object {
    "code": "Minus",
    "errors": Array [],
    "meta": undefined,
    "name": "-",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "0.123",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Sign",
    "errors": Array [],
    "meta": undefined,
    "name": "%",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [chain type 1] ="foo".START_WITH(123) // => ✗ 1`] = `
Array [
  Object {
    "code": "StringLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "\\"foo\\"",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "string",
  },
  Object {
    "code": "Dot",
    "errors": Array [],
    "meta": undefined,
    "name": ".",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "Function",
    "errors": Array [],
    "meta": undefined,
    "name": "START_WITH",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [
      Object {
        "message": "Expected string but got number",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "123",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [compare chain] = (1 = 1) > 3 // => ✗ 1`] = `
Array [
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [
      Object {
        "message": "Expected number but got boolean",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Equal",
    "errors": Array [
      Object {
        "message": "Expected number but got boolean",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "=",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "boolean",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [
      Object {
        "message": "Expected number but got boolean",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "GreaterThan",
    "errors": Array [],
    "meta": undefined,
    "name": ">",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "boolean",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "3",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [compare chain] = 1 = 1 > 3 // => false 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Equal",
    "errors": Array [],
    "meta": undefined,
    "name": "=",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "boolean",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "GreaterThan",
    "errors": Array [],
    "meta": undefined,
    "name": ">",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "boolean",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "3",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [compare chain] = 1 > 1 = 3 // => false 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "GreaterThan",
    "errors": Array [],
    "meta": undefined,
    "name": ">",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "boolean",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Equal",
    "errors": Array [],
    "meta": undefined,
    "name": "=",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "boolean",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "3",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [downcase] =if(true, 1+2, "2") // => ✗ 1`] = `
Array [
  Object {
    "code": "Function",
    "errors": Array [
      Object {
        "message": "Function if not found",
        "type": "deps",
      },
    ],
    "meta": undefined,
    "name": "if",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "BooleanLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "true",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "boolean",
  },
  Object {
    "code": "Comma",
    "errors": Array [],
    "meta": undefined,
    "name": ",",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Plus",
    "errors": Array [],
    "meta": undefined,
    "name": "+",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "number",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Comma",
    "errors": Array [],
    "meta": undefined,
    "name": ",",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "StringLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "\\"2\\"",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "string",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [lex error when parse "hel"lo" => parseError] = "hel"lo" // => ✗ 1`] = `
Array [
  Object {
    "code": "StringLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "\\"hel\\"",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "string",
  },
  Object {
    "code": "other",
    "errors": Array [
      Object {
        "message": "TODO build not all input parsed :7",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "lo\\"",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [missing prefix equal] 1+1 // => ✗ 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Plus",
    "errors": Array [],
    "meta": undefined,
    "name": "+",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "number",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [mul > add] = 1 + 2 * 3 // => 7 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Plus",
    "errors": Array [],
    "meta": undefined,
    "name": "+",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "number",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Multi",
    "errors": Array [],
    "meta": undefined,
    "name": "*",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "number",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "3",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [multiline error 2] =; // => ✗ 1`] = `
Array [
  Object {
    "code": "Semicolon",
    "errors": Array [
      Object {
        "message": "Missing expression",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": ";",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [multiline error 3] =;123 // => ✗ 1`] = `
Array [
  Object {
    "code": "Semicolon",
    "errors": Array [],
    "meta": undefined,
    "name": ";",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "123",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [multiline error] =1; 2; // => ✗ 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Semicolon",
    "errors": Array [],
    "meta": undefined,
    "name": ";",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Semicolon",
    "errors": Array [
      Object {
        "message": "Missing expression",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": ";",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [multiline ok] =1; 2; (1+3) // => 4 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Semicolon",
    "errors": Array [],
    "meta": undefined,
    "name": ";",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Semicolon",
    "errors": Array [],
    "meta": undefined,
    "name": ";",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Plus",
    "errors": Array [],
    "meta": undefined,
    "name": "+",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "number",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "3",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [should error] =1. // => 1 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1.",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
]
`;

exports[`Simple test case [should success] =1.T() // => ✗ 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1.",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "other",
    "errors": Array [
      Object {
        "message": "TODO build not all input parsed :3",
        "type": "syntax",
      },
    ],
    "meta": undefined,
    "name": "T()",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
]
`;

exports[`Simple test case [spread operator] =AVERAGE(1) // => 1 1`] = `
Array [
  Object {
    "code": "Function",
    "errors": Array [],
    "meta": undefined,
    "name": "AVERAGE",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [spread operator] =AVERAGE(1, 2, 3) // => 2 1`] = `
Array [
  Object {
    "code": "Function",
    "errors": Array [],
    "meta": undefined,
    "name": "AVERAGE",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "1",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Comma",
    "errors": Array [],
    "meta": undefined,
    "name": ",",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Comma",
    "errors": Array [],
    "meta": undefined,
    "name": ",",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "3",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;

exports[`Simple test case [type check] = 2 * (2 = 4) // => ✗ 1`] = `
Array [
  Object {
    "code": "NumberLiteral",
    "errors": Array [],
    "meta": undefined,
    "name": "2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Multi",
    "errors": Array [],
    "meta": undefined,
    "name": "*",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "number",
  },
  Object {
    "code": "LParen",
    "errors": Array [],
    "meta": undefined,
    "name": "(",
    "spaceAfter": true,
    "spaceBefore": false,
    "type": "any",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [
      Object {
        "message": "Expected number but got boolean",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "2",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "Equal",
    "errors": Array [
      Object {
        "message": "Expected number but got boolean",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "=",
    "spaceAfter": true,
    "spaceBefore": true,
    "type": "boolean",
  },
  Object {
    "code": "NumberLiteral",
    "errors": Array [
      Object {
        "message": "Expected number but got boolean",
        "type": "type",
      },
    ],
    "meta": undefined,
    "name": "4",
    "spaceAfter": false,
    "spaceBefore": false,
    "type": "number",
  },
  Object {
    "code": "RParen",
    "errors": Array [],
    "meta": undefined,
    "name": ")",
    "spaceAfter": false,
    "spaceBefore": true,
    "type": "any",
  },
]
`;
