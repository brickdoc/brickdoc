#!/usr/bin/env node

/**
 * @file Sync tsconfig "references" with package.json
 */

const glob = require('glob')
const path = require('path')
const fs = require('fs')
const prettier = require('prettier')

const tsConfigPaths = glob.sync('!(node_modules)/**/tsconfig.json', { nodir: true }).map(p => path.resolve(p))
const packages = tsConfigPaths
  .map(p => ({ packagePath: path.resolve(p, '../package.json'), tsConfigPath: p }))
  .filter(({ packagePath }) => fs.existsSync(packagePath))
  .map(p => ({ ...p, packageJson: require(p.packagePath), tsConfigJson: require(p.tsConfigPath) }))

const packageLUT = Object.fromEntries(packages.map(p => [p.packageJson.name, p]))

packages.forEach(({ packageJson, tsConfigJson, tsConfigPath }) => {
  // Sync package dependencies to tsconfig.json project references
  const packageDependencies = new Set([
    ...Object.keys(packageJson.dependencies || {}),
    ...Object.keys(packageJson.devDependencies || {})
  ])
  const tsReferences = [...packageDependencies]
    .filter(p => p in packageLUT)
    .map(p => ({ path: path.relative(path.dirname(tsConfigPath), path.dirname(packageLUT[p].tsConfigPath)) }))
  fs.writeFileSync(
    tsConfigPath,
    prettier.format(JSON.stringify({ ...tsConfigJson, references: tsReferences }), { parser: 'json' })
  )
})

const rootTsConfigPath = path.resolve('tsconfig.json')
const rootTsConfigJson = require(rootTsConfigPath)
fs.writeFileSync(
  'tsconfig.json',
  prettier.format(
    JSON.stringify({
      ...rootTsConfigJson,
      references: tsConfigPaths.map(p => ({ path: path.relative(path.dirname(rootTsConfigPath), path.dirname(p)) }))
    }),
    { parser: 'json' }
  )
)
