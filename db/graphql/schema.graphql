schema {
  query: RootQuery
  mutation: RootMutation
  subscription: RootSubscription
}

"""
Available authentication authentication.
"""
enum AuthMethod {
  """
  Email and Password Authentication
  """
  email_password

  """
  Github Federated Authentication
  """
  github
}

type AuthorizationResult {
  """
  Human-readable error message
  """
  message: String

  """
  Reasons of check failure
  """
  reasons: FailureReasons

  """
  Result of applying a policy rule
  """
  value: Boolean!
}

"""
AutoIncrement Primary Key
"""
scalar AutoIncrementID

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type BlockBaseObjectPermissions {
  canShow: AuthorizationResult!
}

"""
Autogenerated input type of BlockCreateSnapshot
"""
input BlockCreateSnapshotInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block unique id
  """
  id: UUID!
}

"""
Autogenerated return type of BlockCreateSnapshot
"""
type BlockCreateSnapshotPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type BlockData {
  """
  content
  """
  content: [JSON!]!

  """
  text
  """
  text: String!
}

"""
InputObject type of Class
"""
input BlockDataInput {
  """
  content
  """
  content: [JSON!]!

  """
  text
  """
  text: String!
}

"""
Autogenerated input type of BlockDelete
"""
input BlockDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block unique id
  """
  id: UUID!
}

"""
Autogenerated return type of BlockDelete
"""
type BlockDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type BlockHistory {
  """
  History version
  """
  historyVersion: Int!

  """
  object unique id
  """
  id: AutoIncrementID!
}

"""
InputObject type of Class
"""
input BlockInput {
  """
  data
  """
  data: BlockDataInput

  """
  block unique id
  """
  id: UUID!

  """
  meta
  """
  meta: JSON

  """
  parent uuid
  """
  parentId: UUID

  """
  block sort
  """
  sort: BigInt

  """
  block type
  """
  type: String!
}

"""
Autogenerated input type of BlockMove
"""
input BlockMoveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block unique id
  """
  id: UUID!

  """
  block sort
  """
  sort: BigInt!

  """
  target parent id
  """
  targetParentId: UUID
}

"""
Autogenerated return type of BlockMove
"""
type BlockMovePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type BlockSnapshot {
  """
  object unique id
  """
  id: AutoIncrementID!

  """
  Snapshot name
  """
  name: String!

  """
  Snapshot version
  """
  snapshotVersion: Int!
}

"""
Autogenerated input type of BlockSyncBatch
"""
input BlockSyncBatchInput {
  blocks: [BlockInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  operator id
  """
  operatorId: String!

  """
  block root id
  """
  rootId: UUID!
}

"""
Autogenerated return type of BlockSyncBatch
"""
type BlockSyncBatchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreateDirectUpload
"""
input CreateDirectUploadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  input: DirectUploadInput!
  type: Upload!
}

"""
Autogenerated return type of CreateDirectUpload
"""
type CreateDirectUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  directUpload: DirectUpload!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreateOrUpdatePod
"""
input CreateOrUpdatePodInput {
  """
  Avatar signed id
  """
  avatarSignedId: String

  """
  bio
  """
  bio: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  pod name
  """
  name: String!
  type: PodOperation!

  """
  webid
  """
  webid: String!
}

"""
Autogenerated return type of CreateOrUpdatePod
"""
type CreateOrUpdatePodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  pod: pod
}

"""
Represents direct upload credentials
"""
type DirectUpload {
  """
  Created blob record ID
  """
  blobId: ID!

  """
  HTTP request headers (JSON-encoded)
  """
  headers: JSON!

  """
  Created blob record signed ID
  """
  signedBlobId: ID!

  """
  Upload URL
  """
  url: String!
}

"""
File information required to prepare a direct upload
"""
input DirectUploadInput {
  """
  File size (bytes)
  """
  byteSize: Int!

  """
  MD5 file checksum as base64
  """
  checksum: String!

  """
  File content type
  """
  contentType: String!

  """
  Original file name
  """
  filename: String!

  """
  metadata
  """
  metadata: JSON
}

"""
Email Address
"""
scalar Email

type FailureReasons {
  """
  JSON-encoded map of reasons
  """
  details: String!

  """
  Human-readable errors
  """
  fullMessages: [String!]!
}

"""
A valid http/https url or image uri
"""
scalar HttpUrl

"""
Represents untyped JSON
"""
scalar JSON

"""
Autogenerated return type of NewPatch
"""
type NewPatchPayload {
  patches: [PatchBaseObject!]!
  seq: Int!
  state: Patchstate!
}

type PatchBaseObject {
  id: UUID!
  operatorId: String!
  patchType: Patchtype!
  path: [UUID!]!
  payload: String!
}

enum Patchstate {
  """
  ACTIVE
  """
  ACTIVE

  """
  DELETED
  """
  DELETED

  """
  SUBSCRIBED
  """
  SUBSCRIBED
}

enum Patchtype {
  """
  ADD
  """
  ADD

  """
  DELETE
  """
  DELETE

  """
  UPDATE
  """
  UPDATE
}

"""
Pod operation types
"""
enum PodOperation {
  """
  CREATE
  """
  CREATE

  """
  UPDATE
  """
  UPDATE
}

type RootMutation {
  blockCreateSnapshot(
    """
    Parameters for BlockCreateSnapshot
    """
    input: BlockCreateSnapshotInput!
  ): BlockCreateSnapshotPayload
  blockDelete(
    """
    Parameters for BlockDelete
    """
    input: BlockDeleteInput!
  ): BlockDeletePayload
  blockMove(
    """
    Parameters for BlockMove
    """
    input: BlockMoveInput!
  ): BlockMovePayload
  blockSyncBatch(
    """
    Parameters for BlockSyncBatch
    """
    input: BlockSyncBatchInput!
  ): BlockSyncBatchPayload
  createDirectUpload(
    """
    Parameters for CreateDirectUpload
    """
    input: CreateDirectUploadInput!
  ): CreateDirectUploadPayload
  createOrUpdatePod(
    """
    Parameters for CreateOrUpdatePod
    """
    input: CreateOrUpdatePodInput!
  ): CreateOrUpdatePodPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userConfirmationEmailResend(
    """
    Parameters for UserConfirmationEmailResend
    """
    input: UserConfirmationEmailResendInput!
  ): UserConfirmationEmailResendPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userCreate(
    """
    Parameters for UserCreate
    """
    input: UserCreateInput!
  ): UserCreatePayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userEmailPasswordSignIn(
    """
    Parameters for UserEmailPasswordSignIn
    """
    input: UserEmailPasswordSignInInput!
  ): UserEmailPasswordSignInPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userForgetPasswordMailSend(
    """
    Parameters for UserForgetPasswordMailSend
    """
    input: UserForgetPasswordMailSendInput!
  ): UserForgetPasswordMailSendPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userPasswordReset(
    """
    Parameters for UserPasswordReset
    """
    input: UserPasswordResetInput!
  ): UserPasswordResetPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userSignOut(
    """
    Parameters for UserSignOut
    """
    input: UserSignOutInput!
  ): UserSignOutPayload
}

type RootQuery {
  """
  return single block by id.
  """
  block(id: String!): block

  """
  return histories by block id.
  """
  blockHistories(id: String!): [BlockHistory!]

  """
  return snapshots by block id.
  """
  blockSnapshots(id: String!): [BlockSnapshot!]
  childrenBlocks(
    excludePages: Boolean

    """
    List all children from parent id
    """
    parentId: String!

    """
    Snapshot version
    """
    snapshotVersion: Int!
  ): [block!]

  """
  provides a federated identity session data
  Required `context[:entrypoints]` is `[:internal]`.
  Required `context[:entrypoints]` is `[:internal]`.
  """
  federatedIdentitySession: omniauthSession!

  """
  Return information about current Brickdoc server instance.
  """
  metadata: metadata!
  pageBlocks(
    """
    List all pages for pod webid
    """
    webid: String!
  ): [block!]

  """
  return all pods for user.
  """
  pods: [pod!]!

  """
  Check webid available.
  Required `context[:entrypoints]` is `[:internal]`.
  Required `context[:entrypoints]` is `[:internal]`.
  """
  webidAvailable(webid: String!): Boolean!
}

type RootSubscription {
  newPatch(docId: UUID!): NewPatchPayload!
}

"""
UUID V4
"""
scalar UUID

"""
Upload types
"""
enum Upload {
  """
  Account avatar
  """
  AVATAR

  """
  Page block
  """
  DOC

  """
  Third
  """
  THIRD
}

"""
Autogenerated input type of UserConfirmationEmailResend
"""
input UserConfirmationEmailResendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!
}

"""
Autogenerated return type of UserConfirmationEmailResend
"""
type UserConfirmationEmailResendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UserCreate
"""
input UserCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email

  """
  User's preferred language
  """
  locale: String!

  """
  Human-readable name of the user
  """
  name: String!

  """
  user password
  """
  password: String

  """
  User's preferred timezone
  """
  timezone: String!

  """
  Like a username, Unique within this instance of Brickdoc.
  """
  webid: String!
}

"""
Autogenerated return type of UserCreate
"""
type UserCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  isUserActive: Boolean

  """
  redirect url path when sig up successful
  """
  redirectPath: String
}

"""
Autogenerated input type of UserEmailPasswordSignIn
"""
input UserEmailPasswordSignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!

  """
  user password
  """
  password: String!

  """
  remember authentication session
  """
  remember: Boolean!
}

"""
Autogenerated return type of UserEmailPasswordSignIn
"""
type UserEmailPasswordSignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  redirect url path when sign in successful
  """
  redirectPath: String
}

"""
Autogenerated input type of UserForgetPasswordMailSend
"""
input UserForgetPasswordMailSendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!
}

"""
Autogenerated return type of UserForgetPasswordMailSend
"""
type UserForgetPasswordMailSendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UserPasswordReset
"""
input UserPasswordResetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Reset password
  """
  password: String!

  """
  Reset password token by Devise
  """
  token: String!
}

"""
Autogenerated return type of UserPasswordReset
"""
type UserPasswordResetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UserSignOut
"""
input UserSignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UserSignOut
"""
type UserSignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
A user is an individual's accounts on Brickdoc can make new content.
"""
type accounts_user {
  """
  the user's public profile bio
  """
  bio: String

  """
  User's email address
  """
  email: String

  """
  object unique id
  """
  id: AutoIncrementID!

  """
  User's preferred language
  """
  locale: String!

  """
  Human-readable name of the user
  """
  name: String!

  """
  User's preferred timezone
  """
  timezone: String!

  """
  Like a username, Unique within this instance of Brickdoc.
  """
  webid: String!
}

"""
Brickdoc Docs::Block
"""
type block {
  """
  collaborators
  """
  collaborators: [accounts_user!]
  data: BlockData!

  """
  object unique id
  """
  id: UUID!
  meta: JSON!

  """
  block next sort
  """
  nextSort: BigInt!

  """
  parent uuid
  """
  parentId: UUID

  """
  parent type
  """
  parentType: String
  permissions: BlockBaseObjectPermissions!

  """
  block sort
  """
  sort: BigInt!

  """
  block type
  """
  type: String!
}

"""
Brickdoc Global Configuration
"""
type config {
  """
  Enable email and password authentication
  """
  accountsEmailPasswordAuth: Boolean!

  """
  Enabled federated identity providers
  """
  accountsFederatedProviders: [federatedProvider!]!

  """
  Preferred Authentication authentication
  """
  accountsPreferredAuthMethod: AuthMethod!

  """
  User agreement link
  """
  userAgreementLink: HttpUrl!
}

"""
Accounts Federated Identity Provide Configuration
"""
type federatedProvider {
  """
  Provider Logo URI
  """
  logo: HttpUrl!

  """
  Provider Name
  """
  name: String!
}

"""
Represents information about the Brickdoc Server Instance.
"""
type metadata {
  """
  Current available locales.
  """
  availableLocales: [select_option!]!

  """
  Brickdoc Global Config
  """
  config: config!

  """
  object unique id
  """
  id: AutoIncrementID!
}

"""
session[:omniauth]
"""
type omniauthSession {
  hasSession: Boolean!

  """
  Human-readable name of the user
  """
  name: String

  """
  Provider Name
  """
  provider: String

  """
  Like a username, Unique within this instance of Brickdoc.
  """
  webid: String
}

"""
Brickdoc Pod.
"""
type pod {
  """
  Pod Avatar url
  """
  avatarUrl: String

  """
  public profile bio
  """
  bio: String

  """
  object unique id
  """
  id: AutoIncrementID!

  """
  Pod Name
  """
  name: String

  """
  Like a username, Unique within this instance of Brickdoc
  """
  webid: String!
}

"""
Option Object for BrickDesign Select Component.
"""
type select_option {
  """
  option label
  """
  label: String!

  """
  option value
  """
  value: String!
}
