# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/miscreant/all/miscreant.rbi
#
# miscreant-0.3.0

module Miscreant
end
class Miscreant::AEAD
  def initialize(alg, key); end
  def inspect; end
  def open(ciphertext, nonce:, ad: nil); end
  def seal(plaintext, nonce:, ad: nil); end
  def self.generate_key(size = nil); end
  def self.generate_nonce(size = nil); end
end
module Miscreant::AES
end
class Miscreant::AES::CMAC
  def digest(message); end
  def initialize(key); end
  def inspect; end
end
class Miscreant::AES::PMAC
  def digest(message); end
  def initialize(key); end
  def inspect; end
end
class Miscreant::AES::SIV
  def _s2v(associated_data, plaintext); end
  def _zero_iv_bits(iv); end
  def initialize(key, mac_class = nil); end
  def inspect; end
  def open(ciphertext, associated_data = nil); end
  def seal(plaintext, associated_data = nil); end
  def self.generate_key(size = nil); end
end
module Miscreant::Internals
end
class Miscreant::Internals::Block
  def [](n); end
  def []=(n, byte); end
  def clear; end
  def copy(other_block); end
  def data; end
  def dbl; end
  def encrypt(cipher); end
  def initialize(data = nil); end
  def inspect; end
  def xor_in_place(value); end
end
module Miscreant::Internals::Util
  def ct_equal(a, b); end
  def ct_select(subject, result_if_one, result_if_zero); end
  def ctz(value); end
  def pad(message, length); end
  def self.ct_equal(a, b); end
  def self.ct_select(subject, result_if_one, result_if_zero); end
  def self.ctz(value); end
  def self.pad(message, length); end
  def self.validate_bytestring(name, string, length: nil); end
  def validate_bytestring(name, string, length: nil); end
end
module Miscreant::Internals::AES
end
class Miscreant::Internals::AES::BlockCipher
  def encrypt(message); end
  def initialize(key); end
  def inspect; end
end
class Miscreant::Internals::AES::CTR
  def encrypt(iv, message); end
  def initialize(key); end
  def inspect; end
end
module Miscreant::STREAM
end
class Miscreant::STREAM::FinishedError < StandardError
end
class Miscreant::STREAM::Encryptor
  def initialize(alg, key, nonce); end
  def inspect; end
  def seal(plaintext, ad: nil, last_block: nil); end
end
class Miscreant::STREAM::Decryptor
  def initialize(alg, key, nonce); end
  def inspect; end
  def open(ciphertext, ad: nil, last_block: nil); end
end
class Miscreant::STREAM::NonceEncoder
  def initialize(nonce_prefix); end
  def next(last_block); end
end
class Miscreant::CryptoError < StandardError
end
class Miscreant::IntegrityError < Miscreant::CryptoError
end
class Miscreant::OverflowError < StandardError
end
