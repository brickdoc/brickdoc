schema {
  query: RootQuery
  mutation: RootMutation
}

"""
Available authentication authentication.
"""
enum AuthMethod {
  """
  Email and Password Authentication
  """
  email_password

  """
  Github Federated Authentication
  """
  github
}

"""
AutoIncrement Primary Key
"""
scalar AutoIncrementID

"""
block data
"""
scalar BlockData

"""
block meta
"""
scalar BlockMeta

"""
Autogenerated input type of BlockSync
"""
input BlockSyncInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  block data
  """
  data: BlockData

  """
  block unique id
  """
  id: UUID!

  """
  block meta
  """
  meta: BlockMeta

  """
  parent uuid
  """
  parentId: UUID

  """
  parent type
  """
  parentType: String

  """
  block sort
  """
  sort: Int

  """
  block type
  """
  type: String!
}

"""
Autogenerated return type of BlockSync
"""
type BlockSyncPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Email Address
"""
scalar Email

"""
A valid http/https url or image uri
"""
scalar HttpUrl

"""
doc blocks
"""
type MetaBlock {
  """
  collaborators
  """
  collaborators: [accounts_user!]
  data: Nil!

  """
  object unique id
  """
  id: UUID!
  meta: MetaBlockMeta!

  """
  parent uuid
  """
  parentId: UUID

  """
  parent type
  """
  parentType: String

  """
  block sort
  """
  sort: Int!

  """
  block type
  """
  type: String!
}

type MetaBlockMeta {
  """
  attrs
  """
  attrs: String

  """
  marks
  """
  marks: String
}

"""
Null value
"""
scalar Nil

"""
page blocks
"""
type PageBlock {
  """
  collaborators
  """
  collaborators: [accounts_user!]
  data: PageBlockData!

  """
  object unique id
  """
  id: UUID!
  meta: PageBlockMeta!

  """
  parent uuid
  """
  parentId: UUID

  """
  parent type
  """
  parentType: String

  """
  block sort
  """
  sort: Int!

  """
  block type
  """
  type: String!
}

type PageBlockData {
  """
  page title
  """
  title: String!
}

type PageBlockMeta {
  """
  cover image
  """
  cover: HttpUrl

  """
  page icon
  """
  icon: String
}

type RootMutation {
  blockSync(
    """
    Parameters for BlockSync
    """
    input: BlockSyncInput!
  ): BlockSyncPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userConfirmationEmailResend(
    """
    Parameters for UserConfirmationEmailResend
    """
    input: UserConfirmationEmailResendInput!
  ): UserConfirmationEmailResendPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userCreate(
    """
    Parameters for UserCreate
    """
    input: UserCreateInput!
  ): UserCreatePayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userEmailPasswordSignIn(
    """
    Parameters for UserEmailPasswordSignIn
    """
    input: UserEmailPasswordSignInInput!
  ): UserEmailPasswordSignInPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userForgetPasswordMailSend(
    """
    Parameters for UserForgetPasswordMailSend
    """
    input: UserForgetPasswordMailSendInput!
  ): UserForgetPasswordMailSendPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userPasswordReset(
    """
    Parameters for UserPasswordReset
    """
    input: UserPasswordResetInput!
  ): UserPasswordResetPayload

  """

  Required `context[:entrypoints]` is `[:internal]`.
  """
  userSignOut(
    """
    Parameters for UserSignOut
    """
    input: UserSignOutInput!
  ): UserSignOutPayload
}

type RootQuery {
  """
  return single block by id.
  """
  block(id: String!): block
  childrenBlocks(
    excludePages: Boolean

    """
    List all children from parent id
    """
    parentId: String!
  ): [block!]

  """
  provides a federated identity session data
  Required `context[:entrypoints]` is `[:internal]`.
  Required `context[:entrypoints]` is `[:internal]`.
  """
  federatedIdentitySession: omniauthSession!

  """
  Return information about current Brickdoc server instance.
  """
  metadata: metadata!
  pageBlocks(
    """
    List all pages for pod webid
    """
    webid: String!
  ): [PageBlock!]

  """
  return all pods for user.
  """
  pods: [pod!]!

  """
  Check webid available.
  Required `context[:entrypoints]` is `[:internal]`.
  Required `context[:entrypoints]` is `[:internal]`.
  """
  webidAvailable(webid: String!): Boolean!
}

"""
text blocks
"""
type TextBlock {
  """
  collaborators
  """
  collaborators: [accounts_user!]
  data: TextBlockData!

  """
  object unique id
  """
  id: UUID!
  meta: Nil!

  """
  parent uuid
  """
  parentId: UUID

  """
  parent type
  """
  parentType: String

  """
  block sort
  """
  sort: Int!

  """
  block type
  """
  type: String!
}

type TextBlockData {
  """
  Text Content
  """
  content: String!
}

"""
UUID V4
"""
scalar UUID

"""
Autogenerated input type of UserConfirmationEmailResend
"""
input UserConfirmationEmailResendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!
}

"""
Autogenerated return type of UserConfirmationEmailResend
"""
type UserConfirmationEmailResendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UserCreate
"""
input UserCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email

  """
  User's preferred language
  """
  locale: String!

  """
  Human-readable name of the user
  """
  name: String!

  """
  user password
  """
  password: String

  """
  User's preferred timezone
  """
  timezone: String!

  """
  Like a username, Unique within this instance of Brickdoc.
  """
  webid: String!
}

"""
Autogenerated return type of UserCreate
"""
type UserCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
  isUserActive: Boolean

  """
  redirect url path when sig up successful
  """
  redirectPath: String
}

"""
Autogenerated input type of UserEmailPasswordSignIn
"""
input UserEmailPasswordSignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!

  """
  user password
  """
  password: String!

  """
  remember authentication session
  """
  remember: Boolean!
}

"""
Autogenerated return type of UserEmailPasswordSignIn
"""
type UserEmailPasswordSignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  redirect url path when sign in successful
  """
  redirectPath: String
}

"""
Autogenerated input type of UserForgetPasswordMailSend
"""
input UserForgetPasswordMailSendInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email address
  """
  email: Email!
}

"""
Autogenerated return type of UserForgetPasswordMailSend
"""
type UserForgetPasswordMailSendPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UserPasswordReset
"""
input UserPasswordResetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Reset password
  """
  password: String!

  """
  Reset password token by Devise
  """
  token: String!
}

"""
Autogenerated return type of UserPasswordReset
"""
type UserPasswordResetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UserSignOut
"""
input UserSignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UserSignOut
"""
type UserSignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
A user is an individual's accounts on Brickdoc can make new content.
"""
type accounts_user {
  """
  the user's public profile bio
  """
  bio: String

  """
  User's email address
  """
  email: String

  """
  object unique id
  """
  id: AutoIncrementID!

  """
  User's preferred language
  """
  locale: String!

  """
  Human-readable name of the user
  """
  name: String!

  """
  User's preferred timezone
  """
  timezone: String!

  """
  Like a username, Unique within this instance of Brickdoc.
  """
  webid: String!
}

"""
Brickdoc Docs::Block
"""
union block = MetaBlock | PageBlock | TextBlock

"""
Brickdoc Global Configuration
"""
type config {
  """
  Enable email and password authentication
  """
  accountsEmailPasswordAuth: Boolean!

  """
  Enabled federated identity providers
  """
  accountsFederatedProviders: [federatedProvider!]!

  """
  Preferred Authentication authentication
  """
  accountsPreferredAuthMethod: AuthMethod!

  """
  User agreement link
  """
  userAgreementLink: HttpUrl!
}

"""
Accounts Federated Identity Provide Configuration
"""
type federatedProvider {
  """
  Provider Logo URI
  """
  logo: HttpUrl!

  """
  Provider Name
  """
  name: String!
}

"""
Represents information about the Brickdoc Server Instance.
"""
type metadata {
  """
  Current available locales.
  """
  availableLocales: [select_option!]!

  """
  Brickdoc Global Config
  """
  config: config!

  """
  object unique id
  """
  id: AutoIncrementID!
}

"""
session[:omniauth]
"""
type omniauthSession {
  hasSession: Boolean!

  """
  Human-readable name of the user
  """
  name: String

  """
  Provider Name
  """
  provider: String

  """
  Like a username, Unique within this instance of Brickdoc.
  """
  webid: String
}

"""
Brickdoc Pod.
"""
type pod {
  """
  Pod Avatar
  """
  avatar: String

  """
  public profile bio
  """
  bio: String

  """
  object unique id
  """
  id: AutoIncrementID!

  """
  Pod Name
  """
  name: String

  """
  Like a username, Unique within this instance of Brickdoc
  """
  webid: String!
}

"""
Option Object for BrickDesign Select Component.
"""
type select_option {
  """
  option label
  """
  label: String!

  """
  option value
  """
  value: String!
}
